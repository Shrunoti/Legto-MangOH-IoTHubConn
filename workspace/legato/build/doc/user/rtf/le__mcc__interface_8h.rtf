{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 9;}
{\s50\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext51 List Continue 0;}
{\s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext52 List Continue 1;}
{\s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext53 List Continue 2;}
{\s53\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext54 List Continue 3;}
{\s54\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext55 List Continue 4;}
{\s55\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext56 List Continue 5;}
{\s56\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext57 List Continue 6;}
{\s57\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext58 List Continue 7;}
{\s58\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 8;}
{\s59\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 9;}
{\s60\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext61 DescContinue 0;}
{\s61\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext62 DescContinue 1;}
{\s62\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext63 DescContinue 2;}
{\s63\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext64 DescContinue 3;}
{\s64\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext65 DescContinue 4;}
{\s65\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext66 DescContinue 5;}
{\s66\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext67 DescContinue 6;}
{\s67\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext68 DescContinue 7;}
{\s68\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 8;}
{\s69\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 9;}
{\s70\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext81 LatexTOC 0;}
{\s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext82 LatexTOC 1;}
{\s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext83 LatexTOC 2;}
{\s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext84 LatexTOC 3;}
{\s74\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext85 LatexTOC 4;}
{\s75\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext86 LatexTOC 5;}
{\s76\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext87 LatexTOC 6;}
{\s77\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext88 LatexTOC 7;}
{\s78\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 8;}
{\s79\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 9;}
{\s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext81 \sautoupd List Bullet 0;}
{\s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid \sbasedon0 \snext82 \sautoupd List Bullet 1;}
{\s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid \sbasedon0 \snext83 \sautoupd List Bullet 2;}
{\s83\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls4\adjustright \fs20\cgrid \sbasedon0 \snext84 \sautoupd List Bullet 3;}
{\s84\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls5\adjustright \fs20\cgrid \sbasedon0 \snext85 \sautoupd List Bullet 4;}
{\s85\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls6\adjustright \fs20\cgrid \sbasedon0 \snext86 \sautoupd List Bullet 5;}
{\s86\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls7\adjustright \fs20\cgrid \sbasedon0 \snext87 \sautoupd List Bullet 6;}
{\s87\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls8\adjustright \fs20\cgrid \sbasedon0 \snext88 \sautoupd List Bullet 7;}
{\s88\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls9\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 8;}
{\s89\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls10\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 9;}
{\s90\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext91 \sautoupd List Enum 0;}
{\s91\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext92 \sautoupd List Enum 1;}
{\s92\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext93 \sautoupd List Enum 2;}
{\s93\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext94 \sautoupd List Enum 3;}
{\s94\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext95 \sautoupd List Enum 4;}
{\s95\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s96\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s97\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext98 \sautoupd List Enum 7;}
{\s98\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 8;}
{\s99\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 9;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
le_mcc_interface.h File Reference\par \pard\plain 
{\tc\tcl2 \v le_mcc_interface.h}
{\xe \v le_mcc_interface.h}
{\bkmkstart AAAAAAACIP}
{\bkmkend AAAAAAACIP}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "legato.h"}\par
{\f2 #include "le_mdmDefs_interface.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedefs\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef void(* {\b le_mcc_DisconnectHandler_t}) (void *)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef struct le_mcc_Call * {\b le_mcc_CallRef_t}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef struct le_mcc_CallEventHandler * {\b le_mcc_CallEventHandlerRef_t}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef void(* {\b le_mcc_CallEventHandlerFunc_t}) ({\b le_mcc_CallRef_t} callRef, {\b le_mcc_Event_t} event, void *contextPtr)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b le_mcc_Event_t} \{ {\b LE_MCC_EVENT_SETUP} = 0, 
{\b LE_MCC_EVENT_INCOMING} = 1, 
{\b LE_MCC_EVENT_ORIGINATING} = 2, 
{\b LE_MCC_EVENT_ALERTING} = 3, 
{\b LE_MCC_EVENT_CONNECTED} = 4, 
{\b LE_MCC_EVENT_TERMINATED} = 5, 
{\b LE_MCC_EVENT_WAITING} = 6, 
{\b LE_MCC_EVENT_ON_HOLD} = 7, 
{\b LE_MCC_EVENT_MAX} = 8
 \}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b le_mcc_TerminationReason_t} \{ {\b LE_MCC_TERM_LOCAL_ENDED} = 0, 
{\b LE_MCC_TERM_REMOTE_ENDED} = 1, 
{\b LE_MCC_TERM_NETWORK_FAIL} = 2, 
{\b LE_MCC_TERM_UNASSIGNED_NUMBER} = 3, 
{\b LE_MCC_TERM_NO_ROUTE_TO_DESTINATION} = 4, 
{\b LE_MCC_TERM_CHANNEL_UNACCEPTABLE} = 5, 
{\b LE_MCC_TERM_OPERATOR_DETERMINED_BARRING} = 6, 
{\b LE_MCC_TERM_USER_BUSY} = 7, 
{\b LE_MCC_TERM_NO_USER_RESPONDING} = 8, 
{\b LE_MCC_TERM_USER_ALERTING_NO_ANSWER} = 9, 
{\b LE_MCC_TERM_CALL_REJECTED} = 10, 
{\b LE_MCC_TERM_NUMBER_CHANGED} = 11, 
{\b LE_MCC_TERM_PREEMPTION} = 12, 
{\b LE_MCC_TERM_DESTINATION_OUT_OF_ORDER} = 13, 
{\b LE_MCC_TERM_INVALID_NUMBER_FORMAT} = 14, 
{\b LE_MCC_TERM_FACILITY_REJECTED} = 15, 
{\b LE_MCC_TERM_RESP_TO_STATUS_ENQUIRY} = 16, 
{\b LE_MCC_TERM_NORMAL_UNSPECIFIED} = 17, 
{\b LE_MCC_TERM_NO_CIRCUIT_OR_CHANNEL_AVAILABLE} = 18, 
{\b LE_MCC_TERM_NETWORK_OUT_OF_ORDER} = 19, 
{\b LE_MCC_TERM_TEMPORARY_FAILURE} = 20, 
{\b LE_MCC_TERM_SWITCHING_EQUIPMENT_CONGESTION} = 21, 
{\b LE_MCC_TERM_ACCESS_INFORMATION_DISCARDED} = 22, 
{\b LE_MCC_TERM_REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE} = 23, 
{\b LE_MCC_TERM_RESOURCES_UNAVAILABLE_OR_UNSPECIFIED} = 24, 
{\b LE_MCC_TERM_QOS_UNAVAILABLE} = 25, 
{\b LE_MCC_TERM_REQUESTED_FACILITY_NOT_SUBSCRIBED} = 26, 
{\b LE_MCC_TERM_INCOMING_CALLS_BARRED_WITHIN_CUG} = 27, 
{\b LE_MCC_TERM_BEARER_CAPABILITY_NOT_AUTH} = 28, 
{\b LE_MCC_TERM_BEARER_CAPABILITY_UNAVAILABLE} = 29, 
{\b LE_MCC_TERM_SERVICE_OPTION_NOT_AVAILABLE} = 30, 
{\b LE_MCC_TERM_ACM_LIMIT_EXCEEDED} = 31, 
{\b LE_MCC_TERM_BEARER_SERVICE_NOT_IMPLEMENTED} = 32, 
{\b LE_MCC_TERM_REQUESTED_FACILITY_NOT_IMPLEMENTED} = 33, 
{\b LE_MCC_TERM_ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE} = 34, 
{\b LE_MCC_TERM_SERVICE_OR_OPTION_NOT_IMPLEMENTED} = 35, 
{\b LE_MCC_TERM_INVALID_TRANSACTION_IDENTIFIER} = 36, 
{\b LE_MCC_TERM_USER_NOT_MEMBER_OF_CUG} = 37, 
{\b LE_MCC_TERM_INCOMPATIBLE_DESTINATION} = 38, 
{\b LE_MCC_TERM_INVALID_TRANSIT_NW_SELECTION} = 39, 
{\b LE_MCC_TERM_SEMANTICALLY_INCORRECT_MESSAGE} = 40, 
{\b LE_MCC_TERM_INVALID_MANDATORY_INFORMATION} = 41, 
{\b LE_MCC_TERM_MESSAGE_TYPE_NON_IMPLEMENTED} = 42, 
{\b LE_MCC_TERM_MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE} = 43, 
{\b LE_MCC_TERM_INFORMATION_ELEMENT_NON_EXISTENT} = 44, 
{\b LE_MCC_TERM_CONDITONAL_IE_ERROR} = 45, 
{\b LE_MCC_TERM_MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE} = 46, 
{\b LE_MCC_TERM_RECOVERY_ON_TIMER_EXPIRY} = 47, 
{\b LE_MCC_TERM_PROTOCOL_ERROR_UNSPECIFIED} = 48, 
{\b LE_MCC_TERM_INTERWORKING_UNSPECIFIED} = 49, 
{\b LE_MCC_TERM_SERVICE_TEMPORARILY_OUT_OF_ORDER} = 50, 
{\b LE_MCC_TERM_NOT_ALLOWED} = 51, 
{\b LE_MCC_TERM_FDN_ACTIVE} = 52, 
{\b LE_MCC_TERM_NO_SERVICE} = 53, 
{\b LE_MCC_TERM_PLATFORM_SPECIFIC} = 54, 
{\b LE_MCC_TERM_UNDEFINED} = 55
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b le_mcc_ConnectService} (void)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b le_result_t} {\b le_mcc_TryConnectService} (void)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b le_mcc_SetServerDisconnectHandler} ({\b le_mcc_DisconnectHandler_t} disconnectHandler, void *contextPtr)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b le_mcc_DisconnectService} (void)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b le_mcc_CallRef_t} {\b le_mcc_Create} (const char *LE_NONNULL phoneNumPtr)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b le_result_t} {\b le_mcc_Delete} ({\b le_mcc_CallRef_t} callRef)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b le_result_t} {\b le_mcc_Start} ({\b le_mcc_CallRef_t} callRef)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b le_mcc_IsConnected} ({\b le_mcc_CallRef_t} callRef)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b le_result_t} {\b le_mcc_GetRemoteTel} ({\b le_mcc_CallRef_t} callRef, char *telPtr, size_t telPtrSize)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b le_mcc_TerminationReason_t} {\b le_mcc_GetTerminationReason} ({\b le_mcc_CallRef_t} callRef)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int32_t {\b le_mcc_GetPlatformSpecificTerminationCode} ({\b le_mcc_CallRef_t} callRef)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b le_result_t} {\b le_mcc_Answer} ({\b le_mcc_CallRef_t} callRef)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b le_result_t} {\b le_mcc_HangUp} ({\b le_mcc_CallRef_t} callRef)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b le_result_t} {\b le_mcc_HangUpAll} (void)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b le_result_t} {\b le_mcc_GetCallerIdRestrict} ({\b le_mcc_CallRef_t} callRef, {\b le_onoff_t} *clirStatusPtrPtr)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b le_result_t} {\b le_mcc_SetCallerIdRestrict} ({\b le_mcc_CallRef_t} callRef, {\b le_onoff_t} clirStatus)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b le_mcc_CallEventHandlerRef_t} {\b le_mcc_AddCallEventHandler} ({\b le_mcc_CallEventHandlerFunc_t} handlerPtr, void *contextPtr)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b le_mcc_RemoveCallEventHandler} ({\b le_mcc_CallEventHandlerRef_t} handlerRef)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b le_result_t} {\b le_mcc_SetCallWaitingService} (bool active)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b le_result_t} {\b le_mcc_GetCallWaitingService} (bool *activePtr)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b le_result_t} {\b le_mcc_ActivateCall} ({\b le_mcc_CallRef_t} callRef)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b le_result_t} {\b le_mcc_SetAmrWbCapability} (bool enable)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b le_result_t} {\b le_mcc_GetAmrWbCapability} (bool *enabledPtr)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Legato {\b Modem Call Control} include file.\par
Copyright (C) Sierra Wireless Inc. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedef Documentation\par
\pard\plain 
{\xe \v le_mcc_CallEventHandlerFunc_t\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_CallEventHandlerFunc_t}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef void(* le_mcc_CallEventHandlerFunc_t) ({\b le_mcc_CallRef_t} callRef,{\b le_mcc_Event_t} event,void *contextPtr)}}
\par
{\bkmkstart AAAAAAACIQ}
{\bkmkend AAAAAAACIQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handler for call state changes.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid The callRef has to be deleted using {\b le_mcc_Delete()} when LE_MCC_TERMINATED event is received, except if is has to be used for a future usage (with le_mcc_profile handler for instance, or dialing again the same number). \par
}}}
{\xe \v le_mcc_CallEventHandlerRef_t\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_CallEventHandlerRef_t}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef struct le_mcc_CallEventHandler* {\b le_mcc_CallEventHandlerRef_t}}}
\par
{\bkmkstart AAAAAAACIR}
{\bkmkend AAAAAAACIR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reference type used by Add/Remove functions for EVENT 'le_mcc_CallEvent' \par
}}
{\xe \v le_mcc_CallRef_t\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_CallRef_t}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef struct le_mcc_Call* {\b le_mcc_CallRef_t}}}
\par
{\bkmkstart AAAAAAACIS}
{\bkmkend AAAAAAACIS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reference type for managing active calls. \par
}}
{\xe \v le_mcc_DisconnectHandler_t\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_DisconnectHandler_t}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef void(* le_mcc_DisconnectHandler_t) (void *)}}
\par
{\bkmkstart AAAAAAACIT}
{\bkmkend AAAAAAACIT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Type for handler called when a server disconnects. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v le_mcc_Event_t\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_Event_t}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b le_mcc_Event_t}}}
\par
{\bkmkstart AAAAAAACIU}
{\bkmkend AAAAAAACIU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Enumeration of the possible events that may be reported to a call event handler. \par
}{{{\b Enumerator}}\par
\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\xe \v LE_MCC_EVENT_SETUP\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_EVENT_SETUP}
{\b {\i LE_MCC_EVENT_SETUP{\bkmkstart AAAAAAACIV}
{\bkmkend AAAAAAACIV}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Call is being set up. \par
}{\xe \v LE_MCC_EVENT_INCOMING\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_EVENT_INCOMING}
{\b {\i LE_MCC_EVENT_INCOMING{\bkmkstart AAAAAAACIW}
{\bkmkend AAAAAAACIW}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Incoming call attempt (new call). \par
}{\xe \v LE_MCC_EVENT_ORIGINATING\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_EVENT_ORIGINATING}
{\b {\i LE_MCC_EVENT_ORIGINATING{\bkmkstart AAAAAAACIX}
{\bkmkend AAAAAAACIX}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Outgoing call attempt. \par
}{\xe \v LE_MCC_EVENT_ALERTING\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_EVENT_ALERTING}
{\b {\i LE_MCC_EVENT_ALERTING{\bkmkstart AAAAAAACIY}
{\bkmkend AAAAAAACIY}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Far end is now alerting its user (outgoing call). \par
}{\xe \v LE_MCC_EVENT_CONNECTED\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_EVENT_CONNECTED}
{\b {\i LE_MCC_EVENT_CONNECTED{\bkmkstart AAAAAAACIZ}
{\bkmkend AAAAAAACIZ}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Call has been established, and is media is active. \par
}{\xe \v LE_MCC_EVENT_TERMINATED\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_EVENT_TERMINATED}
{\b {\i LE_MCC_EVENT_TERMINATED{\bkmkstart AAAAAAACJA}
{\bkmkend AAAAAAACJA}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Call has terminated. \par
}{\xe \v LE_MCC_EVENT_WAITING\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_EVENT_WAITING}
{\b {\i LE_MCC_EVENT_WAITING{\bkmkstart AAAAAAACJB}
{\bkmkend AAAAAAACJB}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Call is waiting. \par
}{\xe \v LE_MCC_EVENT_ON_HOLD\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_EVENT_ON_HOLD}
{\b {\i LE_MCC_EVENT_ON_HOLD{\bkmkstart AAAAAAACJC}
{\bkmkend AAAAAAACJC}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remote party has put the call on hold. \par
}{\xe \v LE_MCC_EVENT_MAX\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_EVENT_MAX}
{\b {\i LE_MCC_EVENT_MAX{\bkmkstart AAAAAAACJD}
{\bkmkend AAAAAAACJD}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Enumerate max value. \par
}\par
}}
{\xe \v le_mcc_TerminationReason_t\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_TerminationReason_t}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b le_mcc_TerminationReason_t}}}
\par
{\bkmkstart AAAAAAACJE}
{\bkmkend AAAAAAACJE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Enumeration of the possible reasons for call termination. \par
}{{{\b Enumerator}}\par
\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\xe \v LE_MCC_TERM_LOCAL_ENDED\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_LOCAL_ENDED}
{\b {\i LE_MCC_TERM_LOCAL_ENDED{\bkmkstart AAAAAAACJF}
{\bkmkend AAAAAAACJF}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Local party ended the call (Normal Call Clearing). \par
}{\xe \v LE_MCC_TERM_REMOTE_ENDED\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_REMOTE_ENDED}
{\b {\i LE_MCC_TERM_REMOTE_ENDED{\bkmkstart AAAAAAACJG}
{\bkmkend AAAAAAACJG}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remote party ended the call (Normal Call Clearing). \par
}{\xe \v LE_MCC_TERM_NETWORK_FAIL\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_NETWORK_FAIL}
{\b {\i LE_MCC_TERM_NETWORK_FAIL{\bkmkstart AAAAAAACJH}
{\bkmkend AAAAAAACJH}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Network could not complete the call. \par
}{\xe \v LE_MCC_TERM_UNASSIGNED_NUMBER\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_UNASSIGNED_NUMBER}
{\b {\i LE_MCC_TERM_UNASSIGNED_NUMBER{\bkmkstart AAAAAAACJI}
{\bkmkend AAAAAAACJI}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_NO_ROUTE_TO_DESTINATION\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_NO_ROUTE_TO_DESTINATION}
{\b {\i LE_MCC_TERM_NO_ROUTE_TO_DESTINATION{\bkmkstart AAAAAAACJJ}
{\bkmkend AAAAAAACJJ}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_CHANNEL_UNACCEPTABLE\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_CHANNEL_UNACCEPTABLE}
{\b {\i LE_MCC_TERM_CHANNEL_UNACCEPTABLE{\bkmkstart AAAAAAACJK}
{\bkmkend AAAAAAACJK}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_OPERATOR_DETERMINED_BARRING\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_OPERATOR_DETERMINED_BARRING}
{\b {\i LE_MCC_TERM_OPERATOR_DETERMINED_BARRING{\bkmkstart AAAAAAACJL}
{\bkmkend AAAAAAACJL}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_USER_BUSY\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_USER_BUSY}
{\b {\i LE_MCC_TERM_USER_BUSY{\bkmkstart AAAAAAACJM}
{\bkmkend AAAAAAACJM}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_NO_USER_RESPONDING\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_NO_USER_RESPONDING}
{\b {\i LE_MCC_TERM_NO_USER_RESPONDING{\bkmkstart AAAAAAACJN}
{\bkmkend AAAAAAACJN}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_USER_ALERTING_NO_ANSWER\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_USER_ALERTING_NO_ANSWER}
{\b {\i LE_MCC_TERM_USER_ALERTING_NO_ANSWER{\bkmkstart AAAAAAACJO}
{\bkmkend AAAAAAACJO}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_CALL_REJECTED\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_CALL_REJECTED}
{\b {\i LE_MCC_TERM_CALL_REJECTED{\bkmkstart AAAAAAACJP}
{\bkmkend AAAAAAACJP}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_NUMBER_CHANGED\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_NUMBER_CHANGED}
{\b {\i LE_MCC_TERM_NUMBER_CHANGED{\bkmkstart AAAAAAACJQ}
{\bkmkend AAAAAAACJQ}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_PREEMPTION\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_PREEMPTION}
{\b {\i LE_MCC_TERM_PREEMPTION{\bkmkstart AAAAAAACJR}
{\bkmkend AAAAAAACJR}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_DESTINATION_OUT_OF_ORDER\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_DESTINATION_OUT_OF_ORDER}
{\b {\i LE_MCC_TERM_DESTINATION_OUT_OF_ORDER{\bkmkstart AAAAAAACJS}
{\bkmkend AAAAAAACJS}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_INVALID_NUMBER_FORMAT\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_INVALID_NUMBER_FORMAT}
{\b {\i LE_MCC_TERM_INVALID_NUMBER_FORMAT{\bkmkstart AAAAAAACJT}
{\bkmkend AAAAAAACJT}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_FACILITY_REJECTED\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_FACILITY_REJECTED}
{\b {\i LE_MCC_TERM_FACILITY_REJECTED{\bkmkstart AAAAAAACJU}
{\bkmkend AAAAAAACJU}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_RESP_TO_STATUS_ENQUIRY\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_RESP_TO_STATUS_ENQUIRY}
{\b {\i LE_MCC_TERM_RESP_TO_STATUS_ENQUIRY{\bkmkstart AAAAAAACJV}
{\bkmkend AAAAAAACJV}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_NORMAL_UNSPECIFIED\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_NORMAL_UNSPECIFIED}
{\b {\i LE_MCC_TERM_NORMAL_UNSPECIFIED{\bkmkstart AAAAAAACJW}
{\bkmkend AAAAAAACJW}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_NO_CIRCUIT_OR_CHANNEL_AVAILABLE\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_NO_CIRCUIT_OR_CHANNEL_AVAILABLE}
{\b {\i LE_MCC_TERM_NO_CIRCUIT_OR_CHANNEL_AVAILABLE{\bkmkstart AAAAAAACJX}
{\bkmkend AAAAAAACJX}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_NETWORK_OUT_OF_ORDER\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_NETWORK_OUT_OF_ORDER}
{\b {\i LE_MCC_TERM_NETWORK_OUT_OF_ORDER{\bkmkstart AAAAAAACJY}
{\bkmkend AAAAAAACJY}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_TEMPORARY_FAILURE\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_TEMPORARY_FAILURE}
{\b {\i LE_MCC_TERM_TEMPORARY_FAILURE{\bkmkstart AAAAAAACJZ}
{\bkmkend AAAAAAACJZ}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_SWITCHING_EQUIPMENT_CONGESTION\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_SWITCHING_EQUIPMENT_CONGESTION}
{\b {\i LE_MCC_TERM_SWITCHING_EQUIPMENT_CONGESTION{\bkmkstart AAAAAAACKA}
{\bkmkend AAAAAAACKA}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_ACCESS_INFORMATION_DISCARDED\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_ACCESS_INFORMATION_DISCARDED}
{\b {\i LE_MCC_TERM_ACCESS_INFORMATION_DISCARDED{\bkmkstart AAAAAAACKB}
{\bkmkend AAAAAAACKB}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE}
{\b {\i LE_MCC_TERM_REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE{\bkmkstart AAAAAAACKC}
{\bkmkend AAAAAAACKC}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_RESOURCES_UNAVAILABLE_OR_UNSPECIFIED\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_RESOURCES_UNAVAILABLE_OR_UNSPECIFIED}
{\b {\i LE_MCC_TERM_RESOURCES_UNAVAILABLE_OR_UNSPECIFIED{\bkmkstart AAAAAAACKD}
{\bkmkend AAAAAAACKD}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_QOS_UNAVAILABLE\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_QOS_UNAVAILABLE}
{\b {\i LE_MCC_TERM_QOS_UNAVAILABLE{\bkmkstart AAAAAAACKE}
{\bkmkend AAAAAAACKE}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_REQUESTED_FACILITY_NOT_SUBSCRIBED\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_REQUESTED_FACILITY_NOT_SUBSCRIBED}
{\b {\i LE_MCC_TERM_REQUESTED_FACILITY_NOT_SUBSCRIBED{\bkmkstart AAAAAAACKF}
{\bkmkend AAAAAAACKF}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_INCOMING_CALLS_BARRED_WITHIN_CUG\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_INCOMING_CALLS_BARRED_WITHIN_CUG}
{\b {\i LE_MCC_TERM_INCOMING_CALLS_BARRED_WITHIN_CUG{\bkmkstart AAAAAAACKG}
{\bkmkend AAAAAAACKG}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_BEARER_CAPABILITY_NOT_AUTH\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_BEARER_CAPABILITY_NOT_AUTH}
{\b {\i LE_MCC_TERM_BEARER_CAPABILITY_NOT_AUTH{\bkmkstart AAAAAAACKH}
{\bkmkend AAAAAAACKH}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_BEARER_CAPABILITY_UNAVAILABLE\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_BEARER_CAPABILITY_UNAVAILABLE}
{\b {\i LE_MCC_TERM_BEARER_CAPABILITY_UNAVAILABLE{\bkmkstart AAAAAAACKI}
{\bkmkend AAAAAAACKI}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_SERVICE_OPTION_NOT_AVAILABLE\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_SERVICE_OPTION_NOT_AVAILABLE}
{\b {\i LE_MCC_TERM_SERVICE_OPTION_NOT_AVAILABLE{\bkmkstart AAAAAAACKJ}
{\bkmkend AAAAAAACKJ}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_ACM_LIMIT_EXCEEDED\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_ACM_LIMIT_EXCEEDED}
{\b {\i LE_MCC_TERM_ACM_LIMIT_EXCEEDED{\bkmkstart AAAAAAACKK}
{\bkmkend AAAAAAACKK}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_BEARER_SERVICE_NOT_IMPLEMENTED\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_BEARER_SERVICE_NOT_IMPLEMENTED}
{\b {\i LE_MCC_TERM_BEARER_SERVICE_NOT_IMPLEMENTED{\bkmkstart AAAAAAACKL}
{\bkmkend AAAAAAACKL}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_REQUESTED_FACILITY_NOT_IMPLEMENTED\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_REQUESTED_FACILITY_NOT_IMPLEMENTED}
{\b {\i LE_MCC_TERM_REQUESTED_FACILITY_NOT_IMPLEMENTED{\bkmkstart AAAAAAACKM}
{\bkmkend AAAAAAACKM}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE}
{\b {\i LE_MCC_TERM_ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE{\bkmkstart AAAAAAACKN}
{\bkmkend AAAAAAACKN}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_SERVICE_OR_OPTION_NOT_IMPLEMENTED\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_SERVICE_OR_OPTION_NOT_IMPLEMENTED}
{\b {\i LE_MCC_TERM_SERVICE_OR_OPTION_NOT_IMPLEMENTED{\bkmkstart AAAAAAACKO}
{\bkmkend AAAAAAACKO}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_INVALID_TRANSACTION_IDENTIFIER\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_INVALID_TRANSACTION_IDENTIFIER}
{\b {\i LE_MCC_TERM_INVALID_TRANSACTION_IDENTIFIER{\bkmkstart AAAAAAACKP}
{\bkmkend AAAAAAACKP}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_USER_NOT_MEMBER_OF_CUG\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_USER_NOT_MEMBER_OF_CUG}
{\b {\i LE_MCC_TERM_USER_NOT_MEMBER_OF_CUG{\bkmkstart AAAAAAACKQ}
{\bkmkend AAAAAAACKQ}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_INCOMPATIBLE_DESTINATION\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_INCOMPATIBLE_DESTINATION}
{\b {\i LE_MCC_TERM_INCOMPATIBLE_DESTINATION{\bkmkstart AAAAAAACKR}
{\bkmkend AAAAAAACKR}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_INVALID_TRANSIT_NW_SELECTION\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_INVALID_TRANSIT_NW_SELECTION}
{\b {\i LE_MCC_TERM_INVALID_TRANSIT_NW_SELECTION{\bkmkstart AAAAAAACKS}
{\bkmkend AAAAAAACKS}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_SEMANTICALLY_INCORRECT_MESSAGE\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_SEMANTICALLY_INCORRECT_MESSAGE}
{\b {\i LE_MCC_TERM_SEMANTICALLY_INCORRECT_MESSAGE{\bkmkstart AAAAAAACKT}
{\bkmkend AAAAAAACKT}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_INVALID_MANDATORY_INFORMATION\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_INVALID_MANDATORY_INFORMATION}
{\b {\i LE_MCC_TERM_INVALID_MANDATORY_INFORMATION{\bkmkstart AAAAAAACKU}
{\bkmkend AAAAAAACKU}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_MESSAGE_TYPE_NON_IMPLEMENTED\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_MESSAGE_TYPE_NON_IMPLEMENTED}
{\b {\i LE_MCC_TERM_MESSAGE_TYPE_NON_IMPLEMENTED{\bkmkstart AAAAAAACKV}
{\bkmkend AAAAAAACKV}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE}
{\b {\i LE_MCC_TERM_MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE{\bkmkstart AAAAAAACKW}
{\bkmkend AAAAAAACKW}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_INFORMATION_ELEMENT_NON_EXISTENT\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_INFORMATION_ELEMENT_NON_EXISTENT}
{\b {\i LE_MCC_TERM_INFORMATION_ELEMENT_NON_EXISTENT{\bkmkstart AAAAAAACKX}
{\bkmkend AAAAAAACKX}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_CONDITONAL_IE_ERROR\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_CONDITONAL_IE_ERROR}
{\b {\i LE_MCC_TERM_CONDITONAL_IE_ERROR{\bkmkstart AAAAAAACKY}
{\bkmkend AAAAAAACKY}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE}
{\b {\i LE_MCC_TERM_MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE{\bkmkstart AAAAAAACKZ}
{\bkmkend AAAAAAACKZ}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_RECOVERY_ON_TIMER_EXPIRY\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_RECOVERY_ON_TIMER_EXPIRY}
{\b {\i LE_MCC_TERM_RECOVERY_ON_TIMER_EXPIRY{\bkmkstart AAAAAAACLA}
{\bkmkend AAAAAAACLA}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_PROTOCOL_ERROR_UNSPECIFIED\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_PROTOCOL_ERROR_UNSPECIFIED}
{\b {\i LE_MCC_TERM_PROTOCOL_ERROR_UNSPECIFIED{\bkmkstart AAAAAAACLB}
{\bkmkend AAAAAAACLB}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_INTERWORKING_UNSPECIFIED\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_INTERWORKING_UNSPECIFIED}
{\b {\i LE_MCC_TERM_INTERWORKING_UNSPECIFIED{\bkmkstart AAAAAAACLC}
{\bkmkend AAAAAAACLC}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 Annex H \par
}{\xe \v LE_MCC_TERM_SERVICE_TEMPORARILY_OUT_OF_ORDER\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_SERVICE_TEMPORARILY_OUT_OF_ORDER}
{\b {\i LE_MCC_TERM_SERVICE_TEMPORARILY_OUT_OF_ORDER{\bkmkstart AAAAAAACLD}
{\bkmkend AAAAAAACLD}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
cf. 3GPP 24.008 10.5.3.6 \par
}{\xe \v LE_MCC_TERM_NOT_ALLOWED\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_NOT_ALLOWED}
{\b {\i LE_MCC_TERM_NOT_ALLOWED{\bkmkstart AAAAAAACLE}
{\bkmkend AAAAAAACLE}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Call operations not allowed (i.e. Radio off). \par
}{\xe \v LE_MCC_TERM_FDN_ACTIVE\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_FDN_ACTIVE}
{\b {\i LE_MCC_TERM_FDN_ACTIVE{\bkmkstart AAAAAAACLF}
{\bkmkend AAAAAAACLF}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
FDN is active and number is not in the FDN. \par
}{\xe \v LE_MCC_TERM_NO_SERVICE\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_NO_SERVICE}
{\b {\i LE_MCC_TERM_NO_SERVICE{\bkmkstart AAAAAAACLG}
{\bkmkend AAAAAAACLG}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
No service or bad signal quality. \par
}{\xe \v LE_MCC_TERM_PLATFORM_SPECIFIC\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_PLATFORM_SPECIFIC}
{\b {\i LE_MCC_TERM_PLATFORM_SPECIFIC{\bkmkstart AAAAAAACLH}
{\bkmkend AAAAAAACLH}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Platform specific code. \par
}{\xe \v LE_MCC_TERM_UNDEFINED\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:LE_MCC_TERM_UNDEFINED}
{\b {\i LE_MCC_TERM_UNDEFINED{\bkmkstart AAAAAAACLI}
{\bkmkend AAAAAAACLI}
}}  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Undefined reason. \par
}\par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v le_mcc_ActivateCall\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_ActivateCall}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b le_result_t} le_mcc_ActivateCall ({\b le_mcc_CallRef_t}  {\i callRef})}}
\par
{\bkmkstart AAAAAAACLJ}
{\bkmkend AAAAAAACLJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function activates the specified call. Other calls are placed on hold.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {
\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_OK The function succeed.\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_FAULT The function failed. \par}
}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i callRef} \cell }{The call reference. \cell }
{\row }
}
}}
{\xe \v le_mcc_AddCallEventHandler\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_AddCallEventHandler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b le_mcc_CallEventHandlerRef_t} le_mcc_AddCallEventHandler ({\b le_mcc_CallEventHandlerFunc_t}  {\i handlerPtr}, void *  {\i contextPtr})}}
\par
{\bkmkstart AAAAAAACLK}
{\bkmkend AAAAAAACLK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add handler function for EVENT 'le_mcc_CallEvent'\par
Register an event handler that will be notified when an call's event occurs.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid A reference to the new event handler object.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid It is a fatal error if this function does succeed. If this function fails, it will not return. \par
}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i handlerPtr} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i contextPtr} \cell }{\cell }
{\row }
}
}}
{\xe \v le_mcc_Answer\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_Answer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b le_result_t} le_mcc_Answer ({\b le_mcc_CallRef_t}  {\i callRef})}}
\par
{\bkmkstart AAAAAAACLL}
{\bkmkend AAAAAAACLL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Answers incoming call.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid LE_TIMEOUT No response was received from the Modem. \par
LE_OK The function succeeded.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid If the caller is passing a bad pointer into this function, it is a fatal error, the function will not return. \par
A call waiting call must be answered using SetCallActive() API. This API doesn't manage call waiting supplementary service. \par
}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i callRef} \cell }{The call reference. \cell }
{\row }
}
}}
{\xe \v le_mcc_ConnectService\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_ConnectService}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void le_mcc_ConnectService (void )}}
\par
{\bkmkstart AAAAAAACLM}
{\bkmkend AAAAAAACLM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Connect the current client thread to the service providing this API. Block until the service is available.\par
For each thread that wants to use this API, either ConnectService or TryConnectService must be called before any other functions in this API. Normally, ConnectService is automatically called for the main thread, but not for any other thread. For details, see {\b Client-specific Functions}.\par
This function is created automatically. \par
}}
{\xe \v le_mcc_Create\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_Create}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b le_mcc_CallRef_t} le_mcc_Create (const char *LE_NONNULL  {\i phoneNumPtr})}}
\par
{\bkmkstart AAAAAAACLN}
{\bkmkend AAAAAAACLN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create a call reference.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Return NULL if call reference can't be created\par
If destination number is too long (max LE_MDMDEFS_PHONE_NUM_MAX_LEN digits), it is a fatal error, the function will not return. \par
}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i phoneNumPtr} \cell }{The target number we are going to call. \cell }
{\row }
}
}}
{\xe \v le_mcc_Delete\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_Delete}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b le_result_t} le_mcc_Delete ({\b le_mcc_CallRef_t}  {\i callRef})}}
\par
{\bkmkstart AAAAAAACLO}
{\bkmkend AAAAAAACLO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Call to free up a call reference.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {
\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_OK The function succeed.\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_NOT_FOUND The call reference was not found.\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_FAULT The function failed. \par}
}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i callRef} \cell }{The call object to free. \cell }
{\row }
}
}}
{\xe \v le_mcc_DisconnectService\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_DisconnectService}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void le_mcc_DisconnectService (void )}}
\par
{\bkmkstart AAAAAAACLP}
{\bkmkend AAAAAAACLP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Disconnect the current client thread from the service providing this API.\par
Normally, this function doesn't need to be called. After this function is called, there's no longer a connection to the service, and the functions in this API can't be used. For details, see {\b Client-specific Functions}.\par
This function is created automatically. \par
}}
{\xe \v le_mcc_GetAmrWbCapability\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_GetAmrWbCapability}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b le_result_t} le_mcc_GetAmrWbCapability (bool *  {\i enabledPtr})}}
\par
{\bkmkstart AAAAAAACLQ}
{\bkmkend AAAAAAACLQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function gets the audio AMR Wideband capability.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {
\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_OK The function succeeded.\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_UNAVAILABLE The service is not available.\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_FAULT On any other failure. \par}
}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{out\cell }{{\i enabledPtr} \cell }{True if AMR Wideband capability is enabled, false otherwise. \cell }
{\row }
}
}}
{\xe \v le_mcc_GetCallerIdRestrict\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_GetCallerIdRestrict}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b le_result_t} le_mcc_GetCallerIdRestrict ({\b le_mcc_CallRef_t}  {\i callRef}, {\b le_onoff_t} *  {\i clirStatusPtrPtr})}}
\par
{\bkmkstart AAAAAAACLR}
{\bkmkend AAAAAAACLR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function return the Calling Line Identification Restriction (CLIR) status on the specific call.\par
The output parameter is updated with the CLIR status.{
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
LE_ON Disable presentation of own phone number to remote.\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
LE_OFF Enable presentation of own phone number to remote.\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {
\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_OK The function succeed.\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_NOT_FOUND The call reference was not found.\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_UNAVAILABLE CLIR status was not set. \par}
}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i callRef} \cell }{The call reference. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{out\cell }{{\i clirStatusPtrPtr} \cell }{the Calling Line Identification Restriction (CLIR) status \cell }
{\row }
}
}}
{\xe \v le_mcc_GetCallWaitingService\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_GetCallWaitingService}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b le_result_t} le_mcc_GetCallWaitingService (bool *  {\i activePtr})}}
\par
{\bkmkstart AAAAAAACLS}
{\bkmkend AAAAAAACLS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function gets the call waiting service status.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {
\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_OK The function succeed.\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_FAULT The function failed. \par}
}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{out\cell }{{\i activePtr} \cell }{The call waiting activation. \cell }
{\row }
}
}}
{\xe \v le_mcc_GetPlatformSpecificTerminationCode\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_GetPlatformSpecificTerminationCode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int32_t le_mcc_GetPlatformSpecificTerminationCode ({\b le_mcc_CallRef_t}  {\i callRef})}}
\par
{\bkmkstart AAAAAAACLT}
{\bkmkend AAAAAAACLT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Called to get the platform specific termination code.\par
Refer to {\b Platform specific error codes} for platform specific termination code description.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid The platform specific termination code.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid If the caller is passing a bad pointer into this function, it is a fatal error, the function will not return. \par
}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i callRef} \cell }{The call reference to read from. \cell }
{\row }
}
}}
{\xe \v le_mcc_GetRemoteTel\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_GetRemoteTel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b le_result_t} le_mcc_GetRemoteTel ({\b le_mcc_CallRef_t}  {\i callRef}, char *  {\i telPtr}, size_t  {\i telPtrSize})}}
\par
{\bkmkstart AAAAAAACLU}
{\bkmkend AAAAAAACLU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Read out the remote party telephone number associated with the call.\par
Output parameter is updated with the telephone number. If the Telephone number string length exceeds the value of 'len' parameter, the LE_OVERFLOW error code is returned and 'telPtr' is used until 'len-1' characters and a null-character is implicitly appended at the end of 'telPtr'. Note that 'len' sould be at least equal to LE_MDMDEFS_PHONE_NUM_MAX_BYTES, otherwise LE_OVERFLOW error code will be common.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid LE_OVERFLOW The Telephone number length exceed the maximum length. \par
LE_OK The function succeeded.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid If the caller is passing a bad pointer into this function, it is a fatal error, the function will not return. \par
}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i callRef} \cell }{The call reference to read from. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{out\cell }{{\i telPtr} \cell }{The telephone number string. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i telPtrSize} \cell }{\cell }
{\row }
}
}}
{\xe \v le_mcc_GetTerminationReason\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_GetTerminationReason}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b le_mcc_TerminationReason_t} le_mcc_GetTerminationReason ({\b le_mcc_CallRef_t}  {\i callRef})}}
\par
{\bkmkstart AAAAAAACLV}
{\bkmkend AAAAAAACLV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Called to get the termination reason.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid The termination reason.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid If the caller is passing a bad pointer into this function, it is a fatal error, the function will not return. \par
}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i callRef} \cell }{The call reference to read from. \cell }
{\row }
}
}}
{\xe \v le_mcc_HangUp\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_HangUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b le_result_t} le_mcc_HangUp ({\b le_mcc_CallRef_t}  {\i callRef})}}
\par
{\bkmkstart AAAAAAACLW}
{\bkmkend AAAAAAACLW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Disconnect, or hang up, the specifed call. Any active call handlers will be notified.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid LE_FAULT The function failed. \par
LE_TIMEOUT No response was received from the Modem. \par
LE_OK Function succeeded.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid If the caller is passing a bad pointer into this function, it is a fatal error, the function will not return. \par
this API can also be used to disconnect a waiting or on hold call. \par
}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i callRef} \cell }{The call to end. \cell }
{\row }
}
}}
{\xe \v le_mcc_HangUpAll\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_HangUpAll}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b le_result_t} le_mcc_HangUpAll (void )}}
\par
{\bkmkstart AAAAAAACLX}
{\bkmkend AAAAAAACLX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function will disconnect, or hang up all the ongoing calls. Any active call handlers will be notified.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid LE_FAULT The function failed. \par
LE_TIMEOUT No response was received from the Modem. \par
LE_OK The function succeeded. \par
}}}
{\xe \v le_mcc_IsConnected\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_IsConnected}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool le_mcc_IsConnected ({\b le_mcc_CallRef_t}  {\i callRef})}}
\par
{\bkmkstart AAAAAAACLY}
{\bkmkend AAAAAAACLY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allow the caller to know if the given call is actually connected or not.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid TRUE if the call is connected, FALSE otherwise.\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid If the caller is passing a bad pointer into this function, it is a fatal error, the function will not return. \par
}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i callRef} \cell }{The call reference to read. \cell }
{\row }
}
}}
{\xe \v le_mcc_RemoveCallEventHandler\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_RemoveCallEventHandler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void le_mcc_RemoveCallEventHandler ({\b le_mcc_CallEventHandlerRef_t}  {\i handlerRef})}}
\par
{\bkmkstart AAAAAAACLZ}
{\bkmkend AAAAAAACLZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove handler function for EVENT 'le_mcc_CallEvent' \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i handlerRef} \cell }{\cell }
{\row }
}
}}
{\xe \v le_mcc_SetAmrWbCapability\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_SetAmrWbCapability}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b le_result_t} le_mcc_SetAmrWbCapability (bool  {\i enable})}}
\par
{\bkmkstart AAAAAAACMA}
{\bkmkend AAAAAAACMA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function enables/disables the audio AMR Wideband capability.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {
\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_OK The function succeeded.\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_UNAVAILABLE The service is not available.\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_FAULT On any other failure.\par}
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid The capability setting takes effect immediately and is not persistent to reset. \par
}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i enable} \cell }{True enables the AMR Wideband capability, false disables it. \cell }
{\row }
}
}}
{\xe \v le_mcc_SetCallerIdRestrict\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_SetCallerIdRestrict}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b le_result_t} le_mcc_SetCallerIdRestrict ({\b le_mcc_CallRef_t}  {\i callRef}, {\b le_onoff_t}  {\i clirStatus})}}
\par
{\bkmkstart AAAAAAACMB}
{\bkmkend AAAAAAACMB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function set the Calling Line Identification Restriction (CLIR) status on the specific call. By default the CLIR status is not set.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {
\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_OK The function succeed.\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_NOT_FOUND The call reference was not found. \par}
}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i callRef} \cell }{The call reference. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i clirStatus} \cell }{The Calling Line Identification Restriction (CLIR) status. \cell }
{\row }
}
}}
{\xe \v le_mcc_SetCallWaitingService\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_SetCallWaitingService}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b le_result_t} le_mcc_SetCallWaitingService (bool  {\i active})}}
\par
{\bkmkstart AAAAAAACMC}
{\bkmkend AAAAAAACMC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function activates or deactivates the call waiting service.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {
\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_OK The function succeed.\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_FAULT The function failed. \par}
}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i active} \cell }{The call waiting activation. \cell }
{\row }
}
}}
{\xe \v le_mcc_SetServerDisconnectHandler\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_SetServerDisconnectHandler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void le_mcc_SetServerDisconnectHandler ({\b le_mcc_DisconnectHandler_t}  {\i disconnectHandler}, void *  {\i contextPtr})}}
\par
{\bkmkstart AAAAAAACMD}
{\bkmkend AAAAAAACMD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set handler called when server disconnection is detected.\par
When a server connection is lost, call this handler then exit with LE_FATAL. If a program wants to continue without exiting, it should call longjmp() from inside the handler. \par
}}
{\xe \v le_mcc_Start\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_Start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b le_result_t} le_mcc_Start ({\b le_mcc_CallRef_t}  {\i callRef})}}
\par
{\bkmkstart AAAAAAACME}
{\bkmkend AAAAAAACME}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Start a call attempt.\par
Asynchronous due to possible time to connect.\par
As the call attempt proceeds, the profile's registered call event handler receives events.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {
\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_OK Function succeed.\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_BUSY The call is already in progress\par}
}{
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note:\par}\pard\plain \s63\li1080\widctlpar\ql\adjustright \fs20\cgrid As this is an asynchronous call, a successful only confirms a call has been started. Don't assume a call has been successful yet.\par
If the caller is passing a bad pointer into this function, it is a fatal error, the function will not return. \par
}\par}
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i callRef} \cell }{Reference to the call object. \cell }
{\row }
}
}}
{\xe \v le_mcc_TryConnectService\:le_mcc_interface.h}
{\xe \v le_mcc_interface.h\:le_mcc_TryConnectService}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b le_result_t} le_mcc_TryConnectService (void )}}
\par
{\bkmkstart AAAAAAACMF}
{\bkmkend AAAAAAACMF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Try to connect the current client thread to the service providing this API. Return with an error if the service is not available.\par
For each thread that wants to use this API, either ConnectService or TryConnectService must be called before any other functions in this API. Normally, ConnectService is automatically called for the main thread, but not for any other thread. For details, see {\b Client-specific Functions}.\par
This function is created automatically.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {
\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_OK if the client connected successfully to the service.\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_UNAVAILABLE if the server is not currently offering the service to which the client is bound.\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_NOT_PERMITTED if the client interface is not bound to any service (doesn't have a binding).\par
\pard\plain \s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid 
LE_COMM_ERROR if the Service Directory cannot be reached. \par}
}}}
}