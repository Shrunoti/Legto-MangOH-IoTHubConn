ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0plus
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"queue.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvIsQueueFull,"ax",%progbits
  20              		.align	2
  21              		.code	16
  22              		.thumb_func
  23              		.type	prvIsQueueFull, %function
  24              	prvIsQueueFull:
  25              	.LFB59:
  26              		.file 1 "Source\\FreeRTOS\\10.0.1\\Source\\queue.c"
   1:Source\FreeRTOS\10.0.1\Source/queue.c **** /*
   2:Source\FreeRTOS\10.0.1\Source/queue.c ****  * FreeRTOS Kernel V10.0.1
   3:Source\FreeRTOS\10.0.1\Source/queue.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Source\FreeRTOS\10.0.1\Source/queue.c ****  *
   5:Source\FreeRTOS\10.0.1\Source/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Source\FreeRTOS\10.0.1\Source/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Source\FreeRTOS\10.0.1\Source/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:Source\FreeRTOS\10.0.1\Source/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Source\FreeRTOS\10.0.1\Source/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Source\FreeRTOS\10.0.1\Source/queue.c ****  * subject to the following conditions:
  11:Source\FreeRTOS\10.0.1\Source/queue.c ****  *
  12:Source\FreeRTOS\10.0.1\Source/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Source\FreeRTOS\10.0.1\Source/queue.c ****  * copies or substantial portions of the Software.
  14:Source\FreeRTOS\10.0.1\Source/queue.c ****  *
  15:Source\FreeRTOS\10.0.1\Source/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Source\FreeRTOS\10.0.1\Source/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Source\FreeRTOS\10.0.1\Source/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Source\FreeRTOS\10.0.1\Source/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Source\FreeRTOS\10.0.1\Source/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Source\FreeRTOS\10.0.1\Source/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Source\FreeRTOS\10.0.1\Source/queue.c ****  *
  22:Source\FreeRTOS\10.0.1\Source/queue.c ****  * http://www.FreeRTOS.org
  23:Source\FreeRTOS\10.0.1\Source/queue.c ****  * http://aws.amazon.com/freertos
  24:Source\FreeRTOS\10.0.1\Source/queue.c ****  *
  25:Source\FreeRTOS\10.0.1\Source/queue.c ****  * 1 tab == 4 spaces!
  26:Source\FreeRTOS\10.0.1\Source/queue.c ****  */
  27:Source\FreeRTOS\10.0.1\Source/queue.c **** 
  28:Source\FreeRTOS\10.0.1\Source/queue.c **** #include <stdlib.h>
  29:Source\FreeRTOS\10.0.1\Source/queue.c **** #include <string.h>
  30:Source\FreeRTOS\10.0.1\Source/queue.c **** 
  31:Source\FreeRTOS\10.0.1\Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 2


  32:Source\FreeRTOS\10.0.1\Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:Source\FreeRTOS\10.0.1\Source/queue.c **** task.h is included from an application file. */
  34:Source\FreeRTOS\10.0.1\Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:Source\FreeRTOS\10.0.1\Source/queue.c **** 
  36:Source\FreeRTOS\10.0.1\Source/queue.c **** #include "FreeRTOS.h"
  37:Source\FreeRTOS\10.0.1\Source/queue.c **** #include "task.h"
  38:Source\FreeRTOS\10.0.1\Source/queue.c **** #include "queue.h"
  39:Source\FreeRTOS\10.0.1\Source/queue.c **** 
  40:Source\FreeRTOS\10.0.1\Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  41:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#include "croutine.h"
  42:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif
  43:Source\FreeRTOS\10.0.1\Source/queue.c **** 
  44:Source\FreeRTOS\10.0.1\Source/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  45:Source\FreeRTOS\10.0.1\Source/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  46:Source\FreeRTOS\10.0.1\Source/queue.c **** header files above, but not in this file, in order to generate the correct
  47:Source\FreeRTOS\10.0.1\Source/queue.c **** privileged Vs unprivileged linkage and placement. */
  48:Source\FreeRTOS\10.0.1\Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  49:Source\FreeRTOS\10.0.1\Source/queue.c **** 
  50:Source\FreeRTOS\10.0.1\Source/queue.c **** 
  51:Source\FreeRTOS\10.0.1\Source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:Source\FreeRTOS\10.0.1\Source/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  53:Source\FreeRTOS\10.0.1\Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  54:Source\FreeRTOS\10.0.1\Source/queue.c **** 
  55:Source\FreeRTOS\10.0.1\Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:Source\FreeRTOS\10.0.1\Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  57:Source\FreeRTOS\10.0.1\Source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:Source\FreeRTOS\10.0.1\Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:Source\FreeRTOS\10.0.1\Source/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
  60:Source\FreeRTOS\10.0.1\Source/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
  61:Source\FreeRTOS\10.0.1\Source/queue.c **** the code is maintained despite this dual use of two structure members.  An
  62:Source\FreeRTOS\10.0.1\Source/queue.c **** alternative implementation would be to use a union, but use of a union is
  63:Source\FreeRTOS\10.0.1\Source/queue.c **** against the coding standard (although an exception to the standard has been
  64:Source\FreeRTOS\10.0.1\Source/queue.c **** permitted where the dual use also significantly changes the type of the
  65:Source\FreeRTOS\10.0.1\Source/queue.c **** structure member). */
  66:Source\FreeRTOS\10.0.1\Source/queue.c **** #define pxMutexHolder					pcTail
  67:Source\FreeRTOS\10.0.1\Source/queue.c **** #define uxQueueType						pcHead
  68:Source\FreeRTOS\10.0.1\Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  69:Source\FreeRTOS\10.0.1\Source/queue.c **** 
  70:Source\FreeRTOS\10.0.1\Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  71:Source\FreeRTOS\10.0.1\Source/queue.c **** zero. */
  72:Source\FreeRTOS\10.0.1\Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
  73:Source\FreeRTOS\10.0.1\Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
  74:Source\FreeRTOS\10.0.1\Source/queue.c **** 
  75:Source\FreeRTOS\10.0.1\Source/queue.c **** #if( configUSE_PREEMPTION == 0 )
  76:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  77:Source\FreeRTOS\10.0.1\Source/queue.c **** 	performed just because a higher priority task has been woken. */
  78:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
  79:Source\FreeRTOS\10.0.1\Source/queue.c **** #else
  80:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  81:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif
  82:Source\FreeRTOS\10.0.1\Source/queue.c **** 
  83:Source\FreeRTOS\10.0.1\Source/queue.c **** /*
  84:Source\FreeRTOS\10.0.1\Source/queue.c ****  * Definition of the queue used by the scheduler.
  85:Source\FreeRTOS\10.0.1\Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  86:Source\FreeRTOS\10.0.1\Source/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
  87:Source\FreeRTOS\10.0.1\Source/queue.c ****  */
  88:Source\FreeRTOS\10.0.1\Source/queue.c **** typedef struct QueueDefinition
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 3


  89:Source\FreeRTOS\10.0.1\Source/queue.c **** {
  90:Source\FreeRTOS\10.0.1\Source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
  91:Source\FreeRTOS\10.0.1\Source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
  92:Source\FreeRTOS\10.0.1\Source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
  93:Source\FreeRTOS\10.0.1\Source/queue.c **** 
  94:Source\FreeRTOS\10.0.1\Source/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
  95:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
  96:Source\FreeRTOS\10.0.1\Source/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
  97:Source\FreeRTOS\10.0.1\Source/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
  98:Source\FreeRTOS\10.0.1\Source/queue.c **** 	} u;
  99:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 100:Source\FreeRTOS\10.0.1\Source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 101:Source\FreeRTOS\10.0.1\Source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 102:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 103:Source\FreeRTOS\10.0.1\Source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 104:Source\FreeRTOS\10.0.1\Source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 105:Source\FreeRTOS\10.0.1\Source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 106:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 107:Source\FreeRTOS\10.0.1\Source/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 108:Source\FreeRTOS\10.0.1\Source/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 109:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 110:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 111:Source\FreeRTOS\10.0.1\Source/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 112:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#endif
 113:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 114:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 115:Source\FreeRTOS\10.0.1\Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 116:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#endif
 117:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 118:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 119:Source\FreeRTOS\10.0.1\Source/queue.c **** 		UBaseType_t uxQueueNumber;
 120:Source\FreeRTOS\10.0.1\Source/queue.c **** 		uint8_t ucQueueType;
 121:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#endif
 122:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 123:Source\FreeRTOS\10.0.1\Source/queue.c **** } xQUEUE;
 124:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 125:Source\FreeRTOS\10.0.1\Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 126:Source\FreeRTOS\10.0.1\Source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 127:Source\FreeRTOS\10.0.1\Source/queue.c **** typedef xQUEUE Queue_t;
 128:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 129:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 130:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 131:Source\FreeRTOS\10.0.1\Source/queue.c **** /*
 132:Source\FreeRTOS\10.0.1\Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 133:Source\FreeRTOS\10.0.1\Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 134:Source\FreeRTOS\10.0.1\Source/queue.c ****  */
 135:Source\FreeRTOS\10.0.1\Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 136:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 137:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 138:Source\FreeRTOS\10.0.1\Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 139:Source\FreeRTOS\10.0.1\Source/queue.c **** 	more user friendly. */
 140:Source\FreeRTOS\10.0.1\Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 141:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 142:Source\FreeRTOS\10.0.1\Source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 143:Source\FreeRTOS\10.0.1\Source/queue.c **** 		QueueHandle_t xHandle;
 144:Source\FreeRTOS\10.0.1\Source/queue.c **** 	} xQueueRegistryItem;
 145:Source\FreeRTOS\10.0.1\Source/queue.c **** 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 4


 146:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 147:Source\FreeRTOS\10.0.1\Source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 148:Source\FreeRTOS\10.0.1\Source/queue.c **** 	debuggers. */
 149:Source\FreeRTOS\10.0.1\Source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 150:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 151:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 152:Source\FreeRTOS\10.0.1\Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 153:Source\FreeRTOS\10.0.1\Source/queue.c **** 	array position being vacant. */
 154:Source\FreeRTOS\10.0.1\Source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 155:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 156:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 157:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 158:Source\FreeRTOS\10.0.1\Source/queue.c **** /*
 159:Source\FreeRTOS\10.0.1\Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 160:Source\FreeRTOS\10.0.1\Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 161:Source\FreeRTOS\10.0.1\Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 162:Source\FreeRTOS\10.0.1\Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 163:Source\FreeRTOS\10.0.1\Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 164:Source\FreeRTOS\10.0.1\Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 165:Source\FreeRTOS\10.0.1\Source/queue.c ****  */
 166:Source\FreeRTOS\10.0.1\Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 167:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 168:Source\FreeRTOS\10.0.1\Source/queue.c **** /*
 169:Source\FreeRTOS\10.0.1\Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 170:Source\FreeRTOS\10.0.1\Source/queue.c ****  *
 171:Source\FreeRTOS\10.0.1\Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 172:Source\FreeRTOS\10.0.1\Source/queue.c ****  */
 173:Source\FreeRTOS\10.0.1\Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 174:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 175:Source\FreeRTOS\10.0.1\Source/queue.c **** /*
 176:Source\FreeRTOS\10.0.1\Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 177:Source\FreeRTOS\10.0.1\Source/queue.c ****  *
 178:Source\FreeRTOS\10.0.1\Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 179:Source\FreeRTOS\10.0.1\Source/queue.c ****  */
 180:Source\FreeRTOS\10.0.1\Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 181:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 182:Source\FreeRTOS\10.0.1\Source/queue.c **** /*
 183:Source\FreeRTOS\10.0.1\Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 184:Source\FreeRTOS\10.0.1\Source/queue.c ****  * back of the queue.
 185:Source\FreeRTOS\10.0.1\Source/queue.c ****  */
 186:Source\FreeRTOS\10.0.1\Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 187:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 188:Source\FreeRTOS\10.0.1\Source/queue.c **** /*
 189:Source\FreeRTOS\10.0.1\Source/queue.c ****  * Copies an item out of a queue.
 190:Source\FreeRTOS\10.0.1\Source/queue.c ****  */
 191:Source\FreeRTOS\10.0.1\Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 192:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 193:Source\FreeRTOS\10.0.1\Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 194:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/*
 195:Source\FreeRTOS\10.0.1\Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 196:Source\FreeRTOS\10.0.1\Source/queue.c **** 	 * the queue set that the queue contains data.
 197:Source\FreeRTOS\10.0.1\Source/queue.c **** 	 */
 198:Source\FreeRTOS\10.0.1\Source/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 199:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif
 200:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 201:Source\FreeRTOS\10.0.1\Source/queue.c **** /*
 202:Source\FreeRTOS\10.0.1\Source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 5


 203:Source\FreeRTOS\10.0.1\Source/queue.c ****  * dynamically to fill in the structure's members.
 204:Source\FreeRTOS\10.0.1\Source/queue.c ****  */
 205:Source\FreeRTOS\10.0.1\Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 206:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 207:Source\FreeRTOS\10.0.1\Source/queue.c **** /*
 208:Source\FreeRTOS\10.0.1\Source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 209:Source\FreeRTOS\10.0.1\Source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 210:Source\FreeRTOS\10.0.1\Source/queue.c ****  * as a mutex.
 211:Source\FreeRTOS\10.0.1\Source/queue.c ****  */
 212:Source\FreeRTOS\10.0.1\Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 213:Source\FreeRTOS\10.0.1\Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 214:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif
 215:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 216:Source\FreeRTOS\10.0.1\Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 217:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/*
 218:Source\FreeRTOS\10.0.1\Source/queue.c **** 	 * If a task waiting for a mutex causes the mutex holder to inherit a
 219:Source\FreeRTOS\10.0.1\Source/queue.c **** 	 * priority, but the waiting task times out, then the holder should
 220:Source\FreeRTOS\10.0.1\Source/queue.c **** 	 * disinherit the priority - but only down to the highest priority of any
 221:Source\FreeRTOS\10.0.1\Source/queue.c **** 	 * other tasks that are waiting for the same mutex.  This function returns
 222:Source\FreeRTOS\10.0.1\Source/queue.c **** 	 * that priority.
 223:Source\FreeRTOS\10.0.1\Source/queue.c **** 	 */
 224:Source\FreeRTOS\10.0.1\Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVILEGE
 225:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif
 226:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 227:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 228:Source\FreeRTOS\10.0.1\Source/queue.c **** /*
 229:Source\FreeRTOS\10.0.1\Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 230:Source\FreeRTOS\10.0.1\Source/queue.c ****  * accessing the queue event lists.
 231:Source\FreeRTOS\10.0.1\Source/queue.c ****  */
 232:Source\FreeRTOS\10.0.1\Source/queue.c **** #define prvLockQueue( pxQueue )								\
 233:Source\FreeRTOS\10.0.1\Source/queue.c **** 	taskENTER_CRITICAL();									\
 234:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{														\
 235:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 236:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{													\
 237:Source\FreeRTOS\10.0.1\Source/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 238:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}													\
 239:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 240:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{													\
 241:Source\FreeRTOS\10.0.1\Source/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 242:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}													\
 243:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}														\
 244:Source\FreeRTOS\10.0.1\Source/queue.c **** 	taskEXIT_CRITICAL()
 245:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 246:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 247:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 248:Source\FreeRTOS\10.0.1\Source/queue.c **** {
 249:Source\FreeRTOS\10.0.1\Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 250:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 251:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( pxQueue );
 252:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 253:Source\FreeRTOS\10.0.1\Source/queue.c **** 	taskENTER_CRITICAL();
 254:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 255:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 256:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 257:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 258:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 259:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 6


 260:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 261:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 262:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( xNewQueue == pdFALSE )
 263:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 264:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 265:Source\FreeRTOS\10.0.1\Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 266:Source\FreeRTOS\10.0.1\Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 267:Source\FreeRTOS\10.0.1\Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 268:Source\FreeRTOS\10.0.1\Source/queue.c **** 			it will be possible to write to it. */
 269:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 270:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 271:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 272:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 273:Source\FreeRTOS\10.0.1\Source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 274:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 275:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
 276:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 277:Source\FreeRTOS\10.0.1\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 278:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 279:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 280:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
 281:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 282:Source\FreeRTOS\10.0.1\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 283:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 284:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 285:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
 286:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 287:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 288:Source\FreeRTOS\10.0.1\Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 289:Source\FreeRTOS\10.0.1\Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 290:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 291:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 292:Source\FreeRTOS\10.0.1\Source/queue.c **** 	taskEXIT_CRITICAL();
 293:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 294:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 295:Source\FreeRTOS\10.0.1\Source/queue.c **** 	versions. */
 296:Source\FreeRTOS\10.0.1\Source/queue.c **** 	return pdPASS;
 297:Source\FreeRTOS\10.0.1\Source/queue.c **** }
 298:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 299:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 300:Source\FreeRTOS\10.0.1\Source/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 301:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 302:Source\FreeRTOS\10.0.1\Source/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 303:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 304:Source\FreeRTOS\10.0.1\Source/queue.c **** 	Queue_t *pxNewQueue;
 305:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 306:Source\FreeRTOS\10.0.1\Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 307:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 308:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 309:Source\FreeRTOS\10.0.1\Source/queue.c **** 		supplied. */
 310:Source\FreeRTOS\10.0.1\Source/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 311:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 312:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 313:Source\FreeRTOS\10.0.1\Source/queue.c **** 		should not be provided if the item size is 0. */
 314:Source\FreeRTOS\10.0.1\Source/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 315:Source\FreeRTOS\10.0.1\Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 316:Source\FreeRTOS\10.0.1\Source/queue.c **** 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 7


 317:Source\FreeRTOS\10.0.1\Source/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 318:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 319:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 320:Source\FreeRTOS\10.0.1\Source/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 321:Source\FreeRTOS\10.0.1\Source/queue.c **** 			the real queue and semaphore structures. */
 322:Source\FreeRTOS\10.0.1\Source/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 323:Source\FreeRTOS\10.0.1\Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 324:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 325:Source\FreeRTOS\10.0.1\Source/queue.c **** 		#endif /* configASSERT_DEFINED */
 326:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 327:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 328:Source\FreeRTOS\10.0.1\Source/queue.c **** 		The address of a statically allocated storage area was also passed in
 329:Source\FreeRTOS\10.0.1\Source/queue.c **** 		but is already set. */
 330:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 331:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 332:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( pxNewQueue != NULL )
 333:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 334:Source\FreeRTOS\10.0.1\Source/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 335:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 336:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 337:Source\FreeRTOS\10.0.1\Source/queue.c **** 				note this queue was allocated statically in case the queue is
 338:Source\FreeRTOS\10.0.1\Source/queue.c **** 				later deleted. */
 339:Source\FreeRTOS\10.0.1\Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 340:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 341:Source\FreeRTOS\10.0.1\Source/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 342:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 343:Source\FreeRTOS\10.0.1\Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 344:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 345:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
 346:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 347:Source\FreeRTOS\10.0.1\Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 348:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 349:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 350:Source\FreeRTOS\10.0.1\Source/queue.c **** 		return pxNewQueue;
 351:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 352:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 353:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 354:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 355:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 356:Source\FreeRTOS\10.0.1\Source/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 357:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 358:Source\FreeRTOS\10.0.1\Source/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 359:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 360:Source\FreeRTOS\10.0.1\Source/queue.c **** 	Queue_t *pxNewQueue;
 361:Source\FreeRTOS\10.0.1\Source/queue.c **** 	size_t xQueueSizeInBytes;
 362:Source\FreeRTOS\10.0.1\Source/queue.c **** 	uint8_t *pucQueueStorage;
 363:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 364:Source\FreeRTOS\10.0.1\Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 365:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 366:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 367:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 368:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* There is not going to be a queue storage area. */
 369:Source\FreeRTOS\10.0.1\Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 370:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 371:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
 372:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 373:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 8


 374:Source\FreeRTOS\10.0.1\Source/queue.c **** 			can be in the queue at any time. */
 375:Source\FreeRTOS\10.0.1\Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 376:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 377:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 378:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 379:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 380:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( pxNewQueue != NULL )
 381:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 382:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 383:Source\FreeRTOS\10.0.1\Source/queue.c **** 			storage area. */
 384:Source\FreeRTOS\10.0.1\Source/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 385:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 386:Source\FreeRTOS\10.0.1\Source/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 387:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 388:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* Queues can be created either statically or dynamically, so
 389:Source\FreeRTOS\10.0.1\Source/queue.c **** 				note this task was created dynamically in case it is later
 390:Source\FreeRTOS\10.0.1\Source/queue.c **** 				deleted. */
 391:Source\FreeRTOS\10.0.1\Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 392:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 393:Source\FreeRTOS\10.0.1\Source/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 394:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 395:Source\FreeRTOS\10.0.1\Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 396:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 397:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
 398:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 399:Source\FreeRTOS\10.0.1\Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 400:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 401:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 402:Source\FreeRTOS\10.0.1\Source/queue.c **** 		return pxNewQueue;
 403:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 404:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 405:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 406:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 407:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 408:Source\FreeRTOS\10.0.1\Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 409:Source\FreeRTOS\10.0.1\Source/queue.c **** {
 410:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 411:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 412:Source\FreeRTOS\10.0.1\Source/queue.c **** 	( void ) ucQueueType;
 413:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 414:Source\FreeRTOS\10.0.1\Source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 415:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 416:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 417:Source\FreeRTOS\10.0.1\Source/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 418:Source\FreeRTOS\10.0.1\Source/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 419:Source\FreeRTOS\10.0.1\Source/queue.c **** 		value that is known to be within the memory map. */
 420:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 421:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 422:Source\FreeRTOS\10.0.1\Source/queue.c **** 	else
 423:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 424:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* Set the head to the start of the queue storage area. */
 425:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 426:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 427:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 428:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* Initialise the queue members as described where the queue type is
 429:Source\FreeRTOS\10.0.1\Source/queue.c **** 	defined. */
 430:Source\FreeRTOS\10.0.1\Source/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 9


 431:Source\FreeRTOS\10.0.1\Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 432:Source\FreeRTOS\10.0.1\Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 433:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 434:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 435:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 436:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 437:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 438:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 439:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 440:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 441:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 442:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 443:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 444:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 445:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 446:Source\FreeRTOS\10.0.1\Source/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 447:Source\FreeRTOS\10.0.1\Source/queue.c **** }
 448:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 449:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 450:Source\FreeRTOS\10.0.1\Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 451:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 452:Source\FreeRTOS\10.0.1\Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 453:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 454:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( pxNewQueue != NULL )
 455:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 456:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* The queue create function will set all the queue structure members
 457:Source\FreeRTOS\10.0.1\Source/queue.c **** 			correctly for a generic queue, but this function is creating a
 458:Source\FreeRTOS\10.0.1\Source/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 459:Source\FreeRTOS\10.0.1\Source/queue.c **** 			in particular the information required for priority inheritance. */
 460:Source\FreeRTOS\10.0.1\Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 461:Source\FreeRTOS\10.0.1\Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 462:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 463:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* In case this is a recursive mutex. */
 464:Source\FreeRTOS\10.0.1\Source/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
 465:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 466:Source\FreeRTOS\10.0.1\Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 467:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 468:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 469:Source\FreeRTOS\10.0.1\Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 470:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 471:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
 472:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 473:Source\FreeRTOS\10.0.1\Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 474:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 475:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 476:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 477:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif /* configUSE_MUTEXES */
 478:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 479:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 480:Source\FreeRTOS\10.0.1\Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 481:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 482:Source\FreeRTOS\10.0.1\Source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 483:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 484:Source\FreeRTOS\10.0.1\Source/queue.c **** 	Queue_t *pxNewQueue;
 485:Source\FreeRTOS\10.0.1\Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 486:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 487:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 10


 488:Source\FreeRTOS\10.0.1\Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 489:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 490:Source\FreeRTOS\10.0.1\Source/queue.c **** 		return pxNewQueue;
 491:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 492:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 493:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif /* configUSE_MUTEXES */
 494:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 495:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 496:Source\FreeRTOS\10.0.1\Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 497:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 498:Source\FreeRTOS\10.0.1\Source/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 499:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 500:Source\FreeRTOS\10.0.1\Source/queue.c **** 	Queue_t *pxNewQueue;
 501:Source\FreeRTOS\10.0.1\Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 502:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 503:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 504:Source\FreeRTOS\10.0.1\Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 505:Source\FreeRTOS\10.0.1\Source/queue.c **** 		( void ) ucQueueType;
 506:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 507:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 508:Source\FreeRTOS\10.0.1\Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 509:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 510:Source\FreeRTOS\10.0.1\Source/queue.c **** 		return pxNewQueue;
 511:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 512:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 513:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif /* configUSE_MUTEXES */
 514:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 515:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 516:Source\FreeRTOS\10.0.1\Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 517:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 518:Source\FreeRTOS\10.0.1\Source/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 519:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 520:Source\FreeRTOS\10.0.1\Source/queue.c **** 	void *pxReturn;
 521:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 522:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 523:Source\FreeRTOS\10.0.1\Source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 524:Source\FreeRTOS\10.0.1\Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 525:Source\FreeRTOS\10.0.1\Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 526:Source\FreeRTOS\10.0.1\Source/queue.c **** 		following critical section exiting and the function returning. */
 527:Source\FreeRTOS\10.0.1\Source/queue.c **** 		taskENTER_CRITICAL();
 528:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 529:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 530:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 531:Source\FreeRTOS\10.0.1\Source/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 532:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 533:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
 534:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 535:Source\FreeRTOS\10.0.1\Source/queue.c **** 				pxReturn = NULL;
 536:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 537:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 538:Source\FreeRTOS\10.0.1\Source/queue.c **** 		taskEXIT_CRITICAL();
 539:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 540:Source\FreeRTOS\10.0.1\Source/queue.c **** 		return pxReturn;
 541:Source\FreeRTOS\10.0.1\Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 542:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 543:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif
 544:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 11


 545:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 546:Source\FreeRTOS\10.0.1\Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 547:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 548:Source\FreeRTOS\10.0.1\Source/queue.c **** 	void* xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 549:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 550:Source\FreeRTOS\10.0.1\Source/queue.c **** 	void *pxReturn;
 551:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 552:Source\FreeRTOS\10.0.1\Source/queue.c **** 		configASSERT( xSemaphore );
 553:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 554:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* Mutexes cannot be used in interrupt service routines, so the mutex
 555:Source\FreeRTOS\10.0.1\Source/queue.c **** 		holder should not change in an ISR, and therefore a critical section is
 556:Source\FreeRTOS\10.0.1\Source/queue.c **** 		not required here. */
 557:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 558:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 559:Source\FreeRTOS\10.0.1\Source/queue.c **** 			pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 560:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 561:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
 562:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 563:Source\FreeRTOS\10.0.1\Source/queue.c **** 			pxReturn = NULL;
 564:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 565:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 566:Source\FreeRTOS\10.0.1\Source/queue.c **** 		return pxReturn;
 567:Source\FreeRTOS\10.0.1\Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 568:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 569:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif
 570:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 571:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 572:Source\FreeRTOS\10.0.1\Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 573:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 574:Source\FreeRTOS\10.0.1\Source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 575:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 576:Source\FreeRTOS\10.0.1\Source/queue.c **** 	BaseType_t xReturn;
 577:Source\FreeRTOS\10.0.1\Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 578:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 579:Source\FreeRTOS\10.0.1\Source/queue.c **** 		configASSERT( pxMutex );
 580:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 581:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 582:Source\FreeRTOS\10.0.1\Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 583:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 584:Source\FreeRTOS\10.0.1\Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 585:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 586:Source\FreeRTOS\10.0.1\Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 587:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 588:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 589:Source\FreeRTOS\10.0.1\Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 590:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 591:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 592:Source\FreeRTOS\10.0.1\Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 593:Source\FreeRTOS\10.0.1\Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 594:Source\FreeRTOS\10.0.1\Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 595:Source\FreeRTOS\10.0.1\Source/queue.c **** 			uxRecursiveCallCount member. */
 596:Source\FreeRTOS\10.0.1\Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 597:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 598:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* Has the recursive call count unwound to 0? */
 599:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 600:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 601:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 12


 602:Source\FreeRTOS\10.0.1\Source/queue.c **** 				task that might be waiting to access the mutex. */
 603:Source\FreeRTOS\10.0.1\Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 604:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 605:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
 606:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 607:Source\FreeRTOS\10.0.1\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 608:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 609:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 610:Source\FreeRTOS\10.0.1\Source/queue.c **** 			xReturn = pdPASS;
 611:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 612:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
 613:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 614:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 615:Source\FreeRTOS\10.0.1\Source/queue.c **** 			holder. */
 616:Source\FreeRTOS\10.0.1\Source/queue.c **** 			xReturn = pdFAIL;
 617:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 618:Source\FreeRTOS\10.0.1\Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 619:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 620:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 621:Source\FreeRTOS\10.0.1\Source/queue.c **** 		return xReturn;
 622:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 623:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 624:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 625:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 626:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 627:Source\FreeRTOS\10.0.1\Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 628:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 629:Source\FreeRTOS\10.0.1\Source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 630:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 631:Source\FreeRTOS\10.0.1\Source/queue.c **** 	BaseType_t xReturn;
 632:Source\FreeRTOS\10.0.1\Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 633:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 634:Source\FreeRTOS\10.0.1\Source/queue.c **** 		configASSERT( pxMutex );
 635:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 636:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 637:Source\FreeRTOS\10.0.1\Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 638:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 639:Source\FreeRTOS\10.0.1\Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 640:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 641:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 642:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 643:Source\FreeRTOS\10.0.1\Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 644:Source\FreeRTOS\10.0.1\Source/queue.c **** 			xReturn = pdPASS;
 645:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 646:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
 647:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 648:Source\FreeRTOS\10.0.1\Source/queue.c **** 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 649:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 650:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 651:Source\FreeRTOS\10.0.1\Source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 652:Source\FreeRTOS\10.0.1\Source/queue.c **** 			before reaching here. */
 653:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( xReturn != pdFAIL )
 654:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 655:Source\FreeRTOS\10.0.1\Source/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 656:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 657:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
 658:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 13


 659:Source\FreeRTOS\10.0.1\Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 660:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 661:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 662:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 663:Source\FreeRTOS\10.0.1\Source/queue.c **** 		return xReturn;
 664:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 665:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 666:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 667:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 668:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 669:Source\FreeRTOS\10.0.1\Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 670:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 671:Source\FreeRTOS\10.0.1\Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 672:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 673:Source\FreeRTOS\10.0.1\Source/queue.c **** 	QueueHandle_t xHandle;
 674:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 675:Source\FreeRTOS\10.0.1\Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 676:Source\FreeRTOS\10.0.1\Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 677:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 678:Source\FreeRTOS\10.0.1\Source/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 679:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 680:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( xHandle != NULL )
 681:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 682:Source\FreeRTOS\10.0.1\Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 683:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 684:Source\FreeRTOS\10.0.1\Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 685:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 686:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
 687:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 688:Source\FreeRTOS\10.0.1\Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 689:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 690:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 691:Source\FreeRTOS\10.0.1\Source/queue.c **** 		return xHandle;
 692:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 693:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 694:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 695:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 696:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 697:Source\FreeRTOS\10.0.1\Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 698:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 699:Source\FreeRTOS\10.0.1\Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 700:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 701:Source\FreeRTOS\10.0.1\Source/queue.c **** 	QueueHandle_t xHandle;
 702:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 703:Source\FreeRTOS\10.0.1\Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 704:Source\FreeRTOS\10.0.1\Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 705:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 706:Source\FreeRTOS\10.0.1\Source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 707:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 708:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( xHandle != NULL )
 709:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 710:Source\FreeRTOS\10.0.1\Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 711:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 712:Source\FreeRTOS\10.0.1\Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 713:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 714:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
 715:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 14


 716:Source\FreeRTOS\10.0.1\Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 717:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 718:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 719:Source\FreeRTOS\10.0.1\Source/queue.c **** 		return xHandle;
 720:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 721:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 722:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 723:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 724:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 725:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 726:Source\FreeRTOS\10.0.1\Source/queue.c **** {
 727:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 728:Source\FreeRTOS\10.0.1\Source/queue.c **** TimeOut_t xTimeOut;
 729:Source\FreeRTOS\10.0.1\Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 730:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 731:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( pxQueue );
 732:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 733:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 734:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 735:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 736:Source\FreeRTOS\10.0.1\Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 737:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 738:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#endif
 739:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 740:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 741:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 742:Source\FreeRTOS\10.0.1\Source/queue.c **** 	statements within the function itself.  This is done in the interest
 743:Source\FreeRTOS\10.0.1\Source/queue.c **** 	of execution time efficiency. */
 744:Source\FreeRTOS\10.0.1\Source/queue.c **** 	for( ;; )
 745:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 746:Source\FreeRTOS\10.0.1\Source/queue.c **** 		taskENTER_CRITICAL();
 747:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 748:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 749:Source\FreeRTOS\10.0.1\Source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 750:Source\FreeRTOS\10.0.1\Source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 751:Source\FreeRTOS\10.0.1\Source/queue.c **** 			queue is full. */
 752:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 753:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 754:Source\FreeRTOS\10.0.1\Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 755:Source\FreeRTOS\10.0.1\Source/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 756:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 757:Source\FreeRTOS\10.0.1\Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 758:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 759:Source\FreeRTOS\10.0.1\Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 760:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
 761:Source\FreeRTOS\10.0.1\Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 762:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
 763:Source\FreeRTOS\10.0.1\Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 764:Source\FreeRTOS\10.0.1\Source/queue.c **** 							to the queue set caused a higher priority task to
 765:Source\FreeRTOS\10.0.1\Source/queue.c **** 							unblock. A context switch is required. */
 766:Source\FreeRTOS\10.0.1\Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 767:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
 768:Source\FreeRTOS\10.0.1\Source/queue.c **** 						else
 769:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
 770:Source\FreeRTOS\10.0.1\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 771:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
 772:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 15


 773:Source\FreeRTOS\10.0.1\Source/queue.c **** 					else
 774:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
 775:Source\FreeRTOS\10.0.1\Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 776:Source\FreeRTOS\10.0.1\Source/queue.c **** 						queue then unblock it now. */
 777:Source\FreeRTOS\10.0.1\Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 778:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
 779:Source\FreeRTOS\10.0.1\Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 780:Source\FreeRTOS\10.0.1\Source/queue.c **** 							{
 781:Source\FreeRTOS\10.0.1\Source/queue.c **** 								/* The unblocked task has a priority higher than
 782:Source\FreeRTOS\10.0.1\Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 783:Source\FreeRTOS\10.0.1\Source/queue.c **** 								do this from within the critical section - the
 784:Source\FreeRTOS\10.0.1\Source/queue.c **** 								kernel takes care of that. */
 785:Source\FreeRTOS\10.0.1\Source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 786:Source\FreeRTOS\10.0.1\Source/queue.c **** 							}
 787:Source\FreeRTOS\10.0.1\Source/queue.c **** 							else
 788:Source\FreeRTOS\10.0.1\Source/queue.c **** 							{
 789:Source\FreeRTOS\10.0.1\Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 790:Source\FreeRTOS\10.0.1\Source/queue.c **** 							}
 791:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
 792:Source\FreeRTOS\10.0.1\Source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 793:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
 794:Source\FreeRTOS\10.0.1\Source/queue.c **** 							/* This path is a special case that will only get
 795:Source\FreeRTOS\10.0.1\Source/queue.c **** 							executed if the task was holding multiple mutexes
 796:Source\FreeRTOS\10.0.1\Source/queue.c **** 							and the mutexes were given back in an order that is
 797:Source\FreeRTOS\10.0.1\Source/queue.c **** 							different to that in which they were taken. */
 798:Source\FreeRTOS\10.0.1\Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 799:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
 800:Source\FreeRTOS\10.0.1\Source/queue.c **** 						else
 801:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
 802:Source\FreeRTOS\10.0.1\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 803:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
 804:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
 805:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 806:Source\FreeRTOS\10.0.1\Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 807:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 808:Source\FreeRTOS\10.0.1\Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 809:Source\FreeRTOS\10.0.1\Source/queue.c **** 					queue then unblock it now. */
 810:Source\FreeRTOS\10.0.1\Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 811:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
 812:Source\FreeRTOS\10.0.1\Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 813:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
 814:Source\FreeRTOS\10.0.1\Source/queue.c **** 							/* The unblocked task has a priority higher than
 815:Source\FreeRTOS\10.0.1\Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 816:Source\FreeRTOS\10.0.1\Source/queue.c **** 							this from within the critical section - the kernel
 817:Source\FreeRTOS\10.0.1\Source/queue.c **** 							takes care of that. */
 818:Source\FreeRTOS\10.0.1\Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 819:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
 820:Source\FreeRTOS\10.0.1\Source/queue.c **** 						else
 821:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
 822:Source\FreeRTOS\10.0.1\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 823:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
 824:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
 825:Source\FreeRTOS\10.0.1\Source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 826:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
 827:Source\FreeRTOS\10.0.1\Source/queue.c **** 						/* This path is a special case that will only get
 828:Source\FreeRTOS\10.0.1\Source/queue.c **** 						executed if the task was holding multiple mutexes and
 829:Source\FreeRTOS\10.0.1\Source/queue.c **** 						the mutexes were given back in an order that is
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 16


 830:Source\FreeRTOS\10.0.1\Source/queue.c **** 						different to that in which they were taken. */
 831:Source\FreeRTOS\10.0.1\Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 832:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
 833:Source\FreeRTOS\10.0.1\Source/queue.c **** 					else
 834:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
 835:Source\FreeRTOS\10.0.1\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 836:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
 837:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 838:Source\FreeRTOS\10.0.1\Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 839:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 840:Source\FreeRTOS\10.0.1\Source/queue.c **** 				taskEXIT_CRITICAL();
 841:Source\FreeRTOS\10.0.1\Source/queue.c **** 				return pdPASS;
 842:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 843:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
 844:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 845:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 846:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 847:Source\FreeRTOS\10.0.1\Source/queue.c **** 					/* The queue was full and no block time is specified (or
 848:Source\FreeRTOS\10.0.1\Source/queue.c **** 					the block time has expired) so leave now. */
 849:Source\FreeRTOS\10.0.1\Source/queue.c **** 					taskEXIT_CRITICAL();
 850:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 851:Source\FreeRTOS\10.0.1\Source/queue.c **** 					/* Return to the original privilege level before exiting
 852:Source\FreeRTOS\10.0.1\Source/queue.c **** 					the function. */
 853:Source\FreeRTOS\10.0.1\Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 854:Source\FreeRTOS\10.0.1\Source/queue.c **** 					return errQUEUE_FULL;
 855:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 856:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 857:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 858:Source\FreeRTOS\10.0.1\Source/queue.c **** 					/* The queue was full and a block time was specified so
 859:Source\FreeRTOS\10.0.1\Source/queue.c **** 					configure the timeout structure. */
 860:Source\FreeRTOS\10.0.1\Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 861:Source\FreeRTOS\10.0.1\Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 862:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 863:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
 864:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 865:Source\FreeRTOS\10.0.1\Source/queue.c **** 					/* Entry time was already set. */
 866:Source\FreeRTOS\10.0.1\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 867:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 868:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 869:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 870:Source\FreeRTOS\10.0.1\Source/queue.c **** 		taskEXIT_CRITICAL();
 871:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 872:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 873:Source\FreeRTOS\10.0.1\Source/queue.c **** 		now the critical section has been exited. */
 874:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 875:Source\FreeRTOS\10.0.1\Source/queue.c **** 		vTaskSuspendAll();
 876:Source\FreeRTOS\10.0.1\Source/queue.c **** 		prvLockQueue( pxQueue );
 877:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 878:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 879:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 880:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 881:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 882:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 883:Source\FreeRTOS\10.0.1\Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 884:Source\FreeRTOS\10.0.1\Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 885:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 886:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 17


 887:Source\FreeRTOS\10.0.1\Source/queue.c **** 				event list.  It is possible that interrupts occurring now
 888:Source\FreeRTOS\10.0.1\Source/queue.c **** 				remove this task from the event list again - but as the
 889:Source\FreeRTOS\10.0.1\Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 890:Source\FreeRTOS\10.0.1\Source/queue.c **** 				ready last instead of the actual ready list. */
 891:Source\FreeRTOS\10.0.1\Source/queue.c **** 				prvUnlockQueue( pxQueue );
 892:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 893:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 894:Source\FreeRTOS\10.0.1\Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 895:Source\FreeRTOS\10.0.1\Source/queue.c **** 				task is already in a ready list before it yields - in which
 896:Source\FreeRTOS\10.0.1\Source/queue.c **** 				case the yield will not cause a context switch unless there
 897:Source\FreeRTOS\10.0.1\Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 898:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 899:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 900:Source\FreeRTOS\10.0.1\Source/queue.c **** 					portYIELD_WITHIN_API();
 901:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 902:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 903:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
 904:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 905:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* Try again. */
 906:Source\FreeRTOS\10.0.1\Source/queue.c **** 				prvUnlockQueue( pxQueue );
 907:Source\FreeRTOS\10.0.1\Source/queue.c **** 				( void ) xTaskResumeAll();
 908:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 909:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 910:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
 911:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 912:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* The timeout has expired. */
 913:Source\FreeRTOS\10.0.1\Source/queue.c **** 			prvUnlockQueue( pxQueue );
 914:Source\FreeRTOS\10.0.1\Source/queue.c **** 			( void ) xTaskResumeAll();
 915:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 916:Source\FreeRTOS\10.0.1\Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 917:Source\FreeRTOS\10.0.1\Source/queue.c **** 			return errQUEUE_FULL;
 918:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 919:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 920:Source\FreeRTOS\10.0.1\Source/queue.c **** }
 921:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 922:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 923:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 924:Source\FreeRTOS\10.0.1\Source/queue.c **** {
 925:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xReturn;
 926:Source\FreeRTOS\10.0.1\Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
 927:Source\FreeRTOS\10.0.1\Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 928:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 929:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( pxQueue );
 930:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 931:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 932:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 933:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 934:Source\FreeRTOS\10.0.1\Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 935:Source\FreeRTOS\10.0.1\Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 936:Source\FreeRTOS\10.0.1\Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 937:Source\FreeRTOS\10.0.1\Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 938:Source\FreeRTOS\10.0.1\Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 939:Source\FreeRTOS\10.0.1\Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 940:Source\FreeRTOS\10.0.1\Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
 941:Source\FreeRTOS\10.0.1\Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 942:Source\FreeRTOS\10.0.1\Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 943:Source\FreeRTOS\10.0.1\Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 18


 944:Source\FreeRTOS\10.0.1\Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 945:Source\FreeRTOS\10.0.1\Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 946:Source\FreeRTOS\10.0.1\Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 947:Source\FreeRTOS\10.0.1\Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 948:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 949:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 950:Source\FreeRTOS\10.0.1\Source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 951:Source\FreeRTOS\10.0.1\Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 952:Source\FreeRTOS\10.0.1\Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 953:Source\FreeRTOS\10.0.1\Source/queue.c **** 	post). */
 954:Source\FreeRTOS\10.0.1\Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 955:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 956:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 957:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 958:Source\FreeRTOS\10.0.1\Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 959:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 960:Source\FreeRTOS\10.0.1\Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 961:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 962:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 963:Source\FreeRTOS\10.0.1\Source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 964:Source\FreeRTOS\10.0.1\Source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 965:Source\FreeRTOS\10.0.1\Source/queue.c **** 			called here even though the disinherit function does not check if
 966:Source\FreeRTOS\10.0.1\Source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 967:Source\FreeRTOS\10.0.1\Source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 968:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 969:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 970:Source\FreeRTOS\10.0.1\Source/queue.c **** 			be done when the queue is unlocked later. */
 971:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 972:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 973:Source\FreeRTOS\10.0.1\Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 974:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 975:Source\FreeRTOS\10.0.1\Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 976:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
 977:Source\FreeRTOS\10.0.1\Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 978:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
 979:Source\FreeRTOS\10.0.1\Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 980:Source\FreeRTOS\10.0.1\Source/queue.c **** 							to the queue set caused a higher priority task to
 981:Source\FreeRTOS\10.0.1\Source/queue.c **** 							unblock.  A context switch is required. */
 982:Source\FreeRTOS\10.0.1\Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 983:Source\FreeRTOS\10.0.1\Source/queue.c **** 							{
 984:Source\FreeRTOS\10.0.1\Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 985:Source\FreeRTOS\10.0.1\Source/queue.c **** 							}
 986:Source\FreeRTOS\10.0.1\Source/queue.c **** 							else
 987:Source\FreeRTOS\10.0.1\Source/queue.c **** 							{
 988:Source\FreeRTOS\10.0.1\Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 989:Source\FreeRTOS\10.0.1\Source/queue.c **** 							}
 990:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
 991:Source\FreeRTOS\10.0.1\Source/queue.c **** 						else
 992:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
 993:Source\FreeRTOS\10.0.1\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 994:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
 995:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
 996:Source\FreeRTOS\10.0.1\Source/queue.c **** 					else
 997:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
 998:Source\FreeRTOS\10.0.1\Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 999:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
1000:Source\FreeRTOS\10.0.1\Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 19


1001:Source\FreeRTOS\10.0.1\Source/queue.c **** 							{
1002:Source\FreeRTOS\10.0.1\Source/queue.c **** 								/* The task waiting has a higher priority so
1003:Source\FreeRTOS\10.0.1\Source/queue.c **** 								record that a context switch is required. */
1004:Source\FreeRTOS\10.0.1\Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1005:Source\FreeRTOS\10.0.1\Source/queue.c **** 								{
1006:Source\FreeRTOS\10.0.1\Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1007:Source\FreeRTOS\10.0.1\Source/queue.c **** 								}
1008:Source\FreeRTOS\10.0.1\Source/queue.c **** 								else
1009:Source\FreeRTOS\10.0.1\Source/queue.c **** 								{
1010:Source\FreeRTOS\10.0.1\Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1011:Source\FreeRTOS\10.0.1\Source/queue.c **** 								}
1012:Source\FreeRTOS\10.0.1\Source/queue.c **** 							}
1013:Source\FreeRTOS\10.0.1\Source/queue.c **** 							else
1014:Source\FreeRTOS\10.0.1\Source/queue.c **** 							{
1015:Source\FreeRTOS\10.0.1\Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1016:Source\FreeRTOS\10.0.1\Source/queue.c **** 							}
1017:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
1018:Source\FreeRTOS\10.0.1\Source/queue.c **** 						else
1019:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
1020:Source\FreeRTOS\10.0.1\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1021:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
1022:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
1023:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1024:Source\FreeRTOS\10.0.1\Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1025:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1026:Source\FreeRTOS\10.0.1\Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1027:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
1028:Source\FreeRTOS\10.0.1\Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1029:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
1030:Source\FreeRTOS\10.0.1\Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1031:Source\FreeRTOS\10.0.1\Source/queue.c **** 							context	switch is required. */
1032:Source\FreeRTOS\10.0.1\Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1033:Source\FreeRTOS\10.0.1\Source/queue.c **** 							{
1034:Source\FreeRTOS\10.0.1\Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1035:Source\FreeRTOS\10.0.1\Source/queue.c **** 							}
1036:Source\FreeRTOS\10.0.1\Source/queue.c **** 							else
1037:Source\FreeRTOS\10.0.1\Source/queue.c **** 							{
1038:Source\FreeRTOS\10.0.1\Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1039:Source\FreeRTOS\10.0.1\Source/queue.c **** 							}
1040:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
1041:Source\FreeRTOS\10.0.1\Source/queue.c **** 						else
1042:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
1043:Source\FreeRTOS\10.0.1\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1044:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
1045:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
1046:Source\FreeRTOS\10.0.1\Source/queue.c **** 					else
1047:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
1048:Source\FreeRTOS\10.0.1\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1049:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
1050:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1051:Source\FreeRTOS\10.0.1\Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1052:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1053:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
1054:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1055:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1056:Source\FreeRTOS\10.0.1\Source/queue.c **** 				knows that data was posted while it was locked. */
1057:Source\FreeRTOS\10.0.1\Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 20


1058:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1059:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1060:Source\FreeRTOS\10.0.1\Source/queue.c **** 			xReturn = pdPASS;
1061:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
1062:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
1063:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
1064:Source\FreeRTOS\10.0.1\Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1065:Source\FreeRTOS\10.0.1\Source/queue.c **** 			xReturn = errQUEUE_FULL;
1066:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
1067:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
1068:Source\FreeRTOS\10.0.1\Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1069:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1070:Source\FreeRTOS\10.0.1\Source/queue.c **** 	return xReturn;
1071:Source\FreeRTOS\10.0.1\Source/queue.c **** }
1072:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
1073:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1074:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1075:Source\FreeRTOS\10.0.1\Source/queue.c **** {
1076:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xReturn;
1077:Source\FreeRTOS\10.0.1\Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1078:Source\FreeRTOS\10.0.1\Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1079:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1080:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1081:Source\FreeRTOS\10.0.1\Source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1082:Source\FreeRTOS\10.0.1\Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1083:Source\FreeRTOS\10.0.1\Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1084:Source\FreeRTOS\10.0.1\Source/queue.c **** 	post). */
1085:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1086:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( pxQueue );
1087:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1088:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1089:Source\FreeRTOS\10.0.1\Source/queue.c **** 	if the item size is not 0. */
1090:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1091:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1092:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1093:Source\FreeRTOS\10.0.1\Source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1094:Source\FreeRTOS\10.0.1\Source/queue.c **** 	interrupts, only tasks. */
1095:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1096:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1097:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1098:Source\FreeRTOS\10.0.1\Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1099:Source\FreeRTOS\10.0.1\Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1100:Source\FreeRTOS\10.0.1\Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1101:Source\FreeRTOS\10.0.1\Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1102:Source\FreeRTOS\10.0.1\Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1103:Source\FreeRTOS\10.0.1\Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1104:Source\FreeRTOS\10.0.1\Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1105:Source\FreeRTOS\10.0.1\Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1106:Source\FreeRTOS\10.0.1\Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1107:Source\FreeRTOS\10.0.1\Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1108:Source\FreeRTOS\10.0.1\Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1109:Source\FreeRTOS\10.0.1\Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1110:Source\FreeRTOS\10.0.1\Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1111:Source\FreeRTOS\10.0.1\Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1112:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1113:Source\FreeRTOS\10.0.1\Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1114:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 21


1115:Source\FreeRTOS\10.0.1\Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1116:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1117:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1118:Source\FreeRTOS\10.0.1\Source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1119:Source\FreeRTOS\10.0.1\Source/queue.c **** 		space'. */
1120:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1121:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
1122:Source\FreeRTOS\10.0.1\Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1123:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1124:Source\FreeRTOS\10.0.1\Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1125:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1126:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1127:Source\FreeRTOS\10.0.1\Source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1128:Source\FreeRTOS\10.0.1\Source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1129:Source\FreeRTOS\10.0.1\Source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1130:Source\FreeRTOS\10.0.1\Source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1131:Source\FreeRTOS\10.0.1\Source/queue.c **** 			messages (semaphores) available. */
1132:Source\FreeRTOS\10.0.1\Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1133:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1134:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1135:Source\FreeRTOS\10.0.1\Source/queue.c **** 			be done when the queue is unlocked later. */
1136:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
1137:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1138:Source\FreeRTOS\10.0.1\Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1139:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1140:Source\FreeRTOS\10.0.1\Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1141:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
1142:Source\FreeRTOS\10.0.1\Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1143:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
1144:Source\FreeRTOS\10.0.1\Source/queue.c **** 							/* The semaphore is a member of a queue set, and
1145:Source\FreeRTOS\10.0.1\Source/queue.c **** 							posting	to the queue set caused a higher priority
1146:Source\FreeRTOS\10.0.1\Source/queue.c **** 							task to	unblock.  A context switch is required. */
1147:Source\FreeRTOS\10.0.1\Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1148:Source\FreeRTOS\10.0.1\Source/queue.c **** 							{
1149:Source\FreeRTOS\10.0.1\Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1150:Source\FreeRTOS\10.0.1\Source/queue.c **** 							}
1151:Source\FreeRTOS\10.0.1\Source/queue.c **** 							else
1152:Source\FreeRTOS\10.0.1\Source/queue.c **** 							{
1153:Source\FreeRTOS\10.0.1\Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1154:Source\FreeRTOS\10.0.1\Source/queue.c **** 							}
1155:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
1156:Source\FreeRTOS\10.0.1\Source/queue.c **** 						else
1157:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
1158:Source\FreeRTOS\10.0.1\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1159:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
1160:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
1161:Source\FreeRTOS\10.0.1\Source/queue.c **** 					else
1162:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
1163:Source\FreeRTOS\10.0.1\Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1164:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
1165:Source\FreeRTOS\10.0.1\Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1166:Source\FreeRTOS\10.0.1\Source/queue.c **** 							{
1167:Source\FreeRTOS\10.0.1\Source/queue.c **** 								/* The task waiting has a higher priority so
1168:Source\FreeRTOS\10.0.1\Source/queue.c **** 								record that a context switch is required. */
1169:Source\FreeRTOS\10.0.1\Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1170:Source\FreeRTOS\10.0.1\Source/queue.c **** 								{
1171:Source\FreeRTOS\10.0.1\Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 22


1172:Source\FreeRTOS\10.0.1\Source/queue.c **** 								}
1173:Source\FreeRTOS\10.0.1\Source/queue.c **** 								else
1174:Source\FreeRTOS\10.0.1\Source/queue.c **** 								{
1175:Source\FreeRTOS\10.0.1\Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1176:Source\FreeRTOS\10.0.1\Source/queue.c **** 								}
1177:Source\FreeRTOS\10.0.1\Source/queue.c **** 							}
1178:Source\FreeRTOS\10.0.1\Source/queue.c **** 							else
1179:Source\FreeRTOS\10.0.1\Source/queue.c **** 							{
1180:Source\FreeRTOS\10.0.1\Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1181:Source\FreeRTOS\10.0.1\Source/queue.c **** 							}
1182:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
1183:Source\FreeRTOS\10.0.1\Source/queue.c **** 						else
1184:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
1185:Source\FreeRTOS\10.0.1\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1186:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
1187:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
1188:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1189:Source\FreeRTOS\10.0.1\Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1190:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1191:Source\FreeRTOS\10.0.1\Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1192:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
1193:Source\FreeRTOS\10.0.1\Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1194:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
1195:Source\FreeRTOS\10.0.1\Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1196:Source\FreeRTOS\10.0.1\Source/queue.c **** 							context	switch is required. */
1197:Source\FreeRTOS\10.0.1\Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1198:Source\FreeRTOS\10.0.1\Source/queue.c **** 							{
1199:Source\FreeRTOS\10.0.1\Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1200:Source\FreeRTOS\10.0.1\Source/queue.c **** 							}
1201:Source\FreeRTOS\10.0.1\Source/queue.c **** 							else
1202:Source\FreeRTOS\10.0.1\Source/queue.c **** 							{
1203:Source\FreeRTOS\10.0.1\Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1204:Source\FreeRTOS\10.0.1\Source/queue.c **** 							}
1205:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
1206:Source\FreeRTOS\10.0.1\Source/queue.c **** 						else
1207:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
1208:Source\FreeRTOS\10.0.1\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1209:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
1210:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
1211:Source\FreeRTOS\10.0.1\Source/queue.c **** 					else
1212:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
1213:Source\FreeRTOS\10.0.1\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1214:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
1215:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1216:Source\FreeRTOS\10.0.1\Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1217:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1218:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
1219:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1220:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1221:Source\FreeRTOS\10.0.1\Source/queue.c **** 				knows that data was posted while it was locked. */
1222:Source\FreeRTOS\10.0.1\Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1223:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1224:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1225:Source\FreeRTOS\10.0.1\Source/queue.c **** 			xReturn = pdPASS;
1226:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
1227:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
1228:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 23


1229:Source\FreeRTOS\10.0.1\Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1230:Source\FreeRTOS\10.0.1\Source/queue.c **** 			xReturn = errQUEUE_FULL;
1231:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
1232:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
1233:Source\FreeRTOS\10.0.1\Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1234:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1235:Source\FreeRTOS\10.0.1\Source/queue.c **** 	return xReturn;
1236:Source\FreeRTOS\10.0.1\Source/queue.c **** }
1237:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
1238:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1239:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1240:Source\FreeRTOS\10.0.1\Source/queue.c **** {
1241:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1242:Source\FreeRTOS\10.0.1\Source/queue.c **** TimeOut_t xTimeOut;
1243:Source\FreeRTOS\10.0.1\Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1244:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1245:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* Check the pointer is not NULL. */
1246:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( ( pxQueue ) );
1247:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1248:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1249:Source\FreeRTOS\10.0.1\Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1250:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1251:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1252:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1253:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1254:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
1255:Source\FreeRTOS\10.0.1\Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1256:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
1257:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#endif
1258:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1259:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1260:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1261:Source\FreeRTOS\10.0.1\Source/queue.c **** 	statements within the function itself.  This is done in the interest
1262:Source\FreeRTOS\10.0.1\Source/queue.c **** 	of execution time efficiency. */
1263:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1264:Source\FreeRTOS\10.0.1\Source/queue.c **** 	for( ;; )
1265:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
1266:Source\FreeRTOS\10.0.1\Source/queue.c **** 		taskENTER_CRITICAL();
1267:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
1268:Source\FreeRTOS\10.0.1\Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1269:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1270:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1271:Source\FreeRTOS\10.0.1\Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1272:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1273:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1274:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* Data available, remove one item. */
1275:Source\FreeRTOS\10.0.1\Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1276:Source\FreeRTOS\10.0.1\Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1277:Source\FreeRTOS\10.0.1\Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1278:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1279:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* There is now space in the queue, were any tasks waiting to
1280:Source\FreeRTOS\10.0.1\Source/queue.c **** 				post to the queue?  If so, unblock the highest priority waiting
1281:Source\FreeRTOS\10.0.1\Source/queue.c **** 				task. */
1282:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1283:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1284:Source\FreeRTOS\10.0.1\Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1285:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 24


1286:Source\FreeRTOS\10.0.1\Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1287:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
1288:Source\FreeRTOS\10.0.1\Source/queue.c **** 					else
1289:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
1290:Source\FreeRTOS\10.0.1\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1291:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
1292:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1293:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
1294:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1295:Source\FreeRTOS\10.0.1\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1296:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1297:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1298:Source\FreeRTOS\10.0.1\Source/queue.c **** 				taskEXIT_CRITICAL();
1299:Source\FreeRTOS\10.0.1\Source/queue.c **** 				return pdPASS;
1300:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1301:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
1302:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1303:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1304:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1305:Source\FreeRTOS\10.0.1\Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1306:Source\FreeRTOS\10.0.1\Source/queue.c **** 					the block time has expired) so leave now. */
1307:Source\FreeRTOS\10.0.1\Source/queue.c **** 					taskEXIT_CRITICAL();
1308:Source\FreeRTOS\10.0.1\Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1309:Source\FreeRTOS\10.0.1\Source/queue.c **** 					return errQUEUE_EMPTY;
1310:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1311:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1312:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1313:Source\FreeRTOS\10.0.1\Source/queue.c **** 					/* The queue was empty and a block time was specified so
1314:Source\FreeRTOS\10.0.1\Source/queue.c **** 					configure the timeout structure. */
1315:Source\FreeRTOS\10.0.1\Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1316:Source\FreeRTOS\10.0.1\Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1317:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1318:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
1319:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1320:Source\FreeRTOS\10.0.1\Source/queue.c **** 					/* Entry time was already set. */
1321:Source\FreeRTOS\10.0.1\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1322:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1323:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1324:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
1325:Source\FreeRTOS\10.0.1\Source/queue.c **** 		taskEXIT_CRITICAL();
1326:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1327:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1328:Source\FreeRTOS\10.0.1\Source/queue.c **** 		now the critical section has been exited. */
1329:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1330:Source\FreeRTOS\10.0.1\Source/queue.c **** 		vTaskSuspendAll();
1331:Source\FreeRTOS\10.0.1\Source/queue.c **** 		prvLockQueue( pxQueue );
1332:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1333:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1334:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1335:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
1336:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* The timeout has not expired.  If the queue is still empty place
1337:Source\FreeRTOS\10.0.1\Source/queue.c **** 			the task on the list of tasks waiting to receive from the queue. */
1338:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1339:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1340:Source\FreeRTOS\10.0.1\Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1341:Source\FreeRTOS\10.0.1\Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1342:Source\FreeRTOS\10.0.1\Source/queue.c **** 				prvUnlockQueue( pxQueue );
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 25


1343:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1344:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1345:Source\FreeRTOS\10.0.1\Source/queue.c **** 					portYIELD_WITHIN_API();
1346:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1347:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
1348:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1349:Source\FreeRTOS\10.0.1\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1350:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1351:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1352:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
1353:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1354:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* The queue contains data again.  Loop back to try and read the
1355:Source\FreeRTOS\10.0.1\Source/queue.c **** 				data. */
1356:Source\FreeRTOS\10.0.1\Source/queue.c **** 				prvUnlockQueue( pxQueue );
1357:Source\FreeRTOS\10.0.1\Source/queue.c **** 				( void ) xTaskResumeAll();
1358:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1359:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
1360:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
1361:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
1362:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* Timed out.  If there is no data in the queue exit, otherwise loop
1363:Source\FreeRTOS\10.0.1\Source/queue.c **** 			back and attempt to read the data. */
1364:Source\FreeRTOS\10.0.1\Source/queue.c **** 			prvUnlockQueue( pxQueue );
1365:Source\FreeRTOS\10.0.1\Source/queue.c **** 			( void ) xTaskResumeAll();
1366:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1367:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1368:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1369:Source\FreeRTOS\10.0.1\Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1370:Source\FreeRTOS\10.0.1\Source/queue.c **** 				return errQUEUE_EMPTY;
1371:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1372:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
1373:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1374:Source\FreeRTOS\10.0.1\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1375:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1376:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
1377:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
1378:Source\FreeRTOS\10.0.1\Source/queue.c **** }
1379:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
1380:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1381:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
1382:Source\FreeRTOS\10.0.1\Source/queue.c **** {
1383:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1384:Source\FreeRTOS\10.0.1\Source/queue.c **** TimeOut_t xTimeOut;
1385:Source\FreeRTOS\10.0.1\Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1386:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1387:Source\FreeRTOS\10.0.1\Source/queue.c **** #if( configUSE_MUTEXES == 1 )
1388:Source\FreeRTOS\10.0.1\Source/queue.c **** 	BaseType_t xInheritanceOccurred = pdFALSE;
1389:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif
1390:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1391:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* Check the queue pointer is not NULL. */
1392:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( ( pxQueue ) );
1393:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1394:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* Check this really is a semaphore, in which case the item size will be
1395:Source\FreeRTOS\10.0.1\Source/queue.c **** 	0. */
1396:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1397:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1398:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1399:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 26


1400:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
1401:Source\FreeRTOS\10.0.1\Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1402:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
1403:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#endif
1404:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1405:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1406:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1407:Source\FreeRTOS\10.0.1\Source/queue.c **** 	statements within the function itself.  This is done in the interest
1408:Source\FreeRTOS\10.0.1\Source/queue.c **** 	of execution time efficiency. */
1409:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1410:Source\FreeRTOS\10.0.1\Source/queue.c **** 	for( ;; )
1411:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
1412:Source\FreeRTOS\10.0.1\Source/queue.c **** 		taskENTER_CRITICAL();
1413:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
1414:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* Semaphores are queues with an item size of 0, and where the
1415:Source\FreeRTOS\10.0.1\Source/queue.c **** 			number of messages in the queue is the semaphore's count value. */
1416:Source\FreeRTOS\10.0.1\Source/queue.c **** 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1417:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1418:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1419:Source\FreeRTOS\10.0.1\Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1420:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1421:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1422:Source\FreeRTOS\10.0.1\Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1423:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1424:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* Semaphores are queues with a data size of zero and where the
1425:Source\FreeRTOS\10.0.1\Source/queue.c **** 				messages waiting is the semaphore's count.  Reduce the count. */
1426:Source\FreeRTOS\10.0.1\Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1427:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1428:Source\FreeRTOS\10.0.1\Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1429:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1430:Source\FreeRTOS\10.0.1\Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1431:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
1432:Source\FreeRTOS\10.0.1\Source/queue.c **** 						/* Record the information required to implement
1433:Source\FreeRTOS\10.0.1\Source/queue.c **** 						priority inheritance should it become necessary. */
1434:Source\FreeRTOS\10.0.1\Source/queue.c **** 						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is n
1435:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
1436:Source\FreeRTOS\10.0.1\Source/queue.c **** 					else
1437:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
1438:Source\FreeRTOS\10.0.1\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1439:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
1440:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1441:Source\FreeRTOS\10.0.1\Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1442:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1443:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* Check to see if other tasks are blocked waiting to give the
1444:Source\FreeRTOS\10.0.1\Source/queue.c **** 				semaphore, and if so, unblock the highest priority such task. */
1445:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1446:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1447:Source\FreeRTOS\10.0.1\Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1448:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
1449:Source\FreeRTOS\10.0.1\Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1450:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
1451:Source\FreeRTOS\10.0.1\Source/queue.c **** 					else
1452:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
1453:Source\FreeRTOS\10.0.1\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1454:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
1455:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1456:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 27


1457:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1458:Source\FreeRTOS\10.0.1\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1459:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1460:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1461:Source\FreeRTOS\10.0.1\Source/queue.c **** 				taskEXIT_CRITICAL();
1462:Source\FreeRTOS\10.0.1\Source/queue.c **** 				return pdPASS;
1463:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1464:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
1465:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1466:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1467:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1468:Source\FreeRTOS\10.0.1\Source/queue.c **** 					/* For inheritance to have occurred there must have been an
1469:Source\FreeRTOS\10.0.1\Source/queue.c **** 					initial timeout, and an adjusted timeout cannot become 0, as
1470:Source\FreeRTOS\10.0.1\Source/queue.c **** 					if it were 0 the function would have exited. */
1471:Source\FreeRTOS\10.0.1\Source/queue.c **** 					#if( configUSE_MUTEXES == 1 )
1472:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
1473:Source\FreeRTOS\10.0.1\Source/queue.c **** 						configASSERT( xInheritanceOccurred == pdFALSE );
1474:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
1475:Source\FreeRTOS\10.0.1\Source/queue.c **** 					#endif /* configUSE_MUTEXES */
1476:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1477:Source\FreeRTOS\10.0.1\Source/queue.c **** 					/* The semaphore count was 0 and no block time is specified
1478:Source\FreeRTOS\10.0.1\Source/queue.c **** 					(or the block time has expired) so exit now. */
1479:Source\FreeRTOS\10.0.1\Source/queue.c **** 					taskEXIT_CRITICAL();
1480:Source\FreeRTOS\10.0.1\Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1481:Source\FreeRTOS\10.0.1\Source/queue.c **** 					return errQUEUE_EMPTY;
1482:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1483:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1484:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1485:Source\FreeRTOS\10.0.1\Source/queue.c **** 					/* The semaphore count was 0 and a block time was specified
1486:Source\FreeRTOS\10.0.1\Source/queue.c **** 					so configure the timeout structure ready to block. */
1487:Source\FreeRTOS\10.0.1\Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1488:Source\FreeRTOS\10.0.1\Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1489:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1490:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
1491:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1492:Source\FreeRTOS\10.0.1\Source/queue.c **** 					/* Entry time was already set. */
1493:Source\FreeRTOS\10.0.1\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1494:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1495:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1496:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
1497:Source\FreeRTOS\10.0.1\Source/queue.c **** 		taskEXIT_CRITICAL();
1498:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1499:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* Interrupts and other tasks can give to and take from the semaphore
1500:Source\FreeRTOS\10.0.1\Source/queue.c **** 		now the critical section has been exited. */
1501:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1502:Source\FreeRTOS\10.0.1\Source/queue.c **** 		vTaskSuspendAll();
1503:Source\FreeRTOS\10.0.1\Source/queue.c **** 		prvLockQueue( pxQueue );
1504:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1505:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1506:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1507:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
1508:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* A block time is specified and not expired.  If the semaphore
1509:Source\FreeRTOS\10.0.1\Source/queue.c **** 			count is 0 then enter the Blocked state to wait for a semaphore to
1510:Source\FreeRTOS\10.0.1\Source/queue.c **** 			become available.  As semaphores are implemented with queues the
1511:Source\FreeRTOS\10.0.1\Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1512:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1513:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 28


1514:Source\FreeRTOS\10.0.1\Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1515:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1516:Source\FreeRTOS\10.0.1\Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1517:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1518:Source\FreeRTOS\10.0.1\Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1519:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
1520:Source\FreeRTOS\10.0.1\Source/queue.c **** 						taskENTER_CRITICAL();
1521:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
1522:Source\FreeRTOS\10.0.1\Source/queue.c **** 							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1523:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
1524:Source\FreeRTOS\10.0.1\Source/queue.c **** 						taskEXIT_CRITICAL();
1525:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
1526:Source\FreeRTOS\10.0.1\Source/queue.c **** 					else
1527:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
1528:Source\FreeRTOS\10.0.1\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1529:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
1530:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1531:Source\FreeRTOS\10.0.1\Source/queue.c **** 				#endif
1532:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1533:Source\FreeRTOS\10.0.1\Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1534:Source\FreeRTOS\10.0.1\Source/queue.c **** 				prvUnlockQueue( pxQueue );
1535:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1536:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1537:Source\FreeRTOS\10.0.1\Source/queue.c **** 					portYIELD_WITHIN_API();
1538:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1539:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
1540:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1541:Source\FreeRTOS\10.0.1\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1542:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1543:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1544:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
1545:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1546:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* There was no timeout and the semaphore count was not 0, so
1547:Source\FreeRTOS\10.0.1\Source/queue.c **** 				attempt to take the semaphore again. */
1548:Source\FreeRTOS\10.0.1\Source/queue.c **** 				prvUnlockQueue( pxQueue );
1549:Source\FreeRTOS\10.0.1\Source/queue.c **** 				( void ) xTaskResumeAll();
1550:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1551:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
1552:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
1553:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
1554:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* Timed out. */
1555:Source\FreeRTOS\10.0.1\Source/queue.c **** 			prvUnlockQueue( pxQueue );
1556:Source\FreeRTOS\10.0.1\Source/queue.c **** 			( void ) xTaskResumeAll();
1557:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1558:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* If the semaphore count is 0 exit now as the timeout has
1559:Source\FreeRTOS\10.0.1\Source/queue.c **** 			expired.  Otherwise return to attempt to take the semaphore that is
1560:Source\FreeRTOS\10.0.1\Source/queue.c **** 			known to be available.  As semaphores are implemented by queues the
1561:Source\FreeRTOS\10.0.1\Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1562:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1563:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1564:Source\FreeRTOS\10.0.1\Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1565:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1566:Source\FreeRTOS\10.0.1\Source/queue.c **** 					/* xInheritanceOccurred could only have be set if
1567:Source\FreeRTOS\10.0.1\Source/queue.c **** 					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1568:Source\FreeRTOS\10.0.1\Source/queue.c **** 					test the mutex type again to check it is actually a mutex. */
1569:Source\FreeRTOS\10.0.1\Source/queue.c **** 					if( xInheritanceOccurred != pdFALSE )
1570:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 29


1571:Source\FreeRTOS\10.0.1\Source/queue.c **** 						taskENTER_CRITICAL();
1572:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
1573:Source\FreeRTOS\10.0.1\Source/queue.c **** 							UBaseType_t uxHighestWaitingPriority;
1574:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1575:Source\FreeRTOS\10.0.1\Source/queue.c **** 							/* This task blocking on the mutex caused another
1576:Source\FreeRTOS\10.0.1\Source/queue.c **** 							task to inherit this task's priority.  Now this task
1577:Source\FreeRTOS\10.0.1\Source/queue.c **** 							has timed out the priority should be disinherited
1578:Source\FreeRTOS\10.0.1\Source/queue.c **** 							again, but only as low as the next highest priority
1579:Source\FreeRTOS\10.0.1\Source/queue.c **** 							task that is waiting for the same mutex. */
1580:Source\FreeRTOS\10.0.1\Source/queue.c **** 							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1581:Source\FreeRTOS\10.0.1\Source/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPrio
1582:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
1583:Source\FreeRTOS\10.0.1\Source/queue.c **** 						taskEXIT_CRITICAL();
1584:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
1585:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1586:Source\FreeRTOS\10.0.1\Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1587:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1588:Source\FreeRTOS\10.0.1\Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1589:Source\FreeRTOS\10.0.1\Source/queue.c **** 				return errQUEUE_EMPTY;
1590:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1591:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
1592:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1593:Source\FreeRTOS\10.0.1\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1594:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1595:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
1596:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
1597:Source\FreeRTOS\10.0.1\Source/queue.c **** }
1598:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
1599:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1600:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1601:Source\FreeRTOS\10.0.1\Source/queue.c **** {
1602:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1603:Source\FreeRTOS\10.0.1\Source/queue.c **** TimeOut_t xTimeOut;
1604:Source\FreeRTOS\10.0.1\Source/queue.c **** int8_t *pcOriginalReadPosition;
1605:Source\FreeRTOS\10.0.1\Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1606:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1607:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* Check the pointer is not NULL. */
1608:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( ( pxQueue ) );
1609:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1610:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1611:Source\FreeRTOS\10.0.1\Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1612:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1613:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1614:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1615:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1616:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
1617:Source\FreeRTOS\10.0.1\Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1618:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
1619:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#endif
1620:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1621:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1622:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1623:Source\FreeRTOS\10.0.1\Source/queue.c **** 	statements within the function itself.  This is done in the interest
1624:Source\FreeRTOS\10.0.1\Source/queue.c **** 	of execution time efficiency. */
1625:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1626:Source\FreeRTOS\10.0.1\Source/queue.c **** 	for( ;; )
1627:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 30


1628:Source\FreeRTOS\10.0.1\Source/queue.c **** 		taskENTER_CRITICAL();
1629:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
1630:Source\FreeRTOS\10.0.1\Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1631:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1632:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1633:Source\FreeRTOS\10.0.1\Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1634:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1635:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1636:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* Remember the read position so it can be reset after the data
1637:Source\FreeRTOS\10.0.1\Source/queue.c **** 				is read from the queue as this function is only peeking the
1638:Source\FreeRTOS\10.0.1\Source/queue.c **** 				data, not removing it. */
1639:Source\FreeRTOS\10.0.1\Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1640:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1641:Source\FreeRTOS\10.0.1\Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1642:Source\FreeRTOS\10.0.1\Source/queue.c **** 				traceQUEUE_PEEK( pxQueue );
1643:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1644:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* The data is not being removed, so reset the read pointer. */
1645:Source\FreeRTOS\10.0.1\Source/queue.c **** 				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1646:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1647:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* The data is being left in the queue, so see if there are
1648:Source\FreeRTOS\10.0.1\Source/queue.c **** 				any other tasks waiting for the data. */
1649:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1650:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1651:Source\FreeRTOS\10.0.1\Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1652:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
1653:Source\FreeRTOS\10.0.1\Source/queue.c **** 						/* The task waiting has a higher priority than this task. */
1654:Source\FreeRTOS\10.0.1\Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1655:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
1656:Source\FreeRTOS\10.0.1\Source/queue.c **** 					else
1657:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
1658:Source\FreeRTOS\10.0.1\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1659:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
1660:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1661:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
1662:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1663:Source\FreeRTOS\10.0.1\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1664:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1665:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1666:Source\FreeRTOS\10.0.1\Source/queue.c **** 				taskEXIT_CRITICAL();
1667:Source\FreeRTOS\10.0.1\Source/queue.c **** 				return pdPASS;
1668:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1669:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
1670:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1671:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1672:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1673:Source\FreeRTOS\10.0.1\Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1674:Source\FreeRTOS\10.0.1\Source/queue.c **** 					the block time has expired) so leave now. */
1675:Source\FreeRTOS\10.0.1\Source/queue.c **** 					taskEXIT_CRITICAL();
1676:Source\FreeRTOS\10.0.1\Source/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
1677:Source\FreeRTOS\10.0.1\Source/queue.c **** 					return errQUEUE_EMPTY;
1678:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1679:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1680:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1681:Source\FreeRTOS\10.0.1\Source/queue.c **** 					/* The queue was empty and a block time was specified so
1682:Source\FreeRTOS\10.0.1\Source/queue.c **** 					configure the timeout structure ready to enter the blocked
1683:Source\FreeRTOS\10.0.1\Source/queue.c **** 					state. */
1684:Source\FreeRTOS\10.0.1\Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 31


1685:Source\FreeRTOS\10.0.1\Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1686:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1687:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
1688:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1689:Source\FreeRTOS\10.0.1\Source/queue.c **** 					/* Entry time was already set. */
1690:Source\FreeRTOS\10.0.1\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1691:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1692:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1693:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
1694:Source\FreeRTOS\10.0.1\Source/queue.c **** 		taskEXIT_CRITICAL();
1695:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1696:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1697:Source\FreeRTOS\10.0.1\Source/queue.c **** 		now the critical section has been exited. */
1698:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1699:Source\FreeRTOS\10.0.1\Source/queue.c **** 		vTaskSuspendAll();
1700:Source\FreeRTOS\10.0.1\Source/queue.c **** 		prvLockQueue( pxQueue );
1701:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1702:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1703:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1704:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
1705:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* Timeout has not expired yet, check to see if there is data in the
1706:Source\FreeRTOS\10.0.1\Source/queue.c **** 			queue now, and if not enter the Blocked state to wait for data. */
1707:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1708:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1709:Source\FreeRTOS\10.0.1\Source/queue.c **** 				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1710:Source\FreeRTOS\10.0.1\Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1711:Source\FreeRTOS\10.0.1\Source/queue.c **** 				prvUnlockQueue( pxQueue );
1712:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1713:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1714:Source\FreeRTOS\10.0.1\Source/queue.c **** 					portYIELD_WITHIN_API();
1715:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1716:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
1717:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1718:Source\FreeRTOS\10.0.1\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1719:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1720:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1721:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
1722:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1723:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* There is data in the queue now, so don't enter the blocked
1724:Source\FreeRTOS\10.0.1\Source/queue.c **** 				state, instead return to try and obtain the data. */
1725:Source\FreeRTOS\10.0.1\Source/queue.c **** 				prvUnlockQueue( pxQueue );
1726:Source\FreeRTOS\10.0.1\Source/queue.c **** 				( void ) xTaskResumeAll();
1727:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1728:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
1729:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
1730:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
1731:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* The timeout has expired.  If there is still no data in the queue
1732:Source\FreeRTOS\10.0.1\Source/queue.c **** 			exit, otherwise go back and try to read the data again. */
1733:Source\FreeRTOS\10.0.1\Source/queue.c **** 			prvUnlockQueue( pxQueue );
1734:Source\FreeRTOS\10.0.1\Source/queue.c **** 			( void ) xTaskResumeAll();
1735:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1736:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1737:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1738:Source\FreeRTOS\10.0.1\Source/queue.c **** 				traceQUEUE_PEEK_FAILED( pxQueue );
1739:Source\FreeRTOS\10.0.1\Source/queue.c **** 				return errQUEUE_EMPTY;
1740:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1741:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 32


1742:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1743:Source\FreeRTOS\10.0.1\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1744:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1745:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
1746:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
1747:Source\FreeRTOS\10.0.1\Source/queue.c **** }
1748:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
1749:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1750:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1751:Source\FreeRTOS\10.0.1\Source/queue.c **** {
1752:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xReturn;
1753:Source\FreeRTOS\10.0.1\Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1754:Source\FreeRTOS\10.0.1\Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1755:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1756:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( pxQueue );
1757:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1758:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1759:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1760:Source\FreeRTOS\10.0.1\Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1761:Source\FreeRTOS\10.0.1\Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1762:Source\FreeRTOS\10.0.1\Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1763:Source\FreeRTOS\10.0.1\Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1764:Source\FreeRTOS\10.0.1\Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1765:Source\FreeRTOS\10.0.1\Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1766:Source\FreeRTOS\10.0.1\Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1767:Source\FreeRTOS\10.0.1\Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1768:Source\FreeRTOS\10.0.1\Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1769:Source\FreeRTOS\10.0.1\Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1770:Source\FreeRTOS\10.0.1\Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1771:Source\FreeRTOS\10.0.1\Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1772:Source\FreeRTOS\10.0.1\Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1773:Source\FreeRTOS\10.0.1\Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1774:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1775:Source\FreeRTOS\10.0.1\Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1776:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
1777:Source\FreeRTOS\10.0.1\Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1778:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1779:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1780:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1781:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
1782:Source\FreeRTOS\10.0.1\Source/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1783:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1784:Source\FreeRTOS\10.0.1\Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1785:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1786:Source\FreeRTOS\10.0.1\Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1787:Source\FreeRTOS\10.0.1\Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1788:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1789:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1790:Source\FreeRTOS\10.0.1\Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1791:Source\FreeRTOS\10.0.1\Source/queue.c **** 			will know that an ISR has removed data while the queue was
1792:Source\FreeRTOS\10.0.1\Source/queue.c **** 			locked. */
1793:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( cRxLock == queueUNLOCKED )
1794:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1795:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1796:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1797:Source\FreeRTOS\10.0.1\Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1798:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 33


1799:Source\FreeRTOS\10.0.1\Source/queue.c **** 						/* The task waiting has a higher priority than us so
1800:Source\FreeRTOS\10.0.1\Source/queue.c **** 						force a context switch. */
1801:Source\FreeRTOS\10.0.1\Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1802:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
1803:Source\FreeRTOS\10.0.1\Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1804:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
1805:Source\FreeRTOS\10.0.1\Source/queue.c **** 						else
1806:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
1807:Source\FreeRTOS\10.0.1\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1808:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
1809:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
1810:Source\FreeRTOS\10.0.1\Source/queue.c **** 					else
1811:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
1812:Source\FreeRTOS\10.0.1\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1813:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
1814:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1815:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
1816:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
1817:Source\FreeRTOS\10.0.1\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1818:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
1819:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1820:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
1821:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
1822:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1823:Source\FreeRTOS\10.0.1\Source/queue.c **** 				knows that data was removed while it was locked. */
1824:Source\FreeRTOS\10.0.1\Source/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1825:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
1826:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1827:Source\FreeRTOS\10.0.1\Source/queue.c **** 			xReturn = pdPASS;
1828:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
1829:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
1830:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
1831:Source\FreeRTOS\10.0.1\Source/queue.c **** 			xReturn = pdFAIL;
1832:Source\FreeRTOS\10.0.1\Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1833:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
1834:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
1835:Source\FreeRTOS\10.0.1\Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1836:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1837:Source\FreeRTOS\10.0.1\Source/queue.c **** 	return xReturn;
1838:Source\FreeRTOS\10.0.1\Source/queue.c **** }
1839:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
1840:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1841:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1842:Source\FreeRTOS\10.0.1\Source/queue.c **** {
1843:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xReturn;
1844:Source\FreeRTOS\10.0.1\Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1845:Source\FreeRTOS\10.0.1\Source/queue.c **** int8_t *pcOriginalReadPosition;
1846:Source\FreeRTOS\10.0.1\Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1847:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1848:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( pxQueue );
1849:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1850:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1851:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1852:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1853:Source\FreeRTOS\10.0.1\Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1854:Source\FreeRTOS\10.0.1\Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1855:Source\FreeRTOS\10.0.1\Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 34


1856:Source\FreeRTOS\10.0.1\Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1857:Source\FreeRTOS\10.0.1\Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1858:Source\FreeRTOS\10.0.1\Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1859:Source\FreeRTOS\10.0.1\Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1860:Source\FreeRTOS\10.0.1\Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1861:Source\FreeRTOS\10.0.1\Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1862:Source\FreeRTOS\10.0.1\Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1863:Source\FreeRTOS\10.0.1\Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1864:Source\FreeRTOS\10.0.1\Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1865:Source\FreeRTOS\10.0.1\Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1866:Source\FreeRTOS\10.0.1\Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1867:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1868:Source\FreeRTOS\10.0.1\Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1869:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
1870:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1871:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1872:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
1873:Source\FreeRTOS\10.0.1\Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1874:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1875:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1876:Source\FreeRTOS\10.0.1\Source/queue.c **** 			actually being removed from the queue. */
1877:Source\FreeRTOS\10.0.1\Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1878:Source\FreeRTOS\10.0.1\Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1879:Source\FreeRTOS\10.0.1\Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1880:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1881:Source\FreeRTOS\10.0.1\Source/queue.c **** 			xReturn = pdPASS;
1882:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
1883:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
1884:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
1885:Source\FreeRTOS\10.0.1\Source/queue.c **** 			xReturn = pdFAIL;
1886:Source\FreeRTOS\10.0.1\Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1887:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
1888:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
1889:Source\FreeRTOS\10.0.1\Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1890:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1891:Source\FreeRTOS\10.0.1\Source/queue.c **** 	return xReturn;
1892:Source\FreeRTOS\10.0.1\Source/queue.c **** }
1893:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
1894:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1895:Source\FreeRTOS\10.0.1\Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1896:Source\FreeRTOS\10.0.1\Source/queue.c **** {
1897:Source\FreeRTOS\10.0.1\Source/queue.c **** UBaseType_t uxReturn;
1898:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1899:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( xQueue );
1900:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1901:Source\FreeRTOS\10.0.1\Source/queue.c **** 	taskENTER_CRITICAL();
1902:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
1903:Source\FreeRTOS\10.0.1\Source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1904:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
1905:Source\FreeRTOS\10.0.1\Source/queue.c **** 	taskEXIT_CRITICAL();
1906:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1907:Source\FreeRTOS\10.0.1\Source/queue.c **** 	return uxReturn;
1908:Source\FreeRTOS\10.0.1\Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1909:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
1910:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1911:Source\FreeRTOS\10.0.1\Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1912:Source\FreeRTOS\10.0.1\Source/queue.c **** {
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 35


1913:Source\FreeRTOS\10.0.1\Source/queue.c **** UBaseType_t uxReturn;
1914:Source\FreeRTOS\10.0.1\Source/queue.c **** Queue_t *pxQueue;
1915:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1916:Source\FreeRTOS\10.0.1\Source/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
1917:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( pxQueue );
1918:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1919:Source\FreeRTOS\10.0.1\Source/queue.c **** 	taskENTER_CRITICAL();
1920:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
1921:Source\FreeRTOS\10.0.1\Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1922:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
1923:Source\FreeRTOS\10.0.1\Source/queue.c **** 	taskEXIT_CRITICAL();
1924:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1925:Source\FreeRTOS\10.0.1\Source/queue.c **** 	return uxReturn;
1926:Source\FreeRTOS\10.0.1\Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1927:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
1928:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1929:Source\FreeRTOS\10.0.1\Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1930:Source\FreeRTOS\10.0.1\Source/queue.c **** {
1931:Source\FreeRTOS\10.0.1\Source/queue.c **** UBaseType_t uxReturn;
1932:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1933:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( xQueue );
1934:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1935:Source\FreeRTOS\10.0.1\Source/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1936:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1937:Source\FreeRTOS\10.0.1\Source/queue.c **** 	return uxReturn;
1938:Source\FreeRTOS\10.0.1\Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1939:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
1940:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1941:Source\FreeRTOS\10.0.1\Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1942:Source\FreeRTOS\10.0.1\Source/queue.c **** {
1943:Source\FreeRTOS\10.0.1\Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1944:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1945:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( pxQueue );
1946:Source\FreeRTOS\10.0.1\Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1947:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1948:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1949:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
1950:Source\FreeRTOS\10.0.1\Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1951:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
1952:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#endif
1953:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1954:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1955:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
1956:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1957:Source\FreeRTOS\10.0.1\Source/queue.c **** 		again. */
1958:Source\FreeRTOS\10.0.1\Source/queue.c **** 		vPortFree( pxQueue );
1959:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
1960:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1961:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
1962:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1963:Source\FreeRTOS\10.0.1\Source/queue.c **** 		check before attempting to free the memory. */
1964:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1965:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
1966:Source\FreeRTOS\10.0.1\Source/queue.c **** 			vPortFree( pxQueue );
1967:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
1968:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
1969:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 36


1970:Source\FreeRTOS\10.0.1\Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1971:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
1972:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
1973:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#else
1974:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
1975:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1976:Source\FreeRTOS\10.0.1\Source/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1977:Source\FreeRTOS\10.0.1\Source/queue.c **** 		( void ) pxQueue;
1978:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
1979:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1980:Source\FreeRTOS\10.0.1\Source/queue.c **** }
1981:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
1982:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1983:Source\FreeRTOS\10.0.1\Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1984:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1985:Source\FreeRTOS\10.0.1\Source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1986:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
1987:Source\FreeRTOS\10.0.1\Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1988:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
1989:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1990:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1991:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
1992:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1993:Source\FreeRTOS\10.0.1\Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1994:Source\FreeRTOS\10.0.1\Source/queue.c **** 
1995:Source\FreeRTOS\10.0.1\Source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1996:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
1997:Source\FreeRTOS\10.0.1\Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1998:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
1999:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2000:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2001:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
2002:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2003:Source\FreeRTOS\10.0.1\Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2004:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2005:Source\FreeRTOS\10.0.1\Source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2006:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
2007:Source\FreeRTOS\10.0.1\Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
2008:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
2009:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2010:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2011:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
2012:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2013:Source\FreeRTOS\10.0.1\Source/queue.c **** #if( configUSE_MUTEXES == 1 )
2014:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2015:Source\FreeRTOS\10.0.1\Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2016:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
2017:Source\FreeRTOS\10.0.1\Source/queue.c **** 	UBaseType_t uxHighestPriorityOfWaitingTasks;
2018:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2019:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* If a task waiting for a mutex causes the mutex holder to inherit a
2020:Source\FreeRTOS\10.0.1\Source/queue.c **** 		priority, but the waiting task times out, then the holder should
2021:Source\FreeRTOS\10.0.1\Source/queue.c **** 		disinherit the priority - but only down to the highest priority of any
2022:Source\FreeRTOS\10.0.1\Source/queue.c **** 		other tasks that are waiting for the same mutex.  For this purpose,
2023:Source\FreeRTOS\10.0.1\Source/queue.c **** 		return the priority of the highest priority task that is waiting for the
2024:Source\FreeRTOS\10.0.1\Source/queue.c **** 		mutex. */
2025:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
2026:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 37


2027:Source\FreeRTOS\10.0.1\Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( px
2028:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2029:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
2030:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2031:Source\FreeRTOS\10.0.1\Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
2032:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2033:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2034:Source\FreeRTOS\10.0.1\Source/queue.c **** 		return uxHighestPriorityOfWaitingTasks;
2035:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
2036:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2037:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif /* configUSE_MUTEXES */
2038:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
2039:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2040:Source\FreeRTOS\10.0.1\Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
2041:Source\FreeRTOS\10.0.1\Source/queue.c **** {
2042:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xReturn = pdFALSE;
2043:Source\FreeRTOS\10.0.1\Source/queue.c **** UBaseType_t uxMessagesWaiting;
2044:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2045:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* This function is called from a critical section. */
2046:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2047:Source\FreeRTOS\10.0.1\Source/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2048:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2049:Source\FreeRTOS\10.0.1\Source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2050:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
2051:Source\FreeRTOS\10.0.1\Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
2052:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2053:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2054:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2055:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* The mutex is no longer being held. */
2056:Source\FreeRTOS\10.0.1\Source/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
2057:Source\FreeRTOS\10.0.1\Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
2058:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2059:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
2060:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2061:Source\FreeRTOS\10.0.1\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2062:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2063:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2064:Source\FreeRTOS\10.0.1\Source/queue.c **** 		#endif /* configUSE_MUTEXES */
2065:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
2066:Source\FreeRTOS\10.0.1\Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
2067:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
2068:Source\FreeRTOS\10.0.1\Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
2069:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
2070:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
2071:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2072:Source\FreeRTOS\10.0.1\Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
2073:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2074:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
2075:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2076:Source\FreeRTOS\10.0.1\Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2077:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2078:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
2079:Source\FreeRTOS\10.0.1\Source/queue.c **** 	else
2080:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
2081:Source\FreeRTOS\10.0.1\Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
2082:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
2083:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 38


2084:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2085:Source\FreeRTOS\10.0.1\Source/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
2086:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2087:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
2088:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2089:Source\FreeRTOS\10.0.1\Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2090:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2091:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2092:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( xPosition == queueOVERWRITE )
2093:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2094:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2095:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2096:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
2097:Source\FreeRTOS\10.0.1\Source/queue.c **** 				one from the recorded number of items in the queue so when
2098:Source\FreeRTOS\10.0.1\Source/queue.c **** 				one is added again below the number of recorded items remains
2099:Source\FreeRTOS\10.0.1\Source/queue.c **** 				correct. */
2100:Source\FreeRTOS\10.0.1\Source/queue.c **** 				--uxMessagesWaiting;
2101:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2102:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
2103:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2104:Source\FreeRTOS\10.0.1\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2105:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2106:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2107:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
2108:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2109:Source\FreeRTOS\10.0.1\Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2110:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2111:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
2112:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2113:Source\FreeRTOS\10.0.1\Source/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2114:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2115:Source\FreeRTOS\10.0.1\Source/queue.c **** 	return xReturn;
2116:Source\FreeRTOS\10.0.1\Source/queue.c **** }
2117:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
2118:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2119:Source\FreeRTOS\10.0.1\Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
2120:Source\FreeRTOS\10.0.1\Source/queue.c **** {
2121:Source\FreeRTOS\10.0.1\Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2122:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
2123:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2124:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
2125:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2126:Source\FreeRTOS\10.0.1\Source/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
2127:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2128:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
2129:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2130:Source\FreeRTOS\10.0.1\Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2131:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2132:Source\FreeRTOS\10.0.1\Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
2133:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
2134:Source\FreeRTOS\10.0.1\Source/queue.c **** }
2135:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
2136:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2137:Source\FreeRTOS\10.0.1\Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2138:Source\FreeRTOS\10.0.1\Source/queue.c **** {
2139:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2140:Source\FreeRTOS\10.0.1\Source/queue.c **** 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 39


2141:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
2142:Source\FreeRTOS\10.0.1\Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
2143:Source\FreeRTOS\10.0.1\Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
2144:Source\FreeRTOS\10.0.1\Source/queue.c **** 	updated. */
2145:Source\FreeRTOS\10.0.1\Source/queue.c **** 	taskENTER_CRITICAL();
2146:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
2147:Source\FreeRTOS\10.0.1\Source/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
2148:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2149:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
2150:Source\FreeRTOS\10.0.1\Source/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
2151:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2152:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
2153:Source\FreeRTOS\10.0.1\Source/queue.c **** 			blocked waiting for data to become available? */
2154:Source\FreeRTOS\10.0.1\Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
2155:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2156:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
2157:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
2158:Source\FreeRTOS\10.0.1\Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
2159:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
2160:Source\FreeRTOS\10.0.1\Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
2161:Source\FreeRTOS\10.0.1\Source/queue.c **** 						the queue set caused a higher priority task to unblock.
2162:Source\FreeRTOS\10.0.1\Source/queue.c **** 						A context switch is required. */
2163:Source\FreeRTOS\10.0.1\Source/queue.c **** 						vTaskMissedYield();
2164:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
2165:Source\FreeRTOS\10.0.1\Source/queue.c **** 					else
2166:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
2167:Source\FreeRTOS\10.0.1\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2168:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
2169:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
2170:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
2171:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
2172:Source\FreeRTOS\10.0.1\Source/queue.c **** 					/* Tasks that are removed from the event list will get
2173:Source\FreeRTOS\10.0.1\Source/queue.c **** 					added to the pending ready list as the scheduler is still
2174:Source\FreeRTOS\10.0.1\Source/queue.c **** 					suspended. */
2175:Source\FreeRTOS\10.0.1\Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2176:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
2177:Source\FreeRTOS\10.0.1\Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2178:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
2179:Source\FreeRTOS\10.0.1\Source/queue.c **** 							/* The task waiting has a higher priority so record that a
2180:Source\FreeRTOS\10.0.1\Source/queue.c **** 							context	switch is required. */
2181:Source\FreeRTOS\10.0.1\Source/queue.c **** 							vTaskMissedYield();
2182:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
2183:Source\FreeRTOS\10.0.1\Source/queue.c **** 						else
2184:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
2185:Source\FreeRTOS\10.0.1\Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
2186:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
2187:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
2188:Source\FreeRTOS\10.0.1\Source/queue.c **** 					else
2189:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
2190:Source\FreeRTOS\10.0.1\Source/queue.c **** 						break;
2191:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
2192:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
2193:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2194:Source\FreeRTOS\10.0.1\Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
2195:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2196:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
2197:Source\FreeRTOS\10.0.1\Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 40


2198:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2199:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
2200:Source\FreeRTOS\10.0.1\Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2201:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
2202:Source\FreeRTOS\10.0.1\Source/queue.c **** 						/* The task waiting has a higher priority so record that
2203:Source\FreeRTOS\10.0.1\Source/queue.c **** 						a context switch is required. */
2204:Source\FreeRTOS\10.0.1\Source/queue.c **** 						vTaskMissedYield();
2205:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
2206:Source\FreeRTOS\10.0.1\Source/queue.c **** 					else
2207:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
2208:Source\FreeRTOS\10.0.1\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2209:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
2210:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
2211:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
2212:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
2213:Source\FreeRTOS\10.0.1\Source/queue.c **** 					break;
2214:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
2215:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2216:Source\FreeRTOS\10.0.1\Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
2217:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2218:Source\FreeRTOS\10.0.1\Source/queue.c **** 			--cTxLock;
2219:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2220:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2221:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
2222:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
2223:Source\FreeRTOS\10.0.1\Source/queue.c **** 	taskEXIT_CRITICAL();
2224:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2225:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* Do the same for the Rx lock. */
2226:Source\FreeRTOS\10.0.1\Source/queue.c **** 	taskENTER_CRITICAL();
2227:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
2228:Source\FreeRTOS\10.0.1\Source/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
2229:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2230:Source\FreeRTOS\10.0.1\Source/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
2231:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2232:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2233:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2234:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2235:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
2236:Source\FreeRTOS\10.0.1\Source/queue.c **** 					vTaskMissedYield();
2237:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
2238:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
2239:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
2240:Source\FreeRTOS\10.0.1\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2241:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
2242:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2243:Source\FreeRTOS\10.0.1\Source/queue.c **** 				--cRxLock;
2244:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2245:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
2246:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2247:Source\FreeRTOS\10.0.1\Source/queue.c **** 				break;
2248:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2249:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2250:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2251:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
2252:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
2253:Source\FreeRTOS\10.0.1\Source/queue.c **** 	taskEXIT_CRITICAL();
2254:Source\FreeRTOS\10.0.1\Source/queue.c **** }
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 41


2255:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
2256:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2257:Source\FreeRTOS\10.0.1\Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
2258:Source\FreeRTOS\10.0.1\Source/queue.c **** {
2259:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xReturn;
2260:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2261:Source\FreeRTOS\10.0.1\Source/queue.c **** 	taskENTER_CRITICAL();
2262:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
2263:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
2264:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2265:Source\FreeRTOS\10.0.1\Source/queue.c **** 			xReturn = pdTRUE;
2266:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2267:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
2268:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2269:Source\FreeRTOS\10.0.1\Source/queue.c **** 			xReturn = pdFALSE;
2270:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2271:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
2272:Source\FreeRTOS\10.0.1\Source/queue.c **** 	taskEXIT_CRITICAL();
2273:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2274:Source\FreeRTOS\10.0.1\Source/queue.c **** 	return xReturn;
2275:Source\FreeRTOS\10.0.1\Source/queue.c **** }
2276:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
2277:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2278:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2279:Source\FreeRTOS\10.0.1\Source/queue.c **** {
2280:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xReturn;
2281:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2282:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( xQueue );
2283:Source\FreeRTOS\10.0.1\Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
2284:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
2285:Source\FreeRTOS\10.0.1\Source/queue.c **** 		xReturn = pdTRUE;
2286:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
2287:Source\FreeRTOS\10.0.1\Source/queue.c **** 	else
2288:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
2289:Source\FreeRTOS\10.0.1\Source/queue.c **** 		xReturn = pdFALSE;
2290:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
2291:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2292:Source\FreeRTOS\10.0.1\Source/queue.c **** 	return xReturn;
2293:Source\FreeRTOS\10.0.1\Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2294:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
2295:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2296:Source\FreeRTOS\10.0.1\Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2297:Source\FreeRTOS\10.0.1\Source/queue.c **** {
  27              		.loc 1 2297 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 10B5     		push	{r4, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  36 0002 0400     		movs	r4, r0
2298:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xReturn;
2299:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2300:Source\FreeRTOS\10.0.1\Source/queue.c **** 	taskENTER_CRITICAL();
  37              		.loc 1 2300 0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 42


  38 0004 FFF7FEFF 		bl	vPortEnterCritical
  39              	.LVL1:
2301:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
2302:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  40              		.loc 1 2302 0
  41 0008 A26B     		ldr	r2, [r4, #56]
  42 000a E36B     		ldr	r3, [r4, #60]
  43 000c 9A42     		cmp	r2, r3
  44 000e 01D1     		bne	.L3
2303:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2304:Source\FreeRTOS\10.0.1\Source/queue.c **** 			xReturn = pdTRUE;
  45              		.loc 1 2304 0
  46 0010 0124     		movs	r4, #1
  47              	.LVL2:
  48 0012 00E0     		b	.L2
  49              	.LVL3:
  50              	.L3:
2305:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2306:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
2307:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2308:Source\FreeRTOS\10.0.1\Source/queue.c **** 			xReturn = pdFALSE;
  51              		.loc 1 2308 0
  52 0014 0024     		movs	r4, #0
  53              	.LVL4:
  54              	.L2:
2309:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2310:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
2311:Source\FreeRTOS\10.0.1\Source/queue.c **** 	taskEXIT_CRITICAL();
  55              		.loc 1 2311 0
  56 0016 FFF7FEFF 		bl	vPortExitCritical
  57              	.LVL5:
2312:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2313:Source\FreeRTOS\10.0.1\Source/queue.c **** 	return xReturn;
2314:Source\FreeRTOS\10.0.1\Source/queue.c **** }
  58              		.loc 1 2314 0
  59 001a 2000     		movs	r0, r4
  60              		@ sp needed
  61              	.LVL6:
  62 001c 10BD     		pop	{r4, pc}
  63              		.cfi_endproc
  64              	.LFE59:
  65              		.size	prvIsQueueFull, .-prvIsQueueFull
  66 001e C046     		.section	.text.prvIsQueueEmpty,"ax",%progbits
  67              		.align	2
  68              		.code	16
  69              		.thumb_func
  70              		.type	prvIsQueueEmpty, %function
  71              	prvIsQueueEmpty:
  72              	.LFB57:
2258:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xReturn;
  73              		.loc 1 2258 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              	.LVL7:
  78 0000 10B5     		push	{r4, lr}
  79              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 43


  80              		.cfi_offset 4, -8
  81              		.cfi_offset 14, -4
  82 0002 0400     		movs	r4, r0
2261:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
  83              		.loc 1 2261 0
  84 0004 FFF7FEFF 		bl	vPortEnterCritical
  85              	.LVL8:
2263:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
  86              		.loc 1 2263 0
  87 0008 A36B     		ldr	r3, [r4, #56]
  88 000a 002B     		cmp	r3, #0
  89 000c 01D1     		bne	.L6
2265:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
  90              		.loc 1 2265 0
  91 000e 0124     		movs	r4, #1
  92              	.LVL9:
  93 0010 00E0     		b	.L5
  94              	.LVL10:
  95              	.L6:
2269:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
  96              		.loc 1 2269 0
  97 0012 0024     		movs	r4, #0
  98              	.LVL11:
  99              	.L5:
2272:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 100              		.loc 1 2272 0
 101 0014 FFF7FEFF 		bl	vPortExitCritical
 102              	.LVL12:
2275:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 103              		.loc 1 2275 0
 104 0018 2000     		movs	r0, r4
 105              		@ sp needed
 106              	.LVL13:
 107 001a 10BD     		pop	{r4, pc}
 108              		.cfi_endproc
 109              	.LFE57:
 110              		.size	prvIsQueueEmpty, .-prvIsQueueEmpty
 111              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 112              		.align	2
 113              		.code	16
 114              		.thumb_func
 115              		.type	prvCopyDataToQueue, %function
 116              	prvCopyDataToQueue:
 117              	.LFB54:
2041:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xReturn = pdFALSE;
 118              		.loc 1 2041 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              	.LVL14:
 123 0000 70B5     		push	{r4, r5, r6, lr}
 124              		.cfi_def_cfa_offset 16
 125              		.cfi_offset 4, -16
 126              		.cfi_offset 5, -12
 127              		.cfi_offset 6, -8
 128              		.cfi_offset 14, -4
 129 0002 0400     		movs	r4, r0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 44


 130 0004 1600     		movs	r6, r2
 131              	.LVL15:
2047:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 132              		.loc 1 2047 0
 133 0006 856B     		ldr	r5, [r0, #56]
 134              	.LVL16:
2049:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 135              		.loc 1 2049 0
 136 0008 026C     		ldr	r2, [r0, #64]
 137              	.LVL17:
 138 000a 002A     		cmp	r2, #0
 139 000c 23D0     		beq	.L8
2066:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 140              		.loc 1 2066 0
 141 000e 002E     		cmp	r6, #0
 142 0010 0DD1     		bne	.L9
2068:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 143              		.loc 1 2068 0
 144 0012 8068     		ldr	r0, [r0, #8]
 145              	.LVL18:
 146 0014 FFF7FEFF 		bl	memcpy
 147              	.LVL19:
2069:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 148              		.loc 1 2069 0
 149 0018 A368     		ldr	r3, [r4, #8]
 150 001a 226C     		ldr	r2, [r4, #64]
 151 001c 9446     		mov	ip, r2
 152 001e 6344     		add	r3, r3, ip
 153 0020 A360     		str	r3, [r4, #8]
2070:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 154              		.loc 1 2070 0
 155 0022 6268     		ldr	r2, [r4, #4]
 156 0024 9342     		cmp	r3, r2
 157 0026 16D3     		bcc	.L8
2072:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 158              		.loc 1 2072 0
 159 0028 2368     		ldr	r3, [r4]
 160 002a A360     		str	r3, [r4, #8]
 161 002c 13E0     		b	.L8
 162              	.LVL20:
 163              	.L9:
2081:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 164              		.loc 1 2081 0
 165 002e C068     		ldr	r0, [r0, #12]
 166              	.LVL21:
 167 0030 FFF7FEFF 		bl	memcpy
 168              	.LVL22:
2082:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 169              		.loc 1 2082 0
 170 0034 236C     		ldr	r3, [r4, #64]
 171 0036 5B42     		rsbs	r3, r3, #0
 172 0038 E268     		ldr	r2, [r4, #12]
 173 003a D218     		adds	r2, r2, r3
 174 003c E260     		str	r2, [r4, #12]
2083:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 175              		.loc 1 2083 0
 176 003e 2168     		ldr	r1, [r4]
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 45


 177 0040 8A42     		cmp	r2, r1
 178 0042 03D2     		bcs	.L10
2085:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 179              		.loc 1 2085 0
 180 0044 6268     		ldr	r2, [r4, #4]
 181 0046 9446     		mov	ip, r2
 182 0048 6344     		add	r3, r3, ip
 183 004a E360     		str	r3, [r4, #12]
 184              	.L10:
2092:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 185              		.loc 1 2092 0
 186 004c 022E     		cmp	r6, #2
 187 004e 02D1     		bne	.L8
2094:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 188              		.loc 1 2094 0
 189 0050 002D     		cmp	r5, #0
 190 0052 00D0     		beq	.L8
2100:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 191              		.loc 1 2100 0
 192 0054 013D     		subs	r5, r5, #1
 193              	.LVL23:
 194              	.L8:
2113:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 195              		.loc 1 2113 0
 196 0056 0135     		adds	r5, r5, #1
 197              	.LVL24:
 198 0058 A563     		str	r5, [r4, #56]
2116:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 199              		.loc 1 2116 0
 200 005a 0020     		movs	r0, #0
 201              		@ sp needed
 202              	.LVL25:
 203              	.LVL26:
 204              	.LVL27:
 205 005c 70BD     		pop	{r4, r5, r6, pc}
 206              		.cfi_endproc
 207              	.LFE54:
 208              		.size	prvCopyDataToQueue, .-prvCopyDataToQueue
 209 005e C046     		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 210              		.align	2
 211              		.code	16
 212              		.thumb_func
 213              		.type	prvCopyDataFromQueue, %function
 214              	prvCopyDataFromQueue:
 215              	.LFB55:
2120:Source\FreeRTOS\10.0.1\Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 216              		.loc 1 2120 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220              	.LVL28:
 221 0000 10B5     		push	{r4, lr}
 222              		.cfi_def_cfa_offset 8
 223              		.cfi_offset 4, -8
 224              		.cfi_offset 14, -4
 225 0002 0C00     		movs	r4, r1
2121:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 46


 226              		.loc 1 2121 0
 227 0004 026C     		ldr	r2, [r0, #64]
 228 0006 002A     		cmp	r2, #0
 229 0008 0BD0     		beq	.L11
2123:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 230              		.loc 1 2123 0
 231 000a C368     		ldr	r3, [r0, #12]
 232 000c 9B18     		adds	r3, r3, r2
 233 000e C360     		str	r3, [r0, #12]
2124:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 234              		.loc 1 2124 0
 235 0010 4168     		ldr	r1, [r0, #4]
 236              	.LVL29:
 237 0012 8B42     		cmp	r3, r1
 238 0014 01D3     		bcc	.L13
2126:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 239              		.loc 1 2126 0
 240 0016 0368     		ldr	r3, [r0]
 241 0018 C360     		str	r3, [r0, #12]
 242              	.L13:
2132:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 243              		.loc 1 2132 0
 244 001a C168     		ldr	r1, [r0, #12]
 245 001c 2000     		movs	r0, r4
 246              	.LVL30:
 247 001e FFF7FEFF 		bl	memcpy
 248              	.LVL31:
 249              	.L11:
2134:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 250              		.loc 1 2134 0
 251              		@ sp needed
 252              	.LVL32:
 253 0022 10BD     		pop	{r4, pc}
 254              		.cfi_endproc
 255              	.LFE55:
 256              		.size	prvCopyDataFromQueue, .-prvCopyDataFromQueue
 257              		.section	.text.prvUnlockQueue,"ax",%progbits
 258              		.align	2
 259              		.code	16
 260              		.thumb_func
 261              		.type	prvUnlockQueue, %function
 262              	prvUnlockQueue:
 263              	.LFB56:
2138:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 264              		.loc 1 2138 0
 265              		.cfi_startproc
 266              		@ args = 0, pretend = 0, frame = 0
 267              		@ frame_needed = 0, uses_anonymous_args = 0
 268              	.LVL33:
 269 0000 70B5     		push	{r4, r5, r6, lr}
 270              		.cfi_def_cfa_offset 16
 271              		.cfi_offset 4, -16
 272              		.cfi_offset 5, -12
 273              		.cfi_offset 6, -8
 274              		.cfi_offset 14, -4
 275 0002 0500     		movs	r5, r0
2145:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 47


 276              		.loc 1 2145 0
 277 0004 FFF7FEFF 		bl	vPortEnterCritical
 278              	.LVL34:
 279              	.LBB2:
2147:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 280              		.loc 1 2147 0
 281 0008 4523     		movs	r3, #69
 282 000a EC5C     		ldrb	r4, [r5, r3]
 283 000c 64B2     		sxtb	r4, r4
 284              	.LVL35:
2150:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 285              		.loc 1 2150 0
 286 000e 0CE0     		b	.L15
 287              	.L18:
2198:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 288              		.loc 1 2198 0
 289 0010 6B6A     		ldr	r3, [r5, #36]
 290 0012 002B     		cmp	r3, #0
 291 0014 0BD0     		beq	.L16
2200:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
 292              		.loc 1 2200 0
 293 0016 2800     		movs	r0, r5
 294 0018 2430     		adds	r0, r0, #36
 295 001a FFF7FEFF 		bl	xTaskRemoveFromEventList
 296              	.LVL36:
 297 001e 0028     		cmp	r0, #0
 298 0020 01D0     		beq	.L17
2204:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
 299              		.loc 1 2204 0
 300 0022 FFF7FEFF 		bl	vTaskMissedYield
 301              	.LVL37:
 302              	.L17:
2218:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 303              		.loc 1 2218 0
 304 0026 013C     		subs	r4, r4, #1
 305              	.LVL38:
 306 0028 64B2     		sxtb	r4, r4
 307              	.LVL39:
 308              	.L15:
2150:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 309              		.loc 1 2150 0
 310 002a 002C     		cmp	r4, #0
 311 002c F0DC     		bgt	.L18
 312              	.L16:
2221:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 313              		.loc 1 2221 0
 314 002e FF22     		movs	r2, #255
 315 0030 4523     		movs	r3, #69
 316 0032 EA54     		strb	r2, [r5, r3]
 317              	.LBE2:
2223:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 318              		.loc 1 2223 0
 319 0034 FFF7FEFF 		bl	vPortExitCritical
 320              	.LVL40:
2226:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 321              		.loc 1 2226 0
 322 0038 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 48


 323              	.LVL41:
 324              	.LBB3:
2228:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 325              		.loc 1 2228 0
 326 003c 4423     		movs	r3, #68
 327 003e EC5C     		ldrb	r4, [r5, r3]
 328              	.LVL42:
 329 0040 64B2     		sxtb	r4, r4
 330              	.LVL43:
2230:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 331              		.loc 1 2230 0
 332 0042 0CE0     		b	.L19
 333              	.L22:
2232:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 334              		.loc 1 2232 0
 335 0044 2B69     		ldr	r3, [r5, #16]
 336 0046 002B     		cmp	r3, #0
 337 0048 0BD0     		beq	.L20
2234:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 338              		.loc 1 2234 0
 339 004a 2800     		movs	r0, r5
 340 004c 1030     		adds	r0, r0, #16
 341 004e FFF7FEFF 		bl	xTaskRemoveFromEventList
 342              	.LVL44:
 343 0052 0028     		cmp	r0, #0
 344 0054 01D0     		beq	.L21
2236:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 345              		.loc 1 2236 0
 346 0056 FFF7FEFF 		bl	vTaskMissedYield
 347              	.LVL45:
 348              	.L21:
2243:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 349              		.loc 1 2243 0
 350 005a 013C     		subs	r4, r4, #1
 351              	.LVL46:
 352 005c 64B2     		sxtb	r4, r4
 353              	.LVL47:
 354              	.L19:
2230:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 355              		.loc 1 2230 0
 356 005e 002C     		cmp	r4, #0
 357 0060 F0DC     		bgt	.L22
 358              	.L20:
2251:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 359              		.loc 1 2251 0
 360 0062 FF22     		movs	r2, #255
 361 0064 4423     		movs	r3, #68
 362 0066 EA54     		strb	r2, [r5, r3]
 363              	.LBE3:
2253:Source\FreeRTOS\10.0.1\Source/queue.c **** }
 364              		.loc 1 2253 0
 365 0068 FFF7FEFF 		bl	vPortExitCritical
 366              	.LVL48:
2254:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 367              		.loc 1 2254 0
 368              		@ sp needed
 369              	.LVL49:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 49


 370              	.LVL50:
 371 006c 70BD     		pop	{r4, r5, r6, pc}
 372              		.cfi_endproc
 373              	.LFE56:
 374              		.size	prvUnlockQueue, .-prvUnlockQueue
 375 006e C046     		.section	.text.xQueueGenericReset,"ax",%progbits
 376              		.align	2
 377              		.global	xQueueGenericReset
 378              		.code	16
 379              		.thumb_func
 380              		.type	xQueueGenericReset, %function
 381              	xQueueGenericReset:
 382              	.LFB36:
 248:Source\FreeRTOS\10.0.1\Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 383              		.loc 1 248 0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 0
 386              		@ frame_needed = 0, uses_anonymous_args = 0
 387              	.LVL51:
 388 0000 70B5     		push	{r4, r5, r6, lr}
 389              		.cfi_def_cfa_offset 16
 390              		.cfi_offset 4, -16
 391              		.cfi_offset 5, -12
 392              		.cfi_offset 6, -8
 393              		.cfi_offset 14, -4
 394 0002 0400     		movs	r4, r0
 395 0004 0D00     		movs	r5, r1
 396              	.LVL52:
 251:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 397              		.loc 1 251 0
 398 0006 0028     		cmp	r0, #0
 399 0008 01D1     		bne	.L24
 251:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 400              		.loc 1 251 0 is_stmt 0 discriminator 1
 401              		.syntax divided
 402              	@ 251 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 403 000a 72B6     		 cpsid i 
 404              	@ 0 "" 2
 405              		.thumb
 406              		.syntax unified
 407              	.L25:
 408 000c FEE7     		b	.L25
 409              	.L24:
 253:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 410              		.loc 1 253 0 is_stmt 1
 411 000e FFF7FEFF 		bl	vPortEnterCritical
 412              	.LVL53:
 255:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 413              		.loc 1 255 0
 414 0012 2268     		ldr	r2, [r4]
 415 0014 E36B     		ldr	r3, [r4, #60]
 416 0016 206C     		ldr	r0, [r4, #64]
 417 0018 0100     		movs	r1, r0
 418 001a 5943     		muls	r1, r3
 419 001c 5118     		adds	r1, r2, r1
 420 001e 6160     		str	r1, [r4, #4]
 256:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 50


 421              		.loc 1 256 0
 422 0020 0021     		movs	r1, #0
 423 0022 A163     		str	r1, [r4, #56]
 257:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 424              		.loc 1 257 0
 425 0024 A260     		str	r2, [r4, #8]
 258:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 426              		.loc 1 258 0
 427 0026 013B     		subs	r3, r3, #1
 428 0028 4343     		muls	r3, r0
 429 002a D318     		adds	r3, r2, r3
 430 002c E360     		str	r3, [r4, #12]
 259:Source\FreeRTOS\10.0.1\Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 431              		.loc 1 259 0
 432 002e FF23     		movs	r3, #255
 433 0030 4422     		movs	r2, #68
 434 0032 A354     		strb	r3, [r4, r2]
 260:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 435              		.loc 1 260 0
 436 0034 0132     		adds	r2, r2, #1
 437 0036 A354     		strb	r3, [r4, r2]
 262:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 438              		.loc 1 262 0
 439 0038 002D     		cmp	r5, #0
 440 003a 0BD1     		bne	.L26
 269:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 441              		.loc 1 269 0
 442 003c 2369     		ldr	r3, [r4, #16]
 443 003e 002B     		cmp	r3, #0
 444 0040 10D0     		beq	.L27
 271:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 445              		.loc 1 271 0
 446 0042 2000     		movs	r0, r4
 447 0044 1030     		adds	r0, r0, #16
 448 0046 FFF7FEFF 		bl	xTaskRemoveFromEventList
 449              	.LVL54:
 450 004a 0028     		cmp	r0, #0
 451 004c 0AD0     		beq	.L27
 273:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 452              		.loc 1 273 0
 453 004e FFF7FEFF 		bl	vPortYield
 454              	.LVL55:
 455 0052 07E0     		b	.L27
 456              	.L26:
 288:Source\FreeRTOS\10.0.1\Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 457              		.loc 1 288 0
 458 0054 2000     		movs	r0, r4
 459 0056 1030     		adds	r0, r0, #16
 460 0058 FFF7FEFF 		bl	vListInitialise
 461              	.LVL56:
 289:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 462              		.loc 1 289 0
 463 005c 2000     		movs	r0, r4
 464 005e 2430     		adds	r0, r0, #36
 465 0060 FFF7FEFF 		bl	vListInitialise
 466              	.LVL57:
 467              	.L27:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 51


 292:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 468              		.loc 1 292 0
 469 0064 FFF7FEFF 		bl	vPortExitCritical
 470              	.LVL58:
 297:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 471              		.loc 1 297 0
 472 0068 0120     		movs	r0, #1
 473              		@ sp needed
 474              	.LVL59:
 475              	.LVL60:
 476 006a 70BD     		pop	{r4, r5, r6, pc}
 477              		.cfi_endproc
 478              	.LFE36:
 479              		.size	xQueueGenericReset, .-xQueueGenericReset
 480              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 481              		.align	2
 482              		.code	16
 483              		.thumb_func
 484              		.type	prvInitialiseNewQueue, %function
 485              	prvInitialiseNewQueue:
 486              	.LFB38:
 409:Source\FreeRTOS\10.0.1\Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 487              		.loc 1 409 0
 488              		.cfi_startproc
 489              		@ args = 4, pretend = 0, frame = 0
 490              		@ frame_needed = 0, uses_anonymous_args = 0
 491              	.LVL61:
 492 0000 70B5     		push	{r4, r5, r6, lr}
 493              		.cfi_def_cfa_offset 16
 494              		.cfi_offset 4, -16
 495              		.cfi_offset 5, -12
 496              		.cfi_offset 6, -8
 497              		.cfi_offset 14, -4
 498 0002 1D00     		movs	r5, r3
 499 0004 049C     		ldr	r4, [sp, #16]
 414:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 500              		.loc 1 414 0
 501 0006 0029     		cmp	r1, #0
 502 0008 01D1     		bne	.L29
 420:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 503              		.loc 1 420 0
 504 000a 2460     		str	r4, [r4]
 505 000c 00E0     		b	.L30
 506              	.L29:
 425:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 507              		.loc 1 425 0
 508 000e 2260     		str	r2, [r4]
 509              	.L30:
 430:Source\FreeRTOS\10.0.1\Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 510              		.loc 1 430 0
 511 0010 E063     		str	r0, [r4, #60]
 431:Source\FreeRTOS\10.0.1\Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 512              		.loc 1 431 0
 513 0012 2164     		str	r1, [r4, #64]
 432:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 514              		.loc 1 432 0
 515 0014 0121     		movs	r1, #1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 52


 516              	.LVL62:
 517 0016 2000     		movs	r0, r4
 518              	.LVL63:
 519 0018 FFF7FEFF 		bl	xQueueGenericReset
 520              	.LVL64:
 436:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 521              		.loc 1 436 0
 522 001c 4C23     		movs	r3, #76
 523 001e E554     		strb	r5, [r4, r3]
 447:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 524              		.loc 1 447 0
 525              		@ sp needed
 526 0020 70BD     		pop	{r4, r5, r6, pc}
 527              		.cfi_endproc
 528              	.LFE38:
 529              		.size	prvInitialiseNewQueue, .-prvInitialiseNewQueue
 530 0022 C046     		.section	.text.xQueueGenericCreate,"ax",%progbits
 531              		.align	2
 532              		.global	xQueueGenericCreate
 533              		.code	16
 534              		.thumb_func
 535              		.type	xQueueGenericCreate, %function
 536              	xQueueGenericCreate:
 537              	.LFB37:
 359:Source\FreeRTOS\10.0.1\Source/queue.c **** 	Queue_t *pxNewQueue;
 538              		.loc 1 359 0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 0
 541              		@ frame_needed = 0, uses_anonymous_args = 0
 542              	.LVL65:
 543 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 544              		.cfi_def_cfa_offset 20
 545              		.cfi_offset 4, -20
 546              		.cfi_offset 5, -16
 547              		.cfi_offset 6, -12
 548              		.cfi_offset 7, -8
 549              		.cfi_offset 14, -4
 550 0002 83B0     		sub	sp, sp, #12
 551              		.cfi_def_cfa_offset 32
 552 0004 0600     		movs	r6, r0
 553 0006 0F00     		movs	r7, r1
 554 0008 1500     		movs	r5, r2
 364:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 555              		.loc 1 364 0
 556 000a 0028     		cmp	r0, #0
 557 000c 01D1     		bne	.L32
 364:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 558              		.loc 1 364 0 is_stmt 0 discriminator 1
 559              		.syntax divided
 560              	@ 364 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 561 000e 72B6     		 cpsid i 
 562              	@ 0 "" 2
 563              		.thumb
 564              		.syntax unified
 565              	.L33:
 566 0010 FEE7     		b	.L33
 567              	.L32:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 53


 366:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 568              		.loc 1 366 0 is_stmt 1
 569 0012 0029     		cmp	r1, #0
 570 0014 02D0     		beq	.L36
 375:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 571              		.loc 1 375 0
 572 0016 0800     		movs	r0, r1
 573              	.LVL66:
 574 0018 7043     		muls	r0, r6
 575              	.LVL67:
 576 001a 00E0     		b	.L34
 577              	.LVL68:
 578              	.L36:
 369:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 579              		.loc 1 369 0
 580 001c 0020     		movs	r0, #0
 581              	.LVL69:
 582              	.L34:
 378:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 583              		.loc 1 378 0
 584 001e 5030     		adds	r0, r0, #80
 585              	.LVL70:
 586 0020 FFF7FEFF 		bl	pvPortMalloc
 587              	.LVL71:
 588 0024 041E     		subs	r4, r0, #0
 589              	.LVL72:
 380:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 590              		.loc 1 380 0
 591 0026 07D0     		beq	.L35
 384:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 592              		.loc 1 384 0
 593 0028 0200     		movs	r2, r0
 594 002a 5032     		adds	r2, r2, #80
 395:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 595              		.loc 1 395 0
 596 002c 0090     		str	r0, [sp]
 597 002e 2B00     		movs	r3, r5
 598 0030 3900     		movs	r1, r7
 599 0032 3000     		movs	r0, r6
 600              	.LVL73:
 601 0034 FFF7FEFF 		bl	prvInitialiseNewQueue
 602              	.LVL74:
 603              	.L35:
 403:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 604              		.loc 1 403 0
 605 0038 2000     		movs	r0, r4
 606 003a 03B0     		add	sp, sp, #12
 607              		@ sp needed
 608              	.LVL75:
 609              	.LVL76:
 610              	.LVL77:
 611 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 612              		.cfi_endproc
 613              	.LFE37:
 614              		.size	xQueueGenericCreate, .-xQueueGenericCreate
 615 003e C046     		.section	.text.xQueueGenericSend,"ax",%progbits
 616              		.align	2
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 54


 617              		.global	xQueueGenericSend
 618              		.code	16
 619              		.thumb_func
 620              		.type	xQueueGenericSend, %function
 621              	xQueueGenericSend:
 622              	.LFB39:
 726:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 623              		.loc 1 726 0
 624              		.cfi_startproc
 625              		@ args = 0, pretend = 0, frame = 16
 626              		@ frame_needed = 0, uses_anonymous_args = 0
 627              	.LVL78:
 628 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 629              		.cfi_def_cfa_offset 20
 630              		.cfi_offset 4, -20
 631              		.cfi_offset 5, -16
 632              		.cfi_offset 6, -12
 633              		.cfi_offset 7, -8
 634              		.cfi_offset 14, -4
 635 0002 85B0     		sub	sp, sp, #20
 636              		.cfi_def_cfa_offset 40
 637 0004 0400     		movs	r4, r0
 638 0006 0E00     		movs	r6, r1
 639 0008 0192     		str	r2, [sp, #4]
 640 000a 1D00     		movs	r5, r3
 641              	.LVL79:
 731:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 642              		.loc 1 731 0
 643 000c 0028     		cmp	r0, #0
 644 000e 01D1     		bne	.L38
 731:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 645              		.loc 1 731 0 is_stmt 0 discriminator 1
 646              		.syntax divided
 647              	@ 731 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 648 0010 72B6     		 cpsid i 
 649              	@ 0 "" 2
 650              		.thumb
 651              		.syntax unified
 652              	.L39:
 653 0012 FEE7     		b	.L39
 654              	.L38:
 732:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 655              		.loc 1 732 0 is_stmt 1
 656 0014 0029     		cmp	r1, #0
 657 0016 04D1     		bne	.L61
 732:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 658              		.loc 1 732 0 is_stmt 0 discriminator 2
 659 0018 036C     		ldr	r3, [r0, #64]
 660              	.LVL80:
 661 001a 002B     		cmp	r3, #0
 662 001c 03D1     		bne	.L62
 732:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 663              		.loc 1 732 0
 664 001e 0133     		adds	r3, r3, #1
 665 0020 02E0     		b	.L40
 666              	.LVL81:
 667              	.L61:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 55


 668 0022 0123     		movs	r3, #1
 669              	.LVL82:
 670 0024 00E0     		b	.L40
 671              	.L62:
 672 0026 0023     		movs	r3, #0
 673              	.L40:
 732:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 674              		.loc 1 732 0 discriminator 6
 675 0028 002B     		cmp	r3, #0
 676 002a 01D1     		bne	.L41
 732:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 677              		.loc 1 732 0 discriminator 7
 678              		.syntax divided
 679              	@ 732 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 680 002c 72B6     		 cpsid i 
 681              	@ 0 "" 2
 682              		.thumb
 683              		.syntax unified
 684              	.L42:
 685 002e FEE7     		b	.L42
 686              	.L41:
 733:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 687              		.loc 1 733 0 is_stmt 1
 688 0030 022D     		cmp	r5, #2
 689 0032 03D1     		bne	.L63
 733:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 690              		.loc 1 733 0 is_stmt 0 discriminator 2
 691 0034 E36B     		ldr	r3, [r4, #60]
 692 0036 012B     		cmp	r3, #1
 693 0038 02D1     		bne	.L64
 694 003a 02E0     		b	.L43
 695              	.L63:
 733:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 696              		.loc 1 733 0
 697 003c 0123     		movs	r3, #1
 698 003e 00E0     		b	.L43
 699              	.L64:
 700 0040 0023     		movs	r3, #0
 701              	.L43:
 733:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 702              		.loc 1 733 0 discriminator 6
 703 0042 002B     		cmp	r3, #0
 704 0044 01D1     		bne	.L44
 733:Source\FreeRTOS\10.0.1\Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 705              		.loc 1 733 0 discriminator 7
 706              		.syntax divided
 707              	@ 733 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 708 0046 72B6     		 cpsid i 
 709              	@ 0 "" 2
 710              		.thumb
 711              		.syntax unified
 712              	.L45:
 713 0048 FEE7     		b	.L45
 714              	.L44:
 736:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 715              		.loc 1 736 0 is_stmt 1
 716 004a FFF7FEFF 		bl	xTaskGetSchedulerState
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 56


 717              	.LVL83:
 718 004e 0028     		cmp	r0, #0
 719 0050 04D1     		bne	.L65
 736:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 720              		.loc 1 736 0 is_stmt 0 discriminator 2
 721 0052 019B     		ldr	r3, [sp, #4]
 722 0054 002B     		cmp	r3, #0
 723 0056 03D1     		bne	.L66
 736:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 724              		.loc 1 736 0
 725 0058 0133     		adds	r3, r3, #1
 726 005a 02E0     		b	.L46
 727              	.L65:
 728 005c 0123     		movs	r3, #1
 729 005e 00E0     		b	.L46
 730              	.L66:
 731 0060 0023     		movs	r3, #0
 732              	.L46:
 736:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 733              		.loc 1 736 0 discriminator 6
 734 0062 002B     		cmp	r3, #0
 735 0064 01D1     		bne	.L67
 736:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 736              		.loc 1 736 0 discriminator 7
 737              		.syntax divided
 738              	@ 736 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 739 0066 72B6     		 cpsid i 
 740              	@ 0 "" 2
 741              		.thumb
 742              		.syntax unified
 743              	.L48:
 744 0068 FEE7     		b	.L48
 745              	.L67:
 746 006a 0027     		movs	r7, #0
 747              	.LVL84:
 748              	.L47:
 746:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 749              		.loc 1 746 0 is_stmt 1
 750 006c FFF7FEFF 		bl	vPortEnterCritical
 751              	.LVL85:
 752:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 752              		.loc 1 752 0
 753 0070 A36B     		ldr	r3, [r4, #56]
 754 0072 E26B     		ldr	r2, [r4, #60]
 755 0074 9342     		cmp	r3, r2
 756 0076 01D3     		bcc	.L49
 752:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 757              		.loc 1 752 0 is_stmt 0 discriminator 1
 758 0078 022D     		cmp	r5, #2
 759 007a 18D1     		bne	.L50
 760              	.L49:
 755:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 761              		.loc 1 755 0 is_stmt 1
 762 007c 2A00     		movs	r2, r5
 763 007e 3100     		movs	r1, r6
 764 0080 2000     		movs	r0, r4
 765 0082 FFF7FEFF 		bl	prvCopyDataToQueue
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 57


 766              	.LVL86:
 810:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
 767              		.loc 1 810 0
 768 0086 636A     		ldr	r3, [r4, #36]
 769 0088 002B     		cmp	r3, #0
 770 008a 08D0     		beq	.L51
 812:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
 771              		.loc 1 812 0
 772 008c 2000     		movs	r0, r4
 773              	.LVL87:
 774 008e 2430     		adds	r0, r0, #36
 775 0090 FFF7FEFF 		bl	xTaskRemoveFromEventList
 776              	.LVL88:
 777 0094 0028     		cmp	r0, #0
 778 0096 06D0     		beq	.L52
 818:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
 779              		.loc 1 818 0
 780 0098 FFF7FEFF 		bl	vPortYield
 781              	.LVL89:
 782 009c 03E0     		b	.L52
 783              	.LVL90:
 784              	.L51:
 825:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
 785              		.loc 1 825 0
 786 009e 0028     		cmp	r0, #0
 787 00a0 01D0     		beq	.L52
 831:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
 788              		.loc 1 831 0
 789 00a2 FFF7FEFF 		bl	vPortYield
 790              	.LVL91:
 791              	.L52:
 840:Source\FreeRTOS\10.0.1\Source/queue.c **** 				return pdPASS;
 792              		.loc 1 840 0
 793 00a6 FFF7FEFF 		bl	vPortExitCritical
 794              	.LVL92:
 841:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 795              		.loc 1 841 0
 796 00aa 0120     		movs	r0, #1
 797 00ac 4AE0     		b	.L53
 798              	.L50:
 845:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 799              		.loc 1 845 0
 800 00ae 019B     		ldr	r3, [sp, #4]
 801 00b0 002B     		cmp	r3, #0
 802 00b2 03D1     		bne	.L54
 849:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 803              		.loc 1 849 0
 804 00b4 FFF7FEFF 		bl	vPortExitCritical
 805              	.LVL93:
 854:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 806              		.loc 1 854 0
 807 00b8 0020     		movs	r0, #0
 808 00ba 43E0     		b	.L53
 809              	.L54:
 856:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 810              		.loc 1 856 0
 811 00bc 002F     		cmp	r7, #0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 58


 812 00be 03D1     		bne	.L55
 860:Source\FreeRTOS\10.0.1\Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 813              		.loc 1 860 0
 814 00c0 02A8     		add	r0, sp, #8
 815 00c2 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 816              	.LVL94:
 861:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 817              		.loc 1 861 0
 818 00c6 0137     		adds	r7, r7, #1
 819              	.LVL95:
 820              	.L55:
 870:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 821              		.loc 1 870 0
 822 00c8 FFF7FEFF 		bl	vPortExitCritical
 823              	.LVL96:
 875:Source\FreeRTOS\10.0.1\Source/queue.c **** 		prvLockQueue( pxQueue );
 824              		.loc 1 875 0
 825 00cc FFF7FEFF 		bl	vTaskSuspendAll
 826              	.LVL97:
 876:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 827              		.loc 1 876 0
 828 00d0 FFF7FEFF 		bl	vPortEnterCritical
 829              	.LVL98:
 830 00d4 4423     		movs	r3, #68
 831 00d6 E35C     		ldrb	r3, [r4, r3]
 832 00d8 5BB2     		sxtb	r3, r3
 833 00da 0133     		adds	r3, r3, #1
 834 00dc 02D1     		bne	.L56
 876:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 835              		.loc 1 876 0 is_stmt 0 discriminator 1
 836 00de 0022     		movs	r2, #0
 837 00e0 4423     		movs	r3, #68
 838 00e2 E254     		strb	r2, [r4, r3]
 839              	.L56:
 876:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 840              		.loc 1 876 0 discriminator 3
 841 00e4 4523     		movs	r3, #69
 842 00e6 E35C     		ldrb	r3, [r4, r3]
 843 00e8 5BB2     		sxtb	r3, r3
 844 00ea 0133     		adds	r3, r3, #1
 845 00ec 02D1     		bne	.L57
 876:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 846              		.loc 1 876 0 discriminator 4
 847 00ee 0022     		movs	r2, #0
 848 00f0 4523     		movs	r3, #69
 849 00f2 E254     		strb	r2, [r4, r3]
 850              	.L57:
 876:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 851              		.loc 1 876 0 discriminator 6
 852 00f4 FFF7FEFF 		bl	vPortExitCritical
 853              	.LVL99:
 879:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 854              		.loc 1 879 0 is_stmt 1 discriminator 6
 855 00f8 01A9     		add	r1, sp, #4
 856              	.LVL100:
 857 00fa 02A8     		add	r0, sp, #8
 858 00fc FFF7FEFF 		bl	xTaskCheckForTimeOut
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 59


 859              	.LVL101:
 860 0100 0028     		cmp	r0, #0
 861 0102 19D1     		bne	.L58
 881:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 862              		.loc 1 881 0
 863 0104 2000     		movs	r0, r4
 864 0106 FFF7FEFF 		bl	prvIsQueueFull
 865              	.LVL102:
 866 010a 0028     		cmp	r0, #0
 867 010c 0ED0     		beq	.L59
 884:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 868              		.loc 1 884 0
 869 010e 2000     		movs	r0, r4
 870 0110 1030     		adds	r0, r0, #16
 871 0112 0199     		ldr	r1, [sp, #4]
 872 0114 FFF7FEFF 		bl	vTaskPlaceOnEventList
 873              	.LVL103:
 891:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 874              		.loc 1 891 0
 875 0118 2000     		movs	r0, r4
 876 011a FFF7FEFF 		bl	prvUnlockQueue
 877              	.LVL104:
 898:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 878              		.loc 1 898 0
 879 011e FFF7FEFF 		bl	xTaskResumeAll
 880              	.LVL105:
 881 0122 0028     		cmp	r0, #0
 882 0124 A2D1     		bne	.L47
 900:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 883              		.loc 1 900 0
 884 0126 FFF7FEFF 		bl	vPortYield
 885              	.LVL106:
 886 012a 9FE7     		b	.L47
 887              	.L59:
 906:Source\FreeRTOS\10.0.1\Source/queue.c **** 				( void ) xTaskResumeAll();
 888              		.loc 1 906 0
 889 012c 2000     		movs	r0, r4
 890 012e FFF7FEFF 		bl	prvUnlockQueue
 891              	.LVL107:
 907:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 892              		.loc 1 907 0
 893 0132 FFF7FEFF 		bl	xTaskResumeAll
 894              	.LVL108:
 895 0136 99E7     		b	.L47
 896              	.L58:
 913:Source\FreeRTOS\10.0.1\Source/queue.c **** 			( void ) xTaskResumeAll();
 897              		.loc 1 913 0
 898 0138 2000     		movs	r0, r4
 899 013a FFF7FEFF 		bl	prvUnlockQueue
 900              	.LVL109:
 914:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 901              		.loc 1 914 0
 902 013e FFF7FEFF 		bl	xTaskResumeAll
 903              	.LVL110:
 917:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 904              		.loc 1 917 0
 905 0142 0020     		movs	r0, #0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 60


 906              	.L53:
 920:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 907              		.loc 1 920 0
 908 0144 05B0     		add	sp, sp, #20
 909              		@ sp needed
 910              	.LVL111:
 911              	.LVL112:
 912              	.LVL113:
 913              	.LVL114:
 914 0146 F0BD     		pop	{r4, r5, r6, r7, pc}
 915              		.cfi_endproc
 916              	.LFE39:
 917              		.size	xQueueGenericSend, .-xQueueGenericSend
 918              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 919              		.align	2
 920              		.global	xQueueGenericSendFromISR
 921              		.code	16
 922              		.thumb_func
 923              		.type	xQueueGenericSendFromISR, %function
 924              	xQueueGenericSendFromISR:
 925              	.LFB40:
 924:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xReturn;
 926              		.loc 1 924 0
 927              		.cfi_startproc
 928              		@ args = 0, pretend = 0, frame = 8
 929              		@ frame_needed = 0, uses_anonymous_args = 0
 930              	.LVL115:
 931 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 932              		.cfi_def_cfa_offset 20
 933              		.cfi_offset 4, -20
 934              		.cfi_offset 5, -16
 935              		.cfi_offset 6, -12
 936              		.cfi_offset 7, -8
 937              		.cfi_offset 14, -4
 938 0002 83B0     		sub	sp, sp, #12
 939              		.cfi_def_cfa_offset 32
 940 0004 0400     		movs	r4, r0
 941 0006 0091     		str	r1, [sp]
 942 0008 1600     		movs	r6, r2
 943 000a 1F00     		movs	r7, r3
 944              	.LVL116:
 929:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 945              		.loc 1 929 0
 946 000c 0028     		cmp	r0, #0
 947 000e 01D1     		bne	.L69
 929:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 948              		.loc 1 929 0 is_stmt 0 discriminator 1
 949              		.syntax divided
 950              	@ 929 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 951 0010 72B6     		 cpsid i 
 952              	@ 0 "" 2
 953              		.thumb
 954              		.syntax unified
 955              	.L70:
 956 0012 FEE7     		b	.L70
 957              	.L69:
 930:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 61


 958              		.loc 1 930 0 is_stmt 1
 959 0014 009B     		ldr	r3, [sp]
 960              	.LVL117:
 961 0016 002B     		cmp	r3, #0
 962 0018 04D1     		bne	.L80
 930:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 963              		.loc 1 930 0 is_stmt 0 discriminator 2
 964 001a 036C     		ldr	r3, [r0, #64]
 965 001c 002B     		cmp	r3, #0
 966 001e 03D1     		bne	.L81
 930:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 967              		.loc 1 930 0
 968 0020 0133     		adds	r3, r3, #1
 969 0022 02E0     		b	.L71
 970              	.L80:
 971 0024 0123     		movs	r3, #1
 972 0026 00E0     		b	.L71
 973              	.L81:
 974 0028 0023     		movs	r3, #0
 975              	.L71:
 930:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 976              		.loc 1 930 0 discriminator 6
 977 002a 002B     		cmp	r3, #0
 978 002c 01D1     		bne	.L72
 930:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 979              		.loc 1 930 0 discriminator 7
 980              		.syntax divided
 981              	@ 930 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 982 002e 72B6     		 cpsid i 
 983              	@ 0 "" 2
 984              		.thumb
 985              		.syntax unified
 986              	.L73:
 987 0030 FEE7     		b	.L73
 988              	.L72:
 931:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 989              		.loc 1 931 0 is_stmt 1
 990 0032 022F     		cmp	r7, #2
 991 0034 03D1     		bne	.L82
 931:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 992              		.loc 1 931 0 is_stmt 0 discriminator 2
 993 0036 E36B     		ldr	r3, [r4, #60]
 994 0038 012B     		cmp	r3, #1
 995 003a 02D1     		bne	.L83
 996 003c 02E0     		b	.L74
 997              	.L82:
 931:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 998              		.loc 1 931 0
 999 003e 0123     		movs	r3, #1
 1000 0040 00E0     		b	.L74
 1001              	.L83:
 1002 0042 0023     		movs	r3, #0
 1003              	.L74:
 931:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1004              		.loc 1 931 0 discriminator 6
 1005 0044 002B     		cmp	r3, #0
 1006 0046 01D1     		bne	.L75
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 62


 931:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1007              		.loc 1 931 0 discriminator 7
 1008              		.syntax divided
 1009              	@ 931 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 1010 0048 72B6     		 cpsid i 
 1011              	@ 0 "" 2
 1012              		.thumb
 1013              		.syntax unified
 1014              	.L76:
 1015 004a FEE7     		b	.L76
 1016              	.L75:
 954:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 1017              		.loc 1 954 0 is_stmt 1
 1018 004c FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1019              	.LVL118:
 1020 0050 0190     		str	r0, [sp, #4]
 1021              	.LVL119:
 956:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 1022              		.loc 1 956 0
 1023 0052 A36B     		ldr	r3, [r4, #56]
 1024 0054 E26B     		ldr	r2, [r4, #60]
 1025 0056 9342     		cmp	r3, r2
 1026 0058 01D3     		bcc	.L77
 956:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 1027              		.loc 1 956 0 is_stmt 0 discriminator 1
 1028 005a 022F     		cmp	r7, #2
 1029 005c 1ED1     		bne	.L84
 1030              	.L77:
 1031              	.LBB4:
 958:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1032              		.loc 1 958 0 is_stmt 1
 1033 005e 4523     		movs	r3, #69
 1034 0060 E55C     		ldrb	r5, [r4, r3]
 1035 0062 6DB2     		sxtb	r5, r5
 1036              	.LVL120:
 967:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1037              		.loc 1 967 0
 1038 0064 3A00     		movs	r2, r7
 1039 0066 0099     		ldr	r1, [sp]
 1040 0068 2000     		movs	r0, r4
 1041              	.LVL121:
 1042 006a FFF7FEFF 		bl	prvCopyDataToQueue
 1043              	.LVL122:
 971:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 1044              		.loc 1 971 0
 1045 006e 6B1C     		adds	r3, r5, #1
 1046 0070 0ED1     		bne	.L79
1026:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
 1047              		.loc 1 1026 0
 1048 0072 636A     		ldr	r3, [r4, #36]
 1049 0074 002B     		cmp	r3, #0
 1050 0076 13D0     		beq	.L85
1028:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
 1051              		.loc 1 1028 0
 1052 0078 2000     		movs	r0, r4
 1053 007a 2430     		adds	r0, r0, #36
 1054 007c FFF7FEFF 		bl	xTaskRemoveFromEventList
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 63


 1055              	.LVL123:
 1056 0080 0028     		cmp	r0, #0
 1057 0082 0FD0     		beq	.L86
1032:Source\FreeRTOS\10.0.1\Source/queue.c **** 							{
 1058              		.loc 1 1032 0
 1059 0084 002E     		cmp	r6, #0
 1060 0086 0FD0     		beq	.L87
1034:Source\FreeRTOS\10.0.1\Source/queue.c **** 							}
 1061              		.loc 1 1034 0
 1062 0088 0123     		movs	r3, #1
 1063 008a 3360     		str	r3, [r6]
1060:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 1064              		.loc 1 1060 0
 1065 008c 0124     		movs	r4, #1
 1066              	.LVL124:
 1067 008e 0CE0     		b	.L78
 1068              	.LVL125:
 1069              	.L79:
1057:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 1070              		.loc 1 1057 0
 1071 0090 0135     		adds	r5, r5, #1
 1072              	.LVL126:
 1073 0092 6DB2     		sxtb	r5, r5
 1074              	.LVL127:
 1075 0094 4523     		movs	r3, #69
 1076 0096 E554     		strb	r5, [r4, r3]
1060:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 1077              		.loc 1 1060 0
 1078 0098 0124     		movs	r4, #1
 1079              	.LVL128:
 1080 009a 06E0     		b	.L78
 1081              	.LVL129:
 1082              	.L84:
 1083              	.LBE4:
1065:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 1084              		.loc 1 1065 0
 1085 009c 0024     		movs	r4, #0
 1086              	.LVL130:
 1087 009e 04E0     		b	.L78
 1088              	.LVL131:
 1089              	.L85:
 1090              	.LBB5:
1060:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 1091              		.loc 1 1060 0
 1092 00a0 0124     		movs	r4, #1
 1093              	.LVL132:
 1094 00a2 02E0     		b	.L78
 1095              	.LVL133:
 1096              	.L86:
 1097 00a4 0124     		movs	r4, #1
 1098              	.LVL134:
 1099 00a6 00E0     		b	.L78
 1100              	.LVL135:
 1101              	.L87:
 1102 00a8 0124     		movs	r4, #1
 1103              	.LVL136:
 1104              	.L78:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 64


 1105              	.LBE5:
1068:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1106              		.loc 1 1068 0
 1107 00aa 0198     		ldr	r0, [sp, #4]
 1108 00ac FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1109              	.LVL137:
1071:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 1110              		.loc 1 1071 0
 1111 00b0 2000     		movs	r0, r4
 1112 00b2 03B0     		add	sp, sp, #12
 1113              	.LVL138:
 1114              		@ sp needed
 1115              	.LVL139:
 1116              	.LVL140:
 1117              	.LVL141:
 1118 00b4 F0BD     		pop	{r4, r5, r6, r7, pc}
 1119              		.cfi_endproc
 1120              	.LFE40:
 1121              		.size	xQueueGenericSendFromISR, .-xQueueGenericSendFromISR
 1122 00b6 C046     		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1123              		.align	2
 1124              		.global	xQueueGiveFromISR
 1125              		.code	16
 1126              		.thumb_func
 1127              		.type	xQueueGiveFromISR, %function
 1128              	xQueueGiveFromISR:
 1129              	.LFB41:
1075:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xReturn;
 1130              		.loc 1 1075 0
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 0
 1133              		@ frame_needed = 0, uses_anonymous_args = 0
 1134              	.LVL142:
 1135 0000 70B5     		push	{r4, r5, r6, lr}
 1136              		.cfi_def_cfa_offset 16
 1137              		.cfi_offset 4, -16
 1138              		.cfi_offset 5, -12
 1139              		.cfi_offset 6, -8
 1140              		.cfi_offset 14, -4
 1141 0002 0400     		movs	r4, r0
 1142 0004 0E00     		movs	r6, r1
 1143              	.LVL143:
1086:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1144              		.loc 1 1086 0
 1145 0006 0028     		cmp	r0, #0
 1146 0008 01D1     		bne	.L89
1086:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1147              		.loc 1 1086 0 is_stmt 0 discriminator 1
 1148              		.syntax divided
 1149              	@ 1086 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 1150 000a 72B6     		 cpsid i 
 1151              	@ 0 "" 2
 1152              		.thumb
 1153              		.syntax unified
 1154              	.L90:
 1155 000c FEE7     		b	.L90
 1156              	.L89:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 65


1090:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1157              		.loc 1 1090 0 is_stmt 1
 1158 000e 036C     		ldr	r3, [r0, #64]
 1159 0010 002B     		cmp	r3, #0
 1160 0012 01D0     		beq	.L91
1090:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1161              		.loc 1 1090 0 is_stmt 0 discriminator 1
 1162              		.syntax divided
 1163              	@ 1090 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 1164 0014 72B6     		 cpsid i 
 1165              	@ 0 "" 2
 1166              		.thumb
 1167              		.syntax unified
 1168              	.L92:
 1169 0016 FEE7     		b	.L92
 1170              	.L91:
1095:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1171              		.loc 1 1095 0 is_stmt 1
 1172 0018 0368     		ldr	r3, [r0]
 1173 001a 002B     		cmp	r3, #0
 1174 001c 04D1     		bne	.L98
1095:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1175              		.loc 1 1095 0 is_stmt 0 discriminator 2
 1176 001e 4368     		ldr	r3, [r0, #4]
 1177 0020 002B     		cmp	r3, #0
 1178 0022 03D1     		bne	.L99
1095:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1179              		.loc 1 1095 0
 1180 0024 0133     		adds	r3, r3, #1
 1181 0026 02E0     		b	.L93
 1182              	.L98:
 1183 0028 0123     		movs	r3, #1
 1184 002a 00E0     		b	.L93
 1185              	.L99:
 1186 002c 0023     		movs	r3, #0
 1187              	.L93:
1095:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1188              		.loc 1 1095 0 discriminator 6
 1189 002e 002B     		cmp	r3, #0
 1190 0030 01D1     		bne	.L94
1095:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1191              		.loc 1 1095 0 discriminator 7
 1192              		.syntax divided
 1193              	@ 1095 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 1194 0032 72B6     		 cpsid i 
 1195              	@ 0 "" 2
 1196              		.thumb
 1197              		.syntax unified
 1198              	.L95:
 1199 0034 FEE7     		b	.L95
 1200              	.L94:
1113:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 1201              		.loc 1 1113 0 is_stmt 1
 1202 0036 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1203              	.LVL144:
 1204 003a 0500     		movs	r5, r0
 1205              	.LVL145:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 66


 1206              	.LBB6:
1115:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1207              		.loc 1 1115 0
 1208 003c A26B     		ldr	r2, [r4, #56]
 1209              	.LVL146:
1120:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 1210              		.loc 1 1120 0
 1211 003e E36B     		ldr	r3, [r4, #60]
 1212 0040 9A42     		cmp	r2, r3
 1213 0042 1BD2     		bcs	.L100
 1214              	.LBB7:
1122:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1215              		.loc 1 1122 0
 1216 0044 4523     		movs	r3, #69
 1217 0046 E35C     		ldrb	r3, [r4, r3]
 1218 0048 5BB2     		sxtb	r3, r3
 1219              	.LVL147:
1132:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1220              		.loc 1 1132 0
 1221 004a 0132     		adds	r2, r2, #1
 1222              	.LVL148:
 1223 004c A263     		str	r2, [r4, #56]
1136:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 1224              		.loc 1 1136 0
 1225 004e 5A1C     		adds	r2, r3, #1
 1226 0050 0ED1     		bne	.L97
 1227              	.LVL149:
1191:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
 1228              		.loc 1 1191 0
 1229 0052 636A     		ldr	r3, [r4, #36]
 1230              	.LVL150:
 1231 0054 002B     		cmp	r3, #0
 1232 0056 13D0     		beq	.L101
1193:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
 1233              		.loc 1 1193 0
 1234 0058 2000     		movs	r0, r4
 1235              	.LVL151:
 1236 005a 2430     		adds	r0, r0, #36
 1237 005c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1238              	.LVL152:
 1239 0060 0028     		cmp	r0, #0
 1240 0062 0FD0     		beq	.L102
1197:Source\FreeRTOS\10.0.1\Source/queue.c **** 							{
 1241              		.loc 1 1197 0
 1242 0064 002E     		cmp	r6, #0
 1243 0066 0FD0     		beq	.L103
1199:Source\FreeRTOS\10.0.1\Source/queue.c **** 							}
 1244              		.loc 1 1199 0
 1245 0068 0123     		movs	r3, #1
 1246 006a 3360     		str	r3, [r6]
1225:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 1247              		.loc 1 1225 0
 1248 006c 0124     		movs	r4, #1
 1249              	.LVL153:
 1250 006e 0CE0     		b	.L96
 1251              	.LVL154:
 1252              	.L97:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 67


1222:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 1253              		.loc 1 1222 0
 1254 0070 0133     		adds	r3, r3, #1
 1255              	.LVL155:
 1256 0072 5BB2     		sxtb	r3, r3
 1257              	.LVL156:
 1258 0074 4522     		movs	r2, #69
 1259 0076 A354     		strb	r3, [r4, r2]
 1260              	.LVL157:
1225:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 1261              		.loc 1 1225 0
 1262 0078 0124     		movs	r4, #1
 1263              	.LVL158:
 1264 007a 06E0     		b	.L96
 1265              	.LVL159:
 1266              	.L100:
 1267              	.LBE7:
1230:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 1268              		.loc 1 1230 0
 1269 007c 0024     		movs	r4, #0
 1270              	.LVL160:
 1271 007e 04E0     		b	.L96
 1272              	.LVL161:
 1273              	.L101:
 1274              	.LBB8:
1225:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 1275              		.loc 1 1225 0
 1276 0080 0124     		movs	r4, #1
 1277              	.LVL162:
 1278 0082 02E0     		b	.L96
 1279              	.LVL163:
 1280              	.L102:
 1281 0084 0124     		movs	r4, #1
 1282              	.LVL164:
 1283 0086 00E0     		b	.L96
 1284              	.LVL165:
 1285              	.L103:
 1286 0088 0124     		movs	r4, #1
 1287              	.LVL166:
 1288              	.L96:
 1289              	.LBE8:
 1290              	.LBE6:
1233:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1291              		.loc 1 1233 0
 1292 008a 2800     		movs	r0, r5
 1293 008c FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1294              	.LVL167:
1236:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 1295              		.loc 1 1236 0
 1296 0090 2000     		movs	r0, r4
 1297              		@ sp needed
 1298              	.LVL168:
 1299              	.LVL169:
 1300              	.LVL170:
 1301 0092 70BD     		pop	{r4, r5, r6, pc}
 1302              		.cfi_endproc
 1303              	.LFE41:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 68


 1304              		.size	xQueueGiveFromISR, .-xQueueGiveFromISR
 1305              		.section	.text.xQueueReceive,"ax",%progbits
 1306              		.align	2
 1307              		.global	xQueueReceive
 1308              		.code	16
 1309              		.thumb_func
 1310              		.type	xQueueReceive, %function
 1311              	xQueueReceive:
 1312              	.LFB42:
1240:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1313              		.loc 1 1240 0
 1314              		.cfi_startproc
 1315              		@ args = 0, pretend = 0, frame = 16
 1316              		@ frame_needed = 0, uses_anonymous_args = 0
 1317              	.LVL171:
 1318 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1319              		.cfi_def_cfa_offset 20
 1320              		.cfi_offset 4, -20
 1321              		.cfi_offset 5, -16
 1322              		.cfi_offset 6, -12
 1323              		.cfi_offset 7, -8
 1324              		.cfi_offset 14, -4
 1325 0002 85B0     		sub	sp, sp, #20
 1326              		.cfi_def_cfa_offset 40
 1327 0004 0400     		movs	r4, r0
 1328 0006 0E00     		movs	r6, r1
 1329 0008 0192     		str	r2, [sp, #4]
 1330              	.LVL172:
1246:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1331              		.loc 1 1246 0
 1332 000a 0028     		cmp	r0, #0
 1333 000c 01D1     		bne	.L105
1246:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1334              		.loc 1 1246 0 is_stmt 0 discriminator 1
 1335              		.syntax divided
 1336              	@ 1246 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 1337 000e 72B6     		 cpsid i 
 1338              	@ 0 "" 2
 1339              		.thumb
 1340              		.syntax unified
 1341              	.L106:
 1342 0010 FEE7     		b	.L106
 1343              	.L105:
1250:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1344              		.loc 1 1250 0 is_stmt 1
 1345 0012 0029     		cmp	r1, #0
 1346 0014 04D1     		bne	.L123
1250:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1347              		.loc 1 1250 0 is_stmt 0 discriminator 2
 1348 0016 036C     		ldr	r3, [r0, #64]
 1349 0018 002B     		cmp	r3, #0
 1350 001a 03D1     		bne	.L124
1250:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1351              		.loc 1 1250 0
 1352 001c 0133     		adds	r3, r3, #1
 1353 001e 02E0     		b	.L107
 1354              	.L123:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 69


 1355 0020 0123     		movs	r3, #1
 1356 0022 00E0     		b	.L107
 1357              	.L124:
 1358 0024 0023     		movs	r3, #0
 1359              	.L107:
1250:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1360              		.loc 1 1250 0 discriminator 6
 1361 0026 002B     		cmp	r3, #0
 1362 0028 01D1     		bne	.L108
1250:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1363              		.loc 1 1250 0 discriminator 7
 1364              		.syntax divided
 1365              	@ 1250 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 1366 002a 72B6     		 cpsid i 
 1367              	@ 0 "" 2
 1368              		.thumb
 1369              		.syntax unified
 1370              	.L109:
 1371 002c FEE7     		b	.L109
 1372              	.L108:
1255:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 1373              		.loc 1 1255 0 is_stmt 1
 1374 002e FFF7FEFF 		bl	xTaskGetSchedulerState
 1375              	.LVL173:
 1376 0032 0028     		cmp	r0, #0
 1377 0034 04D1     		bne	.L125
1255:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 1378              		.loc 1 1255 0 is_stmt 0 discriminator 2
 1379 0036 019B     		ldr	r3, [sp, #4]
 1380 0038 002B     		cmp	r3, #0
 1381 003a 03D1     		bne	.L126
1255:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 1382              		.loc 1 1255 0
 1383 003c 0133     		adds	r3, r3, #1
 1384 003e 02E0     		b	.L110
 1385              	.L125:
 1386 0040 0123     		movs	r3, #1
 1387 0042 00E0     		b	.L110
 1388              	.L126:
 1389 0044 0023     		movs	r3, #0
 1390              	.L110:
1255:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 1391              		.loc 1 1255 0 discriminator 6
 1392 0046 002B     		cmp	r3, #0
 1393 0048 01D1     		bne	.L127
1255:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 1394              		.loc 1 1255 0 discriminator 7
 1395              		.syntax divided
 1396              	@ 1255 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 1397 004a 72B6     		 cpsid i 
 1398              	@ 0 "" 2
 1399              		.thumb
 1400              		.syntax unified
 1401              	.L112:
 1402 004c FEE7     		b	.L112
 1403              	.L127:
 1404 004e 0027     		movs	r7, #0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 70


 1405              	.LVL174:
 1406              	.L111:
1266:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 1407              		.loc 1 1266 0 is_stmt 1
 1408 0050 FFF7FEFF 		bl	vPortEnterCritical
 1409              	.LVL175:
 1410              	.LBB9:
1268:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1411              		.loc 1 1268 0
 1412 0054 A56B     		ldr	r5, [r4, #56]
 1413              	.LVL176:
1272:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 1414              		.loc 1 1272 0
 1415 0056 002D     		cmp	r5, #0
 1416 0058 14D0     		beq	.L113
1275:Source\FreeRTOS\10.0.1\Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
 1417              		.loc 1 1275 0
 1418 005a 3100     		movs	r1, r6
 1419 005c 2000     		movs	r0, r4
 1420 005e FFF7FEFF 		bl	prvCopyDataFromQueue
 1421              	.LVL177:
1277:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1422              		.loc 1 1277 0
 1423 0062 013D     		subs	r5, r5, #1
 1424              	.LVL178:
 1425 0064 A563     		str	r5, [r4, #56]
1282:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 1426              		.loc 1 1282 0
 1427 0066 2369     		ldr	r3, [r4, #16]
 1428 0068 002B     		cmp	r3, #0
 1429 006a 07D0     		beq	.L114
1284:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
 1430              		.loc 1 1284 0
 1431 006c 2000     		movs	r0, r4
 1432 006e 1030     		adds	r0, r0, #16
 1433 0070 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1434              	.LVL179:
 1435 0074 0028     		cmp	r0, #0
 1436 0076 01D0     		beq	.L114
1286:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
 1437              		.loc 1 1286 0
 1438 0078 FFF7FEFF 		bl	vPortYield
 1439              	.LVL180:
 1440              	.L114:
1298:Source\FreeRTOS\10.0.1\Source/queue.c **** 				return pdPASS;
 1441              		.loc 1 1298 0
 1442 007c FFF7FEFF 		bl	vPortExitCritical
 1443              	.LVL181:
1299:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 1444              		.loc 1 1299 0
 1445 0080 0120     		movs	r0, #1
 1446 0082 4FE0     		b	.L115
 1447              	.LVL182:
 1448              	.L113:
1303:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 1449              		.loc 1 1303 0
 1450 0084 019B     		ldr	r3, [sp, #4]
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 71


 1451 0086 002B     		cmp	r3, #0
 1452 0088 03D1     		bne	.L116
1307:Source\FreeRTOS\10.0.1\Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1453              		.loc 1 1307 0
 1454 008a FFF7FEFF 		bl	vPortExitCritical
 1455              	.LVL183:
1309:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 1456              		.loc 1 1309 0
 1457 008e 0020     		movs	r0, #0
 1458 0090 48E0     		b	.L115
 1459              	.L116:
1311:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 1460              		.loc 1 1311 0
 1461 0092 002F     		cmp	r7, #0
 1462 0094 03D1     		bne	.L117
1315:Source\FreeRTOS\10.0.1\Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1463              		.loc 1 1315 0
 1464 0096 02A8     		add	r0, sp, #8
 1465 0098 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1466              	.LVL184:
1316:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 1467              		.loc 1 1316 0
 1468 009c 0137     		adds	r7, r7, #1
 1469              	.LVL185:
 1470              	.L117:
 1471              	.LBE9:
1325:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1472              		.loc 1 1325 0
 1473 009e FFF7FEFF 		bl	vPortExitCritical
 1474              	.LVL186:
1330:Source\FreeRTOS\10.0.1\Source/queue.c **** 		prvLockQueue( pxQueue );
 1475              		.loc 1 1330 0
 1476 00a2 FFF7FEFF 		bl	vTaskSuspendAll
 1477              	.LVL187:
1331:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1478              		.loc 1 1331 0
 1479 00a6 FFF7FEFF 		bl	vPortEnterCritical
 1480              	.LVL188:
 1481 00aa 4423     		movs	r3, #68
 1482 00ac E35C     		ldrb	r3, [r4, r3]
 1483 00ae 5BB2     		sxtb	r3, r3
 1484 00b0 0133     		adds	r3, r3, #1
 1485 00b2 02D1     		bne	.L118
1331:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1486              		.loc 1 1331 0 is_stmt 0 discriminator 1
 1487 00b4 0022     		movs	r2, #0
 1488 00b6 4423     		movs	r3, #68
 1489 00b8 E254     		strb	r2, [r4, r3]
 1490              	.L118:
1331:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1491              		.loc 1 1331 0 discriminator 3
 1492 00ba 4523     		movs	r3, #69
 1493 00bc E35C     		ldrb	r3, [r4, r3]
 1494 00be 5BB2     		sxtb	r3, r3
 1495 00c0 0133     		adds	r3, r3, #1
 1496 00c2 02D1     		bne	.L119
1331:Source\FreeRTOS\10.0.1\Source/queue.c **** 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 72


 1497              		.loc 1 1331 0 discriminator 4
 1498 00c4 0022     		movs	r2, #0
 1499 00c6 4523     		movs	r3, #69
 1500 00c8 E254     		strb	r2, [r4, r3]
 1501              	.L119:
1331:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1502              		.loc 1 1331 0 discriminator 6
 1503 00ca FFF7FEFF 		bl	vPortExitCritical
 1504              	.LVL189:
1334:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 1505              		.loc 1 1334 0 is_stmt 1 discriminator 6
 1506 00ce 01A9     		add	r1, sp, #4
 1507              	.LVL190:
 1508 00d0 02A8     		add	r0, sp, #8
 1509 00d2 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1510              	.LVL191:
 1511 00d6 0028     		cmp	r0, #0
 1512 00d8 19D1     		bne	.L120
1338:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 1513              		.loc 1 1338 0
 1514 00da 2000     		movs	r0, r4
 1515 00dc FFF7FEFF 		bl	prvIsQueueEmpty
 1516              	.LVL192:
 1517 00e0 0028     		cmp	r0, #0
 1518 00e2 0ED0     		beq	.L121
1341:Source\FreeRTOS\10.0.1\Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1519              		.loc 1 1341 0
 1520 00e4 2000     		movs	r0, r4
 1521 00e6 2430     		adds	r0, r0, #36
 1522 00e8 0199     		ldr	r1, [sp, #4]
 1523 00ea FFF7FEFF 		bl	vTaskPlaceOnEventList
 1524              	.LVL193:
1342:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1525              		.loc 1 1342 0
 1526 00ee 2000     		movs	r0, r4
 1527 00f0 FFF7FEFF 		bl	prvUnlockQueue
 1528              	.LVL194:
1343:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 1529              		.loc 1 1343 0
 1530 00f4 FFF7FEFF 		bl	xTaskResumeAll
 1531              	.LVL195:
 1532 00f8 0028     		cmp	r0, #0
 1533 00fa A9D1     		bne	.L111
1345:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 1534              		.loc 1 1345 0
 1535 00fc FFF7FEFF 		bl	vPortYield
 1536              	.LVL196:
 1537 0100 A6E7     		b	.L111
 1538              	.L121:
1356:Source\FreeRTOS\10.0.1\Source/queue.c **** 				( void ) xTaskResumeAll();
 1539              		.loc 1 1356 0
 1540 0102 2000     		movs	r0, r4
 1541 0104 FFF7FEFF 		bl	prvUnlockQueue
 1542              	.LVL197:
1357:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 1543              		.loc 1 1357 0
 1544 0108 FFF7FEFF 		bl	xTaskResumeAll
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 73


 1545              	.LVL198:
 1546 010c A0E7     		b	.L111
 1547              	.L120:
1364:Source\FreeRTOS\10.0.1\Source/queue.c **** 			( void ) xTaskResumeAll();
 1548              		.loc 1 1364 0
 1549 010e 2000     		movs	r0, r4
 1550 0110 FFF7FEFF 		bl	prvUnlockQueue
 1551              	.LVL199:
1365:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1552              		.loc 1 1365 0
 1553 0114 FFF7FEFF 		bl	xTaskResumeAll
 1554              	.LVL200:
1367:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 1555              		.loc 1 1367 0
 1556 0118 2000     		movs	r0, r4
 1557 011a FFF7FEFF 		bl	prvIsQueueEmpty
 1558              	.LVL201:
 1559 011e 0028     		cmp	r0, #0
 1560 0120 96D0     		beq	.L111
1370:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 1561              		.loc 1 1370 0
 1562 0122 0020     		movs	r0, #0
 1563              	.LVL202:
 1564              	.L115:
1378:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 1565              		.loc 1 1378 0
 1566 0124 05B0     		add	sp, sp, #20
 1567              		@ sp needed
 1568              	.LVL203:
 1569              	.LVL204:
 1570              	.LVL205:
 1571 0126 F0BD     		pop	{r4, r5, r6, r7, pc}
 1572              		.cfi_endproc
 1573              	.LFE42:
 1574              		.size	xQueueReceive, .-xQueueReceive
 1575              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 1576              		.align	2
 1577              		.global	xQueueSemaphoreTake
 1578              		.code	16
 1579              		.thumb_func
 1580              		.type	xQueueSemaphoreTake, %function
 1581              	xQueueSemaphoreTake:
 1582              	.LFB43:
1382:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1583              		.loc 1 1382 0
 1584              		.cfi_startproc
 1585              		@ args = 0, pretend = 0, frame = 16
 1586              		@ frame_needed = 0, uses_anonymous_args = 0
 1587              	.LVL206:
 1588 0000 30B5     		push	{r4, r5, lr}
 1589              		.cfi_def_cfa_offset 12
 1590              		.cfi_offset 4, -12
 1591              		.cfi_offset 5, -8
 1592              		.cfi_offset 14, -4
 1593 0002 85B0     		sub	sp, sp, #20
 1594              		.cfi_def_cfa_offset 32
 1595 0004 041E     		subs	r4, r0, #0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 74


 1596 0006 0191     		str	r1, [sp, #4]
 1597              	.LVL207:
1392:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1598              		.loc 1 1392 0
 1599 0008 01D1     		bne	.L129
1392:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1600              		.loc 1 1392 0 is_stmt 0 discriminator 1
 1601              		.syntax divided
 1602              	@ 1392 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 1603 000a 72B6     		 cpsid i 
 1604              	@ 0 "" 2
 1605              		.thumb
 1606              		.syntax unified
 1607              	.L130:
 1608 000c FEE7     		b	.L130
 1609              	.L129:
1396:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1610              		.loc 1 1396 0 is_stmt 1
 1611 000e 036C     		ldr	r3, [r0, #64]
 1612 0010 002B     		cmp	r3, #0
 1613 0012 01D0     		beq	.L131
1396:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1614              		.loc 1 1396 0 is_stmt 0 discriminator 1
 1615              		.syntax divided
 1616              	@ 1396 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 1617 0014 72B6     		 cpsid i 
 1618              	@ 0 "" 2
 1619              		.thumb
 1620              		.syntax unified
 1621              	.L132:
 1622 0016 FEE7     		b	.L132
 1623              	.L131:
1401:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 1624              		.loc 1 1401 0 is_stmt 1
 1625 0018 FFF7FEFF 		bl	xTaskGetSchedulerState
 1626              	.LVL208:
 1627 001c 0028     		cmp	r0, #0
 1628 001e 04D1     		bne	.L146
1401:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 1629              		.loc 1 1401 0 is_stmt 0 discriminator 2
 1630 0020 019B     		ldr	r3, [sp, #4]
 1631 0022 002B     		cmp	r3, #0
 1632 0024 03D1     		bne	.L147
1401:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 1633              		.loc 1 1401 0
 1634 0026 0133     		adds	r3, r3, #1
 1635 0028 02E0     		b	.L133
 1636              	.L146:
 1637 002a 0123     		movs	r3, #1
 1638 002c 00E0     		b	.L133
 1639              	.L147:
 1640 002e 0023     		movs	r3, #0
 1641              	.L133:
1401:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 1642              		.loc 1 1401 0 discriminator 6
 1643 0030 002B     		cmp	r3, #0
 1644 0032 01D1     		bne	.L148
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 75


1401:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 1645              		.loc 1 1401 0 discriminator 7
 1646              		.syntax divided
 1647              	@ 1401 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 1648 0034 72B6     		 cpsid i 
 1649              	@ 0 "" 2
 1650              		.thumb
 1651              		.syntax unified
 1652              	.L135:
 1653 0036 FEE7     		b	.L135
 1654              	.L148:
 1655 0038 0025     		movs	r5, #0
 1656              	.LVL209:
 1657              	.L134:
1412:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 1658              		.loc 1 1412 0 is_stmt 1
 1659 003a FFF7FEFF 		bl	vPortEnterCritical
 1660              	.LVL210:
 1661              	.LBB10:
1416:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1662              		.loc 1 1416 0
 1663 003e A36B     		ldr	r3, [r4, #56]
 1664              	.LVL211:
1420:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 1665              		.loc 1 1420 0
 1666 0040 002B     		cmp	r3, #0
 1667 0042 10D0     		beq	.L136
1426:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1668              		.loc 1 1426 0
 1669 0044 013B     		subs	r3, r3, #1
 1670              	.LVL212:
 1671 0046 A363     		str	r3, [r4, #56]
1445:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 1672              		.loc 1 1445 0
 1673 0048 2369     		ldr	r3, [r4, #16]
 1674              	.LVL213:
 1675 004a 002B     		cmp	r3, #0
 1676 004c 07D0     		beq	.L137
1447:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
 1677              		.loc 1 1447 0
 1678 004e 2000     		movs	r0, r4
 1679 0050 1030     		adds	r0, r0, #16
 1680 0052 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1681              	.LVL214:
 1682 0056 0028     		cmp	r0, #0
 1683 0058 01D0     		beq	.L137
1449:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
 1684              		.loc 1 1449 0
 1685 005a FFF7FEFF 		bl	vPortYield
 1686              	.LVL215:
 1687              	.L137:
1461:Source\FreeRTOS\10.0.1\Source/queue.c **** 				return pdPASS;
 1688              		.loc 1 1461 0
 1689 005e FFF7FEFF 		bl	vPortExitCritical
 1690              	.LVL216:
1462:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 1691              		.loc 1 1462 0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 76


 1692 0062 0120     		movs	r0, #1
 1693 0064 4FE0     		b	.L138
 1694              	.LVL217:
 1695              	.L136:
1466:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 1696              		.loc 1 1466 0
 1697 0066 019B     		ldr	r3, [sp, #4]
 1698              	.LVL218:
 1699 0068 002B     		cmp	r3, #0
 1700 006a 03D1     		bne	.L139
1479:Source\FreeRTOS\10.0.1\Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1701              		.loc 1 1479 0
 1702 006c FFF7FEFF 		bl	vPortExitCritical
 1703              	.LVL219:
1481:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 1704              		.loc 1 1481 0
 1705 0070 0020     		movs	r0, #0
 1706 0072 48E0     		b	.L138
 1707              	.L139:
1483:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 1708              		.loc 1 1483 0
 1709 0074 002D     		cmp	r5, #0
 1710 0076 03D1     		bne	.L140
1487:Source\FreeRTOS\10.0.1\Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1711              		.loc 1 1487 0
 1712 0078 02A8     		add	r0, sp, #8
 1713 007a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1714              	.LVL220:
1488:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 1715              		.loc 1 1488 0
 1716 007e 0135     		adds	r5, r5, #1
 1717              	.LVL221:
 1718              	.L140:
 1719              	.LBE10:
1497:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1720              		.loc 1 1497 0
 1721 0080 FFF7FEFF 		bl	vPortExitCritical
 1722              	.LVL222:
1502:Source\FreeRTOS\10.0.1\Source/queue.c **** 		prvLockQueue( pxQueue );
 1723              		.loc 1 1502 0
 1724 0084 FFF7FEFF 		bl	vTaskSuspendAll
 1725              	.LVL223:
1503:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1726              		.loc 1 1503 0
 1727 0088 FFF7FEFF 		bl	vPortEnterCritical
 1728              	.LVL224:
 1729 008c 4423     		movs	r3, #68
 1730 008e E35C     		ldrb	r3, [r4, r3]
 1731 0090 5BB2     		sxtb	r3, r3
 1732 0092 0133     		adds	r3, r3, #1
 1733 0094 02D1     		bne	.L141
1503:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1734              		.loc 1 1503 0 is_stmt 0 discriminator 1
 1735 0096 0022     		movs	r2, #0
 1736 0098 4423     		movs	r3, #68
 1737 009a E254     		strb	r2, [r4, r3]
 1738              	.L141:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 77


1503:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1739              		.loc 1 1503 0 discriminator 3
 1740 009c 4523     		movs	r3, #69
 1741 009e E35C     		ldrb	r3, [r4, r3]
 1742 00a0 5BB2     		sxtb	r3, r3
 1743 00a2 0133     		adds	r3, r3, #1
 1744 00a4 02D1     		bne	.L142
1503:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1745              		.loc 1 1503 0 discriminator 4
 1746 00a6 0022     		movs	r2, #0
 1747 00a8 4523     		movs	r3, #69
 1748 00aa E254     		strb	r2, [r4, r3]
 1749              	.L142:
1503:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1750              		.loc 1 1503 0 discriminator 6
 1751 00ac FFF7FEFF 		bl	vPortExitCritical
 1752              	.LVL225:
1506:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 1753              		.loc 1 1506 0 is_stmt 1 discriminator 6
 1754 00b0 01A9     		add	r1, sp, #4
 1755              	.LVL226:
 1756 00b2 02A8     		add	r0, sp, #8
 1757 00b4 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1758              	.LVL227:
 1759 00b8 0028     		cmp	r0, #0
 1760 00ba 19D1     		bne	.L143
1512:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 1761              		.loc 1 1512 0
 1762 00bc 2000     		movs	r0, r4
 1763 00be FFF7FEFF 		bl	prvIsQueueEmpty
 1764              	.LVL228:
 1765 00c2 0028     		cmp	r0, #0
 1766 00c4 0ED0     		beq	.L144
1533:Source\FreeRTOS\10.0.1\Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1767              		.loc 1 1533 0
 1768 00c6 2000     		movs	r0, r4
 1769 00c8 2430     		adds	r0, r0, #36
 1770 00ca 0199     		ldr	r1, [sp, #4]
 1771 00cc FFF7FEFF 		bl	vTaskPlaceOnEventList
 1772              	.LVL229:
1534:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1773              		.loc 1 1534 0
 1774 00d0 2000     		movs	r0, r4
 1775 00d2 FFF7FEFF 		bl	prvUnlockQueue
 1776              	.LVL230:
1535:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 1777              		.loc 1 1535 0
 1778 00d6 FFF7FEFF 		bl	xTaskResumeAll
 1779              	.LVL231:
 1780 00da 0028     		cmp	r0, #0
 1781 00dc ADD1     		bne	.L134
1537:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 1782              		.loc 1 1537 0
 1783 00de FFF7FEFF 		bl	vPortYield
 1784              	.LVL232:
 1785 00e2 AAE7     		b	.L134
 1786              	.L144:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 78


1548:Source\FreeRTOS\10.0.1\Source/queue.c **** 				( void ) xTaskResumeAll();
 1787              		.loc 1 1548 0
 1788 00e4 2000     		movs	r0, r4
 1789 00e6 FFF7FEFF 		bl	prvUnlockQueue
 1790              	.LVL233:
1549:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 1791              		.loc 1 1549 0
 1792 00ea FFF7FEFF 		bl	xTaskResumeAll
 1793              	.LVL234:
 1794 00ee A4E7     		b	.L134
 1795              	.L143:
1555:Source\FreeRTOS\10.0.1\Source/queue.c **** 			( void ) xTaskResumeAll();
 1796              		.loc 1 1555 0
 1797 00f0 2000     		movs	r0, r4
 1798 00f2 FFF7FEFF 		bl	prvUnlockQueue
 1799              	.LVL235:
1556:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1800              		.loc 1 1556 0
 1801 00f6 FFF7FEFF 		bl	xTaskResumeAll
 1802              	.LVL236:
1562:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 1803              		.loc 1 1562 0
 1804 00fa 2000     		movs	r0, r4
 1805 00fc FFF7FEFF 		bl	prvIsQueueEmpty
 1806              	.LVL237:
 1807 0100 0028     		cmp	r0, #0
 1808 0102 9AD0     		beq	.L134
1589:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 1809              		.loc 1 1589 0
 1810 0104 0020     		movs	r0, #0
 1811              	.L138:
1597:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 1812              		.loc 1 1597 0
 1813 0106 05B0     		add	sp, sp, #20
 1814              		@ sp needed
 1815              	.LVL238:
 1816              	.LVL239:
 1817 0108 30BD     		pop	{r4, r5, pc}
 1818              		.cfi_endproc
 1819              	.LFE43:
 1820              		.size	xQueueSemaphoreTake, .-xQueueSemaphoreTake
 1821 010a C046     		.section	.text.xQueuePeek,"ax",%progbits
 1822              		.align	2
 1823              		.global	xQueuePeek
 1824              		.code	16
 1825              		.thumb_func
 1826              		.type	xQueuePeek, %function
 1827              	xQueuePeek:
 1828              	.LFB44:
1601:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1829              		.loc 1 1601 0
 1830              		.cfi_startproc
 1831              		@ args = 0, pretend = 0, frame = 16
 1832              		@ frame_needed = 0, uses_anonymous_args = 0
 1833              	.LVL240:
 1834 0000 70B5     		push	{r4, r5, r6, lr}
 1835              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 79


 1836              		.cfi_offset 4, -16
 1837              		.cfi_offset 5, -12
 1838              		.cfi_offset 6, -8
 1839              		.cfi_offset 14, -4
 1840 0002 84B0     		sub	sp, sp, #16
 1841              		.cfi_def_cfa_offset 32
 1842 0004 0400     		movs	r4, r0
 1843 0006 0D00     		movs	r5, r1
 1844 0008 0192     		str	r2, [sp, #4]
 1845              	.LVL241:
1608:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1846              		.loc 1 1608 0
 1847 000a 0028     		cmp	r0, #0
 1848 000c 01D1     		bne	.L150
1608:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1849              		.loc 1 1608 0 is_stmt 0 discriminator 1
 1850              		.syntax divided
 1851              	@ 1608 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 1852 000e 72B6     		 cpsid i 
 1853              	@ 0 "" 2
 1854              		.thumb
 1855              		.syntax unified
 1856              	.L151:
 1857 0010 FEE7     		b	.L151
 1858              	.L150:
1612:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1859              		.loc 1 1612 0 is_stmt 1
 1860 0012 0029     		cmp	r1, #0
 1861 0014 04D1     		bne	.L168
1612:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1862              		.loc 1 1612 0 is_stmt 0 discriminator 2
 1863 0016 036C     		ldr	r3, [r0, #64]
 1864 0018 002B     		cmp	r3, #0
 1865 001a 03D1     		bne	.L169
1612:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1866              		.loc 1 1612 0
 1867 001c 0133     		adds	r3, r3, #1
 1868 001e 02E0     		b	.L152
 1869              	.L168:
 1870 0020 0123     		movs	r3, #1
 1871 0022 00E0     		b	.L152
 1872              	.L169:
 1873 0024 0023     		movs	r3, #0
 1874              	.L152:
1612:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1875              		.loc 1 1612 0 discriminator 6
 1876 0026 002B     		cmp	r3, #0
 1877 0028 01D1     		bne	.L153
1612:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1878              		.loc 1 1612 0 discriminator 7
 1879              		.syntax divided
 1880              	@ 1612 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 1881 002a 72B6     		 cpsid i 
 1882              	@ 0 "" 2
 1883              		.thumb
 1884              		.syntax unified
 1885              	.L154:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 80


 1886 002c FEE7     		b	.L154
 1887              	.L153:
1617:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 1888              		.loc 1 1617 0 is_stmt 1
 1889 002e FFF7FEFF 		bl	xTaskGetSchedulerState
 1890              	.LVL242:
 1891 0032 0028     		cmp	r0, #0
 1892 0034 04D1     		bne	.L170
1617:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 1893              		.loc 1 1617 0 is_stmt 0 discriminator 2
 1894 0036 019B     		ldr	r3, [sp, #4]
 1895 0038 002B     		cmp	r3, #0
 1896 003a 03D1     		bne	.L171
1617:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 1897              		.loc 1 1617 0
 1898 003c 0133     		adds	r3, r3, #1
 1899 003e 02E0     		b	.L155
 1900              	.L170:
 1901 0040 0123     		movs	r3, #1
 1902 0042 00E0     		b	.L155
 1903              	.L171:
 1904 0044 0023     		movs	r3, #0
 1905              	.L155:
1617:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 1906              		.loc 1 1617 0 discriminator 6
 1907 0046 002B     		cmp	r3, #0
 1908 0048 01D1     		bne	.L172
1617:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 1909              		.loc 1 1617 0 discriminator 7
 1910              		.syntax divided
 1911              	@ 1617 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 1912 004a 72B6     		 cpsid i 
 1913              	@ 0 "" 2
 1914              		.thumb
 1915              		.syntax unified
 1916              	.L157:
 1917 004c FEE7     		b	.L157
 1918              	.L172:
 1919 004e 0026     		movs	r6, #0
 1920              	.LVL243:
 1921              	.L156:
1628:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 1922              		.loc 1 1628 0 is_stmt 1
 1923 0050 FFF7FEFF 		bl	vPortEnterCritical
 1924              	.LVL244:
 1925              	.LBB11:
1630:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1926              		.loc 1 1630 0
 1927 0054 A36B     		ldr	r3, [r4, #56]
 1928              	.LVL245:
1634:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 1929              		.loc 1 1634 0
 1930 0056 002B     		cmp	r3, #0
 1931 0058 14D0     		beq	.L158
1639:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1932              		.loc 1 1639 0
 1933 005a E668     		ldr	r6, [r4, #12]
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 81


 1934              	.LVL246:
1641:Source\FreeRTOS\10.0.1\Source/queue.c **** 				traceQUEUE_PEEK( pxQueue );
 1935              		.loc 1 1641 0
 1936 005c 2900     		movs	r1, r5
 1937 005e 2000     		movs	r0, r4
 1938 0060 FFF7FEFF 		bl	prvCopyDataFromQueue
 1939              	.LVL247:
1645:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1940              		.loc 1 1645 0
 1941 0064 E660     		str	r6, [r4, #12]
1649:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 1942              		.loc 1 1649 0
 1943 0066 636A     		ldr	r3, [r4, #36]
 1944 0068 002B     		cmp	r3, #0
 1945 006a 07D0     		beq	.L159
1651:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
 1946              		.loc 1 1651 0
 1947 006c 2000     		movs	r0, r4
 1948 006e 2430     		adds	r0, r0, #36
 1949 0070 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1950              	.LVL248:
 1951 0074 0028     		cmp	r0, #0
 1952 0076 01D0     		beq	.L159
1654:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
 1953              		.loc 1 1654 0
 1954 0078 FFF7FEFF 		bl	vPortYield
 1955              	.LVL249:
 1956              	.L159:
1666:Source\FreeRTOS\10.0.1\Source/queue.c **** 				return pdPASS;
 1957              		.loc 1 1666 0
 1958 007c FFF7FEFF 		bl	vPortExitCritical
 1959              	.LVL250:
1667:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 1960              		.loc 1 1667 0
 1961 0080 0120     		movs	r0, #1
 1962 0082 4FE0     		b	.L160
 1963              	.LVL251:
 1964              	.L158:
1671:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 1965              		.loc 1 1671 0
 1966 0084 019B     		ldr	r3, [sp, #4]
 1967              	.LVL252:
 1968 0086 002B     		cmp	r3, #0
 1969 0088 03D1     		bne	.L161
1675:Source\FreeRTOS\10.0.1\Source/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
 1970              		.loc 1 1675 0
 1971 008a FFF7FEFF 		bl	vPortExitCritical
 1972              	.LVL253:
1677:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 1973              		.loc 1 1677 0
 1974 008e 0020     		movs	r0, #0
 1975 0090 48E0     		b	.L160
 1976              	.L161:
1679:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 1977              		.loc 1 1679 0
 1978 0092 002E     		cmp	r6, #0
 1979 0094 03D1     		bne	.L162
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 82


1684:Source\FreeRTOS\10.0.1\Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1980              		.loc 1 1684 0
 1981 0096 02A8     		add	r0, sp, #8
 1982 0098 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1983              	.LVL254:
1685:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 1984              		.loc 1 1685 0
 1985 009c 0136     		adds	r6, r6, #1
 1986              	.LVL255:
 1987              	.L162:
 1988              	.LBE11:
1694:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1989              		.loc 1 1694 0
 1990 009e FFF7FEFF 		bl	vPortExitCritical
 1991              	.LVL256:
1699:Source\FreeRTOS\10.0.1\Source/queue.c **** 		prvLockQueue( pxQueue );
 1992              		.loc 1 1699 0
 1993 00a2 FFF7FEFF 		bl	vTaskSuspendAll
 1994              	.LVL257:
1700:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 1995              		.loc 1 1700 0
 1996 00a6 FFF7FEFF 		bl	vPortEnterCritical
 1997              	.LVL258:
 1998 00aa 4423     		movs	r3, #68
 1999 00ac E35C     		ldrb	r3, [r4, r3]
 2000 00ae 5BB2     		sxtb	r3, r3
 2001 00b0 0133     		adds	r3, r3, #1
 2002 00b2 02D1     		bne	.L163
1700:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2003              		.loc 1 1700 0 is_stmt 0 discriminator 1
 2004 00b4 0022     		movs	r2, #0
 2005 00b6 4423     		movs	r3, #68
 2006 00b8 E254     		strb	r2, [r4, r3]
 2007              	.L163:
1700:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2008              		.loc 1 1700 0 discriminator 3
 2009 00ba 4523     		movs	r3, #69
 2010 00bc E35C     		ldrb	r3, [r4, r3]
 2011 00be 5BB2     		sxtb	r3, r3
 2012 00c0 0133     		adds	r3, r3, #1
 2013 00c2 02D1     		bne	.L164
1700:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2014              		.loc 1 1700 0 discriminator 4
 2015 00c4 0022     		movs	r2, #0
 2016 00c6 4523     		movs	r3, #69
 2017 00c8 E254     		strb	r2, [r4, r3]
 2018              	.L164:
1700:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2019              		.loc 1 1700 0 discriminator 6
 2020 00ca FFF7FEFF 		bl	vPortExitCritical
 2021              	.LVL259:
1703:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 2022              		.loc 1 1703 0 is_stmt 1 discriminator 6
 2023 00ce 01A9     		add	r1, sp, #4
 2024              	.LVL260:
 2025 00d0 02A8     		add	r0, sp, #8
 2026 00d2 FFF7FEFF 		bl	xTaskCheckForTimeOut
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 83


 2027              	.LVL261:
 2028 00d6 0028     		cmp	r0, #0
 2029 00d8 19D1     		bne	.L165
1707:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 2030              		.loc 1 1707 0
 2031 00da 2000     		movs	r0, r4
 2032 00dc FFF7FEFF 		bl	prvIsQueueEmpty
 2033              	.LVL262:
 2034 00e0 0028     		cmp	r0, #0
 2035 00e2 0ED0     		beq	.L166
1710:Source\FreeRTOS\10.0.1\Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2036              		.loc 1 1710 0
 2037 00e4 2000     		movs	r0, r4
 2038 00e6 2430     		adds	r0, r0, #36
 2039 00e8 0199     		ldr	r1, [sp, #4]
 2040 00ea FFF7FEFF 		bl	vTaskPlaceOnEventList
 2041              	.LVL263:
1711:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2042              		.loc 1 1711 0
 2043 00ee 2000     		movs	r0, r4
 2044 00f0 FFF7FEFF 		bl	prvUnlockQueue
 2045              	.LVL264:
1712:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 2046              		.loc 1 1712 0
 2047 00f4 FFF7FEFF 		bl	xTaskResumeAll
 2048              	.LVL265:
 2049 00f8 0028     		cmp	r0, #0
 2050 00fa A9D1     		bne	.L156
1714:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
 2051              		.loc 1 1714 0
 2052 00fc FFF7FEFF 		bl	vPortYield
 2053              	.LVL266:
 2054 0100 A6E7     		b	.L156
 2055              	.L166:
1725:Source\FreeRTOS\10.0.1\Source/queue.c **** 				( void ) xTaskResumeAll();
 2056              		.loc 1 1725 0
 2057 0102 2000     		movs	r0, r4
 2058 0104 FFF7FEFF 		bl	prvUnlockQueue
 2059              	.LVL267:
1726:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 2060              		.loc 1 1726 0
 2061 0108 FFF7FEFF 		bl	xTaskResumeAll
 2062              	.LVL268:
 2063 010c A0E7     		b	.L156
 2064              	.L165:
1733:Source\FreeRTOS\10.0.1\Source/queue.c **** 			( void ) xTaskResumeAll();
 2065              		.loc 1 1733 0
 2066 010e 2000     		movs	r0, r4
 2067 0110 FFF7FEFF 		bl	prvUnlockQueue
 2068              	.LVL269:
1734:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2069              		.loc 1 1734 0
 2070 0114 FFF7FEFF 		bl	xTaskResumeAll
 2071              	.LVL270:
1736:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 2072              		.loc 1 1736 0
 2073 0118 2000     		movs	r0, r4
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 84


 2074 011a FFF7FEFF 		bl	prvIsQueueEmpty
 2075              	.LVL271:
 2076 011e 0028     		cmp	r0, #0
 2077 0120 96D0     		beq	.L156
1739:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 2078              		.loc 1 1739 0
 2079 0122 0020     		movs	r0, #0
 2080              	.LVL272:
 2081              	.L160:
1747:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 2082              		.loc 1 1747 0
 2083 0124 04B0     		add	sp, sp, #16
 2084              		@ sp needed
 2085              	.LVL273:
 2086              	.LVL274:
 2087 0126 70BD     		pop	{r4, r5, r6, pc}
 2088              		.cfi_endproc
 2089              	.LFE44:
 2090              		.size	xQueuePeek, .-xQueuePeek
 2091              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2092              		.align	2
 2093              		.global	xQueueReceiveFromISR
 2094              		.code	16
 2095              		.thumb_func
 2096              		.type	xQueueReceiveFromISR, %function
 2097              	xQueueReceiveFromISR:
 2098              	.LFB45:
1751:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xReturn;
 2099              		.loc 1 1751 0
 2100              		.cfi_startproc
 2101              		@ args = 0, pretend = 0, frame = 8
 2102              		@ frame_needed = 0, uses_anonymous_args = 0
 2103              	.LVL275:
 2104 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2105              		.cfi_def_cfa_offset 20
 2106              		.cfi_offset 4, -20
 2107              		.cfi_offset 5, -16
 2108              		.cfi_offset 6, -12
 2109              		.cfi_offset 7, -8
 2110              		.cfi_offset 14, -4
 2111 0002 83B0     		sub	sp, sp, #12
 2112              		.cfi_def_cfa_offset 32
 2113 0004 0400     		movs	r4, r0
 2114 0006 0091     		str	r1, [sp]
 2115 0008 1600     		movs	r6, r2
 2116              	.LVL276:
1756:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2117              		.loc 1 1756 0
 2118 000a 0028     		cmp	r0, #0
 2119 000c 01D1     		bne	.L174
1756:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2120              		.loc 1 1756 0 is_stmt 0 discriminator 1
 2121              		.syntax divided
 2122              	@ 1756 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 2123 000e 72B6     		 cpsid i 
 2124              	@ 0 "" 2
 2125              		.thumb
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 85


 2126              		.syntax unified
 2127              	.L175:
 2128 0010 FEE7     		b	.L175
 2129              	.L174:
1757:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2130              		.loc 1 1757 0 is_stmt 1
 2131 0012 009B     		ldr	r3, [sp]
 2132 0014 002B     		cmp	r3, #0
 2133 0016 04D1     		bne	.L181
1757:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2134              		.loc 1 1757 0 is_stmt 0 discriminator 2
 2135 0018 036C     		ldr	r3, [r0, #64]
 2136 001a 002B     		cmp	r3, #0
 2137 001c 03D1     		bne	.L182
1757:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2138              		.loc 1 1757 0
 2139 001e 0133     		adds	r3, r3, #1
 2140 0020 02E0     		b	.L176
 2141              	.L181:
 2142 0022 0123     		movs	r3, #1
 2143 0024 00E0     		b	.L176
 2144              	.L182:
 2145 0026 0023     		movs	r3, #0
 2146              	.L176:
1757:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2147              		.loc 1 1757 0 discriminator 6
 2148 0028 002B     		cmp	r3, #0
 2149 002a 01D1     		bne	.L177
1757:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2150              		.loc 1 1757 0 discriminator 7
 2151              		.syntax divided
 2152              	@ 1757 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 2153 002c 72B6     		 cpsid i 
 2154              	@ 0 "" 2
 2155              		.thumb
 2156              		.syntax unified
 2157              	.L178:
 2158 002e FEE7     		b	.L178
 2159              	.L177:
1775:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 2160              		.loc 1 1775 0 is_stmt 1
 2161 0030 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 2162              	.LVL277:
 2163 0034 0190     		str	r0, [sp, #4]
 2164              	.LVL278:
 2165              	.LBB12:
1777:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2166              		.loc 1 1777 0
 2167 0036 A76B     		ldr	r7, [r4, #56]
 2168              	.LVL279:
1780:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 2169              		.loc 1 1780 0
 2170 0038 002F     		cmp	r7, #0
 2171 003a 1FD0     		beq	.L183
 2172              	.LBB13:
1782:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2173              		.loc 1 1782 0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 86


 2174 003c 4423     		movs	r3, #68
 2175 003e E55C     		ldrb	r5, [r4, r3]
 2176 0040 6DB2     		sxtb	r5, r5
 2177              	.LVL280:
1786:Source\FreeRTOS\10.0.1\Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2178              		.loc 1 1786 0
 2179 0042 0099     		ldr	r1, [sp]
 2180 0044 2000     		movs	r0, r4
 2181              	.LVL281:
 2182 0046 FFF7FEFF 		bl	prvCopyDataFromQueue
 2183              	.LVL282:
1787:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2184              		.loc 1 1787 0
 2185 004a 7B1E     		subs	r3, r7, #1
 2186 004c A363     		str	r3, [r4, #56]
1793:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
 2187              		.loc 1 1793 0
 2188 004e 6B1C     		adds	r3, r5, #1
 2189 0050 0ED1     		bne	.L180
1795:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
 2190              		.loc 1 1795 0
 2191 0052 2369     		ldr	r3, [r4, #16]
 2192 0054 002B     		cmp	r3, #0
 2193 0056 13D0     		beq	.L184
1797:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
 2194              		.loc 1 1797 0
 2195 0058 2000     		movs	r0, r4
 2196 005a 1030     		adds	r0, r0, #16
 2197 005c FFF7FEFF 		bl	xTaskRemoveFromEventList
 2198              	.LVL283:
 2199 0060 0028     		cmp	r0, #0
 2200 0062 0FD0     		beq	.L185
1801:Source\FreeRTOS\10.0.1\Source/queue.c **** 						{
 2201              		.loc 1 1801 0
 2202 0064 002E     		cmp	r6, #0
 2203 0066 0FD0     		beq	.L186
1803:Source\FreeRTOS\10.0.1\Source/queue.c **** 						}
 2204              		.loc 1 1803 0
 2205 0068 0123     		movs	r3, #1
 2206 006a 3360     		str	r3, [r6]
1827:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 2207              		.loc 1 1827 0
 2208 006c 0124     		movs	r4, #1
 2209              	.LVL284:
 2210 006e 0CE0     		b	.L179
 2211              	.LVL285:
 2212              	.L180:
1824:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
 2213              		.loc 1 1824 0
 2214 0070 0135     		adds	r5, r5, #1
 2215              	.LVL286:
 2216 0072 6DB2     		sxtb	r5, r5
 2217              	.LVL287:
 2218 0074 4423     		movs	r3, #68
 2219 0076 E554     		strb	r5, [r4, r3]
1827:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 2220              		.loc 1 1827 0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 87


 2221 0078 0124     		movs	r4, #1
 2222              	.LVL288:
 2223 007a 06E0     		b	.L179
 2224              	.LVL289:
 2225              	.L183:
 2226              	.LBE13:
1831:Source\FreeRTOS\10.0.1\Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2227              		.loc 1 1831 0
 2228 007c 0024     		movs	r4, #0
 2229              	.LVL290:
 2230 007e 04E0     		b	.L179
 2231              	.LVL291:
 2232              	.L184:
 2233              	.LBB14:
1827:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 2234              		.loc 1 1827 0
 2235 0080 0124     		movs	r4, #1
 2236              	.LVL292:
 2237 0082 02E0     		b	.L179
 2238              	.LVL293:
 2239              	.L185:
 2240 0084 0124     		movs	r4, #1
 2241              	.LVL294:
 2242 0086 00E0     		b	.L179
 2243              	.LVL295:
 2244              	.L186:
 2245 0088 0124     		movs	r4, #1
 2246              	.LVL296:
 2247              	.L179:
 2248              	.LBE14:
 2249              	.LBE12:
1835:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2250              		.loc 1 1835 0
 2251 008a 0198     		ldr	r0, [sp, #4]
 2252 008c FFF7FEFF 		bl	vClearInterruptMaskFromISR
 2253              	.LVL297:
1838:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 2254              		.loc 1 1838 0
 2255 0090 2000     		movs	r0, r4
 2256 0092 03B0     		add	sp, sp, #12
 2257              	.LVL298:
 2258              		@ sp needed
 2259              	.LVL299:
 2260              	.LVL300:
 2261              	.LVL301:
 2262 0094 F0BD     		pop	{r4, r5, r6, r7, pc}
 2263              		.cfi_endproc
 2264              	.LFE45:
 2265              		.size	xQueueReceiveFromISR, .-xQueueReceiveFromISR
 2266 0096 C046     		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2267              		.align	2
 2268              		.global	xQueuePeekFromISR
 2269              		.code	16
 2270              		.thumb_func
 2271              		.type	xQueuePeekFromISR, %function
 2272              	xQueuePeekFromISR:
 2273              	.LFB46:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 88


1842:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xReturn;
 2274              		.loc 1 1842 0
 2275              		.cfi_startproc
 2276              		@ args = 0, pretend = 0, frame = 0
 2277              		@ frame_needed = 0, uses_anonymous_args = 0
 2278              	.LVL302:
 2279 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2280              		.cfi_def_cfa_offset 24
 2281              		.cfi_offset 3, -24
 2282              		.cfi_offset 4, -20
 2283              		.cfi_offset 5, -16
 2284              		.cfi_offset 6, -12
 2285              		.cfi_offset 7, -8
 2286              		.cfi_offset 14, -4
 2287 0002 0400     		movs	r4, r0
 2288 0004 0D00     		movs	r5, r1
 2289              	.LVL303:
1848:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2290              		.loc 1 1848 0
 2291 0006 0028     		cmp	r0, #0
 2292 0008 01D1     		bne	.L188
1848:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2293              		.loc 1 1848 0 is_stmt 0 discriminator 1
 2294              		.syntax divided
 2295              	@ 1848 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 2296 000a 72B6     		 cpsid i 
 2297              	@ 0 "" 2
 2298              		.thumb
 2299              		.syntax unified
 2300              	.L189:
 2301 000c FEE7     		b	.L189
 2302              	.L188:
1849:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2303              		.loc 1 1849 0 is_stmt 1
 2304 000e 0029     		cmp	r1, #0
 2305 0010 04D1     		bne	.L196
1849:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2306              		.loc 1 1849 0 is_stmt 0 discriminator 2
 2307 0012 036C     		ldr	r3, [r0, #64]
 2308 0014 002B     		cmp	r3, #0
 2309 0016 03D1     		bne	.L197
1849:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2310              		.loc 1 1849 0
 2311 0018 0133     		adds	r3, r3, #1
 2312 001a 02E0     		b	.L190
 2313              	.L196:
 2314 001c 0123     		movs	r3, #1
 2315 001e 00E0     		b	.L190
 2316              	.L197:
 2317 0020 0023     		movs	r3, #0
 2318              	.L190:
1849:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2319              		.loc 1 1849 0 discriminator 6
 2320 0022 002B     		cmp	r3, #0
 2321 0024 01D1     		bne	.L191
1849:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2322              		.loc 1 1849 0 discriminator 7
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 89


 2323              		.syntax divided
 2324              	@ 1849 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 2325 0026 72B6     		 cpsid i 
 2326              	@ 0 "" 2
 2327              		.thumb
 2328              		.syntax unified
 2329              	.L192:
 2330 0028 FEE7     		b	.L192
 2331              	.L191:
1850:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2332              		.loc 1 1850 0 is_stmt 1
 2333 002a 236C     		ldr	r3, [r4, #64]
 2334 002c 002B     		cmp	r3, #0
 2335 002e 01D1     		bne	.L193
1850:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2336              		.loc 1 1850 0 is_stmt 0 discriminator 1
 2337              		.syntax divided
 2338              	@ 1850 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 2339 0030 72B6     		 cpsid i 
 2340              	@ 0 "" 2
 2341              		.thumb
 2342              		.syntax unified
 2343              	.L194:
 2344 0032 FEE7     		b	.L194
 2345              	.L193:
1868:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 2346              		.loc 1 1868 0 is_stmt 1
 2347 0034 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 2348              	.LVL304:
 2349 0038 0600     		movs	r6, r0
 2350              	.LVL305:
1871:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 2351              		.loc 1 1871 0
 2352 003a A36B     		ldr	r3, [r4, #56]
 2353 003c 002B     		cmp	r3, #0
 2354 003e 07D0     		beq	.L198
1877:Source\FreeRTOS\10.0.1\Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2355              		.loc 1 1877 0
 2356 0040 E768     		ldr	r7, [r4, #12]
 2357              	.LVL306:
1878:Source\FreeRTOS\10.0.1\Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 2358              		.loc 1 1878 0
 2359 0042 2900     		movs	r1, r5
 2360 0044 2000     		movs	r0, r4
 2361              	.LVL307:
 2362 0046 FFF7FEFF 		bl	prvCopyDataFromQueue
 2363              	.LVL308:
1879:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2364              		.loc 1 1879 0
 2365 004a E760     		str	r7, [r4, #12]
 2366              	.LVL309:
1881:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
 2367              		.loc 1 1881 0
 2368 004c 0124     		movs	r4, #1
 2369              	.LVL310:
 2370 004e 00E0     		b	.L195
 2371              	.LVL311:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 90


 2372              	.L198:
1885:Source\FreeRTOS\10.0.1\Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2373              		.loc 1 1885 0
 2374 0050 0024     		movs	r4, #0
 2375              	.LVL312:
 2376              	.L195:
1889:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2377              		.loc 1 1889 0
 2378 0052 3000     		movs	r0, r6
 2379 0054 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 2380              	.LVL313:
1892:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 2381              		.loc 1 1892 0
 2382 0058 2000     		movs	r0, r4
 2383              		@ sp needed
 2384              	.LVL314:
 2385              	.LVL315:
 2386              	.LVL316:
 2387 005a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2388              		.cfi_endproc
 2389              	.LFE46:
 2390              		.size	xQueuePeekFromISR, .-xQueuePeekFromISR
 2391              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2392              		.align	2
 2393              		.global	uxQueueMessagesWaiting
 2394              		.code	16
 2395              		.thumb_func
 2396              		.type	uxQueueMessagesWaiting, %function
 2397              	uxQueueMessagesWaiting:
 2398              	.LFB47:
1896:Source\FreeRTOS\10.0.1\Source/queue.c **** UBaseType_t uxReturn;
 2399              		.loc 1 1896 0
 2400              		.cfi_startproc
 2401              		@ args = 0, pretend = 0, frame = 0
 2402              		@ frame_needed = 0, uses_anonymous_args = 0
 2403              	.LVL317:
 2404 0000 10B5     		push	{r4, lr}
 2405              		.cfi_def_cfa_offset 8
 2406              		.cfi_offset 4, -8
 2407              		.cfi_offset 14, -4
 2408 0002 041E     		subs	r4, r0, #0
1899:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2409              		.loc 1 1899 0
 2410 0004 01D1     		bne	.L200
1899:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2411              		.loc 1 1899 0 is_stmt 0 discriminator 1
 2412              		.syntax divided
 2413              	@ 1899 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 2414 0006 72B6     		 cpsid i 
 2415              	@ 0 "" 2
 2416              		.thumb
 2417              		.syntax unified
 2418              	.L201:
 2419 0008 FEE7     		b	.L201
 2420              	.L200:
1901:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 2421              		.loc 1 1901 0 is_stmt 1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 91


 2422 000a FFF7FEFF 		bl	vPortEnterCritical
 2423              	.LVL318:
1903:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 2424              		.loc 1 1903 0
 2425 000e A46B     		ldr	r4, [r4, #56]
 2426              	.LVL319:
1905:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2427              		.loc 1 1905 0
 2428 0010 FFF7FEFF 		bl	vPortExitCritical
 2429              	.LVL320:
1908:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 2430              		.loc 1 1908 0
 2431 0014 2000     		movs	r0, r4
 2432              		@ sp needed
 2433              	.LVL321:
 2434 0016 10BD     		pop	{r4, pc}
 2435              		.cfi_endproc
 2436              	.LFE47:
 2437              		.size	uxQueueMessagesWaiting, .-uxQueueMessagesWaiting
 2438              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2439              		.align	2
 2440              		.global	uxQueueSpacesAvailable
 2441              		.code	16
 2442              		.thumb_func
 2443              		.type	uxQueueSpacesAvailable, %function
 2444              	uxQueueSpacesAvailable:
 2445              	.LFB48:
1912:Source\FreeRTOS\10.0.1\Source/queue.c **** UBaseType_t uxReturn;
 2446              		.loc 1 1912 0
 2447              		.cfi_startproc
 2448              		@ args = 0, pretend = 0, frame = 0
 2449              		@ frame_needed = 0, uses_anonymous_args = 0
 2450              	.LVL322:
 2451 0000 10B5     		push	{r4, lr}
 2452              		.cfi_def_cfa_offset 8
 2453              		.cfi_offset 4, -8
 2454              		.cfi_offset 14, -4
 2455 0002 041E     		subs	r4, r0, #0
 2456              	.LVL323:
1917:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2457              		.loc 1 1917 0
 2458 0004 01D1     		bne	.L203
1917:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2459              		.loc 1 1917 0 is_stmt 0 discriminator 1
 2460              		.syntax divided
 2461              	@ 1917 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 2462 0006 72B6     		 cpsid i 
 2463              	@ 0 "" 2
 2464              		.thumb
 2465              		.syntax unified
 2466              	.L204:
 2467 0008 FEE7     		b	.L204
 2468              	.L203:
1919:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 2469              		.loc 1 1919 0 is_stmt 1
 2470 000a FFF7FEFF 		bl	vPortEnterCritical
 2471              	.LVL324:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 92


1921:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 2472              		.loc 1 1921 0
 2473 000e E36B     		ldr	r3, [r4, #60]
 2474 0010 A46B     		ldr	r4, [r4, #56]
 2475              	.LVL325:
 2476 0012 1C1B     		subs	r4, r3, r4
 2477              	.LVL326:
1923:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2478              		.loc 1 1923 0
 2479 0014 FFF7FEFF 		bl	vPortExitCritical
 2480              	.LVL327:
1926:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 2481              		.loc 1 1926 0
 2482 0018 2000     		movs	r0, r4
 2483              		@ sp needed
 2484              	.LVL328:
 2485 001a 10BD     		pop	{r4, pc}
 2486              		.cfi_endproc
 2487              	.LFE48:
 2488              		.size	uxQueueSpacesAvailable, .-uxQueueSpacesAvailable
 2489              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2490              		.align	2
 2491              		.global	uxQueueMessagesWaitingFromISR
 2492              		.code	16
 2493              		.thumb_func
 2494              		.type	uxQueueMessagesWaitingFromISR, %function
 2495              	uxQueueMessagesWaitingFromISR:
 2496              	.LFB49:
1930:Source\FreeRTOS\10.0.1\Source/queue.c **** UBaseType_t uxReturn;
 2497              		.loc 1 1930 0
 2498              		.cfi_startproc
 2499              		@ args = 0, pretend = 0, frame = 0
 2500              		@ frame_needed = 0, uses_anonymous_args = 0
 2501              		@ link register save eliminated.
 2502              	.LVL329:
1933:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2503              		.loc 1 1933 0
 2504 0000 0028     		cmp	r0, #0
 2505 0002 01D1     		bne	.L206
1933:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2506              		.loc 1 1933 0 is_stmt 0 discriminator 1
 2507              		.syntax divided
 2508              	@ 1933 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 2509 0004 72B6     		 cpsid i 
 2510              	@ 0 "" 2
 2511              		.thumb
 2512              		.syntax unified
 2513              	.L207:
 2514 0006 FEE7     		b	.L207
 2515              	.L206:
1935:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2516              		.loc 1 1935 0 is_stmt 1
 2517 0008 806B     		ldr	r0, [r0, #56]
 2518              	.LVL330:
1938:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 2519              		.loc 1 1938 0
 2520              		@ sp needed
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 93


 2521 000a 7047     		bx	lr
 2522              		.cfi_endproc
 2523              	.LFE49:
 2524              		.size	uxQueueMessagesWaitingFromISR, .-uxQueueMessagesWaitingFromISR
 2525              		.section	.text.uxQueueGetQueueNumber,"ax",%progbits
 2526              		.align	2
 2527              		.global	uxQueueGetQueueNumber
 2528              		.code	16
 2529              		.thumb_func
 2530              		.type	uxQueueGetQueueNumber, %function
 2531              	uxQueueGetQueueNumber:
 2532              	.LFB51:
1986:Source\FreeRTOS\10.0.1\Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 2533              		.loc 1 1986 0
 2534              		.cfi_startproc
 2535              		@ args = 0, pretend = 0, frame = 0
 2536              		@ frame_needed = 0, uses_anonymous_args = 0
 2537              		@ link register save eliminated.
 2538              	.LVL331:
1987:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 2539              		.loc 1 1987 0
 2540 0000 806C     		ldr	r0, [r0, #72]
 2541              	.LVL332:
1988:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2542              		.loc 1 1988 0
 2543              		@ sp needed
 2544 0002 7047     		bx	lr
 2545              		.cfi_endproc
 2546              	.LFE51:
 2547              		.size	uxQueueGetQueueNumber, .-uxQueueGetQueueNumber
 2548              		.section	.text.vQueueSetQueueNumber,"ax",%progbits
 2549              		.align	2
 2550              		.global	vQueueSetQueueNumber
 2551              		.code	16
 2552              		.thumb_func
 2553              		.type	vQueueSetQueueNumber, %function
 2554              	vQueueSetQueueNumber:
 2555              	.LFB52:
1996:Source\FreeRTOS\10.0.1\Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 2556              		.loc 1 1996 0
 2557              		.cfi_startproc
 2558              		@ args = 0, pretend = 0, frame = 0
 2559              		@ frame_needed = 0, uses_anonymous_args = 0
 2560              		@ link register save eliminated.
 2561              	.LVL333:
1997:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 2562              		.loc 1 1997 0
 2563 0000 8164     		str	r1, [r0, #72]
1998:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2564              		.loc 1 1998 0
 2565              		@ sp needed
 2566 0002 7047     		bx	lr
 2567              		.cfi_endproc
 2568              	.LFE52:
 2569              		.size	vQueueSetQueueNumber, .-vQueueSetQueueNumber
 2570              		.section	.text.ucQueueGetQueueType,"ax",%progbits
 2571              		.align	2
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 94


 2572              		.global	ucQueueGetQueueType
 2573              		.code	16
 2574              		.thumb_func
 2575              		.type	ucQueueGetQueueType, %function
 2576              	ucQueueGetQueueType:
 2577              	.LFB53:
2006:Source\FreeRTOS\10.0.1\Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
 2578              		.loc 1 2006 0
 2579              		.cfi_startproc
 2580              		@ args = 0, pretend = 0, frame = 0
 2581              		@ frame_needed = 0, uses_anonymous_args = 0
 2582              		@ link register save eliminated.
 2583              	.LVL334:
2007:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 2584              		.loc 1 2007 0
 2585 0000 4C23     		movs	r3, #76
 2586 0002 C05C     		ldrb	r0, [r0, r3]
 2587              	.LVL335:
2008:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2588              		.loc 1 2008 0
 2589              		@ sp needed
 2590 0004 7047     		bx	lr
 2591              		.cfi_endproc
 2592              	.LFE53:
 2593              		.size	ucQueueGetQueueType, .-ucQueueGetQueueType
 2594 0006 C046     		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2595              		.align	2
 2596              		.global	xQueueIsQueueEmptyFromISR
 2597              		.code	16
 2598              		.thumb_func
 2599              		.type	xQueueIsQueueEmptyFromISR, %function
 2600              	xQueueIsQueueEmptyFromISR:
 2601              	.LFB58:
2279:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xReturn;
 2602              		.loc 1 2279 0
 2603              		.cfi_startproc
 2604              		@ args = 0, pretend = 0, frame = 0
 2605              		@ frame_needed = 0, uses_anonymous_args = 0
 2606              		@ link register save eliminated.
 2607              	.LVL336:
2282:Source\FreeRTOS\10.0.1\Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2608              		.loc 1 2282 0
 2609 0000 0028     		cmp	r0, #0
 2610 0002 01D1     		bne	.L212
2282:Source\FreeRTOS\10.0.1\Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2611              		.loc 1 2282 0 is_stmt 0 discriminator 1
 2612              		.syntax divided
 2613              	@ 2282 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 2614 0004 72B6     		 cpsid i 
 2615              	@ 0 "" 2
 2616              		.thumb
 2617              		.syntax unified
 2618              	.L213:
 2619 0006 FEE7     		b	.L213
 2620              	.L212:
2283:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 2621              		.loc 1 2283 0 is_stmt 1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 95


 2622 0008 836B     		ldr	r3, [r0, #56]
 2623 000a 002B     		cmp	r3, #0
 2624 000c 01D1     		bne	.L215
2285:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 2625              		.loc 1 2285 0
 2626 000e 0120     		movs	r0, #1
 2627              	.LVL337:
 2628 0010 00E0     		b	.L214
 2629              	.LVL338:
 2630              	.L215:
2289:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 2631              		.loc 1 2289 0
 2632 0012 0020     		movs	r0, #0
 2633              	.LVL339:
 2634              	.L214:
2293:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 2635              		.loc 1 2293 0
 2636              		@ sp needed
 2637 0014 7047     		bx	lr
 2638              		.cfi_endproc
 2639              	.LFE58:
 2640              		.size	xQueueIsQueueEmptyFromISR, .-xQueueIsQueueEmptyFromISR
 2641 0016 C046     		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2642              		.align	2
 2643              		.global	xQueueIsQueueFullFromISR
 2644              		.code	16
 2645              		.thumb_func
 2646              		.type	xQueueIsQueueFullFromISR, %function
 2647              	xQueueIsQueueFullFromISR:
 2648              	.LFB60:
2315:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
2316:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2317:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2318:Source\FreeRTOS\10.0.1\Source/queue.c **** {
 2649              		.loc 1 2318 0
 2650              		.cfi_startproc
 2651              		@ args = 0, pretend = 0, frame = 0
 2652              		@ frame_needed = 0, uses_anonymous_args = 0
 2653              		@ link register save eliminated.
 2654              	.LVL340:
2319:Source\FreeRTOS\10.0.1\Source/queue.c **** BaseType_t xReturn;
2320:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2321:Source\FreeRTOS\10.0.1\Source/queue.c **** 	configASSERT( xQueue );
 2655              		.loc 1 2321 0
 2656 0000 0028     		cmp	r0, #0
 2657 0002 01D1     		bne	.L217
 2658              		.loc 1 2321 0 is_stmt 0 discriminator 1
 2659              		.syntax divided
 2660              	@ 2321 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 2661 0004 72B6     		 cpsid i 
 2662              	@ 0 "" 2
 2663              		.thumb
 2664              		.syntax unified
 2665              	.L218:
 2666 0006 FEE7     		b	.L218
 2667              	.L217:
2322:Source\FreeRTOS\10.0.1\Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 96


 2668              		.loc 1 2322 0 is_stmt 1
 2669 0008 826B     		ldr	r2, [r0, #56]
 2670 000a C36B     		ldr	r3, [r0, #60]
 2671 000c 9A42     		cmp	r2, r3
 2672 000e 01D1     		bne	.L220
2323:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
2324:Source\FreeRTOS\10.0.1\Source/queue.c **** 		xReturn = pdTRUE;
 2673              		.loc 1 2324 0
 2674 0010 0120     		movs	r0, #1
 2675              	.LVL341:
 2676 0012 00E0     		b	.L219
 2677              	.LVL342:
 2678              	.L220:
2325:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
2326:Source\FreeRTOS\10.0.1\Source/queue.c **** 	else
2327:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
2328:Source\FreeRTOS\10.0.1\Source/queue.c **** 		xReturn = pdFALSE;
 2679              		.loc 1 2328 0
 2680 0014 0020     		movs	r0, #0
 2681              	.LVL343:
 2682              	.L219:
2329:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
2330:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2331:Source\FreeRTOS\10.0.1\Source/queue.c **** 	return xReturn;
2332:Source\FreeRTOS\10.0.1\Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2683              		.loc 1 2332 0
 2684              		@ sp needed
 2685 0016 7047     		bx	lr
 2686              		.cfi_endproc
 2687              	.LFE60:
 2688              		.size	xQueueIsQueueFullFromISR, .-xQueueIsQueueFullFromISR
 2689              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 2690              		.align	2
 2691              		.global	vQueueAddToRegistry
 2692              		.code	16
 2693              		.thumb_func
 2694              		.type	vQueueAddToRegistry, %function
 2695              	vQueueAddToRegistry:
 2696              	.LFB61:
2333:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
2334:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2335:Source\FreeRTOS\10.0.1\Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2336:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2337:Source\FreeRTOS\10.0.1\Source/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2338:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
2339:Source\FreeRTOS\10.0.1\Source/queue.c **** 	BaseType_t xReturn;
2340:Source\FreeRTOS\10.0.1\Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2341:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2342:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2343:Source\FreeRTOS\10.0.1\Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
2344:Source\FreeRTOS\10.0.1\Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2345:Source\FreeRTOS\10.0.1\Source/queue.c **** 		portDISABLE_INTERRUPTS();
2346:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2347:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2348:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2349:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
2350:Source\FreeRTOS\10.0.1\Source/queue.c **** 				posting? */
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 97


2351:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2352:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
2353:Source\FreeRTOS\10.0.1\Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2354:Source\FreeRTOS\10.0.1\Source/queue.c **** 					return indicating that we need to block. */
2355:Source\FreeRTOS\10.0.1\Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2356:Source\FreeRTOS\10.0.1\Source/queue.c **** 					portENABLE_INTERRUPTS();
2357:Source\FreeRTOS\10.0.1\Source/queue.c **** 					return errQUEUE_BLOCKED;
2358:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
2359:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
2360:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
2361:Source\FreeRTOS\10.0.1\Source/queue.c **** 					portENABLE_INTERRUPTS();
2362:Source\FreeRTOS\10.0.1\Source/queue.c **** 					return errQUEUE_FULL;
2363:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
2364:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2365:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2366:Source\FreeRTOS\10.0.1\Source/queue.c **** 		portENABLE_INTERRUPTS();
2367:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2368:Source\FreeRTOS\10.0.1\Source/queue.c **** 		portDISABLE_INTERRUPTS();
2369:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2370:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2371:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2372:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2373:Source\FreeRTOS\10.0.1\Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2374:Source\FreeRTOS\10.0.1\Source/queue.c **** 				xReturn = pdPASS;
2375:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2376:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2377:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2378:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
2379:Source\FreeRTOS\10.0.1\Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2380:Source\FreeRTOS\10.0.1\Source/queue.c **** 					into the ready list as we are within a critical section.
2381:Source\FreeRTOS\10.0.1\Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2382:Source\FreeRTOS\10.0.1\Source/queue.c **** 					the event were caused from within an interrupt. */
2383:Source\FreeRTOS\10.0.1\Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2384:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
2385:Source\FreeRTOS\10.0.1\Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
2386:Source\FreeRTOS\10.0.1\Source/queue.c **** 						that a yield might be appropriate. */
2387:Source\FreeRTOS\10.0.1\Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2388:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
2389:Source\FreeRTOS\10.0.1\Source/queue.c **** 					else
2390:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
2391:Source\FreeRTOS\10.0.1\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2392:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
2393:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
2394:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
2395:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
2396:Source\FreeRTOS\10.0.1\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2397:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
2398:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2399:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
2400:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2401:Source\FreeRTOS\10.0.1\Source/queue.c **** 				xReturn = errQUEUE_FULL;
2402:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2403:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2404:Source\FreeRTOS\10.0.1\Source/queue.c **** 		portENABLE_INTERRUPTS();
2405:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2406:Source\FreeRTOS\10.0.1\Source/queue.c **** 		return xReturn;
2407:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 98


2408:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2409:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2410:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
2411:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2412:Source\FreeRTOS\10.0.1\Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2413:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2414:Source\FreeRTOS\10.0.1\Source/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2415:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
2416:Source\FreeRTOS\10.0.1\Source/queue.c **** 	BaseType_t xReturn;
2417:Source\FreeRTOS\10.0.1\Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2418:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2419:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2420:Source\FreeRTOS\10.0.1\Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
2421:Source\FreeRTOS\10.0.1\Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2422:Source\FreeRTOS\10.0.1\Source/queue.c **** 		portDISABLE_INTERRUPTS();
2423:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2424:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2425:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2426:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2427:Source\FreeRTOS\10.0.1\Source/queue.c **** 				leave with nothing? */
2428:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2429:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
2430:Source\FreeRTOS\10.0.1\Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2431:Source\FreeRTOS\10.0.1\Source/queue.c **** 					indicating that we need to block. */
2432:Source\FreeRTOS\10.0.1\Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2433:Source\FreeRTOS\10.0.1\Source/queue.c **** 					portENABLE_INTERRUPTS();
2434:Source\FreeRTOS\10.0.1\Source/queue.c **** 					return errQUEUE_BLOCKED;
2435:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
2436:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
2437:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
2438:Source\FreeRTOS\10.0.1\Source/queue.c **** 					portENABLE_INTERRUPTS();
2439:Source\FreeRTOS\10.0.1\Source/queue.c **** 					return errQUEUE_FULL;
2440:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
2441:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2442:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
2443:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2444:Source\FreeRTOS\10.0.1\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2445:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2446:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2447:Source\FreeRTOS\10.0.1\Source/queue.c **** 		portENABLE_INTERRUPTS();
2448:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2449:Source\FreeRTOS\10.0.1\Source/queue.c **** 		portDISABLE_INTERRUPTS();
2450:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2451:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2452:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2453:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* Data is available from the queue. */
2454:Source\FreeRTOS\10.0.1\Source/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2455:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2456:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
2457:Source\FreeRTOS\10.0.1\Source/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2458:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
2459:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
2460:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
2461:Source\FreeRTOS\10.0.1\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2462:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
2463:Source\FreeRTOS\10.0.1\Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2464:Source\FreeRTOS\10.0.1\Source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 99


2465:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2466:Source\FreeRTOS\10.0.1\Source/queue.c **** 				xReturn = pdPASS;
2467:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2468:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2469:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2470:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
2471:Source\FreeRTOS\10.0.1\Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2472:Source\FreeRTOS\10.0.1\Source/queue.c **** 					into the ready list as we are within a critical section.
2473:Source\FreeRTOS\10.0.1\Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2474:Source\FreeRTOS\10.0.1\Source/queue.c **** 					the event were caused from within an interrupt. */
2475:Source\FreeRTOS\10.0.1\Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2476:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
2477:Source\FreeRTOS\10.0.1\Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2478:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
2479:Source\FreeRTOS\10.0.1\Source/queue.c **** 					else
2480:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
2481:Source\FreeRTOS\10.0.1\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2482:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
2483:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
2484:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
2485:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
2486:Source\FreeRTOS\10.0.1\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2487:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
2488:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2489:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
2490:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2491:Source\FreeRTOS\10.0.1\Source/queue.c **** 				xReturn = pdFAIL;
2492:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2493:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2494:Source\FreeRTOS\10.0.1\Source/queue.c **** 		portENABLE_INTERRUPTS();
2495:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2496:Source\FreeRTOS\10.0.1\Source/queue.c **** 		return xReturn;
2497:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
2498:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2499:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2500:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
2501:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2502:Source\FreeRTOS\10.0.1\Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2503:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2504:Source\FreeRTOS\10.0.1\Source/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2505:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
2506:Source\FreeRTOS\10.0.1\Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2507:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2508:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2509:Source\FreeRTOS\10.0.1\Source/queue.c **** 		exit without doing anything. */
2510:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2511:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2512:Source\FreeRTOS\10.0.1\Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2513:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2514:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2515:Source\FreeRTOS\10.0.1\Source/queue.c **** 			co-routine has not already been woken. */
2516:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2517:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2518:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2519:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
2520:Source\FreeRTOS\10.0.1\Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2521:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 100


2522:Source\FreeRTOS\10.0.1\Source/queue.c **** 						return pdTRUE;
2523:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
2524:Source\FreeRTOS\10.0.1\Source/queue.c **** 					else
2525:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
2526:Source\FreeRTOS\10.0.1\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2527:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
2528:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
2529:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
2530:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
2531:Source\FreeRTOS\10.0.1\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2532:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
2533:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2534:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
2535:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2536:Source\FreeRTOS\10.0.1\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2537:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2538:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2539:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
2540:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2541:Source\FreeRTOS\10.0.1\Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2542:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2543:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2544:Source\FreeRTOS\10.0.1\Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
2545:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
2546:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2547:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2548:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
2549:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2550:Source\FreeRTOS\10.0.1\Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2551:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2552:Source\FreeRTOS\10.0.1\Source/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2553:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
2554:Source\FreeRTOS\10.0.1\Source/queue.c **** 	BaseType_t xReturn;
2555:Source\FreeRTOS\10.0.1\Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2556:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2557:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2558:Source\FreeRTOS\10.0.1\Source/queue.c **** 		not then just leave without doing anything. */
2559:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2560:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2561:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* Copy the data from the queue. */
2562:Source\FreeRTOS\10.0.1\Source/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2563:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2564:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2565:Source\FreeRTOS\10.0.1\Source/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2566:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2567:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
2568:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2569:Source\FreeRTOS\10.0.1\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2570:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2571:Source\FreeRTOS\10.0.1\Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2572:Source\FreeRTOS\10.0.1\Source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2573:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2574:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2575:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2576:Source\FreeRTOS\10.0.1\Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2577:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
2578:Source\FreeRTOS\10.0.1\Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 101


2579:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
2580:Source\FreeRTOS\10.0.1\Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2581:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
2582:Source\FreeRTOS\10.0.1\Source/queue.c **** 					else
2583:Source\FreeRTOS\10.0.1\Source/queue.c **** 					{
2584:Source\FreeRTOS\10.0.1\Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2585:Source\FreeRTOS\10.0.1\Source/queue.c **** 					}
2586:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
2587:Source\FreeRTOS\10.0.1\Source/queue.c **** 				else
2588:Source\FreeRTOS\10.0.1\Source/queue.c **** 				{
2589:Source\FreeRTOS\10.0.1\Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2590:Source\FreeRTOS\10.0.1\Source/queue.c **** 				}
2591:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2592:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
2593:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2594:Source\FreeRTOS\10.0.1\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2595:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2596:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2597:Source\FreeRTOS\10.0.1\Source/queue.c **** 			xReturn = pdPASS;
2598:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2599:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
2600:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2601:Source\FreeRTOS\10.0.1\Source/queue.c **** 			xReturn = pdFAIL;
2602:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2603:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2604:Source\FreeRTOS\10.0.1\Source/queue.c **** 		return xReturn;
2605:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
2606:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2607:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2608:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
2609:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2610:Source\FreeRTOS\10.0.1\Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2611:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2612:Source\FreeRTOS\10.0.1\Source/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2613:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 2697              		.loc 1 2613 0
 2698              		.cfi_startproc
 2699              		@ args = 0, pretend = 0, frame = 0
 2700              		@ frame_needed = 0, uses_anonymous_args = 0
 2701              	.LVL344:
 2702 0000 10B5     		push	{r4, lr}
 2703              		.cfi_def_cfa_offset 8
 2704              		.cfi_offset 4, -8
 2705              		.cfi_offset 14, -4
 2706              	.LVL345:
2614:Source\FreeRTOS\10.0.1\Source/queue.c **** 	UBaseType_t ux;
2615:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2616:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2617:Source\FreeRTOS\10.0.1\Source/queue.c **** 		a free slot. */
2618:Source\FreeRTOS\10.0.1\Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2707              		.loc 1 2618 0
 2708 0002 0023     		movs	r3, #0
 2709 0004 0AE0     		b	.L222
 2710              	.LVL346:
 2711              	.L225:
2619:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2620:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 102


 2712              		.loc 1 2620 0
 2713 0006 DA00     		lsls	r2, r3, #3
 2714 0008 064C     		ldr	r4, .L226
 2715 000a 1259     		ldr	r2, [r2, r4]
 2716 000c 002A     		cmp	r2, #0
 2717 000e 04D1     		bne	.L223
2621:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2622:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* Store the information on this queue. */
2623:Source\FreeRTOS\10.0.1\Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 2718              		.loc 1 2623 0
 2719 0010 DB00     		lsls	r3, r3, #3
 2720              	.LVL347:
 2721 0012 1951     		str	r1, [r3, r4]
2624:Source\FreeRTOS\10.0.1\Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 2722              		.loc 1 2624 0
 2723 0014 E318     		adds	r3, r4, r3
 2724 0016 5860     		str	r0, [r3, #4]
2625:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2626:Source\FreeRTOS\10.0.1\Source/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2627:Source\FreeRTOS\10.0.1\Source/queue.c **** 				break;
 2725              		.loc 1 2627 0
 2726 0018 02E0     		b	.L221
 2727              	.LVL348:
 2728              	.L223:
2618:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 2729              		.loc 1 2618 0 discriminator 2
 2730 001a 0133     		adds	r3, r3, #1
 2731              	.LVL349:
 2732              	.L222:
2618:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 2733              		.loc 1 2618 0 is_stmt 0 discriminator 1
 2734 001c 092B     		cmp	r3, #9
 2735 001e F2D9     		bls	.L225
 2736              	.LVL350:
 2737              	.L221:
2628:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2629:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
2630:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2631:Source\FreeRTOS\10.0.1\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2632:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2633:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2634:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 2738              		.loc 1 2634 0 is_stmt 1
 2739              		@ sp needed
 2740 0020 10BD     		pop	{r4, pc}
 2741              	.L227:
 2742 0022 C046     		.align	2
 2743              	.L226:
 2744 0024 00000000 		.word	xQueueRegistry
 2745              		.cfi_endproc
 2746              	.LFE61:
 2747              		.size	vQueueAddToRegistry, .-vQueueAddToRegistry
 2748              		.section	.text.pcQueueGetName,"ax",%progbits
 2749              		.align	2
 2750              		.global	pcQueueGetName
 2751              		.code	16
 2752              		.thumb_func
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 103


 2753              		.type	pcQueueGetName, %function
 2754              	pcQueueGetName:
 2755              	.LFB62:
2635:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2636:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2637:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
2638:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2639:Source\FreeRTOS\10.0.1\Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2640:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2641:Source\FreeRTOS\10.0.1\Source/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2642:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 2756              		.loc 1 2642 0
 2757              		.cfi_startproc
 2758              		@ args = 0, pretend = 0, frame = 0
 2759              		@ frame_needed = 0, uses_anonymous_args = 0
 2760              		@ link register save eliminated.
 2761              	.LVL351:
2643:Source\FreeRTOS\10.0.1\Source/queue.c **** 	UBaseType_t ux;
2644:Source\FreeRTOS\10.0.1\Source/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
2645:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2646:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2647:Source\FreeRTOS\10.0.1\Source/queue.c **** 		removing entries from the registry while it is being searched. */
2648:Source\FreeRTOS\10.0.1\Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2762              		.loc 1 2648 0
 2763 0000 0022     		movs	r2, #0
 2764 0002 09E0     		b	.L229
 2765              	.LVL352:
 2766              	.L232:
2649:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2650:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2767              		.loc 1 2650 0
 2768 0004 D300     		lsls	r3, r2, #3
 2769 0006 0649     		ldr	r1, .L233
 2770 0008 CB18     		adds	r3, r1, r3
 2771 000a 5B68     		ldr	r3, [r3, #4]
 2772 000c 8342     		cmp	r3, r0
 2773 000e 02D1     		bne	.L230
2651:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2652:Source\FreeRTOS\10.0.1\Source/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 2774              		.loc 1 2652 0
 2775 0010 D200     		lsls	r2, r2, #3
 2776              	.LVL353:
 2777 0012 5058     		ldr	r0, [r2, r1]
 2778              	.LVL354:
2653:Source\FreeRTOS\10.0.1\Source/queue.c **** 				break;
 2779              		.loc 1 2653 0
 2780 0014 03E0     		b	.L231
 2781              	.LVL355:
 2782              	.L230:
2648:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 2783              		.loc 1 2648 0 discriminator 2
 2784 0016 0132     		adds	r2, r2, #1
 2785              	.LVL356:
 2786              	.L229:
2648:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 2787              		.loc 1 2648 0 is_stmt 0 discriminator 1
 2788 0018 092A     		cmp	r2, #9
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 104


 2789 001a F3D9     		bls	.L232
2644:Source\FreeRTOS\10.0.1\Source/queue.c **** 
 2790              		.loc 1 2644 0 is_stmt 1
 2791 001c 0020     		movs	r0, #0
 2792              	.LVL357:
 2793              	.L231:
2654:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2655:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
2656:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2657:Source\FreeRTOS\10.0.1\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2658:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2659:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2660:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2661:Source\FreeRTOS\10.0.1\Source/queue.c **** 		return pcReturn;
2662:Source\FreeRTOS\10.0.1\Source/queue.c **** 	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 2794              		.loc 1 2662 0
 2795              		@ sp needed
 2796 001e 7047     		bx	lr
 2797              	.L234:
 2798              		.align	2
 2799              	.L233:
 2800 0020 00000000 		.word	xQueueRegistry
 2801              		.cfi_endproc
 2802              	.LFE62:
 2803              		.size	pcQueueGetName, .-pcQueueGetName
 2804              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 2805              		.align	2
 2806              		.global	vQueueUnregisterQueue
 2807              		.code	16
 2808              		.thumb_func
 2809              		.type	vQueueUnregisterQueue, %function
 2810              	vQueueUnregisterQueue:
 2811              	.LFB63:
2663:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2664:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2665:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
2666:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2667:Source\FreeRTOS\10.0.1\Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2668:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2669:Source\FreeRTOS\10.0.1\Source/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2670:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 2812              		.loc 1 2670 0
 2813              		.cfi_startproc
 2814              		@ args = 0, pretend = 0, frame = 0
 2815              		@ frame_needed = 0, uses_anonymous_args = 0
 2816              		@ link register save eliminated.
 2817              	.LVL358:
2671:Source\FreeRTOS\10.0.1\Source/queue.c **** 	UBaseType_t ux;
2672:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2673:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2674:Source\FreeRTOS\10.0.1\Source/queue.c **** 		registry. */
2675:Source\FreeRTOS\10.0.1\Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2818              		.loc 1 2675 0
 2819 0000 0022     		movs	r2, #0
 2820 0002 0CE0     		b	.L236
 2821              	.LVL359:
 2822              	.L239:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 105


2676:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2677:Source\FreeRTOS\10.0.1\Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2823              		.loc 1 2677 0
 2824 0004 D300     		lsls	r3, r2, #3
 2825 0006 0749     		ldr	r1, .L240
 2826 0008 CB18     		adds	r3, r1, r3
 2827 000a 5B68     		ldr	r3, [r3, #4]
 2828 000c 8342     		cmp	r3, r0
 2829 000e 05D1     		bne	.L237
2678:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2679:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2680:Source\FreeRTOS\10.0.1\Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 2830              		.loc 1 2680 0
 2831 0010 D200     		lsls	r2, r2, #3
 2832              	.LVL360:
 2833 0012 0023     		movs	r3, #0
 2834 0014 5350     		str	r3, [r2, r1]
2681:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2682:Source\FreeRTOS\10.0.1\Source/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2683:Source\FreeRTOS\10.0.1\Source/queue.c **** 				appear in the registry twice if it is added, removed, then
2684:Source\FreeRTOS\10.0.1\Source/queue.c **** 				added again. */
2685:Source\FreeRTOS\10.0.1\Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 2835              		.loc 1 2685 0
 2836 0016 8A18     		adds	r2, r1, r2
 2837 0018 5360     		str	r3, [r2, #4]
2686:Source\FreeRTOS\10.0.1\Source/queue.c **** 				break;
 2838              		.loc 1 2686 0
 2839 001a 02E0     		b	.L235
 2840              	.LVL361:
 2841              	.L237:
2675:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 2842              		.loc 1 2675 0 discriminator 2
 2843 001c 0132     		adds	r2, r2, #1
 2844              	.LVL362:
 2845              	.L236:
2675:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
 2846              		.loc 1 2675 0 is_stmt 0 discriminator 1
 2847 001e 092A     		cmp	r2, #9
 2848 0020 F0D9     		bls	.L239
 2849              	.LVL363:
 2850              	.L235:
2687:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2688:Source\FreeRTOS\10.0.1\Source/queue.c **** 			else
2689:Source\FreeRTOS\10.0.1\Source/queue.c **** 			{
2690:Source\FreeRTOS\10.0.1\Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2691:Source\FreeRTOS\10.0.1\Source/queue.c **** 			}
2692:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2693:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2694:Source\FreeRTOS\10.0.1\Source/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2851              		.loc 1 2694 0 is_stmt 1
 2852              		@ sp needed
 2853 0022 7047     		bx	lr
 2854              	.L241:
 2855              		.align	2
 2856              	.L240:
 2857 0024 00000000 		.word	xQueueRegistry
 2858              		.cfi_endproc
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 106


 2859              	.LFE63:
 2860              		.size	vQueueUnregisterQueue, .-vQueueUnregisterQueue
 2861              		.section	.text.vQueueDelete,"ax",%progbits
 2862              		.align	2
 2863              		.global	vQueueDelete
 2864              		.code	16
 2865              		.thumb_func
 2866              		.type	vQueueDelete, %function
 2867              	vQueueDelete:
 2868              	.LFB50:
1942:Source\FreeRTOS\10.0.1\Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2869              		.loc 1 1942 0
 2870              		.cfi_startproc
 2871              		@ args = 0, pretend = 0, frame = 0
 2872              		@ frame_needed = 0, uses_anonymous_args = 0
 2873              	.LVL364:
 2874 0000 10B5     		push	{r4, lr}
 2875              		.cfi_def_cfa_offset 8
 2876              		.cfi_offset 4, -8
 2877              		.cfi_offset 14, -4
 2878 0002 041E     		subs	r4, r0, #0
 2879              	.LVL365:
1945:Source\FreeRTOS\10.0.1\Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 2880              		.loc 1 1945 0
 2881 0004 01D1     		bne	.L243
1945:Source\FreeRTOS\10.0.1\Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 2882              		.loc 1 1945 0 is_stmt 0 discriminator 1
 2883              		.syntax divided
 2884              	@ 1945 "Source\FreeRTOS\10.0.1\Source\queue.c" 1
 2885 0006 72B6     		 cpsid i 
 2886              	@ 0 "" 2
 2887              		.thumb
 2888              		.syntax unified
 2889              	.L244:
 2890 0008 FEE7     		b	.L244
 2891              	.L243:
1950:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 2892              		.loc 1 1950 0 is_stmt 1
 2893 000a FFF7FEFF 		bl	vQueueUnregisterQueue
 2894              	.LVL366:
1958:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 2895              		.loc 1 1958 0
 2896 000e 2000     		movs	r0, r4
 2897 0010 FFF7FEFF 		bl	vPortFree
 2898              	.LVL367:
1980:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
 2899              		.loc 1 1980 0
 2900              		@ sp needed
 2901              	.LVL368:
 2902 0014 10BD     		pop	{r4, pc}
 2903              		.cfi_endproc
 2904              	.LFE50:
 2905              		.size	vQueueDelete, .-vQueueDelete
 2906 0016 C046     		.section	.text.vQueueWaitForMessageRestricted,"ax",%progbits
 2907              		.align	2
 2908              		.global	vQueueWaitForMessageRestricted
 2909              		.code	16
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 107


 2910              		.thumb_func
 2911              		.type	vQueueWaitForMessageRestricted, %function
 2912              	vQueueWaitForMessageRestricted:
 2913              	.LFB64:
2695:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2696:Source\FreeRTOS\10.0.1\Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2697:Source\FreeRTOS\10.0.1\Source/queue.c **** /*-----------------------------------------------------------*/
2698:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2699:Source\FreeRTOS\10.0.1\Source/queue.c **** #if ( configUSE_TIMERS == 1 )
2700:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2701:Source\FreeRTOS\10.0.1\Source/queue.c **** 	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType
2702:Source\FreeRTOS\10.0.1\Source/queue.c **** 	{
 2914              		.loc 1 2702 0
 2915              		.cfi_startproc
 2916              		@ args = 0, pretend = 0, frame = 0
 2917              		@ frame_needed = 0, uses_anonymous_args = 0
 2918              	.LVL369:
 2919 0000 70B5     		push	{r4, r5, r6, lr}
 2920              		.cfi_def_cfa_offset 16
 2921              		.cfi_offset 4, -16
 2922              		.cfi_offset 5, -12
 2923              		.cfi_offset 6, -8
 2924              		.cfi_offset 14, -4
 2925 0002 0400     		movs	r4, r0
 2926 0004 0D00     		movs	r5, r1
 2927 0006 1600     		movs	r6, r2
 2928              	.LVL370:
2703:Source\FreeRTOS\10.0.1\Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2704:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2705:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* This function should not be called by application code hence the
2706:Source\FreeRTOS\10.0.1\Source/queue.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2707:Source\FreeRTOS\10.0.1\Source/queue.c **** 		designed for use by kernel code, and has special calling requirements.
2708:Source\FreeRTOS\10.0.1\Source/queue.c **** 		It can result in vListInsert() being called on a list that can only
2709:Source\FreeRTOS\10.0.1\Source/queue.c **** 		possibly ever have one item in it, so the list will be fast, but even
2710:Source\FreeRTOS\10.0.1\Source/queue.c **** 		so it should be called with the scheduler locked and not from a critical
2711:Source\FreeRTOS\10.0.1\Source/queue.c **** 		section. */
2712:Source\FreeRTOS\10.0.1\Source/queue.c **** 
2713:Source\FreeRTOS\10.0.1\Source/queue.c **** 		/* Only do anything if there are no messages in the queue.  This function
2714:Source\FreeRTOS\10.0.1\Source/queue.c **** 		will not actually cause the task to block, just place it on a blocked
2715:Source\FreeRTOS\10.0.1\Source/queue.c **** 		list.  It will not block until the scheduler is unlocked - at which
2716:Source\FreeRTOS\10.0.1\Source/queue.c **** 		time a yield will be performed.  If an item is added to the queue while
2717:Source\FreeRTOS\10.0.1\Source/queue.c **** 		the queue is locked, and the calling task blocks on the queue, then the
2718:Source\FreeRTOS\10.0.1\Source/queue.c **** 		calling task will be immediately unblocked when the queue is unlocked. */
2719:Source\FreeRTOS\10.0.1\Source/queue.c **** 		prvLockQueue( pxQueue );
 2929              		.loc 1 2719 0
 2930 0008 FFF7FEFF 		bl	vPortEnterCritical
 2931              	.LVL371:
 2932 000c 4423     		movs	r3, #68
 2933 000e E35C     		ldrb	r3, [r4, r3]
 2934 0010 5BB2     		sxtb	r3, r3
 2935 0012 0133     		adds	r3, r3, #1
 2936 0014 02D1     		bne	.L246
 2937              		.loc 1 2719 0 is_stmt 0 discriminator 1
 2938 0016 0022     		movs	r2, #0
 2939 0018 4423     		movs	r3, #68
 2940 001a E254     		strb	r2, [r4, r3]
 2941              	.L246:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 108


 2942              		.loc 1 2719 0 discriminator 3
 2943 001c 4523     		movs	r3, #69
 2944 001e E35C     		ldrb	r3, [r4, r3]
 2945 0020 5BB2     		sxtb	r3, r3
 2946 0022 0133     		adds	r3, r3, #1
 2947 0024 02D1     		bne	.L247
 2948              		.loc 1 2719 0 discriminator 4
 2949 0026 0022     		movs	r2, #0
 2950 0028 4523     		movs	r3, #69
 2951 002a E254     		strb	r2, [r4, r3]
 2952              	.L247:
 2953              		.loc 1 2719 0 discriminator 6
 2954 002c FFF7FEFF 		bl	vPortExitCritical
 2955              	.LVL372:
2720:Source\FreeRTOS\10.0.1\Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 2956              		.loc 1 2720 0 is_stmt 1 discriminator 6
 2957 0030 A36B     		ldr	r3, [r4, #56]
 2958 0032 002B     		cmp	r3, #0
 2959 0034 05D1     		bne	.L248
2721:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2722:Source\FreeRTOS\10.0.1\Source/queue.c **** 			/* There is nothing in the queue, block for the specified period. */
2723:Source\FreeRTOS\10.0.1\Source/queue.c **** 			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefi
 2960              		.loc 1 2723 0
 2961 0036 2000     		movs	r0, r4
 2962 0038 2430     		adds	r0, r0, #36
 2963 003a 3200     		movs	r2, r6
 2964 003c 2900     		movs	r1, r5
 2965 003e FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted
 2966              	.LVL373:
 2967              	.L248:
2724:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2725:Source\FreeRTOS\10.0.1\Source/queue.c **** 		else
2726:Source\FreeRTOS\10.0.1\Source/queue.c **** 		{
2727:Source\FreeRTOS\10.0.1\Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2728:Source\FreeRTOS\10.0.1\Source/queue.c **** 		}
2729:Source\FreeRTOS\10.0.1\Source/queue.c **** 		prvUnlockQueue( pxQueue );
 2968              		.loc 1 2729 0
 2969 0042 2000     		movs	r0, r4
 2970 0044 FFF7FEFF 		bl	prvUnlockQueue
 2971              	.LVL374:
2730:Source\FreeRTOS\10.0.1\Source/queue.c **** 	}
 2972              		.loc 1 2730 0
 2973              		@ sp needed
 2974              	.LVL375:
 2975              	.LVL376:
 2976              	.LVL377:
 2977 0048 70BD     		pop	{r4, r5, r6, pc}
 2978              		.cfi_endproc
 2979              	.LFE64:
 2980              		.size	vQueueWaitForMessageRestricted, .-vQueueWaitForMessageRestricted
 2981              		.comm	xQueueRegistry,80,4
 2982 004a C046     		.text
 2983              	.Letext0:
 2984              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2985              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2986              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2987              		.file 5 ".\\Source\\FreeRTOS\\10.0.1\\Source\\portable\\GCC\\CM0/portmacro.h"
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 109


 2988              		.file 6 ".\\Source\\FreeRTOS\\10.0.1\\Source\\include/list.h"
 2989              		.file 7 ".\\Source\\FreeRTOS\\10.0.1\\Source\\include/task.h"
 2990              		.file 8 ".\\Source\\FreeRTOS\\10.0.1\\Source\\include/queue.h"
 2991              		.file 9 ".\\Source\\FreeRTOS\\10.0.1\\Source\\include/portable.h"
 2992              		.section	.debug_info,"",%progbits
 2993              	.Ldebug_info0:
 2994 0000 9D160000 		.4byte	0x169d
 2995 0004 0400     		.2byte	0x4
 2996 0006 00000000 		.4byte	.Ldebug_abbrev0
 2997 000a 04       		.byte	0x4
 2998 000b 01       		.uleb128 0x1
 2999 000c 7E060000 		.4byte	.LASF134
 3000 0010 0C       		.byte	0xc
 3001 0011 F0020000 		.4byte	.LASF135
 3002 0015 E2030000 		.4byte	.LASF136
 3003 0019 48000000 		.4byte	.Ldebug_ranges0+0x48
 3004 001d 00000000 		.4byte	0
 3005 0021 00000000 		.4byte	.Ldebug_line0
 3006 0025 02       		.uleb128 0x2
 3007 0026 5B000000 		.4byte	.LASF3
 3008 002a 02       		.byte	0x2
 3009 002b D8       		.byte	0xd8
 3010 002c 30000000 		.4byte	0x30
 3011 0030 03       		.uleb128 0x3
 3012 0031 04       		.byte	0x4
 3013 0032 07       		.byte	0x7
 3014 0033 5B050000 		.4byte	.LASF0
 3015 0037 04       		.uleb128 0x4
 3016 0038 04       		.byte	0x4
 3017 0039 05       		.byte	0x5
 3018 003a 696E7400 		.ascii	"int\000"
 3019 003e 03       		.uleb128 0x3
 3020 003f 08       		.byte	0x8
 3021 0040 05       		.byte	0x5
 3022 0041 85010000 		.4byte	.LASF1
 3023 0045 03       		.uleb128 0x3
 3024 0046 08       		.byte	0x8
 3025 0047 04       		.byte	0x4
 3026 0048 10070000 		.4byte	.LASF2
 3027 004c 02       		.uleb128 0x2
 3028 004d 62010000 		.4byte	.LASF4
 3029 0051 03       		.byte	0x3
 3030 0052 1B       		.byte	0x1b
 3031 0053 57000000 		.4byte	0x57
 3032 0057 03       		.uleb128 0x3
 3033 0058 01       		.byte	0x1
 3034 0059 06       		.byte	0x6
 3035 005a 93010000 		.4byte	.LASF5
 3036 005e 02       		.uleb128 0x2
 3037 005f 6B060000 		.4byte	.LASF6
 3038 0063 03       		.byte	0x3
 3039 0064 1D       		.byte	0x1d
 3040 0065 69000000 		.4byte	0x69
 3041 0069 03       		.uleb128 0x3
 3042 006a 01       		.byte	0x1
 3043 006b 08       		.byte	0x8
 3044 006c 4D050000 		.4byte	.LASF7
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 110


 3045 0070 03       		.uleb128 0x3
 3046 0071 02       		.byte	0x2
 3047 0072 05       		.byte	0x5
 3048 0073 7D050000 		.4byte	.LASF8
 3049 0077 03       		.uleb128 0x3
 3050 0078 02       		.byte	0x2
 3051 0079 07       		.byte	0x7
 3052 007a 6B030000 		.4byte	.LASF9
 3053 007e 03       		.uleb128 0x3
 3054 007f 04       		.byte	0x4
 3055 0080 05       		.byte	0x5
 3056 0081 D6010000 		.4byte	.LASF10
 3057 0085 02       		.uleb128 0x2
 3058 0086 54020000 		.4byte	.LASF11
 3059 008a 03       		.byte	0x3
 3060 008b 41       		.byte	0x41
 3061 008c 90000000 		.4byte	0x90
 3062 0090 03       		.uleb128 0x3
 3063 0091 04       		.byte	0x4
 3064 0092 07       		.byte	0x7
 3065 0093 DE020000 		.4byte	.LASF12
 3066 0097 03       		.uleb128 0x3
 3067 0098 08       		.byte	0x8
 3068 0099 07       		.byte	0x7
 3069 009a 1A010000 		.4byte	.LASF13
 3070 009e 03       		.uleb128 0x3
 3071 009f 04       		.byte	0x4
 3072 00a0 07       		.byte	0x7
 3073 00a1 93080000 		.4byte	.LASF14
 3074 00a5 05       		.uleb128 0x5
 3075 00a6 04       		.byte	0x4
 3076 00a7 03       		.uleb128 0x3
 3077 00a8 01       		.byte	0x1
 3078 00a9 08       		.byte	0x8
 3079 00aa 2F070000 		.4byte	.LASF15
 3080 00ae 06       		.uleb128 0x6
 3081 00af 04       		.byte	0x4
 3082 00b0 B4000000 		.4byte	0xb4
 3083 00b4 07       		.uleb128 0x7
 3084 00b5 A7000000 		.4byte	0xa7
 3085 00b9 06       		.uleb128 0x6
 3086 00ba 04       		.byte	0x4
 3087 00bb BF000000 		.4byte	0xbf
 3088 00bf 08       		.uleb128 0x8
 3089 00c0 02       		.uleb128 0x2
 3090 00c1 C3030000 		.4byte	.LASF16
 3091 00c5 04       		.byte	0x4
 3092 00c6 14       		.byte	0x14
 3093 00c7 4C000000 		.4byte	0x4c
 3094 00cb 02       		.uleb128 0x2
 3095 00cc 76080000 		.4byte	.LASF17
 3096 00d0 04       		.byte	0x4
 3097 00d1 18       		.byte	0x18
 3098 00d2 5E000000 		.4byte	0x5e
 3099 00d6 02       		.uleb128 0x2
 3100 00d7 50060000 		.4byte	.LASF18
 3101 00db 04       		.byte	0x4
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 111


 3102 00dc 30       		.byte	0x30
 3103 00dd 85000000 		.4byte	0x85
 3104 00e1 03       		.uleb128 0x3
 3105 00e2 04       		.byte	0x4
 3106 00e3 04       		.byte	0x4
 3107 00e4 06050000 		.4byte	.LASF19
 3108 00e8 03       		.uleb128 0x3
 3109 00e9 08       		.byte	0x8
 3110 00ea 04       		.byte	0x4
 3111 00eb 07020000 		.4byte	.LASF20
 3112 00ef 02       		.uleb128 0x2
 3113 00f0 19020000 		.4byte	.LASF21
 3114 00f4 05       		.byte	0x5
 3115 00f5 38       		.byte	0x38
 3116 00f6 7E000000 		.4byte	0x7e
 3117 00fa 02       		.uleb128 0x2
 3118 00fb 3D090000 		.4byte	.LASF22
 3119 00ff 05       		.byte	0x5
 3120 0100 39       		.byte	0x39
 3121 0101 90000000 		.4byte	0x90
 3122 0105 02       		.uleb128 0x2
 3123 0106 FC010000 		.4byte	.LASF23
 3124 010a 05       		.byte	0x5
 3125 010b 3F       		.byte	0x3f
 3126 010c D6000000 		.4byte	0xd6
 3127 0110 06       		.uleb128 0x6
 3128 0111 04       		.byte	0x4
 3129 0112 CB000000 		.4byte	0xcb
 3130 0116 09       		.uleb128 0x9
 3131 0117 F2080000 		.4byte	.LASF30
 3132 011b 14       		.byte	0x14
 3133 011c 06       		.byte	0x6
 3134 011d 8B       		.byte	0x8b
 3135 011e 5F010000 		.4byte	0x15f
 3136 0122 0A       		.uleb128 0xa
 3137 0123 54070000 		.4byte	.LASF24
 3138 0127 06       		.byte	0x6
 3139 0128 8E       		.byte	0x8e
 3140 0129 05010000 		.4byte	0x105
 3141 012d 00       		.byte	0
 3142 012e 0A       		.uleb128 0xa
 3143 012f 9C080000 		.4byte	.LASF25
 3144 0133 06       		.byte	0x6
 3145 0134 8F       		.byte	0x8f
 3146 0135 5F010000 		.4byte	0x15f
 3147 0139 04       		.byte	0x4
 3148 013a 0A       		.uleb128 0xa
 3149 013b CF040000 		.4byte	.LASF26
 3150 013f 06       		.byte	0x6
 3151 0140 90       		.byte	0x90
 3152 0141 5F010000 		.4byte	0x15f
 3153 0145 08       		.byte	0x8
 3154 0146 0A       		.uleb128 0xa
 3155 0147 A5020000 		.4byte	.LASF27
 3156 014b 06       		.byte	0x6
 3157 014c 91       		.byte	0x91
 3158 014d A5000000 		.4byte	0xa5
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 112


 3159 0151 0C       		.byte	0xc
 3160 0152 0A       		.uleb128 0xa
 3161 0153 1B050000 		.4byte	.LASF28
 3162 0157 06       		.byte	0x6
 3163 0158 92       		.byte	0x92
 3164 0159 A5000000 		.4byte	0xa5
 3165 015d 10       		.byte	0x10
 3166 015e 00       		.byte	0
 3167 015f 06       		.uleb128 0x6
 3168 0160 04       		.byte	0x4
 3169 0161 16010000 		.4byte	0x116
 3170 0165 02       		.uleb128 0x2
 3171 0166 BD040000 		.4byte	.LASF29
 3172 016a 06       		.byte	0x6
 3173 016b 95       		.byte	0x95
 3174 016c 16010000 		.4byte	0x116
 3175 0170 09       		.uleb128 0x9
 3176 0171 75010000 		.4byte	.LASF31
 3177 0175 0C       		.byte	0xc
 3178 0176 06       		.byte	0x6
 3179 0177 97       		.byte	0x97
 3180 0178 A1010000 		.4byte	0x1a1
 3181 017c 0A       		.uleb128 0xa
 3182 017d 54070000 		.4byte	.LASF24
 3183 0181 06       		.byte	0x6
 3184 0182 9A       		.byte	0x9a
 3185 0183 05010000 		.4byte	0x105
 3186 0187 00       		.byte	0
 3187 0188 0A       		.uleb128 0xa
 3188 0189 9C080000 		.4byte	.LASF25
 3189 018d 06       		.byte	0x6
 3190 018e 9B       		.byte	0x9b
 3191 018f 5F010000 		.4byte	0x15f
 3192 0193 04       		.byte	0x4
 3193 0194 0A       		.uleb128 0xa
 3194 0195 CF040000 		.4byte	.LASF26
 3195 0199 06       		.byte	0x6
 3196 019a 9C       		.byte	0x9c
 3197 019b 5F010000 		.4byte	0x15f
 3198 019f 08       		.byte	0x8
 3199 01a0 00       		.byte	0
 3200 01a1 02       		.uleb128 0x2
 3201 01a2 62000000 		.4byte	.LASF32
 3202 01a6 06       		.byte	0x6
 3203 01a7 9E       		.byte	0x9e
 3204 01a8 70010000 		.4byte	0x170
 3205 01ac 09       		.uleb128 0x9
 3206 01ad DD050000 		.4byte	.LASF33
 3207 01b1 14       		.byte	0x14
 3208 01b2 06       		.byte	0x6
 3209 01b3 A3       		.byte	0xa3
 3210 01b4 DD010000 		.4byte	0x1dd
 3211 01b8 0A       		.uleb128 0xa
 3212 01b9 CE020000 		.4byte	.LASF34
 3213 01bd 06       		.byte	0x6
 3214 01be A6       		.byte	0xa6
 3215 01bf DD010000 		.4byte	0x1dd
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 113


 3216 01c3 00       		.byte	0
 3217 01c4 0A       		.uleb128 0xa
 3218 01c5 13050000 		.4byte	.LASF35
 3219 01c9 06       		.byte	0x6
 3220 01ca A7       		.byte	0xa7
 3221 01cb E2010000 		.4byte	0x1e2
 3222 01cf 04       		.byte	0x4
 3223 01d0 0A       		.uleb128 0xa
 3224 01d1 AD020000 		.4byte	.LASF36
 3225 01d5 06       		.byte	0x6
 3226 01d6 A8       		.byte	0xa8
 3227 01d7 A1010000 		.4byte	0x1a1
 3228 01db 08       		.byte	0x8
 3229 01dc 00       		.byte	0
 3230 01dd 0B       		.uleb128 0xb
 3231 01de FA000000 		.4byte	0xfa
 3232 01e2 06       		.uleb128 0x6
 3233 01e3 04       		.byte	0x4
 3234 01e4 65010000 		.4byte	0x165
 3235 01e8 02       		.uleb128 0x2
 3236 01e9 0D060000 		.4byte	.LASF37
 3237 01ed 06       		.byte	0x6
 3238 01ee AA       		.byte	0xaa
 3239 01ef AC010000 		.4byte	0x1ac
 3240 01f3 09       		.uleb128 0x9
 3241 01f4 6B010000 		.4byte	.LASF38
 3242 01f8 08       		.byte	0x8
 3243 01f9 07       		.byte	0x7
 3244 01fa 5D       		.byte	0x5d
 3245 01fb 18020000 		.4byte	0x218
 3246 01ff 0A       		.uleb128 0xa
 3247 0200 5F020000 		.4byte	.LASF39
 3248 0204 07       		.byte	0x7
 3249 0205 5F       		.byte	0x5f
 3250 0206 EF000000 		.4byte	0xef
 3251 020a 00       		.byte	0
 3252 020b 0A       		.uleb128 0xa
 3253 020c BE020000 		.4byte	.LASF40
 3254 0210 07       		.byte	0x7
 3255 0211 60       		.byte	0x60
 3256 0212 05010000 		.4byte	0x105
 3257 0216 04       		.byte	0x4
 3258 0217 00       		.byte	0
 3259 0218 02       		.uleb128 0x2
 3260 0219 71000000 		.4byte	.LASF41
 3261 021d 07       		.byte	0x7
 3262 021e 61       		.byte	0x61
 3263 021f F3010000 		.4byte	0x1f3
 3264 0223 02       		.uleb128 0x2
 3265 0224 42060000 		.4byte	.LASF42
 3266 0228 08       		.byte	0x8
 3267 0229 2E       		.byte	0x2e
 3268 022a A5000000 		.4byte	0xa5
 3269 022e 0C       		.uleb128 0xc
 3270 022f 04       		.byte	0x4
 3271 0230 01       		.byte	0x1
 3272 0231 5E       		.byte	0x5e
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 114


 3273 0232 4D020000 		.4byte	0x24d
 3274 0236 0D       		.uleb128 0xd
 3275 0237 0E020000 		.4byte	.LASF43
 3276 023b 01       		.byte	0x1
 3277 023c 60       		.byte	0x60
 3278 023d 4D020000 		.4byte	0x24d
 3279 0241 0D       		.uleb128 0xd
 3280 0242 68050000 		.4byte	.LASF44
 3281 0246 01       		.byte	0x1
 3282 0247 61       		.byte	0x61
 3283 0248 FA000000 		.4byte	0xfa
 3284 024c 00       		.byte	0
 3285 024d 06       		.uleb128 0x6
 3286 024e 04       		.byte	0x4
 3287 024f C0000000 		.4byte	0xc0
 3288 0253 09       		.uleb128 0x9
 3289 0254 3D050000 		.4byte	.LASF45
 3290 0258 50       		.byte	0x50
 3291 0259 01       		.byte	0x1
 3292 025a 58       		.byte	0x58
 3293 025b FA020000 		.4byte	0x2fa
 3294 025f 0A       		.uleb128 0xa
 3295 0260 9E020000 		.4byte	.LASF46
 3296 0264 01       		.byte	0x1
 3297 0265 5A       		.byte	0x5a
 3298 0266 4D020000 		.4byte	0x24d
 3299 026a 00       		.byte	0
 3300 026b 0A       		.uleb128 0xa
 3301 026c 89070000 		.4byte	.LASF47
 3302 0270 01       		.byte	0x1
 3303 0271 5B       		.byte	0x5b
 3304 0272 4D020000 		.4byte	0x24d
 3305 0276 04       		.byte	0x4
 3306 0277 0A       		.uleb128 0xa
 3307 0278 7E080000 		.4byte	.LASF48
 3308 027c 01       		.byte	0x1
 3309 027d 5C       		.byte	0x5c
 3310 027e 4D020000 		.4byte	0x24d
 3311 0282 08       		.byte	0x8
 3312 0283 0E       		.uleb128 0xe
 3313 0284 7500     		.ascii	"u\000"
 3314 0286 01       		.byte	0x1
 3315 0287 62       		.byte	0x62
 3316 0288 2E020000 		.4byte	0x22e
 3317 028c 0C       		.byte	0xc
 3318 028d 0A       		.uleb128 0xa
 3319 028e 48080000 		.4byte	.LASF49
 3320 0292 01       		.byte	0x1
 3321 0293 64       		.byte	0x64
 3322 0294 E8010000 		.4byte	0x1e8
 3323 0298 10       		.byte	0x10
 3324 0299 0A       		.uleb128 0xa
 3325 029a A6040000 		.4byte	.LASF50
 3326 029e 01       		.byte	0x1
 3327 029f 65       		.byte	0x65
 3328 02a0 E8010000 		.4byte	0x1e8
 3329 02a4 24       		.byte	0x24
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 115


 3330 02a5 0A       		.uleb128 0xa
 3331 02a6 59060000 		.4byte	.LASF51
 3332 02aa 01       		.byte	0x1
 3333 02ab 67       		.byte	0x67
 3334 02ac DD010000 		.4byte	0x1dd
 3335 02b0 38       		.byte	0x38
 3336 02b1 0A       		.uleb128 0xa
 3337 02b2 87040000 		.4byte	.LASF52
 3338 02b6 01       		.byte	0x1
 3339 02b7 68       		.byte	0x68
 3340 02b8 FA000000 		.4byte	0xfa
 3341 02bc 3C       		.byte	0x3c
 3342 02bd 0A       		.uleb128 0xa
 3343 02be 88080000 		.4byte	.LASF53
 3344 02c2 01       		.byte	0x1
 3345 02c3 69       		.byte	0x69
 3346 02c4 FA000000 		.4byte	0xfa
 3347 02c8 40       		.byte	0x40
 3348 02c9 0A       		.uleb128 0xa
 3349 02ca 87050000 		.4byte	.LASF54
 3350 02ce 01       		.byte	0x1
 3351 02cf 6B       		.byte	0x6b
 3352 02d0 FA020000 		.4byte	0x2fa
 3353 02d4 44       		.byte	0x44
 3354 02d5 0A       		.uleb128 0xa
 3355 02d6 DF010000 		.4byte	.LASF55
 3356 02da 01       		.byte	0x1
 3357 02db 6C       		.byte	0x6c
 3358 02dc FA020000 		.4byte	0x2fa
 3359 02e0 45       		.byte	0x45
 3360 02e1 0A       		.uleb128 0xa
 3361 02e2 EE010000 		.4byte	.LASF56
 3362 02e6 01       		.byte	0x1
 3363 02e7 77       		.byte	0x77
 3364 02e8 FA000000 		.4byte	0xfa
 3365 02ec 48       		.byte	0x48
 3366 02ed 0A       		.uleb128 0xa
 3367 02ee 19000000 		.4byte	.LASF57
 3368 02f2 01       		.byte	0x1
 3369 02f3 78       		.byte	0x78
 3370 02f4 CB000000 		.4byte	0xcb
 3371 02f8 4C       		.byte	0x4c
 3372 02f9 00       		.byte	0
 3373 02fa 0B       		.uleb128 0xb
 3374 02fb C0000000 		.4byte	0xc0
 3375 02ff 02       		.uleb128 0x2
 3376 0300 0C050000 		.4byte	.LASF58
 3377 0304 01       		.byte	0x1
 3378 0305 7B       		.byte	0x7b
 3379 0306 53020000 		.4byte	0x253
 3380 030a 02       		.uleb128 0x2
 3381 030b 90040000 		.4byte	.LASF59
 3382 030f 01       		.byte	0x1
 3383 0310 7F       		.byte	0x7f
 3384 0311 FF020000 		.4byte	0x2ff
 3385 0315 09       		.uleb128 0x9
 3386 0316 4E010000 		.4byte	.LASF60
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 116


 3387 031a 08       		.byte	0x8
 3388 031b 01       		.byte	0x1
 3389 031c 8C       		.byte	0x8c
 3390 031d 3A030000 		.4byte	0x33a
 3391 0321 0A       		.uleb128 0xa
 3392 0322 5F070000 		.4byte	.LASF61
 3393 0326 01       		.byte	0x1
 3394 0327 8E       		.byte	0x8e
 3395 0328 AE000000 		.4byte	0xae
 3396 032c 00       		.byte	0
 3397 032d 0A       		.uleb128 0xa
 3398 032e 27050000 		.4byte	.LASF62
 3399 0332 01       		.byte	0x1
 3400 0333 8F       		.byte	0x8f
 3401 0334 23020000 		.4byte	0x223
 3402 0338 04       		.byte	0x4
 3403 0339 00       		.byte	0
 3404 033a 02       		.uleb128 0x2
 3405 033b 9F010000 		.4byte	.LASF63
 3406 033f 01       		.byte	0x1
 3407 0340 90       		.byte	0x90
 3408 0341 15030000 		.4byte	0x315
 3409 0345 02       		.uleb128 0x2
 3410 0346 7B000000 		.4byte	.LASF64
 3411 034a 01       		.byte	0x1
 3412 034b 95       		.byte	0x95
 3413 034c 3A030000 		.4byte	0x33a
 3414 0350 0F       		.uleb128 0xf
 3415 0351 CA030000 		.4byte	.LASF65
 3416 0355 01       		.byte	0x1
 3417 0356 F808     		.2byte	0x8f8
 3418 0358 EF000000 		.4byte	0xef
 3419 035c 00000000 		.4byte	.LFB59
 3420 0360 1E000000 		.4byte	.LFE59-.LFB59
 3421 0364 01       		.uleb128 0x1
 3422 0365 9C       		.byte	0x9c
 3423 0366 9D030000 		.4byte	0x39d
 3424 036a 10       		.uleb128 0x10
 3425 036b 6E080000 		.4byte	.LASF67
 3426 036f 01       		.byte	0x1
 3427 0370 F808     		.2byte	0x8f8
 3428 0372 9D030000 		.4byte	0x39d
 3429 0376 00000000 		.4byte	.LLST0
 3430 037a 11       		.uleb128 0x11
 3431 037b B6020000 		.4byte	.LASF68
 3432 037f 01       		.byte	0x1
 3433 0380 FA08     		.2byte	0x8fa
 3434 0382 EF000000 		.4byte	0xef
 3435 0386 45000000 		.4byte	.LLST1
 3436 038a 12       		.uleb128 0x12
 3437 038b 08000000 		.4byte	.LVL1
 3438 038f D2150000 		.4byte	0x15d2
 3439 0393 12       		.uleb128 0x12
 3440 0394 1A000000 		.4byte	.LVL5
 3441 0398 DD150000 		.4byte	0x15dd
 3442 039c 00       		.byte	0
 3443 039d 06       		.uleb128 0x6
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 117


 3444 039e 04       		.byte	0x4
 3445 039f A3030000 		.4byte	0x3a3
 3446 03a3 07       		.uleb128 0x7
 3447 03a4 0A030000 		.4byte	0x30a
 3448 03a8 0F       		.uleb128 0xf
 3449 03a9 C3000000 		.4byte	.LASF66
 3450 03ad 01       		.byte	0x1
 3451 03ae D108     		.2byte	0x8d1
 3452 03b0 EF000000 		.4byte	0xef
 3453 03b4 00000000 		.4byte	.LFB57
 3454 03b8 1C000000 		.4byte	.LFE57-.LFB57
 3455 03bc 01       		.uleb128 0x1
 3456 03bd 9C       		.byte	0x9c
 3457 03be F5030000 		.4byte	0x3f5
 3458 03c2 10       		.uleb128 0x10
 3459 03c3 6E080000 		.4byte	.LASF67
 3460 03c7 01       		.byte	0x1
 3461 03c8 D108     		.2byte	0x8d1
 3462 03ca 9D030000 		.4byte	0x39d
 3463 03ce 63000000 		.4byte	.LLST2
 3464 03d2 11       		.uleb128 0x11
 3465 03d3 B6020000 		.4byte	.LASF68
 3466 03d7 01       		.byte	0x1
 3467 03d8 D308     		.2byte	0x8d3
 3468 03da EF000000 		.4byte	0xef
 3469 03de A8000000 		.4byte	.LLST3
 3470 03e2 12       		.uleb128 0x12
 3471 03e3 08000000 		.4byte	.LVL8
 3472 03e7 D2150000 		.4byte	0x15d2
 3473 03eb 12       		.uleb128 0x12
 3474 03ec 18000000 		.4byte	.LVL12
 3475 03f0 DD150000 		.4byte	0x15dd
 3476 03f4 00       		.byte	0
 3477 03f5 0F       		.uleb128 0xf
 3478 03f6 3B010000 		.4byte	.LASF69
 3479 03fa 01       		.byte	0x1
 3480 03fb F807     		.2byte	0x7f8
 3481 03fd EF000000 		.4byte	0xef
 3482 0401 00000000 		.4byte	.LFB54
 3483 0405 5E000000 		.4byte	.LFE54-.LFB54
 3484 0409 01       		.uleb128 0x1
 3485 040a 9C       		.byte	0x9c
 3486 040b 7B040000 		.4byte	0x47b
 3487 040f 10       		.uleb128 0x10
 3488 0410 6E080000 		.4byte	.LASF67
 3489 0414 01       		.byte	0x1
 3490 0415 F807     		.2byte	0x7f8
 3491 0417 81040000 		.4byte	0x481
 3492 041b C6000000 		.4byte	.LLST4
 3493 041f 10       		.uleb128 0x10
 3494 0420 F8040000 		.4byte	.LASF70
 3495 0424 01       		.byte	0x1
 3496 0425 F807     		.2byte	0x7f8
 3497 0427 B9000000 		.4byte	0xb9
 3498 042b 08010000 		.4byte	.LLST5
 3499 042f 10       		.uleb128 0x10
 3500 0430 06080000 		.4byte	.LASF71
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 118


 3501 0434 01       		.byte	0x1
 3502 0435 F807     		.2byte	0x7f8
 3503 0437 86040000 		.4byte	0x486
 3504 043b 42010000 		.4byte	.LLST6
 3505 043f 13       		.uleb128 0x13
 3506 0440 B6020000 		.4byte	.LASF68
 3507 0444 01       		.byte	0x1
 3508 0445 FA07     		.2byte	0x7fa
 3509 0447 EF000000 		.4byte	0xef
 3510 044b 00       		.byte	0
 3511 044c 11       		.uleb128 0x11
 3512 044d 59060000 		.4byte	.LASF51
 3513 0451 01       		.byte	0x1
 3514 0452 FB07     		.2byte	0x7fb
 3515 0454 FA000000 		.4byte	0xfa
 3516 0458 6E010000 		.4byte	.LLST7
 3517 045c 14       		.uleb128 0x14
 3518 045d 18000000 		.4byte	.LVL19
 3519 0461 E8150000 		.4byte	0x15e8
 3520 0465 71040000 		.4byte	0x471
 3521 0469 15       		.uleb128 0x15
 3522 046a 01       		.uleb128 0x1
 3523 046b 51       		.byte	0x51
 3524 046c 03       		.uleb128 0x3
 3525 046d F3       		.byte	0xf3
 3526 046e 01       		.uleb128 0x1
 3527 046f 51       		.byte	0x51
 3528 0470 00       		.byte	0
 3529 0471 12       		.uleb128 0x12
 3530 0472 34000000 		.4byte	.LVL22
 3531 0476 E8150000 		.4byte	0x15e8
 3532 047a 00       		.byte	0
 3533 047b 06       		.uleb128 0x6
 3534 047c 04       		.byte	0x4
 3535 047d 0A030000 		.4byte	0x30a
 3536 0481 07       		.uleb128 0x7
 3537 0482 7B040000 		.4byte	0x47b
 3538 0486 07       		.uleb128 0x7
 3539 0487 EF000000 		.4byte	0xef
 3540 048b 16       		.uleb128 0x16
 3541 048c FA000000 		.4byte	.LASF73
 3542 0490 01       		.byte	0x1
 3543 0491 4708     		.2byte	0x847
 3544 0493 00000000 		.4byte	.LFB55
 3545 0497 24000000 		.4byte	.LFE55-.LFB55
 3546 049b 01       		.uleb128 0x1
 3547 049c 9C       		.byte	0x9c
 3548 049d D2040000 		.4byte	0x4d2
 3549 04a1 10       		.uleb128 0x10
 3550 04a2 6E080000 		.4byte	.LASF67
 3551 04a6 01       		.byte	0x1
 3552 04a7 4708     		.2byte	0x847
 3553 04a9 81040000 		.4byte	0x481
 3554 04ad A1010000 		.4byte	.LLST8
 3555 04b1 10       		.uleb128 0x10
 3556 04b2 75060000 		.4byte	.LASF72
 3557 04b6 01       		.byte	0x1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 119


 3558 04b7 4708     		.2byte	0x847
 3559 04b9 D2040000 		.4byte	0x4d2
 3560 04bd C2010000 		.4byte	.LLST9
 3561 04c1 17       		.uleb128 0x17
 3562 04c2 22000000 		.4byte	.LVL31
 3563 04c6 E8150000 		.4byte	0x15e8
 3564 04ca 15       		.uleb128 0x15
 3565 04cb 01       		.uleb128 0x1
 3566 04cc 50       		.byte	0x50
 3567 04cd 02       		.uleb128 0x2
 3568 04ce 74       		.byte	0x74
 3569 04cf 00       		.sleb128 0
 3570 04d0 00       		.byte	0
 3571 04d1 00       		.byte	0
 3572 04d2 07       		.uleb128 0x7
 3573 04d3 A5000000 		.4byte	0xa5
 3574 04d7 16       		.uleb128 0x16
 3575 04d8 6B070000 		.4byte	.LASF74
 3576 04dc 01       		.byte	0x1
 3577 04dd 5908     		.2byte	0x859
 3578 04df 00000000 		.4byte	.LFB56
 3579 04e3 6E000000 		.4byte	.LFE56-.LFB56
 3580 04e7 01       		.uleb128 0x1
 3581 04e8 9C       		.byte	0x9c
 3582 04e9 98050000 		.4byte	0x598
 3583 04ed 10       		.uleb128 0x10
 3584 04ee 6E080000 		.4byte	.LASF67
 3585 04f2 01       		.byte	0x1
 3586 04f3 5908     		.2byte	0x859
 3587 04f5 81040000 		.4byte	0x481
 3588 04f9 EE010000 		.4byte	.LLST10
 3589 04fd 18       		.uleb128 0x18
 3590 04fe 08000000 		.4byte	.LBB2
 3591 0502 2C000000 		.4byte	.LBE2-.LBB2
 3592 0506 38050000 		.4byte	0x538
 3593 050a 11       		.uleb128 0x11
 3594 050b DF010000 		.4byte	.LASF55
 3595 050f 01       		.byte	0x1
 3596 0510 6308     		.2byte	0x863
 3597 0512 C0000000 		.4byte	0xc0
 3598 0516 1A020000 		.4byte	.LLST11
 3599 051a 14       		.uleb128 0x14
 3600 051b 1E000000 		.4byte	.LVL36
 3601 051f F1150000 		.4byte	0x15f1
 3602 0523 2E050000 		.4byte	0x52e
 3603 0527 15       		.uleb128 0x15
 3604 0528 01       		.uleb128 0x1
 3605 0529 50       		.byte	0x50
 3606 052a 02       		.uleb128 0x2
 3607 052b 75       		.byte	0x75
 3608 052c 24       		.sleb128 36
 3609 052d 00       		.byte	0
 3610 052e 12       		.uleb128 0x12
 3611 052f 26000000 		.4byte	.LVL37
 3612 0533 FD150000 		.4byte	0x15fd
 3613 0537 00       		.byte	0
 3614 0538 18       		.uleb128 0x18
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 120


 3615 0539 3C000000 		.4byte	.LBB3
 3616 053d 2C000000 		.4byte	.LBE3-.LBB3
 3617 0541 73050000 		.4byte	0x573
 3618 0545 11       		.uleb128 0x11
 3619 0546 87050000 		.4byte	.LASF54
 3620 054a 01       		.byte	0x1
 3621 054b B408     		.2byte	0x8b4
 3622 054d C0000000 		.4byte	0xc0
 3623 0551 38020000 		.4byte	.LLST12
 3624 0555 14       		.uleb128 0x14
 3625 0556 52000000 		.4byte	.LVL44
 3626 055a F1150000 		.4byte	0x15f1
 3627 055e 69050000 		.4byte	0x569
 3628 0562 15       		.uleb128 0x15
 3629 0563 01       		.uleb128 0x1
 3630 0564 50       		.byte	0x50
 3631 0565 02       		.uleb128 0x2
 3632 0566 75       		.byte	0x75
 3633 0567 10       		.sleb128 16
 3634 0568 00       		.byte	0
 3635 0569 12       		.uleb128 0x12
 3636 056a 5A000000 		.4byte	.LVL45
 3637 056e FD150000 		.4byte	0x15fd
 3638 0572 00       		.byte	0
 3639 0573 12       		.uleb128 0x12
 3640 0574 08000000 		.4byte	.LVL34
 3641 0578 D2150000 		.4byte	0x15d2
 3642 057c 12       		.uleb128 0x12
 3643 057d 38000000 		.4byte	.LVL40
 3644 0581 DD150000 		.4byte	0x15dd
 3645 0585 12       		.uleb128 0x12
 3646 0586 3C000000 		.4byte	.LVL41
 3647 058a D2150000 		.4byte	0x15d2
 3648 058e 12       		.uleb128 0x12
 3649 058f 6C000000 		.4byte	.LVL48
 3650 0593 DD150000 		.4byte	0x15dd
 3651 0597 00       		.byte	0
 3652 0598 19       		.uleb128 0x19
 3653 0599 1C070000 		.4byte	.LASF81
 3654 059d 01       		.byte	0x1
 3655 059e F7       		.byte	0xf7
 3656 059f EF000000 		.4byte	0xef
 3657 05a3 00000000 		.4byte	.LFB36
 3658 05a7 6C000000 		.4byte	.LFE36-.LFB36
 3659 05ab 01       		.uleb128 0x1
 3660 05ac 9C       		.byte	0x9c
 3661 05ad 36060000 		.4byte	0x636
 3662 05b1 1A       		.uleb128 0x1a
 3663 05b2 C8040000 		.4byte	.LASF75
 3664 05b6 01       		.byte	0x1
 3665 05b7 F7       		.byte	0xf7
 3666 05b8 23020000 		.4byte	0x223
 3667 05bc 56020000 		.4byte	.LLST13
 3668 05c0 1A       		.uleb128 0x1a
 3669 05c1 31010000 		.4byte	.LASF76
 3670 05c5 01       		.byte	0x1
 3671 05c6 F7       		.byte	0xf7
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 121


 3672 05c7 EF000000 		.4byte	0xef
 3673 05cb 82020000 		.4byte	.LLST14
 3674 05cf 1B       		.uleb128 0x1b
 3675 05d0 6E080000 		.4byte	.LASF67
 3676 05d4 01       		.byte	0x1
 3677 05d5 F9       		.byte	0xf9
 3678 05d6 81040000 		.4byte	0x481
 3679 05da AE020000 		.4byte	.LLST15
 3680 05de 12       		.uleb128 0x12
 3681 05df 12000000 		.4byte	.LVL53
 3682 05e3 D2150000 		.4byte	0x15d2
 3683 05e7 14       		.uleb128 0x14
 3684 05e8 4A000000 		.4byte	.LVL54
 3685 05ec F1150000 		.4byte	0x15f1
 3686 05f0 FB050000 		.4byte	0x5fb
 3687 05f4 15       		.uleb128 0x15
 3688 05f5 01       		.uleb128 0x1
 3689 05f6 50       		.byte	0x50
 3690 05f7 02       		.uleb128 0x2
 3691 05f8 74       		.byte	0x74
 3692 05f9 10       		.sleb128 16
 3693 05fa 00       		.byte	0
 3694 05fb 12       		.uleb128 0x12
 3695 05fc 52000000 		.4byte	.LVL55
 3696 0600 09160000 		.4byte	0x1609
 3697 0604 14       		.uleb128 0x14
 3698 0605 5C000000 		.4byte	.LVL56
 3699 0609 14160000 		.4byte	0x1614
 3700 060d 18060000 		.4byte	0x618
 3701 0611 15       		.uleb128 0x15
 3702 0612 01       		.uleb128 0x1
 3703 0613 50       		.byte	0x50
 3704 0614 02       		.uleb128 0x2
 3705 0615 74       		.byte	0x74
 3706 0616 10       		.sleb128 16
 3707 0617 00       		.byte	0
 3708 0618 14       		.uleb128 0x14
 3709 0619 64000000 		.4byte	.LVL57
 3710 061d 14160000 		.4byte	0x1614
 3711 0621 2C060000 		.4byte	0x62c
 3712 0625 15       		.uleb128 0x15
 3713 0626 01       		.uleb128 0x1
 3714 0627 50       		.byte	0x50
 3715 0628 02       		.uleb128 0x2
 3716 0629 74       		.byte	0x74
 3717 062a 24       		.sleb128 36
 3718 062b 00       		.byte	0
 3719 062c 12       		.uleb128 0x12
 3720 062d 68000000 		.4byte	.LVL58
 3721 0631 DD150000 		.4byte	0x15dd
 3722 0635 00       		.byte	0
 3723 0636 16       		.uleb128 0x16
 3724 0637 3E020000 		.4byte	.LASF77
 3725 063b 01       		.byte	0x1
 3726 063c 9801     		.2byte	0x198
 3727 063e 00000000 		.4byte	.LFB38
 3728 0642 22000000 		.4byte	.LFE38-.LFB38
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 122


 3729 0646 01       		.uleb128 0x1
 3730 0647 9C       		.byte	0x9c
 3731 0648 B1060000 		.4byte	0x6b1
 3732 064c 10       		.uleb128 0x10
 3733 064d 98040000 		.4byte	.LASF78
 3734 0651 01       		.byte	0x1
 3735 0652 9801     		.2byte	0x198
 3736 0654 B1060000 		.4byte	0x6b1
 3737 0658 DA020000 		.4byte	.LLST16
 3738 065c 10       		.uleb128 0x10
 3739 065d 88080000 		.4byte	.LASF53
 3740 0661 01       		.byte	0x1
 3741 0662 9801     		.2byte	0x198
 3742 0664 B1060000 		.4byte	0x6b1
 3743 0668 07030000 		.4byte	.LLST17
 3744 066c 10       		.uleb128 0x10
 3745 066d A5070000 		.4byte	.LASF79
 3746 0671 01       		.byte	0x1
 3747 0672 9801     		.2byte	0x198
 3748 0674 10010000 		.4byte	0x110
 3749 0678 35030000 		.4byte	.LLST18
 3750 067c 10       		.uleb128 0x10
 3751 067d 19000000 		.4byte	.LASF57
 3752 0681 01       		.byte	0x1
 3753 0682 9801     		.2byte	0x198
 3754 0684 B6060000 		.4byte	0x6b6
 3755 0688 56030000 		.4byte	.LLST19
 3756 068c 1C       		.uleb128 0x1c
 3757 068d 0F010000 		.4byte	.LASF80
 3758 0691 01       		.byte	0x1
 3759 0692 9801     		.2byte	0x198
 3760 0694 7B040000 		.4byte	0x47b
 3761 0698 02       		.uleb128 0x2
 3762 0699 91       		.byte	0x91
 3763 069a 00       		.sleb128 0
 3764 069b 17       		.uleb128 0x17
 3765 069c 1C000000 		.4byte	.LVL64
 3766 06a0 98050000 		.4byte	0x598
 3767 06a4 15       		.uleb128 0x15
 3768 06a5 01       		.uleb128 0x1
 3769 06a6 50       		.byte	0x50
 3770 06a7 02       		.uleb128 0x2
 3771 06a8 74       		.byte	0x74
 3772 06a9 00       		.sleb128 0
 3773 06aa 15       		.uleb128 0x15
 3774 06ab 01       		.uleb128 0x1
 3775 06ac 51       		.byte	0x51
 3776 06ad 01       		.uleb128 0x1
 3777 06ae 31       		.byte	0x31
 3778 06af 00       		.byte	0
 3779 06b0 00       		.byte	0
 3780 06b1 07       		.uleb128 0x7
 3781 06b2 FA000000 		.4byte	0xfa
 3782 06b6 07       		.uleb128 0x7
 3783 06b7 CB000000 		.4byte	0xcb
 3784 06bb 1D       		.uleb128 0x1d
 3785 06bc C9050000 		.4byte	.LASF82
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 123


 3786 06c0 01       		.byte	0x1
 3787 06c1 6601     		.2byte	0x166
 3788 06c3 23020000 		.4byte	0x223
 3789 06c7 00000000 		.4byte	.LFB37
 3790 06cb 3E000000 		.4byte	.LFE37-.LFB37
 3791 06cf 01       		.uleb128 0x1
 3792 06d0 9C       		.byte	0x9c
 3793 06d1 67070000 		.4byte	0x767
 3794 06d5 10       		.uleb128 0x10
 3795 06d6 98040000 		.4byte	.LASF78
 3796 06da 01       		.byte	0x1
 3797 06db 6601     		.2byte	0x166
 3798 06dd B1060000 		.4byte	0x6b1
 3799 06e1 77030000 		.4byte	.LLST20
 3800 06e5 10       		.uleb128 0x10
 3801 06e6 88080000 		.4byte	.LASF53
 3802 06ea 01       		.byte	0x1
 3803 06eb 6601     		.2byte	0x166
 3804 06ed B1060000 		.4byte	0x6b1
 3805 06f1 B9030000 		.4byte	.LLST21
 3806 06f5 10       		.uleb128 0x10
 3807 06f6 19000000 		.4byte	.LASF57
 3808 06fa 01       		.byte	0x1
 3809 06fb 6601     		.2byte	0x166
 3810 06fd B6060000 		.4byte	0x6b6
 3811 0701 E5030000 		.4byte	.LLST22
 3812 0705 11       		.uleb128 0x11
 3813 0706 0F010000 		.4byte	.LASF80
 3814 070a 01       		.byte	0x1
 3815 070b 6801     		.2byte	0x168
 3816 070d 7B040000 		.4byte	0x47b
 3817 0711 06040000 		.4byte	.LLST23
 3818 0715 11       		.uleb128 0x11
 3819 0716 5C080000 		.4byte	.LASF83
 3820 071a 01       		.byte	0x1
 3821 071b 6901     		.2byte	0x169
 3822 071d 25000000 		.4byte	0x25
 3823 0721 2F040000 		.4byte	.LLST24
 3824 0725 1E       		.uleb128 0x1e
 3825 0726 A5070000 		.4byte	.LASF79
 3826 072a 01       		.byte	0x1
 3827 072b 6A01     		.2byte	0x16a
 3828 072d 10010000 		.4byte	0x110
 3829 0731 01       		.uleb128 0x1
 3830 0732 52       		.byte	0x52
 3831 0733 12       		.uleb128 0x12
 3832 0734 24000000 		.4byte	.LVL71
 3833 0738 20160000 		.4byte	0x1620
 3834 073c 17       		.uleb128 0x17
 3835 073d 38000000 		.4byte	.LVL74
 3836 0741 36060000 		.4byte	0x636
 3837 0745 15       		.uleb128 0x15
 3838 0746 01       		.uleb128 0x1
 3839 0747 50       		.byte	0x50
 3840 0748 02       		.uleb128 0x2
 3841 0749 76       		.byte	0x76
 3842 074a 00       		.sleb128 0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 124


 3843 074b 15       		.uleb128 0x15
 3844 074c 01       		.uleb128 0x1
 3845 074d 51       		.byte	0x51
 3846 074e 02       		.uleb128 0x2
 3847 074f 77       		.byte	0x77
 3848 0750 00       		.sleb128 0
 3849 0751 15       		.uleb128 0x15
 3850 0752 01       		.uleb128 0x1
 3851 0753 52       		.byte	0x52
 3852 0754 03       		.uleb128 0x3
 3853 0755 74       		.byte	0x74
 3854 0756 D000     		.sleb128 80
 3855 0758 15       		.uleb128 0x15
 3856 0759 01       		.uleb128 0x1
 3857 075a 53       		.byte	0x53
 3858 075b 02       		.uleb128 0x2
 3859 075c 75       		.byte	0x75
 3860 075d 00       		.sleb128 0
 3861 075e 15       		.uleb128 0x15
 3862 075f 02       		.uleb128 0x2
 3863 0760 7D       		.byte	0x7d
 3864 0761 00       		.sleb128 0
 3865 0762 02       		.uleb128 0x2
 3866 0763 74       		.byte	0x74
 3867 0764 00       		.sleb128 0
 3868 0765 00       		.byte	0
 3869 0766 00       		.byte	0
 3870 0767 1D       		.uleb128 0x1d
 3871 0768 3E030000 		.4byte	.LASF84
 3872 076c 01       		.byte	0x1
 3873 076d D502     		.2byte	0x2d5
 3874 076f EF000000 		.4byte	0xef
 3875 0773 00000000 		.4byte	.LFB39
 3876 0777 48010000 		.4byte	.LFE39-.LFB39
 3877 077b 01       		.uleb128 0x1
 3878 077c 9C       		.byte	0x9c
 3879 077d 45090000 		.4byte	0x945
 3880 0781 10       		.uleb128 0x10
 3881 0782 C8040000 		.4byte	.LASF75
 3882 0786 01       		.byte	0x1
 3883 0787 D502     		.2byte	0x2d5
 3884 0789 23020000 		.4byte	0x223
 3885 078d 5B040000 		.4byte	.LLST25
 3886 0791 10       		.uleb128 0x10
 3887 0792 F8040000 		.4byte	.LASF70
 3888 0796 01       		.byte	0x1
 3889 0797 D502     		.2byte	0x2d5
 3890 0799 45090000 		.4byte	0x945
 3891 079d 87040000 		.4byte	.LLST26
 3892 07a1 10       		.uleb128 0x10
 3893 07a2 B2010000 		.4byte	.LASF85
 3894 07a6 01       		.byte	0x1
 3895 07a7 D502     		.2byte	0x2d5
 3896 07a9 05010000 		.4byte	0x105
 3897 07ad B3040000 		.4byte	.LLST27
 3898 07b1 10       		.uleb128 0x10
 3899 07b2 46070000 		.4byte	.LASF86
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 125


 3900 07b6 01       		.byte	0x1
 3901 07b7 D502     		.2byte	0x2d5
 3902 07b9 86040000 		.4byte	0x486
 3903 07bd EA040000 		.4byte	.LLST28
 3904 07c1 11       		.uleb128 0x11
 3905 07c2 2F050000 		.4byte	.LASF87
 3906 07c6 01       		.byte	0x1
 3907 07c7 D702     		.2byte	0x2d7
 3908 07c9 EF000000 		.4byte	0xef
 3909 07cd 2C050000 		.4byte	.LLST29
 3910 07d1 11       		.uleb128 0x11
 3911 07d2 7E030000 		.4byte	.LASF88
 3912 07d6 01       		.byte	0x1
 3913 07d7 D702     		.2byte	0x2d7
 3914 07d9 EF000000 		.4byte	0xef
 3915 07dd 62050000 		.4byte	.LLST30
 3916 07e1 1E       		.uleb128 0x1e
 3917 07e2 24020000 		.4byte	.LASF89
 3918 07e6 01       		.byte	0x1
 3919 07e7 D802     		.2byte	0x2d8
 3920 07e9 18020000 		.4byte	0x218
 3921 07ed 02       		.uleb128 0x2
 3922 07ee 91       		.byte	0x91
 3923 07ef 60       		.sleb128 -32
 3924 07f0 11       		.uleb128 0x11
 3925 07f1 6E080000 		.4byte	.LASF67
 3926 07f5 01       		.byte	0x1
 3927 07f6 D902     		.2byte	0x2d9
 3928 07f8 81040000 		.4byte	0x481
 3929 07fc 80050000 		.4byte	.LLST31
 3930 0800 12       		.uleb128 0x12
 3931 0801 4E000000 		.4byte	.LVL83
 3932 0805 2B160000 		.4byte	0x162b
 3933 0809 12       		.uleb128 0x12
 3934 080a 70000000 		.4byte	.LVL85
 3935 080e D2150000 		.4byte	0x15d2
 3936 0812 14       		.uleb128 0x14
 3937 0813 86000000 		.4byte	.LVL86
 3938 0817 F5030000 		.4byte	0x3f5
 3939 081b 32080000 		.4byte	0x832
 3940 081f 15       		.uleb128 0x15
 3941 0820 01       		.uleb128 0x1
 3942 0821 50       		.byte	0x50
 3943 0822 02       		.uleb128 0x2
 3944 0823 74       		.byte	0x74
 3945 0824 00       		.sleb128 0
 3946 0825 15       		.uleb128 0x15
 3947 0826 01       		.uleb128 0x1
 3948 0827 51       		.byte	0x51
 3949 0828 02       		.uleb128 0x2
 3950 0829 76       		.byte	0x76
 3951 082a 00       		.sleb128 0
 3952 082b 15       		.uleb128 0x15
 3953 082c 01       		.uleb128 0x1
 3954 082d 52       		.byte	0x52
 3955 082e 02       		.uleb128 0x2
 3956 082f 75       		.byte	0x75
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 126


 3957 0830 00       		.sleb128 0
 3958 0831 00       		.byte	0
 3959 0832 14       		.uleb128 0x14
 3960 0833 94000000 		.4byte	.LVL88
 3961 0837 F1150000 		.4byte	0x15f1
 3962 083b 46080000 		.4byte	0x846
 3963 083f 15       		.uleb128 0x15
 3964 0840 01       		.uleb128 0x1
 3965 0841 50       		.byte	0x50
 3966 0842 02       		.uleb128 0x2
 3967 0843 74       		.byte	0x74
 3968 0844 24       		.sleb128 36
 3969 0845 00       		.byte	0
 3970 0846 12       		.uleb128 0x12
 3971 0847 9C000000 		.4byte	.LVL89
 3972 084b 09160000 		.4byte	0x1609
 3973 084f 12       		.uleb128 0x12
 3974 0850 A6000000 		.4byte	.LVL91
 3975 0854 09160000 		.4byte	0x1609
 3976 0858 12       		.uleb128 0x12
 3977 0859 AA000000 		.4byte	.LVL92
 3978 085d DD150000 		.4byte	0x15dd
 3979 0861 12       		.uleb128 0x12
 3980 0862 B8000000 		.4byte	.LVL93
 3981 0866 DD150000 		.4byte	0x15dd
 3982 086a 14       		.uleb128 0x14
 3983 086b C6000000 		.4byte	.LVL94
 3984 086f 37160000 		.4byte	0x1637
 3985 0873 7E080000 		.4byte	0x87e
 3986 0877 15       		.uleb128 0x15
 3987 0878 01       		.uleb128 0x1
 3988 0879 50       		.byte	0x50
 3989 087a 02       		.uleb128 0x2
 3990 087b 91       		.byte	0x91
 3991 087c 60       		.sleb128 -32
 3992 087d 00       		.byte	0
 3993 087e 12       		.uleb128 0x12
 3994 087f CC000000 		.4byte	.LVL96
 3995 0883 DD150000 		.4byte	0x15dd
 3996 0887 12       		.uleb128 0x12
 3997 0888 D0000000 		.4byte	.LVL97
 3998 088c 43160000 		.4byte	0x1643
 3999 0890 12       		.uleb128 0x12
 4000 0891 D4000000 		.4byte	.LVL98
 4001 0895 D2150000 		.4byte	0x15d2
 4002 0899 12       		.uleb128 0x12
 4003 089a F8000000 		.4byte	.LVL99
 4004 089e DD150000 		.4byte	0x15dd
 4005 08a2 14       		.uleb128 0x14
 4006 08a3 00010000 		.4byte	.LVL101
 4007 08a7 4F160000 		.4byte	0x164f
 4008 08ab BC080000 		.4byte	0x8bc
 4009 08af 15       		.uleb128 0x15
 4010 08b0 01       		.uleb128 0x1
 4011 08b1 50       		.byte	0x50
 4012 08b2 02       		.uleb128 0x2
 4013 08b3 91       		.byte	0x91
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 127


 4014 08b4 60       		.sleb128 -32
 4015 08b5 15       		.uleb128 0x15
 4016 08b6 01       		.uleb128 0x1
 4017 08b7 51       		.byte	0x51
 4018 08b8 02       		.uleb128 0x2
 4019 08b9 91       		.byte	0x91
 4020 08ba 5C       		.sleb128 -36
 4021 08bb 00       		.byte	0
 4022 08bc 14       		.uleb128 0x14
 4023 08bd 0A010000 		.4byte	.LVL102
 4024 08c1 50030000 		.4byte	0x350
 4025 08c5 D0080000 		.4byte	0x8d0
 4026 08c9 15       		.uleb128 0x15
 4027 08ca 01       		.uleb128 0x1
 4028 08cb 50       		.byte	0x50
 4029 08cc 02       		.uleb128 0x2
 4030 08cd 74       		.byte	0x74
 4031 08ce 00       		.sleb128 0
 4032 08cf 00       		.byte	0
 4033 08d0 14       		.uleb128 0x14
 4034 08d1 18010000 		.4byte	.LVL103
 4035 08d5 5B160000 		.4byte	0x165b
 4036 08d9 E4080000 		.4byte	0x8e4
 4037 08dd 15       		.uleb128 0x15
 4038 08de 01       		.uleb128 0x1
 4039 08df 50       		.byte	0x50
 4040 08e0 02       		.uleb128 0x2
 4041 08e1 74       		.byte	0x74
 4042 08e2 10       		.sleb128 16
 4043 08e3 00       		.byte	0
 4044 08e4 14       		.uleb128 0x14
 4045 08e5 1E010000 		.4byte	.LVL104
 4046 08e9 D7040000 		.4byte	0x4d7
 4047 08ed F8080000 		.4byte	0x8f8
 4048 08f1 15       		.uleb128 0x15
 4049 08f2 01       		.uleb128 0x1
 4050 08f3 50       		.byte	0x50
 4051 08f4 02       		.uleb128 0x2
 4052 08f5 74       		.byte	0x74
 4053 08f6 00       		.sleb128 0
 4054 08f7 00       		.byte	0
 4055 08f8 12       		.uleb128 0x12
 4056 08f9 22010000 		.4byte	.LVL105
 4057 08fd 67160000 		.4byte	0x1667
 4058 0901 12       		.uleb128 0x12
 4059 0902 2A010000 		.4byte	.LVL106
 4060 0906 09160000 		.4byte	0x1609
 4061 090a 14       		.uleb128 0x14
 4062 090b 32010000 		.4byte	.LVL107
 4063 090f D7040000 		.4byte	0x4d7
 4064 0913 1E090000 		.4byte	0x91e
 4065 0917 15       		.uleb128 0x15
 4066 0918 01       		.uleb128 0x1
 4067 0919 50       		.byte	0x50
 4068 091a 02       		.uleb128 0x2
 4069 091b 74       		.byte	0x74
 4070 091c 00       		.sleb128 0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 128


 4071 091d 00       		.byte	0
 4072 091e 12       		.uleb128 0x12
 4073 091f 36010000 		.4byte	.LVL108
 4074 0923 67160000 		.4byte	0x1667
 4075 0927 14       		.uleb128 0x14
 4076 0928 3E010000 		.4byte	.LVL109
 4077 092c D7040000 		.4byte	0x4d7
 4078 0930 3B090000 		.4byte	0x93b
 4079 0934 15       		.uleb128 0x15
 4080 0935 01       		.uleb128 0x1
 4081 0936 50       		.byte	0x50
 4082 0937 02       		.uleb128 0x2
 4083 0938 74       		.byte	0x74
 4084 0939 00       		.sleb128 0
 4085 093a 00       		.byte	0
 4086 093b 12       		.uleb128 0x12
 4087 093c 42010000 		.4byte	.LVL110
 4088 0940 67160000 		.4byte	0x1667
 4089 0944 00       		.byte	0
 4090 0945 07       		.uleb128 0x7
 4091 0946 B9000000 		.4byte	0xb9
 4092 094a 1D       		.uleb128 0x1d
 4093 094b 00000000 		.4byte	.LASF90
 4094 094f 01       		.byte	0x1
 4095 0950 9B03     		.2byte	0x39b
 4096 0952 EF000000 		.4byte	0xef
 4097 0956 00000000 		.4byte	.LFB40
 4098 095a B6000000 		.4byte	.LFE40-.LFB40
 4099 095e 01       		.uleb128 0x1
 4100 095f 9C       		.byte	0x9c
 4101 0960 3A0A0000 		.4byte	0xa3a
 4102 0964 10       		.uleb128 0x10
 4103 0965 C8040000 		.4byte	.LASF75
 4104 0969 01       		.byte	0x1
 4105 096a 9B03     		.2byte	0x39b
 4106 096c 23020000 		.4byte	0x223
 4107 0970 AC050000 		.4byte	.LLST32
 4108 0974 10       		.uleb128 0x10
 4109 0975 F8040000 		.4byte	.LASF70
 4110 0979 01       		.byte	0x1
 4111 097a 9B03     		.2byte	0x39b
 4112 097c 45090000 		.4byte	0x945
 4113 0980 55060000 		.4byte	.LLST33
 4114 0984 10       		.uleb128 0x10
 4115 0985 8F000000 		.4byte	.LASF91
 4116 0989 01       		.byte	0x1
 4117 098a 9B03     		.2byte	0x39b
 4118 098c 400A0000 		.4byte	0xa40
 4119 0990 80060000 		.4byte	.LLST34
 4120 0994 10       		.uleb128 0x10
 4121 0995 46070000 		.4byte	.LASF86
 4122 0999 01       		.byte	0x1
 4123 099a 9B03     		.2byte	0x39b
 4124 099c 86040000 		.4byte	0x486
 4125 09a0 AC060000 		.4byte	.LLST35
 4126 09a4 11       		.uleb128 0x11
 4127 09a5 B6020000 		.4byte	.LASF68
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 129


 4128 09a9 01       		.byte	0x1
 4129 09aa 9D03     		.2byte	0x39d
 4130 09ac EF000000 		.4byte	0xef
 4131 09b0 D8060000 		.4byte	.LLST36
 4132 09b4 11       		.uleb128 0x11
 4133 09b5 2B060000 		.4byte	.LASF92
 4134 09b9 01       		.byte	0x1
 4135 09ba 9E03     		.2byte	0x39e
 4136 09bc FA000000 		.4byte	0xfa
 4137 09c0 F6060000 		.4byte	.LLST37
 4138 09c4 11       		.uleb128 0x11
 4139 09c5 6E080000 		.4byte	.LASF67
 4140 09c9 01       		.byte	0x1
 4141 09ca 9F03     		.2byte	0x39f
 4142 09cc 81040000 		.4byte	0x481
 4143 09d0 2C070000 		.4byte	.LLST38
 4144 09d4 1F       		.uleb128 0x1f
 4145 09d5 00000000 		.4byte	.Ldebug_ranges0+0
 4146 09d9 1F0A0000 		.4byte	0xa1f
 4147 09dd 11       		.uleb128 0x11
 4148 09de DF010000 		.4byte	.LASF55
 4149 09e2 01       		.byte	0x1
 4150 09e3 BE03     		.2byte	0x3be
 4151 09e5 450A0000 		.4byte	0xa45
 4152 09e9 D5070000 		.4byte	.LLST39
 4153 09ed 14       		.uleb128 0x14
 4154 09ee 6E000000 		.4byte	.LVL122
 4155 09f2 F5030000 		.4byte	0x3f5
 4156 09f6 0E0A0000 		.4byte	0xa0e
 4157 09fa 15       		.uleb128 0x15
 4158 09fb 01       		.uleb128 0x1
 4159 09fc 50       		.byte	0x50
 4160 09fd 02       		.uleb128 0x2
 4161 09fe 74       		.byte	0x74
 4162 09ff 00       		.sleb128 0
 4163 0a00 15       		.uleb128 0x15
 4164 0a01 01       		.uleb128 0x1
 4165 0a02 51       		.byte	0x51
 4166 0a03 03       		.uleb128 0x3
 4167 0a04 7D       		.byte	0x7d
 4168 0a05 00       		.sleb128 0
 4169 0a06 06       		.byte	0x6
 4170 0a07 15       		.uleb128 0x15
 4171 0a08 01       		.uleb128 0x1
 4172 0a09 52       		.byte	0x52
 4173 0a0a 02       		.uleb128 0x2
 4174 0a0b 77       		.byte	0x77
 4175 0a0c 00       		.sleb128 0
 4176 0a0d 00       		.byte	0
 4177 0a0e 17       		.uleb128 0x17
 4178 0a0f 80000000 		.4byte	.LVL123
 4179 0a13 F1150000 		.4byte	0x15f1
 4180 0a17 15       		.uleb128 0x15
 4181 0a18 01       		.uleb128 0x1
 4182 0a19 50       		.byte	0x50
 4183 0a1a 02       		.uleb128 0x2
 4184 0a1b 74       		.byte	0x74
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 130


 4185 0a1c 24       		.sleb128 36
 4186 0a1d 00       		.byte	0
 4187 0a1e 00       		.byte	0
 4188 0a1f 12       		.uleb128 0x12
 4189 0a20 50000000 		.4byte	.LVL118
 4190 0a24 73160000 		.4byte	0x1673
 4191 0a28 17       		.uleb128 0x17
 4192 0a29 B0000000 		.4byte	.LVL137
 4193 0a2d 7E160000 		.4byte	0x167e
 4194 0a31 15       		.uleb128 0x15
 4195 0a32 01       		.uleb128 0x1
 4196 0a33 50       		.byte	0x50
 4197 0a34 03       		.uleb128 0x3
 4198 0a35 91       		.byte	0x91
 4199 0a36 64       		.sleb128 -28
 4200 0a37 06       		.byte	0x6
 4201 0a38 00       		.byte	0
 4202 0a39 00       		.byte	0
 4203 0a3a 06       		.uleb128 0x6
 4204 0a3b 04       		.byte	0x4
 4205 0a3c EF000000 		.4byte	0xef
 4206 0a40 07       		.uleb128 0x7
 4207 0a41 3A0A0000 		.4byte	0xa3a
 4208 0a45 07       		.uleb128 0x7
 4209 0a46 C0000000 		.4byte	0xc0
 4210 0a4a 1D       		.uleb128 0x1d
 4211 0a4b 8F050000 		.4byte	.LASF93
 4212 0a4f 01       		.byte	0x1
 4213 0a50 3204     		.2byte	0x432
 4214 0a52 EF000000 		.4byte	0xef
 4215 0a56 00000000 		.4byte	.LFB41
 4216 0a5a 94000000 		.4byte	.LFE41-.LFB41
 4217 0a5e 01       		.uleb128 0x1
 4218 0a5f 9C       		.byte	0x9c
 4219 0a60 120B0000 		.4byte	0xb12
 4220 0a64 10       		.uleb128 0x10
 4221 0a65 C8040000 		.4byte	.LASF75
 4222 0a69 01       		.byte	0x1
 4223 0a6a 3204     		.2byte	0x432
 4224 0a6c 23020000 		.4byte	0x223
 4225 0a70 00080000 		.4byte	.LLST40
 4226 0a74 10       		.uleb128 0x10
 4227 0a75 8F000000 		.4byte	.LASF91
 4228 0a79 01       		.byte	0x1
 4229 0a7a 3204     		.2byte	0x432
 4230 0a7c 400A0000 		.4byte	0xa40
 4231 0a80 A9080000 		.4byte	.LLST41
 4232 0a84 11       		.uleb128 0x11
 4233 0a85 B6020000 		.4byte	.LASF68
 4234 0a89 01       		.byte	0x1
 4235 0a8a 3404     		.2byte	0x434
 4236 0a8c EF000000 		.4byte	0xef
 4237 0a90 D5080000 		.4byte	.LLST42
 4238 0a94 11       		.uleb128 0x11
 4239 0a95 2B060000 		.4byte	.LASF92
 4240 0a99 01       		.byte	0x1
 4241 0a9a 3504     		.2byte	0x435
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 131


 4242 0a9c FA000000 		.4byte	0xfa
 4243 0aa0 F3080000 		.4byte	.LLST43
 4244 0aa4 11       		.uleb128 0x11
 4245 0aa5 6E080000 		.4byte	.LASF67
 4246 0aa9 01       		.byte	0x1
 4247 0aaa 3604     		.2byte	0x436
 4248 0aac 81040000 		.4byte	0x481
 4249 0ab0 27090000 		.4byte	.LLST44
 4250 0ab4 18       		.uleb128 0x18
 4251 0ab5 3C000000 		.4byte	.LBB6
 4252 0ab9 4E000000 		.4byte	.LBE6-.LBB6
 4253 0abd F80A0000 		.4byte	0xaf8
 4254 0ac1 11       		.uleb128 0x11
 4255 0ac2 59060000 		.4byte	.LASF51
 4256 0ac6 01       		.byte	0x1
 4257 0ac7 5B04     		.2byte	0x45b
 4258 0ac9 B1060000 		.4byte	0x6b1
 4259 0acd D0090000 		.4byte	.LLST45
 4260 0ad1 20       		.uleb128 0x20
 4261 0ad2 18000000 		.4byte	.Ldebug_ranges0+0x18
 4262 0ad6 11       		.uleb128 0x11
 4263 0ad7 DF010000 		.4byte	.LASF55
 4264 0adb 01       		.byte	0x1
 4265 0adc 6204     		.2byte	0x462
 4266 0ade 450A0000 		.4byte	0xa45
 4267 0ae2 3E0A0000 		.4byte	.LLST46
 4268 0ae6 17       		.uleb128 0x17
 4269 0ae7 60000000 		.4byte	.LVL152
 4270 0aeb F1150000 		.4byte	0x15f1
 4271 0aef 15       		.uleb128 0x15
 4272 0af0 01       		.uleb128 0x1
 4273 0af1 50       		.byte	0x50
 4274 0af2 02       		.uleb128 0x2
 4275 0af3 74       		.byte	0x74
 4276 0af4 24       		.sleb128 36
 4277 0af5 00       		.byte	0
 4278 0af6 00       		.byte	0
 4279 0af7 00       		.byte	0
 4280 0af8 12       		.uleb128 0x12
 4281 0af9 3A000000 		.4byte	.LVL144
 4282 0afd 73160000 		.4byte	0x1673
 4283 0b01 17       		.uleb128 0x17
 4284 0b02 90000000 		.4byte	.LVL167
 4285 0b06 7E160000 		.4byte	0x167e
 4286 0b0a 15       		.uleb128 0x15
 4287 0b0b 01       		.uleb128 0x1
 4288 0b0c 50       		.byte	0x50
 4289 0b0d 02       		.uleb128 0x2
 4290 0b0e 75       		.byte	0x75
 4291 0b0f 00       		.sleb128 0
 4292 0b10 00       		.byte	0
 4293 0b11 00       		.byte	0
 4294 0b12 1D       		.uleb128 0x1d
 4295 0b13 8D030000 		.4byte	.LASF94
 4296 0b17 01       		.byte	0x1
 4297 0b18 D704     		.2byte	0x4d7
 4298 0b1a EF000000 		.4byte	0xef
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 132


 4299 0b1e 00000000 		.4byte	.LFB42
 4300 0b22 28010000 		.4byte	.LFE42-.LFB42
 4301 0b26 01       		.uleb128 0x1
 4302 0b27 9C       		.byte	0x9c
 4303 0b28 EB0C0000 		.4byte	0xceb
 4304 0b2c 10       		.uleb128 0x10
 4305 0b2d C8040000 		.4byte	.LASF75
 4306 0b31 01       		.byte	0x1
 4307 0b32 D704     		.2byte	0x4d7
 4308 0b34 23020000 		.4byte	0x223
 4309 0b38 690A0000 		.4byte	.LLST47
 4310 0b3c 10       		.uleb128 0x10
 4311 0b3d 75060000 		.4byte	.LASF72
 4312 0b41 01       		.byte	0x1
 4313 0b42 D704     		.2byte	0x4d7
 4314 0b44 D2040000 		.4byte	0x4d2
 4315 0b48 950A0000 		.4byte	.LLST48
 4316 0b4c 10       		.uleb128 0x10
 4317 0b4d B2010000 		.4byte	.LASF85
 4318 0b51 01       		.byte	0x1
 4319 0b52 D704     		.2byte	0x4d7
 4320 0b54 05010000 		.4byte	0x105
 4321 0b58 C10A0000 		.4byte	.LLST49
 4322 0b5c 11       		.uleb128 0x11
 4323 0b5d 2F050000 		.4byte	.LASF87
 4324 0b61 01       		.byte	0x1
 4325 0b62 D904     		.2byte	0x4d9
 4326 0b64 EF000000 		.4byte	0xef
 4327 0b68 F80A0000 		.4byte	.LLST50
 4328 0b6c 1E       		.uleb128 0x1e
 4329 0b6d 24020000 		.4byte	.LASF89
 4330 0b71 01       		.byte	0x1
 4331 0b72 DA04     		.2byte	0x4da
 4332 0b74 18020000 		.4byte	0x218
 4333 0b78 02       		.uleb128 0x2
 4334 0b79 91       		.byte	0x91
 4335 0b7a 60       		.sleb128 -32
 4336 0b7b 11       		.uleb128 0x11
 4337 0b7c 6E080000 		.4byte	.LASF67
 4338 0b80 01       		.byte	0x1
 4339 0b81 DB04     		.2byte	0x4db
 4340 0b83 81040000 		.4byte	0x481
 4341 0b87 2E0B0000 		.4byte	.LLST51
 4342 0b8b 18       		.uleb128 0x18
 4343 0b8c 54000000 		.4byte	.LBB9
 4344 0b90 4A000000 		.4byte	.LBE9-.LBB9
 4345 0b94 020C0000 		.4byte	0xc02
 4346 0b98 11       		.uleb128 0x11
 4347 0b99 59060000 		.4byte	.LASF51
 4348 0b9d 01       		.byte	0x1
 4349 0b9e F404     		.2byte	0x4f4
 4350 0ba0 B1060000 		.4byte	0x6b1
 4351 0ba4 5A0B0000 		.4byte	.LLST52
 4352 0ba8 14       		.uleb128 0x14
 4353 0ba9 62000000 		.4byte	.LVL177
 4354 0bad 8B040000 		.4byte	0x48b
 4355 0bb1 C20B0000 		.4byte	0xbc2
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 133


 4356 0bb5 15       		.uleb128 0x15
 4357 0bb6 01       		.uleb128 0x1
 4358 0bb7 50       		.byte	0x50
 4359 0bb8 02       		.uleb128 0x2
 4360 0bb9 74       		.byte	0x74
 4361 0bba 00       		.sleb128 0
 4362 0bbb 15       		.uleb128 0x15
 4363 0bbc 01       		.uleb128 0x1
 4364 0bbd 51       		.byte	0x51
 4365 0bbe 02       		.uleb128 0x2
 4366 0bbf 76       		.byte	0x76
 4367 0bc0 00       		.sleb128 0
 4368 0bc1 00       		.byte	0
 4369 0bc2 14       		.uleb128 0x14
 4370 0bc3 74000000 		.4byte	.LVL179
 4371 0bc7 F1150000 		.4byte	0x15f1
 4372 0bcb D60B0000 		.4byte	0xbd6
 4373 0bcf 15       		.uleb128 0x15
 4374 0bd0 01       		.uleb128 0x1
 4375 0bd1 50       		.byte	0x50
 4376 0bd2 02       		.uleb128 0x2
 4377 0bd3 74       		.byte	0x74
 4378 0bd4 10       		.sleb128 16
 4379 0bd5 00       		.byte	0
 4380 0bd6 12       		.uleb128 0x12
 4381 0bd7 7C000000 		.4byte	.LVL180
 4382 0bdb 09160000 		.4byte	0x1609
 4383 0bdf 12       		.uleb128 0x12
 4384 0be0 80000000 		.4byte	.LVL181
 4385 0be4 DD150000 		.4byte	0x15dd
 4386 0be8 12       		.uleb128 0x12
 4387 0be9 8E000000 		.4byte	.LVL183
 4388 0bed DD150000 		.4byte	0x15dd
 4389 0bf1 17       		.uleb128 0x17
 4390 0bf2 9C000000 		.4byte	.LVL184
 4391 0bf6 37160000 		.4byte	0x1637
 4392 0bfa 15       		.uleb128 0x15
 4393 0bfb 01       		.uleb128 0x1
 4394 0bfc 50       		.byte	0x50
 4395 0bfd 02       		.uleb128 0x2
 4396 0bfe 91       		.byte	0x91
 4397 0bff 60       		.sleb128 -32
 4398 0c00 00       		.byte	0
 4399 0c01 00       		.byte	0
 4400 0c02 12       		.uleb128 0x12
 4401 0c03 32000000 		.4byte	.LVL173
 4402 0c07 2B160000 		.4byte	0x162b
 4403 0c0b 12       		.uleb128 0x12
 4404 0c0c 54000000 		.4byte	.LVL175
 4405 0c10 D2150000 		.4byte	0x15d2
 4406 0c14 12       		.uleb128 0x12
 4407 0c15 A2000000 		.4byte	.LVL186
 4408 0c19 DD150000 		.4byte	0x15dd
 4409 0c1d 12       		.uleb128 0x12
 4410 0c1e A6000000 		.4byte	.LVL187
 4411 0c22 43160000 		.4byte	0x1643
 4412 0c26 12       		.uleb128 0x12
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 134


 4413 0c27 AA000000 		.4byte	.LVL188
 4414 0c2b D2150000 		.4byte	0x15d2
 4415 0c2f 12       		.uleb128 0x12
 4416 0c30 CE000000 		.4byte	.LVL189
 4417 0c34 DD150000 		.4byte	0x15dd
 4418 0c38 14       		.uleb128 0x14
 4419 0c39 D6000000 		.4byte	.LVL191
 4420 0c3d 4F160000 		.4byte	0x164f
 4421 0c41 520C0000 		.4byte	0xc52
 4422 0c45 15       		.uleb128 0x15
 4423 0c46 01       		.uleb128 0x1
 4424 0c47 50       		.byte	0x50
 4425 0c48 02       		.uleb128 0x2
 4426 0c49 91       		.byte	0x91
 4427 0c4a 60       		.sleb128 -32
 4428 0c4b 15       		.uleb128 0x15
 4429 0c4c 01       		.uleb128 0x1
 4430 0c4d 51       		.byte	0x51
 4431 0c4e 02       		.uleb128 0x2
 4432 0c4f 91       		.byte	0x91
 4433 0c50 5C       		.sleb128 -36
 4434 0c51 00       		.byte	0
 4435 0c52 14       		.uleb128 0x14
 4436 0c53 E0000000 		.4byte	.LVL192
 4437 0c57 A8030000 		.4byte	0x3a8
 4438 0c5b 660C0000 		.4byte	0xc66
 4439 0c5f 15       		.uleb128 0x15
 4440 0c60 01       		.uleb128 0x1
 4441 0c61 50       		.byte	0x50
 4442 0c62 02       		.uleb128 0x2
 4443 0c63 74       		.byte	0x74
 4444 0c64 00       		.sleb128 0
 4445 0c65 00       		.byte	0
 4446 0c66 14       		.uleb128 0x14
 4447 0c67 EE000000 		.4byte	.LVL193
 4448 0c6b 5B160000 		.4byte	0x165b
 4449 0c6f 7A0C0000 		.4byte	0xc7a
 4450 0c73 15       		.uleb128 0x15
 4451 0c74 01       		.uleb128 0x1
 4452 0c75 50       		.byte	0x50
 4453 0c76 02       		.uleb128 0x2
 4454 0c77 74       		.byte	0x74
 4455 0c78 24       		.sleb128 36
 4456 0c79 00       		.byte	0
 4457 0c7a 14       		.uleb128 0x14
 4458 0c7b F4000000 		.4byte	.LVL194
 4459 0c7f D7040000 		.4byte	0x4d7
 4460 0c83 8E0C0000 		.4byte	0xc8e
 4461 0c87 15       		.uleb128 0x15
 4462 0c88 01       		.uleb128 0x1
 4463 0c89 50       		.byte	0x50
 4464 0c8a 02       		.uleb128 0x2
 4465 0c8b 74       		.byte	0x74
 4466 0c8c 00       		.sleb128 0
 4467 0c8d 00       		.byte	0
 4468 0c8e 12       		.uleb128 0x12
 4469 0c8f F8000000 		.4byte	.LVL195
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 135


 4470 0c93 67160000 		.4byte	0x1667
 4471 0c97 12       		.uleb128 0x12
 4472 0c98 00010000 		.4byte	.LVL196
 4473 0c9c 09160000 		.4byte	0x1609
 4474 0ca0 14       		.uleb128 0x14
 4475 0ca1 08010000 		.4byte	.LVL197
 4476 0ca5 D7040000 		.4byte	0x4d7
 4477 0ca9 B40C0000 		.4byte	0xcb4
 4478 0cad 15       		.uleb128 0x15
 4479 0cae 01       		.uleb128 0x1
 4480 0caf 50       		.byte	0x50
 4481 0cb0 02       		.uleb128 0x2
 4482 0cb1 74       		.byte	0x74
 4483 0cb2 00       		.sleb128 0
 4484 0cb3 00       		.byte	0
 4485 0cb4 12       		.uleb128 0x12
 4486 0cb5 0C010000 		.4byte	.LVL198
 4487 0cb9 67160000 		.4byte	0x1667
 4488 0cbd 14       		.uleb128 0x14
 4489 0cbe 14010000 		.4byte	.LVL199
 4490 0cc2 D7040000 		.4byte	0x4d7
 4491 0cc6 D10C0000 		.4byte	0xcd1
 4492 0cca 15       		.uleb128 0x15
 4493 0ccb 01       		.uleb128 0x1
 4494 0ccc 50       		.byte	0x50
 4495 0ccd 02       		.uleb128 0x2
 4496 0cce 74       		.byte	0x74
 4497 0ccf 00       		.sleb128 0
 4498 0cd0 00       		.byte	0
 4499 0cd1 12       		.uleb128 0x12
 4500 0cd2 18010000 		.4byte	.LVL200
 4501 0cd6 67160000 		.4byte	0x1667
 4502 0cda 17       		.uleb128 0x17
 4503 0cdb 1E010000 		.4byte	.LVL201
 4504 0cdf A8030000 		.4byte	0x3a8
 4505 0ce3 15       		.uleb128 0x15
 4506 0ce4 01       		.uleb128 0x1
 4507 0ce5 50       		.byte	0x50
 4508 0ce6 02       		.uleb128 0x2
 4509 0ce7 74       		.byte	0x74
 4510 0ce8 00       		.sleb128 0
 4511 0ce9 00       		.byte	0
 4512 0cea 00       		.byte	0
 4513 0ceb 1D       		.uleb128 0x1d
 4514 0cec 16030000 		.4byte	.LASF95
 4515 0cf0 01       		.byte	0x1
 4516 0cf1 6505     		.2byte	0x565
 4517 0cf3 EF000000 		.4byte	0xef
 4518 0cf7 00000000 		.4byte	.LFB43
 4519 0cfb 0A010000 		.4byte	.LFE43-.LFB43
 4520 0cff 01       		.uleb128 0x1
 4521 0d00 9C       		.byte	0x9c
 4522 0d01 9A0E0000 		.4byte	0xe9a
 4523 0d05 10       		.uleb128 0x10
 4524 0d06 C8040000 		.4byte	.LASF75
 4525 0d0a 01       		.byte	0x1
 4526 0d0b 6505     		.2byte	0x565
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 136


 4527 0d0d 23020000 		.4byte	0x223
 4528 0d11 850B0000 		.4byte	.LLST53
 4529 0d15 10       		.uleb128 0x10
 4530 0d16 B2010000 		.4byte	.LASF85
 4531 0d1a 01       		.byte	0x1
 4532 0d1b 6505     		.2byte	0x565
 4533 0d1d 05010000 		.4byte	0x105
 4534 0d21 B10B0000 		.4byte	.LLST54
 4535 0d25 11       		.uleb128 0x11
 4536 0d26 2F050000 		.4byte	.LASF87
 4537 0d2a 01       		.byte	0x1
 4538 0d2b 6705     		.2byte	0x567
 4539 0d2d EF000000 		.4byte	0xef
 4540 0d31 E80B0000 		.4byte	.LLST55
 4541 0d35 1E       		.uleb128 0x1e
 4542 0d36 24020000 		.4byte	.LASF89
 4543 0d3a 01       		.byte	0x1
 4544 0d3b 6805     		.2byte	0x568
 4545 0d3d 18020000 		.4byte	0x218
 4546 0d41 02       		.uleb128 0x2
 4547 0d42 91       		.byte	0x91
 4548 0d43 68       		.sleb128 -24
 4549 0d44 11       		.uleb128 0x11
 4550 0d45 6E080000 		.4byte	.LASF67
 4551 0d49 01       		.byte	0x1
 4552 0d4a 6905     		.2byte	0x569
 4553 0d4c 81040000 		.4byte	0x481
 4554 0d50 1E0C0000 		.4byte	.LLST56
 4555 0d54 18       		.uleb128 0x18
 4556 0d55 3E000000 		.4byte	.LBB10
 4557 0d59 42000000 		.4byte	.LBE10-.LBB10
 4558 0d5d B10D0000 		.4byte	0xdb1
 4559 0d61 11       		.uleb128 0x11
 4560 0d62 2D020000 		.4byte	.LASF96
 4561 0d66 01       		.byte	0x1
 4562 0d67 8805     		.2byte	0x588
 4563 0d69 B1060000 		.4byte	0x6b1
 4564 0d6d 4A0C0000 		.4byte	.LLST57
 4565 0d71 14       		.uleb128 0x14
 4566 0d72 56000000 		.4byte	.LVL214
 4567 0d76 F1150000 		.4byte	0x15f1
 4568 0d7a 850D0000 		.4byte	0xd85
 4569 0d7e 15       		.uleb128 0x15
 4570 0d7f 01       		.uleb128 0x1
 4571 0d80 50       		.byte	0x50
 4572 0d81 02       		.uleb128 0x2
 4573 0d82 74       		.byte	0x74
 4574 0d83 10       		.sleb128 16
 4575 0d84 00       		.byte	0
 4576 0d85 12       		.uleb128 0x12
 4577 0d86 5E000000 		.4byte	.LVL215
 4578 0d8a 09160000 		.4byte	0x1609
 4579 0d8e 12       		.uleb128 0x12
 4580 0d8f 62000000 		.4byte	.LVL216
 4581 0d93 DD150000 		.4byte	0x15dd
 4582 0d97 12       		.uleb128 0x12
 4583 0d98 70000000 		.4byte	.LVL219
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 137


 4584 0d9c DD150000 		.4byte	0x15dd
 4585 0da0 17       		.uleb128 0x17
 4586 0da1 7E000000 		.4byte	.LVL220
 4587 0da5 37160000 		.4byte	0x1637
 4588 0da9 15       		.uleb128 0x15
 4589 0daa 01       		.uleb128 0x1
 4590 0dab 50       		.byte	0x50
 4591 0dac 02       		.uleb128 0x2
 4592 0dad 91       		.byte	0x91
 4593 0dae 68       		.sleb128 -24
 4594 0daf 00       		.byte	0
 4595 0db0 00       		.byte	0
 4596 0db1 12       		.uleb128 0x12
 4597 0db2 1C000000 		.4byte	.LVL208
 4598 0db6 2B160000 		.4byte	0x162b
 4599 0dba 12       		.uleb128 0x12
 4600 0dbb 3E000000 		.4byte	.LVL210
 4601 0dbf D2150000 		.4byte	0x15d2
 4602 0dc3 12       		.uleb128 0x12
 4603 0dc4 84000000 		.4byte	.LVL222
 4604 0dc8 DD150000 		.4byte	0x15dd
 4605 0dcc 12       		.uleb128 0x12
 4606 0dcd 88000000 		.4byte	.LVL223
 4607 0dd1 43160000 		.4byte	0x1643
 4608 0dd5 12       		.uleb128 0x12
 4609 0dd6 8C000000 		.4byte	.LVL224
 4610 0dda D2150000 		.4byte	0x15d2
 4611 0dde 12       		.uleb128 0x12
 4612 0ddf B0000000 		.4byte	.LVL225
 4613 0de3 DD150000 		.4byte	0x15dd
 4614 0de7 14       		.uleb128 0x14
 4615 0de8 B8000000 		.4byte	.LVL227
 4616 0dec 4F160000 		.4byte	0x164f
 4617 0df0 010E0000 		.4byte	0xe01
 4618 0df4 15       		.uleb128 0x15
 4619 0df5 01       		.uleb128 0x1
 4620 0df6 50       		.byte	0x50
 4621 0df7 02       		.uleb128 0x2
 4622 0df8 91       		.byte	0x91
 4623 0df9 68       		.sleb128 -24
 4624 0dfa 15       		.uleb128 0x15
 4625 0dfb 01       		.uleb128 0x1
 4626 0dfc 51       		.byte	0x51
 4627 0dfd 02       		.uleb128 0x2
 4628 0dfe 91       		.byte	0x91
 4629 0dff 64       		.sleb128 -28
 4630 0e00 00       		.byte	0
 4631 0e01 14       		.uleb128 0x14
 4632 0e02 C2000000 		.4byte	.LVL228
 4633 0e06 A8030000 		.4byte	0x3a8
 4634 0e0a 150E0000 		.4byte	0xe15
 4635 0e0e 15       		.uleb128 0x15
 4636 0e0f 01       		.uleb128 0x1
 4637 0e10 50       		.byte	0x50
 4638 0e11 02       		.uleb128 0x2
 4639 0e12 74       		.byte	0x74
 4640 0e13 00       		.sleb128 0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 138


 4641 0e14 00       		.byte	0
 4642 0e15 14       		.uleb128 0x14
 4643 0e16 D0000000 		.4byte	.LVL229
 4644 0e1a 5B160000 		.4byte	0x165b
 4645 0e1e 290E0000 		.4byte	0xe29
 4646 0e22 15       		.uleb128 0x15
 4647 0e23 01       		.uleb128 0x1
 4648 0e24 50       		.byte	0x50
 4649 0e25 02       		.uleb128 0x2
 4650 0e26 74       		.byte	0x74
 4651 0e27 24       		.sleb128 36
 4652 0e28 00       		.byte	0
 4653 0e29 14       		.uleb128 0x14
 4654 0e2a D6000000 		.4byte	.LVL230
 4655 0e2e D7040000 		.4byte	0x4d7
 4656 0e32 3D0E0000 		.4byte	0xe3d
 4657 0e36 15       		.uleb128 0x15
 4658 0e37 01       		.uleb128 0x1
 4659 0e38 50       		.byte	0x50
 4660 0e39 02       		.uleb128 0x2
 4661 0e3a 74       		.byte	0x74
 4662 0e3b 00       		.sleb128 0
 4663 0e3c 00       		.byte	0
 4664 0e3d 12       		.uleb128 0x12
 4665 0e3e DA000000 		.4byte	.LVL231
 4666 0e42 67160000 		.4byte	0x1667
 4667 0e46 12       		.uleb128 0x12
 4668 0e47 E2000000 		.4byte	.LVL232
 4669 0e4b 09160000 		.4byte	0x1609
 4670 0e4f 14       		.uleb128 0x14
 4671 0e50 EA000000 		.4byte	.LVL233
 4672 0e54 D7040000 		.4byte	0x4d7
 4673 0e58 630E0000 		.4byte	0xe63
 4674 0e5c 15       		.uleb128 0x15
 4675 0e5d 01       		.uleb128 0x1
 4676 0e5e 50       		.byte	0x50
 4677 0e5f 02       		.uleb128 0x2
 4678 0e60 74       		.byte	0x74
 4679 0e61 00       		.sleb128 0
 4680 0e62 00       		.byte	0
 4681 0e63 12       		.uleb128 0x12
 4682 0e64 EE000000 		.4byte	.LVL234
 4683 0e68 67160000 		.4byte	0x1667
 4684 0e6c 14       		.uleb128 0x14
 4685 0e6d F6000000 		.4byte	.LVL235
 4686 0e71 D7040000 		.4byte	0x4d7
 4687 0e75 800E0000 		.4byte	0xe80
 4688 0e79 15       		.uleb128 0x15
 4689 0e7a 01       		.uleb128 0x1
 4690 0e7b 50       		.byte	0x50
 4691 0e7c 02       		.uleb128 0x2
 4692 0e7d 74       		.byte	0x74
 4693 0e7e 00       		.sleb128 0
 4694 0e7f 00       		.byte	0
 4695 0e80 12       		.uleb128 0x12
 4696 0e81 FA000000 		.4byte	.LVL236
 4697 0e85 67160000 		.4byte	0x1667
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 139


 4698 0e89 17       		.uleb128 0x17
 4699 0e8a 00010000 		.4byte	.LVL237
 4700 0e8e A8030000 		.4byte	0x3a8
 4701 0e92 15       		.uleb128 0x15
 4702 0e93 01       		.uleb128 0x1
 4703 0e94 50       		.byte	0x50
 4704 0e95 02       		.uleb128 0x2
 4705 0e96 74       		.byte	0x74
 4706 0e97 00       		.sleb128 0
 4707 0e98 00       		.byte	0
 4708 0e99 00       		.byte	0
 4709 0e9a 1D       		.uleb128 0x1d
 4710 0e9b 25000000 		.4byte	.LASF97
 4711 0e9f 01       		.byte	0x1
 4712 0ea0 4006     		.2byte	0x640
 4713 0ea2 EF000000 		.4byte	0xef
 4714 0ea6 00000000 		.4byte	.LFB44
 4715 0eaa 28010000 		.4byte	.LFE44-.LFB44
 4716 0eae 01       		.uleb128 0x1
 4717 0eaf 9C       		.byte	0x9c
 4718 0eb0 83100000 		.4byte	0x1083
 4719 0eb4 10       		.uleb128 0x10
 4720 0eb5 C8040000 		.4byte	.LASF75
 4721 0eb9 01       		.byte	0x1
 4722 0eba 4006     		.2byte	0x640
 4723 0ebc 23020000 		.4byte	0x223
 4724 0ec0 850C0000 		.4byte	.LLST58
 4725 0ec4 10       		.uleb128 0x10
 4726 0ec5 75060000 		.4byte	.LASF72
 4727 0ec9 01       		.byte	0x1
 4728 0eca 4006     		.2byte	0x640
 4729 0ecc D2040000 		.4byte	0x4d2
 4730 0ed0 B10C0000 		.4byte	.LLST59
 4731 0ed4 10       		.uleb128 0x10
 4732 0ed5 B2010000 		.4byte	.LASF85
 4733 0ed9 01       		.byte	0x1
 4734 0eda 4006     		.2byte	0x640
 4735 0edc 05010000 		.4byte	0x105
 4736 0ee0 DD0C0000 		.4byte	.LLST60
 4737 0ee4 11       		.uleb128 0x11
 4738 0ee5 2F050000 		.4byte	.LASF87
 4739 0ee9 01       		.byte	0x1
 4740 0eea 4206     		.2byte	0x642
 4741 0eec EF000000 		.4byte	0xef
 4742 0ef0 140D0000 		.4byte	.LLST61
 4743 0ef4 1E       		.uleb128 0x1e
 4744 0ef5 24020000 		.4byte	.LASF89
 4745 0ef9 01       		.byte	0x1
 4746 0efa 4306     		.2byte	0x643
 4747 0efc 18020000 		.4byte	0x218
 4748 0f00 02       		.uleb128 0x2
 4749 0f01 91       		.byte	0x91
 4750 0f02 68       		.sleb128 -24
 4751 0f03 11       		.uleb128 0x11
 4752 0f04 BF010000 		.4byte	.LASF98
 4753 0f08 01       		.byte	0x1
 4754 0f09 4406     		.2byte	0x644
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 140


 4755 0f0b 4D020000 		.4byte	0x24d
 4756 0f0f 550D0000 		.4byte	.LLST62
 4757 0f13 11       		.uleb128 0x11
 4758 0f14 6E080000 		.4byte	.LASF67
 4759 0f18 01       		.byte	0x1
 4760 0f19 4506     		.2byte	0x645
 4761 0f1b 81040000 		.4byte	0x481
 4762 0f1f 680D0000 		.4byte	.LLST63
 4763 0f23 18       		.uleb128 0x18
 4764 0f24 54000000 		.4byte	.LBB11
 4765 0f28 4A000000 		.4byte	.LBE11-.LBB11
 4766 0f2c 9A0F0000 		.4byte	0xf9a
 4767 0f30 11       		.uleb128 0x11
 4768 0f31 59060000 		.4byte	.LASF51
 4769 0f35 01       		.byte	0x1
 4770 0f36 5E06     		.2byte	0x65e
 4771 0f38 B1060000 		.4byte	0x6b1
 4772 0f3c 940D0000 		.4byte	.LLST64
 4773 0f40 14       		.uleb128 0x14
 4774 0f41 64000000 		.4byte	.LVL247
 4775 0f45 8B040000 		.4byte	0x48b
 4776 0f49 5A0F0000 		.4byte	0xf5a
 4777 0f4d 15       		.uleb128 0x15
 4778 0f4e 01       		.uleb128 0x1
 4779 0f4f 50       		.byte	0x50
 4780 0f50 02       		.uleb128 0x2
 4781 0f51 74       		.byte	0x74
 4782 0f52 00       		.sleb128 0
 4783 0f53 15       		.uleb128 0x15
 4784 0f54 01       		.uleb128 0x1
 4785 0f55 51       		.byte	0x51
 4786 0f56 02       		.uleb128 0x2
 4787 0f57 75       		.byte	0x75
 4788 0f58 00       		.sleb128 0
 4789 0f59 00       		.byte	0
 4790 0f5a 14       		.uleb128 0x14
 4791 0f5b 74000000 		.4byte	.LVL248
 4792 0f5f F1150000 		.4byte	0x15f1
 4793 0f63 6E0F0000 		.4byte	0xf6e
 4794 0f67 15       		.uleb128 0x15
 4795 0f68 01       		.uleb128 0x1
 4796 0f69 50       		.byte	0x50
 4797 0f6a 02       		.uleb128 0x2
 4798 0f6b 74       		.byte	0x74
 4799 0f6c 24       		.sleb128 36
 4800 0f6d 00       		.byte	0
 4801 0f6e 12       		.uleb128 0x12
 4802 0f6f 7C000000 		.4byte	.LVL249
 4803 0f73 09160000 		.4byte	0x1609
 4804 0f77 12       		.uleb128 0x12
 4805 0f78 80000000 		.4byte	.LVL250
 4806 0f7c DD150000 		.4byte	0x15dd
 4807 0f80 12       		.uleb128 0x12
 4808 0f81 8E000000 		.4byte	.LVL253
 4809 0f85 DD150000 		.4byte	0x15dd
 4810 0f89 17       		.uleb128 0x17
 4811 0f8a 9C000000 		.4byte	.LVL254
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 141


 4812 0f8e 37160000 		.4byte	0x1637
 4813 0f92 15       		.uleb128 0x15
 4814 0f93 01       		.uleb128 0x1
 4815 0f94 50       		.byte	0x50
 4816 0f95 02       		.uleb128 0x2
 4817 0f96 91       		.byte	0x91
 4818 0f97 68       		.sleb128 -24
 4819 0f98 00       		.byte	0
 4820 0f99 00       		.byte	0
 4821 0f9a 12       		.uleb128 0x12
 4822 0f9b 32000000 		.4byte	.LVL242
 4823 0f9f 2B160000 		.4byte	0x162b
 4824 0fa3 12       		.uleb128 0x12
 4825 0fa4 54000000 		.4byte	.LVL244
 4826 0fa8 D2150000 		.4byte	0x15d2
 4827 0fac 12       		.uleb128 0x12
 4828 0fad A2000000 		.4byte	.LVL256
 4829 0fb1 DD150000 		.4byte	0x15dd
 4830 0fb5 12       		.uleb128 0x12
 4831 0fb6 A6000000 		.4byte	.LVL257
 4832 0fba 43160000 		.4byte	0x1643
 4833 0fbe 12       		.uleb128 0x12
 4834 0fbf AA000000 		.4byte	.LVL258
 4835 0fc3 D2150000 		.4byte	0x15d2
 4836 0fc7 12       		.uleb128 0x12
 4837 0fc8 CE000000 		.4byte	.LVL259
 4838 0fcc DD150000 		.4byte	0x15dd
 4839 0fd0 14       		.uleb128 0x14
 4840 0fd1 D6000000 		.4byte	.LVL261
 4841 0fd5 4F160000 		.4byte	0x164f
 4842 0fd9 EA0F0000 		.4byte	0xfea
 4843 0fdd 15       		.uleb128 0x15
 4844 0fde 01       		.uleb128 0x1
 4845 0fdf 50       		.byte	0x50
 4846 0fe0 02       		.uleb128 0x2
 4847 0fe1 91       		.byte	0x91
 4848 0fe2 68       		.sleb128 -24
 4849 0fe3 15       		.uleb128 0x15
 4850 0fe4 01       		.uleb128 0x1
 4851 0fe5 51       		.byte	0x51
 4852 0fe6 02       		.uleb128 0x2
 4853 0fe7 91       		.byte	0x91
 4854 0fe8 64       		.sleb128 -28
 4855 0fe9 00       		.byte	0
 4856 0fea 14       		.uleb128 0x14
 4857 0feb E0000000 		.4byte	.LVL262
 4858 0fef A8030000 		.4byte	0x3a8
 4859 0ff3 FE0F0000 		.4byte	0xffe
 4860 0ff7 15       		.uleb128 0x15
 4861 0ff8 01       		.uleb128 0x1
 4862 0ff9 50       		.byte	0x50
 4863 0ffa 02       		.uleb128 0x2
 4864 0ffb 74       		.byte	0x74
 4865 0ffc 00       		.sleb128 0
 4866 0ffd 00       		.byte	0
 4867 0ffe 14       		.uleb128 0x14
 4868 0fff EE000000 		.4byte	.LVL263
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 142


 4869 1003 5B160000 		.4byte	0x165b
 4870 1007 12100000 		.4byte	0x1012
 4871 100b 15       		.uleb128 0x15
 4872 100c 01       		.uleb128 0x1
 4873 100d 50       		.byte	0x50
 4874 100e 02       		.uleb128 0x2
 4875 100f 74       		.byte	0x74
 4876 1010 24       		.sleb128 36
 4877 1011 00       		.byte	0
 4878 1012 14       		.uleb128 0x14
 4879 1013 F4000000 		.4byte	.LVL264
 4880 1017 D7040000 		.4byte	0x4d7
 4881 101b 26100000 		.4byte	0x1026
 4882 101f 15       		.uleb128 0x15
 4883 1020 01       		.uleb128 0x1
 4884 1021 50       		.byte	0x50
 4885 1022 02       		.uleb128 0x2
 4886 1023 74       		.byte	0x74
 4887 1024 00       		.sleb128 0
 4888 1025 00       		.byte	0
 4889 1026 12       		.uleb128 0x12
 4890 1027 F8000000 		.4byte	.LVL265
 4891 102b 67160000 		.4byte	0x1667
 4892 102f 12       		.uleb128 0x12
 4893 1030 00010000 		.4byte	.LVL266
 4894 1034 09160000 		.4byte	0x1609
 4895 1038 14       		.uleb128 0x14
 4896 1039 08010000 		.4byte	.LVL267
 4897 103d D7040000 		.4byte	0x4d7
 4898 1041 4C100000 		.4byte	0x104c
 4899 1045 15       		.uleb128 0x15
 4900 1046 01       		.uleb128 0x1
 4901 1047 50       		.byte	0x50
 4902 1048 02       		.uleb128 0x2
 4903 1049 74       		.byte	0x74
 4904 104a 00       		.sleb128 0
 4905 104b 00       		.byte	0
 4906 104c 12       		.uleb128 0x12
 4907 104d 0C010000 		.4byte	.LVL268
 4908 1051 67160000 		.4byte	0x1667
 4909 1055 14       		.uleb128 0x14
 4910 1056 14010000 		.4byte	.LVL269
 4911 105a D7040000 		.4byte	0x4d7
 4912 105e 69100000 		.4byte	0x1069
 4913 1062 15       		.uleb128 0x15
 4914 1063 01       		.uleb128 0x1
 4915 1064 50       		.byte	0x50
 4916 1065 02       		.uleb128 0x2
 4917 1066 74       		.byte	0x74
 4918 1067 00       		.sleb128 0
 4919 1068 00       		.byte	0
 4920 1069 12       		.uleb128 0x12
 4921 106a 18010000 		.4byte	.LVL270
 4922 106e 67160000 		.4byte	0x1667
 4923 1072 17       		.uleb128 0x17
 4924 1073 1E010000 		.4byte	.LVL271
 4925 1077 A8030000 		.4byte	0x3a8
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 143


 4926 107b 15       		.uleb128 0x15
 4927 107c 01       		.uleb128 0x1
 4928 107d 50       		.byte	0x50
 4929 107e 02       		.uleb128 0x2
 4930 107f 74       		.byte	0x74
 4931 1080 00       		.sleb128 0
 4932 1081 00       		.byte	0
 4933 1082 00       		.byte	0
 4934 1083 1D       		.uleb128 0x1d
 4935 1084 AE030000 		.4byte	.LASF99
 4936 1088 01       		.byte	0x1
 4937 1089 D606     		.2byte	0x6d6
 4938 108b EF000000 		.4byte	0xef
 4939 108f 00000000 		.4byte	.LFB45
 4940 1093 96000000 		.4byte	.LFE45-.LFB45
 4941 1097 01       		.uleb128 0x1
 4942 1098 9C       		.byte	0x9c
 4943 1099 77110000 		.4byte	0x1177
 4944 109d 10       		.uleb128 0x10
 4945 109e C8040000 		.4byte	.LASF75
 4946 10a2 01       		.byte	0x1
 4947 10a3 D606     		.2byte	0x6d6
 4948 10a5 23020000 		.4byte	0x223
 4949 10a9 B20D0000 		.4byte	.LLST65
 4950 10ad 10       		.uleb128 0x10
 4951 10ae 75060000 		.4byte	.LASF72
 4952 10b2 01       		.byte	0x1
 4953 10b3 D606     		.2byte	0x6d6
 4954 10b5 D2040000 		.4byte	0x4d2
 4955 10b9 5B0E0000 		.4byte	.LLST66
 4956 10bd 10       		.uleb128 0x10
 4957 10be 8F000000 		.4byte	.LASF91
 4958 10c2 01       		.byte	0x1
 4959 10c3 D606     		.2byte	0x6d6
 4960 10c5 400A0000 		.4byte	0xa40
 4961 10c9 860E0000 		.4byte	.LLST67
 4962 10cd 11       		.uleb128 0x11
 4963 10ce B6020000 		.4byte	.LASF68
 4964 10d2 01       		.byte	0x1
 4965 10d3 D806     		.2byte	0x6d8
 4966 10d5 EF000000 		.4byte	0xef
 4967 10d9 B20E0000 		.4byte	.LLST68
 4968 10dd 11       		.uleb128 0x11
 4969 10de 2B060000 		.4byte	.LASF92
 4970 10e2 01       		.byte	0x1
 4971 10e3 D906     		.2byte	0x6d9
 4972 10e5 FA000000 		.4byte	0xfa
 4973 10e9 D00E0000 		.4byte	.LLST69
 4974 10ed 11       		.uleb128 0x11
 4975 10ee 6E080000 		.4byte	.LASF67
 4976 10f2 01       		.byte	0x1
 4977 10f3 DA06     		.2byte	0x6da
 4978 10f5 81040000 		.4byte	0x481
 4979 10f9 060F0000 		.4byte	.LLST70
 4980 10fd 18       		.uleb128 0x18
 4981 10fe 36000000 		.4byte	.LBB12
 4982 1102 54000000 		.4byte	.LBE12-.LBB12
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 144


 4983 1106 5C110000 		.4byte	0x115c
 4984 110a 11       		.uleb128 0x11
 4985 110b 59060000 		.4byte	.LASF51
 4986 110f 01       		.byte	0x1
 4987 1110 F106     		.2byte	0x6f1
 4988 1112 B1060000 		.4byte	0x6b1
 4989 1116 AF0F0000 		.4byte	.LLST71
 4990 111a 20       		.uleb128 0x20
 4991 111b 30000000 		.4byte	.Ldebug_ranges0+0x30
 4992 111f 11       		.uleb128 0x11
 4993 1120 87050000 		.4byte	.LASF54
 4994 1124 01       		.byte	0x1
 4995 1125 F606     		.2byte	0x6f6
 4996 1127 450A0000 		.4byte	0xa45
 4997 112b C20F0000 		.4byte	.LLST72
 4998 112f 14       		.uleb128 0x14
 4999 1130 4A000000 		.4byte	.LVL282
 5000 1134 8B040000 		.4byte	0x48b
 5001 1138 4A110000 		.4byte	0x114a
 5002 113c 15       		.uleb128 0x15
 5003 113d 01       		.uleb128 0x1
 5004 113e 50       		.byte	0x50
 5005 113f 02       		.uleb128 0x2
 5006 1140 74       		.byte	0x74
 5007 1141 00       		.sleb128 0
 5008 1142 15       		.uleb128 0x15
 5009 1143 01       		.uleb128 0x1
 5010 1144 51       		.byte	0x51
 5011 1145 03       		.uleb128 0x3
 5012 1146 7D       		.byte	0x7d
 5013 1147 00       		.sleb128 0
 5014 1148 06       		.byte	0x6
 5015 1149 00       		.byte	0
 5016 114a 17       		.uleb128 0x17
 5017 114b 60000000 		.4byte	.LVL283
 5018 114f F1150000 		.4byte	0x15f1
 5019 1153 15       		.uleb128 0x15
 5020 1154 01       		.uleb128 0x1
 5021 1155 50       		.byte	0x50
 5022 1156 02       		.uleb128 0x2
 5023 1157 74       		.byte	0x74
 5024 1158 10       		.sleb128 16
 5025 1159 00       		.byte	0
 5026 115a 00       		.byte	0
 5027 115b 00       		.byte	0
 5028 115c 12       		.uleb128 0x12
 5029 115d 34000000 		.4byte	.LVL277
 5030 1161 73160000 		.4byte	0x1673
 5031 1165 17       		.uleb128 0x17
 5032 1166 90000000 		.4byte	.LVL297
 5033 116a 7E160000 		.4byte	0x167e
 5034 116e 15       		.uleb128 0x15
 5035 116f 01       		.uleb128 0x1
 5036 1170 50       		.byte	0x50
 5037 1171 03       		.uleb128 0x3
 5038 1172 91       		.byte	0x91
 5039 1173 64       		.sleb128 -28
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 145


 5040 1174 06       		.byte	0x6
 5041 1175 00       		.byte	0
 5042 1176 00       		.byte	0
 5043 1177 1D       		.uleb128 0x1d
 5044 1178 E8000000 		.4byte	.LASF100
 5045 117c 01       		.byte	0x1
 5046 117d 3107     		.2byte	0x731
 5047 117f EF000000 		.4byte	0xef
 5048 1183 00000000 		.4byte	.LFB46
 5049 1187 5C000000 		.4byte	.LFE46-.LFB46
 5050 118b 01       		.uleb128 0x1
 5051 118c 9C       		.byte	0x9c
 5052 118d 25120000 		.4byte	0x1225
 5053 1191 10       		.uleb128 0x10
 5054 1192 C8040000 		.4byte	.LASF75
 5055 1196 01       		.byte	0x1
 5056 1197 3107     		.2byte	0x731
 5057 1199 23020000 		.4byte	0x223
 5058 119d ED0F0000 		.4byte	.LLST73
 5059 11a1 10       		.uleb128 0x10
 5060 11a2 75060000 		.4byte	.LASF72
 5061 11a6 01       		.byte	0x1
 5062 11a7 3107     		.2byte	0x731
 5063 11a9 D2040000 		.4byte	0x4d2
 5064 11ad 32100000 		.4byte	.LLST74
 5065 11b1 11       		.uleb128 0x11
 5066 11b2 B6020000 		.4byte	.LASF68
 5067 11b6 01       		.byte	0x1
 5068 11b7 3307     		.2byte	0x733
 5069 11b9 EF000000 		.4byte	0xef
 5070 11bd 5E100000 		.4byte	.LLST75
 5071 11c1 11       		.uleb128 0x11
 5072 11c2 2B060000 		.4byte	.LASF92
 5073 11c6 01       		.byte	0x1
 5074 11c7 3407     		.2byte	0x734
 5075 11c9 FA000000 		.4byte	0xfa
 5076 11cd 88100000 		.4byte	.LLST76
 5077 11d1 11       		.uleb128 0x11
 5078 11d2 BF010000 		.4byte	.LASF98
 5079 11d6 01       		.byte	0x1
 5080 11d7 3507     		.2byte	0x735
 5081 11d9 4D020000 		.4byte	0x24d
 5082 11dd BC100000 		.4byte	.LLST77
 5083 11e1 11       		.uleb128 0x11
 5084 11e2 6E080000 		.4byte	.LASF67
 5085 11e6 01       		.byte	0x1
 5086 11e7 3607     		.2byte	0x736
 5087 11e9 81040000 		.4byte	0x481
 5088 11ed CF100000 		.4byte	.LLST78
 5089 11f1 12       		.uleb128 0x12
 5090 11f2 38000000 		.4byte	.LVL304
 5091 11f6 73160000 		.4byte	0x1673
 5092 11fa 14       		.uleb128 0x14
 5093 11fb 4A000000 		.4byte	.LVL308
 5094 11ff 8B040000 		.4byte	0x48b
 5095 1203 14120000 		.4byte	0x1214
 5096 1207 15       		.uleb128 0x15
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 146


 5097 1208 01       		.uleb128 0x1
 5098 1209 50       		.byte	0x50
 5099 120a 02       		.uleb128 0x2
 5100 120b 74       		.byte	0x74
 5101 120c 00       		.sleb128 0
 5102 120d 15       		.uleb128 0x15
 5103 120e 01       		.uleb128 0x1
 5104 120f 51       		.byte	0x51
 5105 1210 02       		.uleb128 0x2
 5106 1211 75       		.byte	0x75
 5107 1212 00       		.sleb128 0
 5108 1213 00       		.byte	0
 5109 1214 17       		.uleb128 0x17
 5110 1215 58000000 		.4byte	.LVL313
 5111 1219 7E160000 		.4byte	0x167e
 5112 121d 15       		.uleb128 0x15
 5113 121e 01       		.uleb128 0x1
 5114 121f 50       		.byte	0x50
 5115 1220 02       		.uleb128 0x2
 5116 1221 76       		.byte	0x76
 5117 1222 00       		.sleb128 0
 5118 1223 00       		.byte	0
 5119 1224 00       		.byte	0
 5120 1225 1D       		.uleb128 0x1d
 5121 1226 44000000 		.4byte	.LASF101
 5122 122a 01       		.byte	0x1
 5123 122b 6707     		.2byte	0x767
 5124 122d FA000000 		.4byte	0xfa
 5125 1231 00000000 		.4byte	.LFB47
 5126 1235 18000000 		.4byte	.LFE47-.LFB47
 5127 1239 01       		.uleb128 0x1
 5128 123a 9C       		.byte	0x9c
 5129 123b 72120000 		.4byte	0x1272
 5130 123f 10       		.uleb128 0x10
 5131 1240 C8040000 		.4byte	.LASF75
 5132 1244 01       		.byte	0x1
 5133 1245 6707     		.2byte	0x767
 5134 1247 72120000 		.4byte	0x1272
 5135 124b 14110000 		.4byte	.LLST79
 5136 124f 11       		.uleb128 0x11
 5137 1250 9B030000 		.4byte	.LASF102
 5138 1254 01       		.byte	0x1
 5139 1255 6907     		.2byte	0x769
 5140 1257 FA000000 		.4byte	0xfa
 5141 125b 40110000 		.4byte	.LLST80
 5142 125f 12       		.uleb128 0x12
 5143 1260 0E000000 		.4byte	.LVL318
 5144 1264 D2150000 		.4byte	0x15d2
 5145 1268 12       		.uleb128 0x12
 5146 1269 14000000 		.4byte	.LVL320
 5147 126d DD150000 		.4byte	0x15dd
 5148 1271 00       		.byte	0
 5149 1272 07       		.uleb128 0x7
 5150 1273 23020000 		.4byte	0x223
 5151 1277 1D       		.uleb128 0x1d
 5152 1278 17090000 		.4byte	.LASF103
 5153 127c 01       		.byte	0x1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 147


 5154 127d 7707     		.2byte	0x777
 5155 127f FA000000 		.4byte	0xfa
 5156 1283 00000000 		.4byte	.LFB48
 5157 1287 1C000000 		.4byte	.LFE48-.LFB48
 5158 128b 01       		.uleb128 0x1
 5159 128c 9C       		.byte	0x9c
 5160 128d D4120000 		.4byte	0x12d4
 5161 1291 10       		.uleb128 0x10
 5162 1292 C8040000 		.4byte	.LASF75
 5163 1296 01       		.byte	0x1
 5164 1297 7707     		.2byte	0x777
 5165 1299 72120000 		.4byte	0x1272
 5166 129d 5E110000 		.4byte	.LLST81
 5167 12a1 11       		.uleb128 0x11
 5168 12a2 9B030000 		.4byte	.LASF102
 5169 12a6 01       		.byte	0x1
 5170 12a7 7907     		.2byte	0x779
 5171 12a9 FA000000 		.4byte	0xfa
 5172 12ad 8A110000 		.4byte	.LLST82
 5173 12b1 11       		.uleb128 0x11
 5174 12b2 6E080000 		.4byte	.LASF67
 5175 12b6 01       		.byte	0x1
 5176 12b7 7A07     		.2byte	0x77a
 5177 12b9 7B040000 		.4byte	0x47b
 5178 12bd A8110000 		.4byte	.LLST83
 5179 12c1 12       		.uleb128 0x12
 5180 12c2 0E000000 		.4byte	.LVL324
 5181 12c6 D2150000 		.4byte	0x15d2
 5182 12ca 12       		.uleb128 0x12
 5183 12cb 18000000 		.4byte	.LVL327
 5184 12cf DD150000 		.4byte	0x15dd
 5185 12d3 00       		.byte	0
 5186 12d4 1D       		.uleb128 0x1d
 5187 12d5 DA040000 		.4byte	.LASF104
 5188 12d9 01       		.byte	0x1
 5189 12da 8907     		.2byte	0x789
 5190 12dc FA000000 		.4byte	0xfa
 5191 12e0 00000000 		.4byte	.LFB49
 5192 12e4 0C000000 		.4byte	.LFE49-.LFB49
 5193 12e8 01       		.uleb128 0x1
 5194 12e9 9C       		.byte	0x9c
 5195 12ea 0D130000 		.4byte	0x130d
 5196 12ee 10       		.uleb128 0x10
 5197 12ef C8040000 		.4byte	.LASF75
 5198 12f3 01       		.byte	0x1
 5199 12f4 8907     		.2byte	0x789
 5200 12f6 72120000 		.4byte	0x1272
 5201 12fa D4110000 		.4byte	.LLST84
 5202 12fe 1E       		.uleb128 0x1e
 5203 12ff 9B030000 		.4byte	.LASF102
 5204 1303 01       		.byte	0x1
 5205 1304 8B07     		.2byte	0x78b
 5206 1306 FA000000 		.4byte	0xfa
 5207 130a 01       		.uleb128 0x1
 5208 130b 50       		.byte	0x50
 5209 130c 00       		.byte	0
 5210 130d 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 148


 5211 130e DD070000 		.4byte	.LASF105
 5212 1312 01       		.byte	0x1
 5213 1313 C107     		.2byte	0x7c1
 5214 1315 FA000000 		.4byte	0xfa
 5215 1319 00000000 		.4byte	.LFB51
 5216 131d 04000000 		.4byte	.LFE51-.LFB51
 5217 1321 01       		.uleb128 0x1
 5218 1322 9C       		.byte	0x9c
 5219 1323 38130000 		.4byte	0x1338
 5220 1327 10       		.uleb128 0x10
 5221 1328 C8040000 		.4byte	.LASF75
 5222 132c 01       		.byte	0x1
 5223 132d C107     		.2byte	0x7c1
 5224 132f 23020000 		.4byte	0x223
 5225 1333 F5110000 		.4byte	.LLST85
 5226 1337 00       		.byte	0
 5227 1338 21       		.uleb128 0x21
 5228 1339 D3000000 		.4byte	.LASF109
 5229 133d 01       		.byte	0x1
 5230 133e CB07     		.2byte	0x7cb
 5231 1340 00000000 		.4byte	.LFB52
 5232 1344 04000000 		.4byte	.LFE52-.LFB52
 5233 1348 01       		.uleb128 0x1
 5234 1349 9C       		.byte	0x9c
 5235 134a 6B130000 		.4byte	0x136b
 5236 134e 1C       		.uleb128 0x1c
 5237 134f C8040000 		.4byte	.LASF75
 5238 1353 01       		.byte	0x1
 5239 1354 CB07     		.2byte	0x7cb
 5240 1356 23020000 		.4byte	0x223
 5241 135a 01       		.uleb128 0x1
 5242 135b 50       		.byte	0x50
 5243 135c 1C       		.uleb128 0x1c
 5244 135d EE010000 		.4byte	.LASF56
 5245 1361 01       		.byte	0x1
 5246 1362 CB07     		.2byte	0x7cb
 5247 1364 FA000000 		.4byte	0xfa
 5248 1368 01       		.uleb128 0x1
 5249 1369 51       		.byte	0x51
 5250 136a 00       		.byte	0
 5251 136b 1D       		.uleb128 0x1d
 5252 136c 30000000 		.4byte	.LASF106
 5253 1370 01       		.byte	0x1
 5254 1371 D507     		.2byte	0x7d5
 5255 1373 CB000000 		.4byte	0xcb
 5256 1377 00000000 		.4byte	.LFB53
 5257 137b 06000000 		.4byte	.LFE53-.LFB53
 5258 137f 01       		.uleb128 0x1
 5259 1380 9C       		.byte	0x9c
 5260 1381 96130000 		.4byte	0x1396
 5261 1385 10       		.uleb128 0x10
 5262 1386 C8040000 		.4byte	.LASF75
 5263 138a 01       		.byte	0x1
 5264 138b D507     		.2byte	0x7d5
 5265 138d 23020000 		.4byte	0x223
 5266 1391 16120000 		.4byte	.LLST86
 5267 1395 00       		.byte	0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 149


 5268 1396 1D       		.uleb128 0x1d
 5269 1397 A9000000 		.4byte	.LASF107
 5270 139b 01       		.byte	0x1
 5271 139c E608     		.2byte	0x8e6
 5272 139e EF000000 		.4byte	0xef
 5273 13a2 00000000 		.4byte	.LFB58
 5274 13a6 16000000 		.4byte	.LFE58-.LFB58
 5275 13aa 01       		.uleb128 0x1
 5276 13ab 9C       		.byte	0x9c
 5277 13ac CF130000 		.4byte	0x13cf
 5278 13b0 10       		.uleb128 0x10
 5279 13b1 C8040000 		.4byte	.LASF75
 5280 13b5 01       		.byte	0x1
 5281 13b6 E608     		.2byte	0x8e6
 5282 13b8 72120000 		.4byte	0x1272
 5283 13bc 37120000 		.4byte	.LLST87
 5284 13c0 1E       		.uleb128 0x1e
 5285 13c1 B6020000 		.4byte	.LASF68
 5286 13c5 01       		.byte	0x1
 5287 13c6 E808     		.2byte	0x8e8
 5288 13c8 EF000000 		.4byte	0xef
 5289 13cc 01       		.uleb128 0x1
 5290 13cd 50       		.byte	0x50
 5291 13ce 00       		.byte	0
 5292 13cf 1D       		.uleb128 0x1d
 5293 13d0 B0050000 		.4byte	.LASF108
 5294 13d4 01       		.byte	0x1
 5295 13d5 0D09     		.2byte	0x90d
 5296 13d7 EF000000 		.4byte	0xef
 5297 13db 00000000 		.4byte	.LFB60
 5298 13df 18000000 		.4byte	.LFE60-.LFB60
 5299 13e3 01       		.uleb128 0x1
 5300 13e4 9C       		.byte	0x9c
 5301 13e5 08140000 		.4byte	0x1408
 5302 13e9 10       		.uleb128 0x10
 5303 13ea C8040000 		.4byte	.LASF75
 5304 13ee 01       		.byte	0x1
 5305 13ef 0D09     		.2byte	0x90d
 5306 13f1 72120000 		.4byte	0x1272
 5307 13f5 71120000 		.4byte	.LLST88
 5308 13f9 1E       		.uleb128 0x1e
 5309 13fa B6020000 		.4byte	.LASF68
 5310 13fe 01       		.byte	0x1
 5311 13ff 0F09     		.2byte	0x90f
 5312 1401 EF000000 		.4byte	0xef
 5313 1405 01       		.uleb128 0x1
 5314 1406 50       		.byte	0x50
 5315 1407 00       		.byte	0
 5316 1408 21       		.uleb128 0x21
 5317 1409 2A030000 		.4byte	.LASF110
 5318 140d 01       		.byte	0x1
 5319 140e 340A     		.2byte	0xa34
 5320 1410 00000000 		.4byte	.LFB61
 5321 1414 28000000 		.4byte	.LFE61-.LFB61
 5322 1418 01       		.uleb128 0x1
 5323 1419 9C       		.byte	0x9c
 5324 141a 4A140000 		.4byte	0x144a
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 150


 5325 141e 1C       		.uleb128 0x1c
 5326 141f C8040000 		.4byte	.LASF75
 5327 1423 01       		.byte	0x1
 5328 1424 340A     		.2byte	0xa34
 5329 1426 23020000 		.4byte	0x223
 5330 142a 01       		.uleb128 0x1
 5331 142b 50       		.byte	0x50
 5332 142c 1C       		.uleb128 0x1c
 5333 142d 5F070000 		.4byte	.LASF61
 5334 1431 01       		.byte	0x1
 5335 1432 340A     		.2byte	0xa34
 5336 1434 AE000000 		.4byte	0xae
 5337 1438 01       		.uleb128 0x1
 5338 1439 51       		.byte	0x51
 5339 143a 22       		.uleb128 0x22
 5340 143b 757800   		.ascii	"ux\000"
 5341 143e 01       		.byte	0x1
 5342 143f 360A     		.2byte	0xa36
 5343 1441 FA000000 		.4byte	0xfa
 5344 1445 AB120000 		.4byte	.LLST89
 5345 1449 00       		.byte	0
 5346 144a 1D       		.uleb128 0x1d
 5347 144b 2E090000 		.4byte	.LASF111
 5348 144f 01       		.byte	0x1
 5349 1450 510A     		.2byte	0xa51
 5350 1452 AE000000 		.4byte	0xae
 5351 1456 00000000 		.4byte	.LFB62
 5352 145a 24000000 		.4byte	.LFE62-.LFB62
 5353 145e 01       		.uleb128 0x1
 5354 145f 9C       		.byte	0x9c
 5355 1460 94140000 		.4byte	0x1494
 5356 1464 10       		.uleb128 0x10
 5357 1465 C8040000 		.4byte	.LASF75
 5358 1469 01       		.byte	0x1
 5359 146a 510A     		.2byte	0xa51
 5360 146c 23020000 		.4byte	0x223
 5361 1470 D5120000 		.4byte	.LLST90
 5362 1474 22       		.uleb128 0x22
 5363 1475 757800   		.ascii	"ux\000"
 5364 1478 01       		.byte	0x1
 5365 1479 530A     		.2byte	0xa53
 5366 147b FA000000 		.4byte	0xfa
 5367 147f 0F130000 		.4byte	.LLST91
 5368 1483 11       		.uleb128 0x11
 5369 1484 D9030000 		.4byte	.LASF112
 5370 1488 01       		.byte	0x1
 5371 1489 540A     		.2byte	0xa54
 5372 148b AE000000 		.4byte	0xae
 5373 148f 39130000 		.4byte	.LLST92
 5374 1493 00       		.byte	0
 5375 1494 21       		.uleb128 0x21
 5376 1495 C7070000 		.4byte	.LASF113
 5377 1499 01       		.byte	0x1
 5378 149a 6D0A     		.2byte	0xa6d
 5379 149c 00000000 		.4byte	.LFB63
 5380 14a0 28000000 		.4byte	.LFE63-.LFB63
 5381 14a4 01       		.uleb128 0x1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 151


 5382 14a5 9C       		.byte	0x9c
 5383 14a6 C8140000 		.4byte	0x14c8
 5384 14aa 1C       		.uleb128 0x1c
 5385 14ab C8040000 		.4byte	.LASF75
 5386 14af 01       		.byte	0x1
 5387 14b0 6D0A     		.2byte	0xa6d
 5388 14b2 23020000 		.4byte	0x223
 5389 14b6 01       		.uleb128 0x1
 5390 14b7 50       		.byte	0x50
 5391 14b8 22       		.uleb128 0x22
 5392 14b9 757800   		.ascii	"ux\000"
 5393 14bc 01       		.byte	0x1
 5394 14bd 6F0A     		.2byte	0xa6f
 5395 14bf FA000000 		.4byte	0xfa
 5396 14c3 6F130000 		.4byte	.LLST93
 5397 14c7 00       		.byte	0
 5398 14c8 21       		.uleb128 0x21
 5399 14c9 7B020000 		.4byte	.LASF114
 5400 14cd 01       		.byte	0x1
 5401 14ce 9507     		.2byte	0x795
 5402 14d0 00000000 		.4byte	.LFB50
 5403 14d4 16000000 		.4byte	.LFE50-.LFB50
 5404 14d8 01       		.uleb128 0x1
 5405 14d9 9C       		.byte	0x9c
 5406 14da 18150000 		.4byte	0x1518
 5407 14de 10       		.uleb128 0x10
 5408 14df C8040000 		.4byte	.LASF75
 5409 14e3 01       		.byte	0x1
 5410 14e4 9507     		.2byte	0x795
 5411 14e6 23020000 		.4byte	0x223
 5412 14ea 99130000 		.4byte	.LLST94
 5413 14ee 11       		.uleb128 0x11
 5414 14ef 6E080000 		.4byte	.LASF67
 5415 14f3 01       		.byte	0x1
 5416 14f4 9707     		.2byte	0x797
 5417 14f6 81040000 		.4byte	0x481
 5418 14fa C5130000 		.4byte	.LLST95
 5419 14fe 12       		.uleb128 0x12
 5420 14ff 0E000000 		.4byte	.LVL366
 5421 1503 94140000 		.4byte	0x1494
 5422 1507 17       		.uleb128 0x17
 5423 1508 14000000 		.4byte	.LVL367
 5424 150c 89160000 		.4byte	0x1689
 5425 1510 15       		.uleb128 0x15
 5426 1511 01       		.uleb128 0x1
 5427 1512 50       		.byte	0x50
 5428 1513 02       		.uleb128 0x2
 5429 1514 74       		.byte	0x74
 5430 1515 00       		.sleb128 0
 5431 1516 00       		.byte	0
 5432 1517 00       		.byte	0
 5433 1518 21       		.uleb128 0x21
 5434 1519 D3080000 		.4byte	.LASF115
 5435 151d 01       		.byte	0x1
 5436 151e 8D0A     		.2byte	0xa8d
 5437 1520 00000000 		.4byte	.LFB64
 5438 1524 4A000000 		.4byte	.LFE64-.LFB64
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 152


 5439 1528 01       		.uleb128 0x1
 5440 1529 9C       		.byte	0x9c
 5441 152a B1150000 		.4byte	0x15b1
 5442 152e 10       		.uleb128 0x10
 5443 152f C8040000 		.4byte	.LASF75
 5444 1533 01       		.byte	0x1
 5445 1534 8D0A     		.2byte	0xa8d
 5446 1536 23020000 		.4byte	0x223
 5447 153a F1130000 		.4byte	.LLST96
 5448 153e 10       		.uleb128 0x10
 5449 153f B2010000 		.4byte	.LASF85
 5450 1543 01       		.byte	0x1
 5451 1544 8D0A     		.2byte	0xa8d
 5452 1546 05010000 		.4byte	0x105
 5453 154a 1D140000 		.4byte	.LLST97
 5454 154e 10       		.uleb128 0x10
 5455 154f B5070000 		.4byte	.LASF116
 5456 1553 01       		.byte	0x1
 5457 1554 8D0A     		.2byte	0xa8d
 5458 1556 86040000 		.4byte	0x486
 5459 155a 49140000 		.4byte	.LLST98
 5460 155e 11       		.uleb128 0x11
 5461 155f 6E080000 		.4byte	.LASF67
 5462 1563 01       		.byte	0x1
 5463 1564 8F0A     		.2byte	0xa8f
 5464 1566 81040000 		.4byte	0x481
 5465 156a 75140000 		.4byte	.LLST99
 5466 156e 12       		.uleb128 0x12
 5467 156f 0C000000 		.4byte	.LVL371
 5468 1573 D2150000 		.4byte	0x15d2
 5469 1577 12       		.uleb128 0x12
 5470 1578 30000000 		.4byte	.LVL372
 5471 157c DD150000 		.4byte	0x15dd
 5472 1580 14       		.uleb128 0x14
 5473 1581 42000000 		.4byte	.LVL373
 5474 1585 94160000 		.4byte	0x1694
 5475 1589 A0150000 		.4byte	0x15a0
 5476 158d 15       		.uleb128 0x15
 5477 158e 01       		.uleb128 0x1
 5478 158f 50       		.byte	0x50
 5479 1590 02       		.uleb128 0x2
 5480 1591 74       		.byte	0x74
 5481 1592 24       		.sleb128 36
 5482 1593 15       		.uleb128 0x15
 5483 1594 01       		.uleb128 0x1
 5484 1595 51       		.byte	0x51
 5485 1596 02       		.uleb128 0x2
 5486 1597 75       		.byte	0x75
 5487 1598 00       		.sleb128 0
 5488 1599 15       		.uleb128 0x15
 5489 159a 01       		.uleb128 0x1
 5490 159b 52       		.byte	0x52
 5491 159c 02       		.uleb128 0x2
 5492 159d 76       		.byte	0x76
 5493 159e 00       		.sleb128 0
 5494 159f 00       		.byte	0
 5495 15a0 17       		.uleb128 0x17
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 153


 5496 15a1 48000000 		.4byte	.LVL374
 5497 15a5 D7040000 		.4byte	0x4d7
 5498 15a9 15       		.uleb128 0x15
 5499 15aa 01       		.uleb128 0x1
 5500 15ab 50       		.byte	0x50
 5501 15ac 02       		.uleb128 0x2
 5502 15ad 74       		.byte	0x74
 5503 15ae 00       		.sleb128 0
 5504 15af 00       		.byte	0
 5505 15b0 00       		.byte	0
 5506 15b1 23       		.uleb128 0x23
 5507 15b2 45030000 		.4byte	0x345
 5508 15b6 C1150000 		.4byte	0x15c1
 5509 15ba 24       		.uleb128 0x24
 5510 15bb 9E000000 		.4byte	0x9e
 5511 15bf 09       		.byte	0x9
 5512 15c0 00       		.byte	0
 5513 15c1 25       		.uleb128 0x25
 5514 15c2 7A070000 		.4byte	.LASF137
 5515 15c6 01       		.byte	0x1
 5516 15c7 9A       		.byte	0x9a
 5517 15c8 B1150000 		.4byte	0x15b1
 5518 15cc 05       		.uleb128 0x5
 5519 15cd 03       		.byte	0x3
 5520 15ce 00000000 		.4byte	xQueueRegistry
 5521 15d2 26       		.uleb128 0x26
 5522 15d3 F3070000 		.4byte	.LASF117
 5523 15d7 F3070000 		.4byte	.LASF117
 5524 15db 05       		.byte	0x5
 5525 15dc 5A       		.byte	0x5a
 5526 15dd 26       		.uleb128 0x26
 5527 15de 34070000 		.4byte	.LASF118
 5528 15e2 34070000 		.4byte	.LASF118
 5529 15e6 05       		.byte	0x5
 5530 15e7 5B       		.byte	0x5b
 5531 15e8 27       		.uleb128 0x27
 5532 15e9 E7010000 		.4byte	.LASF138
 5533 15ed E7010000 		.4byte	.LASF138
 5534 15f1 28       		.uleb128 0x28
 5535 15f2 F4050000 		.4byte	.LASF119
 5536 15f6 F4050000 		.4byte	.LASF119
 5537 15fa 07       		.byte	0x7
 5538 15fb A508     		.2byte	0x8a5
 5539 15fd 28       		.uleb128 0x28
 5540 15fe E3050000 		.4byte	.LASF120
 5541 1602 E3050000 		.4byte	.LASF120
 5542 1606 07       		.byte	0x7
 5543 1607 CC08     		.2byte	0x8cc
 5544 1609 26       		.uleb128 0x26
 5545 160a 10080000 		.4byte	.LASF121
 5546 160e 10080000 		.4byte	.LASF121
 5547 1612 05       		.byte	0x5
 5548 1613 50       		.byte	0x50
 5549 1614 28       		.uleb128 0x28
 5550 1615 C3080000 		.4byte	.LASF122
 5551 1619 C3080000 		.4byte	.LASF122
 5552 161d 06       		.byte	0x6
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 154


 5553 161e 5801     		.2byte	0x158
 5554 1620 26       		.uleb128 0x26
 5555 1621 6E020000 		.4byte	.LASF123
 5556 1625 6E020000 		.4byte	.LASF123
 5557 1629 09       		.byte	0x9
 5558 162a 81       		.byte	0x81
 5559 162b 28       		.uleb128 0x28
 5560 162c 14060000 		.4byte	.LASF124
 5561 1630 14060000 		.4byte	.LASF124
 5562 1634 07       		.byte	0x7
 5563 1635 D208     		.2byte	0x8d2
 5564 1637 28       		.uleb128 0x28
 5565 1638 2B080000 		.4byte	.LASF125
 5566 163c 2B080000 		.4byte	.LASF125
 5567 1640 07       		.byte	0x7
 5568 1641 1909     		.2byte	0x919
 5569 1643 28       		.uleb128 0x28
 5570 1644 1B080000 		.4byte	.LASF126
 5571 1648 1B080000 		.4byte	.LASF126
 5572 164c 07       		.byte	0x7
 5573 164d F904     		.2byte	0x4f9
 5574 164f 28       		.uleb128 0x28
 5575 1650 90070000 		.4byte	.LASF127
 5576 1654 90070000 		.4byte	.LASF127
 5577 1658 07       		.byte	0x7
 5578 1659 C608     		.2byte	0x8c6
 5579 165b 28       		.uleb128 0x28
 5580 165c 88020000 		.4byte	.LASF128
 5581 1660 88020000 		.4byte	.LASF128
 5582 1664 07       		.byte	0x7
 5583 1665 7D08     		.2byte	0x87d
 5584 1667 28       		.uleb128 0x28
 5585 1668 A1050000 		.4byte	.LASF129
 5586 166c A1050000 		.4byte	.LASF129
 5587 1670 07       		.byte	0x7
 5588 1671 2F05     		.2byte	0x52f
 5589 1673 26       		.uleb128 0x26
 5590 1674 FD080000 		.4byte	.LASF130
 5591 1678 FD080000 		.4byte	.LASF130
 5592 167c 05       		.byte	0x5
 5593 167d 5C       		.byte	0x5c
 5594 167e 26       		.uleb128 0x26
 5595 167f 50030000 		.4byte	.LASF131
 5596 1683 50030000 		.4byte	.LASF131
 5597 1687 05       		.byte	0x5
 5598 1688 5D       		.byte	0x5d
 5599 1689 26       		.uleb128 0x26
 5600 168a A4030000 		.4byte	.LASF132
 5601 168e A4030000 		.4byte	.LASF132
 5602 1692 09       		.byte	0x9
 5603 1693 82       		.byte	0x82
 5604 1694 28       		.uleb128 0x28
 5605 1695 A3080000 		.4byte	.LASF133
 5606 1699 A3080000 		.4byte	.LASF133
 5607 169d 07       		.byte	0x7
 5608 169e 8B08     		.2byte	0x88b
 5609 16a0 00       		.byte	0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 155


 5610              		.section	.debug_abbrev,"",%progbits
 5611              	.Ldebug_abbrev0:
 5612 0000 01       		.uleb128 0x1
 5613 0001 11       		.uleb128 0x11
 5614 0002 01       		.byte	0x1
 5615 0003 25       		.uleb128 0x25
 5616 0004 0E       		.uleb128 0xe
 5617 0005 13       		.uleb128 0x13
 5618 0006 0B       		.uleb128 0xb
 5619 0007 03       		.uleb128 0x3
 5620 0008 0E       		.uleb128 0xe
 5621 0009 1B       		.uleb128 0x1b
 5622 000a 0E       		.uleb128 0xe
 5623 000b 55       		.uleb128 0x55
 5624 000c 17       		.uleb128 0x17
 5625 000d 11       		.uleb128 0x11
 5626 000e 01       		.uleb128 0x1
 5627 000f 10       		.uleb128 0x10
 5628 0010 17       		.uleb128 0x17
 5629 0011 00       		.byte	0
 5630 0012 00       		.byte	0
 5631 0013 02       		.uleb128 0x2
 5632 0014 16       		.uleb128 0x16
 5633 0015 00       		.byte	0
 5634 0016 03       		.uleb128 0x3
 5635 0017 0E       		.uleb128 0xe
 5636 0018 3A       		.uleb128 0x3a
 5637 0019 0B       		.uleb128 0xb
 5638 001a 3B       		.uleb128 0x3b
 5639 001b 0B       		.uleb128 0xb
 5640 001c 49       		.uleb128 0x49
 5641 001d 13       		.uleb128 0x13
 5642 001e 00       		.byte	0
 5643 001f 00       		.byte	0
 5644 0020 03       		.uleb128 0x3
 5645 0021 24       		.uleb128 0x24
 5646 0022 00       		.byte	0
 5647 0023 0B       		.uleb128 0xb
 5648 0024 0B       		.uleb128 0xb
 5649 0025 3E       		.uleb128 0x3e
 5650 0026 0B       		.uleb128 0xb
 5651 0027 03       		.uleb128 0x3
 5652 0028 0E       		.uleb128 0xe
 5653 0029 00       		.byte	0
 5654 002a 00       		.byte	0
 5655 002b 04       		.uleb128 0x4
 5656 002c 24       		.uleb128 0x24
 5657 002d 00       		.byte	0
 5658 002e 0B       		.uleb128 0xb
 5659 002f 0B       		.uleb128 0xb
 5660 0030 3E       		.uleb128 0x3e
 5661 0031 0B       		.uleb128 0xb
 5662 0032 03       		.uleb128 0x3
 5663 0033 08       		.uleb128 0x8
 5664 0034 00       		.byte	0
 5665 0035 00       		.byte	0
 5666 0036 05       		.uleb128 0x5
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 156


 5667 0037 0F       		.uleb128 0xf
 5668 0038 00       		.byte	0
 5669 0039 0B       		.uleb128 0xb
 5670 003a 0B       		.uleb128 0xb
 5671 003b 00       		.byte	0
 5672 003c 00       		.byte	0
 5673 003d 06       		.uleb128 0x6
 5674 003e 0F       		.uleb128 0xf
 5675 003f 00       		.byte	0
 5676 0040 0B       		.uleb128 0xb
 5677 0041 0B       		.uleb128 0xb
 5678 0042 49       		.uleb128 0x49
 5679 0043 13       		.uleb128 0x13
 5680 0044 00       		.byte	0
 5681 0045 00       		.byte	0
 5682 0046 07       		.uleb128 0x7
 5683 0047 26       		.uleb128 0x26
 5684 0048 00       		.byte	0
 5685 0049 49       		.uleb128 0x49
 5686 004a 13       		.uleb128 0x13
 5687 004b 00       		.byte	0
 5688 004c 00       		.byte	0
 5689 004d 08       		.uleb128 0x8
 5690 004e 26       		.uleb128 0x26
 5691 004f 00       		.byte	0
 5692 0050 00       		.byte	0
 5693 0051 00       		.byte	0
 5694 0052 09       		.uleb128 0x9
 5695 0053 13       		.uleb128 0x13
 5696 0054 01       		.byte	0x1
 5697 0055 03       		.uleb128 0x3
 5698 0056 0E       		.uleb128 0xe
 5699 0057 0B       		.uleb128 0xb
 5700 0058 0B       		.uleb128 0xb
 5701 0059 3A       		.uleb128 0x3a
 5702 005a 0B       		.uleb128 0xb
 5703 005b 3B       		.uleb128 0x3b
 5704 005c 0B       		.uleb128 0xb
 5705 005d 01       		.uleb128 0x1
 5706 005e 13       		.uleb128 0x13
 5707 005f 00       		.byte	0
 5708 0060 00       		.byte	0
 5709 0061 0A       		.uleb128 0xa
 5710 0062 0D       		.uleb128 0xd
 5711 0063 00       		.byte	0
 5712 0064 03       		.uleb128 0x3
 5713 0065 0E       		.uleb128 0xe
 5714 0066 3A       		.uleb128 0x3a
 5715 0067 0B       		.uleb128 0xb
 5716 0068 3B       		.uleb128 0x3b
 5717 0069 0B       		.uleb128 0xb
 5718 006a 49       		.uleb128 0x49
 5719 006b 13       		.uleb128 0x13
 5720 006c 38       		.uleb128 0x38
 5721 006d 0B       		.uleb128 0xb
 5722 006e 00       		.byte	0
 5723 006f 00       		.byte	0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 157


 5724 0070 0B       		.uleb128 0xb
 5725 0071 35       		.uleb128 0x35
 5726 0072 00       		.byte	0
 5727 0073 49       		.uleb128 0x49
 5728 0074 13       		.uleb128 0x13
 5729 0075 00       		.byte	0
 5730 0076 00       		.byte	0
 5731 0077 0C       		.uleb128 0xc
 5732 0078 17       		.uleb128 0x17
 5733 0079 01       		.byte	0x1
 5734 007a 0B       		.uleb128 0xb
 5735 007b 0B       		.uleb128 0xb
 5736 007c 3A       		.uleb128 0x3a
 5737 007d 0B       		.uleb128 0xb
 5738 007e 3B       		.uleb128 0x3b
 5739 007f 0B       		.uleb128 0xb
 5740 0080 01       		.uleb128 0x1
 5741 0081 13       		.uleb128 0x13
 5742 0082 00       		.byte	0
 5743 0083 00       		.byte	0
 5744 0084 0D       		.uleb128 0xd
 5745 0085 0D       		.uleb128 0xd
 5746 0086 00       		.byte	0
 5747 0087 03       		.uleb128 0x3
 5748 0088 0E       		.uleb128 0xe
 5749 0089 3A       		.uleb128 0x3a
 5750 008a 0B       		.uleb128 0xb
 5751 008b 3B       		.uleb128 0x3b
 5752 008c 0B       		.uleb128 0xb
 5753 008d 49       		.uleb128 0x49
 5754 008e 13       		.uleb128 0x13
 5755 008f 00       		.byte	0
 5756 0090 00       		.byte	0
 5757 0091 0E       		.uleb128 0xe
 5758 0092 0D       		.uleb128 0xd
 5759 0093 00       		.byte	0
 5760 0094 03       		.uleb128 0x3
 5761 0095 08       		.uleb128 0x8
 5762 0096 3A       		.uleb128 0x3a
 5763 0097 0B       		.uleb128 0xb
 5764 0098 3B       		.uleb128 0x3b
 5765 0099 0B       		.uleb128 0xb
 5766 009a 49       		.uleb128 0x49
 5767 009b 13       		.uleb128 0x13
 5768 009c 38       		.uleb128 0x38
 5769 009d 0B       		.uleb128 0xb
 5770 009e 00       		.byte	0
 5771 009f 00       		.byte	0
 5772 00a0 0F       		.uleb128 0xf
 5773 00a1 2E       		.uleb128 0x2e
 5774 00a2 01       		.byte	0x1
 5775 00a3 03       		.uleb128 0x3
 5776 00a4 0E       		.uleb128 0xe
 5777 00a5 3A       		.uleb128 0x3a
 5778 00a6 0B       		.uleb128 0xb
 5779 00a7 3B       		.uleb128 0x3b
 5780 00a8 05       		.uleb128 0x5
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 158


 5781 00a9 27       		.uleb128 0x27
 5782 00aa 19       		.uleb128 0x19
 5783 00ab 49       		.uleb128 0x49
 5784 00ac 13       		.uleb128 0x13
 5785 00ad 11       		.uleb128 0x11
 5786 00ae 01       		.uleb128 0x1
 5787 00af 12       		.uleb128 0x12
 5788 00b0 06       		.uleb128 0x6
 5789 00b1 40       		.uleb128 0x40
 5790 00b2 18       		.uleb128 0x18
 5791 00b3 9742     		.uleb128 0x2117
 5792 00b5 19       		.uleb128 0x19
 5793 00b6 01       		.uleb128 0x1
 5794 00b7 13       		.uleb128 0x13
 5795 00b8 00       		.byte	0
 5796 00b9 00       		.byte	0
 5797 00ba 10       		.uleb128 0x10
 5798 00bb 05       		.uleb128 0x5
 5799 00bc 00       		.byte	0
 5800 00bd 03       		.uleb128 0x3
 5801 00be 0E       		.uleb128 0xe
 5802 00bf 3A       		.uleb128 0x3a
 5803 00c0 0B       		.uleb128 0xb
 5804 00c1 3B       		.uleb128 0x3b
 5805 00c2 05       		.uleb128 0x5
 5806 00c3 49       		.uleb128 0x49
 5807 00c4 13       		.uleb128 0x13
 5808 00c5 02       		.uleb128 0x2
 5809 00c6 17       		.uleb128 0x17
 5810 00c7 00       		.byte	0
 5811 00c8 00       		.byte	0
 5812 00c9 11       		.uleb128 0x11
 5813 00ca 34       		.uleb128 0x34
 5814 00cb 00       		.byte	0
 5815 00cc 03       		.uleb128 0x3
 5816 00cd 0E       		.uleb128 0xe
 5817 00ce 3A       		.uleb128 0x3a
 5818 00cf 0B       		.uleb128 0xb
 5819 00d0 3B       		.uleb128 0x3b
 5820 00d1 05       		.uleb128 0x5
 5821 00d2 49       		.uleb128 0x49
 5822 00d3 13       		.uleb128 0x13
 5823 00d4 02       		.uleb128 0x2
 5824 00d5 17       		.uleb128 0x17
 5825 00d6 00       		.byte	0
 5826 00d7 00       		.byte	0
 5827 00d8 12       		.uleb128 0x12
 5828 00d9 898201   		.uleb128 0x4109
 5829 00dc 00       		.byte	0
 5830 00dd 11       		.uleb128 0x11
 5831 00de 01       		.uleb128 0x1
 5832 00df 31       		.uleb128 0x31
 5833 00e0 13       		.uleb128 0x13
 5834 00e1 00       		.byte	0
 5835 00e2 00       		.byte	0
 5836 00e3 13       		.uleb128 0x13
 5837 00e4 34       		.uleb128 0x34
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 159


 5838 00e5 00       		.byte	0
 5839 00e6 03       		.uleb128 0x3
 5840 00e7 0E       		.uleb128 0xe
 5841 00e8 3A       		.uleb128 0x3a
 5842 00e9 0B       		.uleb128 0xb
 5843 00ea 3B       		.uleb128 0x3b
 5844 00eb 05       		.uleb128 0x5
 5845 00ec 49       		.uleb128 0x49
 5846 00ed 13       		.uleb128 0x13
 5847 00ee 1C       		.uleb128 0x1c
 5848 00ef 0B       		.uleb128 0xb
 5849 00f0 00       		.byte	0
 5850 00f1 00       		.byte	0
 5851 00f2 14       		.uleb128 0x14
 5852 00f3 898201   		.uleb128 0x4109
 5853 00f6 01       		.byte	0x1
 5854 00f7 11       		.uleb128 0x11
 5855 00f8 01       		.uleb128 0x1
 5856 00f9 31       		.uleb128 0x31
 5857 00fa 13       		.uleb128 0x13
 5858 00fb 01       		.uleb128 0x1
 5859 00fc 13       		.uleb128 0x13
 5860 00fd 00       		.byte	0
 5861 00fe 00       		.byte	0
 5862 00ff 15       		.uleb128 0x15
 5863 0100 8A8201   		.uleb128 0x410a
 5864 0103 00       		.byte	0
 5865 0104 02       		.uleb128 0x2
 5866 0105 18       		.uleb128 0x18
 5867 0106 9142     		.uleb128 0x2111
 5868 0108 18       		.uleb128 0x18
 5869 0109 00       		.byte	0
 5870 010a 00       		.byte	0
 5871 010b 16       		.uleb128 0x16
 5872 010c 2E       		.uleb128 0x2e
 5873 010d 01       		.byte	0x1
 5874 010e 03       		.uleb128 0x3
 5875 010f 0E       		.uleb128 0xe
 5876 0110 3A       		.uleb128 0x3a
 5877 0111 0B       		.uleb128 0xb
 5878 0112 3B       		.uleb128 0x3b
 5879 0113 05       		.uleb128 0x5
 5880 0114 27       		.uleb128 0x27
 5881 0115 19       		.uleb128 0x19
 5882 0116 11       		.uleb128 0x11
 5883 0117 01       		.uleb128 0x1
 5884 0118 12       		.uleb128 0x12
 5885 0119 06       		.uleb128 0x6
 5886 011a 40       		.uleb128 0x40
 5887 011b 18       		.uleb128 0x18
 5888 011c 9742     		.uleb128 0x2117
 5889 011e 19       		.uleb128 0x19
 5890 011f 01       		.uleb128 0x1
 5891 0120 13       		.uleb128 0x13
 5892 0121 00       		.byte	0
 5893 0122 00       		.byte	0
 5894 0123 17       		.uleb128 0x17
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 160


 5895 0124 898201   		.uleb128 0x4109
 5896 0127 01       		.byte	0x1
 5897 0128 11       		.uleb128 0x11
 5898 0129 01       		.uleb128 0x1
 5899 012a 31       		.uleb128 0x31
 5900 012b 13       		.uleb128 0x13
 5901 012c 00       		.byte	0
 5902 012d 00       		.byte	0
 5903 012e 18       		.uleb128 0x18
 5904 012f 0B       		.uleb128 0xb
 5905 0130 01       		.byte	0x1
 5906 0131 11       		.uleb128 0x11
 5907 0132 01       		.uleb128 0x1
 5908 0133 12       		.uleb128 0x12
 5909 0134 06       		.uleb128 0x6
 5910 0135 01       		.uleb128 0x1
 5911 0136 13       		.uleb128 0x13
 5912 0137 00       		.byte	0
 5913 0138 00       		.byte	0
 5914 0139 19       		.uleb128 0x19
 5915 013a 2E       		.uleb128 0x2e
 5916 013b 01       		.byte	0x1
 5917 013c 3F       		.uleb128 0x3f
 5918 013d 19       		.uleb128 0x19
 5919 013e 03       		.uleb128 0x3
 5920 013f 0E       		.uleb128 0xe
 5921 0140 3A       		.uleb128 0x3a
 5922 0141 0B       		.uleb128 0xb
 5923 0142 3B       		.uleb128 0x3b
 5924 0143 0B       		.uleb128 0xb
 5925 0144 27       		.uleb128 0x27
 5926 0145 19       		.uleb128 0x19
 5927 0146 49       		.uleb128 0x49
 5928 0147 13       		.uleb128 0x13
 5929 0148 11       		.uleb128 0x11
 5930 0149 01       		.uleb128 0x1
 5931 014a 12       		.uleb128 0x12
 5932 014b 06       		.uleb128 0x6
 5933 014c 40       		.uleb128 0x40
 5934 014d 18       		.uleb128 0x18
 5935 014e 9742     		.uleb128 0x2117
 5936 0150 19       		.uleb128 0x19
 5937 0151 01       		.uleb128 0x1
 5938 0152 13       		.uleb128 0x13
 5939 0153 00       		.byte	0
 5940 0154 00       		.byte	0
 5941 0155 1A       		.uleb128 0x1a
 5942 0156 05       		.uleb128 0x5
 5943 0157 00       		.byte	0
 5944 0158 03       		.uleb128 0x3
 5945 0159 0E       		.uleb128 0xe
 5946 015a 3A       		.uleb128 0x3a
 5947 015b 0B       		.uleb128 0xb
 5948 015c 3B       		.uleb128 0x3b
 5949 015d 0B       		.uleb128 0xb
 5950 015e 49       		.uleb128 0x49
 5951 015f 13       		.uleb128 0x13
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 161


 5952 0160 02       		.uleb128 0x2
 5953 0161 17       		.uleb128 0x17
 5954 0162 00       		.byte	0
 5955 0163 00       		.byte	0
 5956 0164 1B       		.uleb128 0x1b
 5957 0165 34       		.uleb128 0x34
 5958 0166 00       		.byte	0
 5959 0167 03       		.uleb128 0x3
 5960 0168 0E       		.uleb128 0xe
 5961 0169 3A       		.uleb128 0x3a
 5962 016a 0B       		.uleb128 0xb
 5963 016b 3B       		.uleb128 0x3b
 5964 016c 0B       		.uleb128 0xb
 5965 016d 49       		.uleb128 0x49
 5966 016e 13       		.uleb128 0x13
 5967 016f 02       		.uleb128 0x2
 5968 0170 17       		.uleb128 0x17
 5969 0171 00       		.byte	0
 5970 0172 00       		.byte	0
 5971 0173 1C       		.uleb128 0x1c
 5972 0174 05       		.uleb128 0x5
 5973 0175 00       		.byte	0
 5974 0176 03       		.uleb128 0x3
 5975 0177 0E       		.uleb128 0xe
 5976 0178 3A       		.uleb128 0x3a
 5977 0179 0B       		.uleb128 0xb
 5978 017a 3B       		.uleb128 0x3b
 5979 017b 05       		.uleb128 0x5
 5980 017c 49       		.uleb128 0x49
 5981 017d 13       		.uleb128 0x13
 5982 017e 02       		.uleb128 0x2
 5983 017f 18       		.uleb128 0x18
 5984 0180 00       		.byte	0
 5985 0181 00       		.byte	0
 5986 0182 1D       		.uleb128 0x1d
 5987 0183 2E       		.uleb128 0x2e
 5988 0184 01       		.byte	0x1
 5989 0185 3F       		.uleb128 0x3f
 5990 0186 19       		.uleb128 0x19
 5991 0187 03       		.uleb128 0x3
 5992 0188 0E       		.uleb128 0xe
 5993 0189 3A       		.uleb128 0x3a
 5994 018a 0B       		.uleb128 0xb
 5995 018b 3B       		.uleb128 0x3b
 5996 018c 05       		.uleb128 0x5
 5997 018d 27       		.uleb128 0x27
 5998 018e 19       		.uleb128 0x19
 5999 018f 49       		.uleb128 0x49
 6000 0190 13       		.uleb128 0x13
 6001 0191 11       		.uleb128 0x11
 6002 0192 01       		.uleb128 0x1
 6003 0193 12       		.uleb128 0x12
 6004 0194 06       		.uleb128 0x6
 6005 0195 40       		.uleb128 0x40
 6006 0196 18       		.uleb128 0x18
 6007 0197 9742     		.uleb128 0x2117
 6008 0199 19       		.uleb128 0x19
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 162


 6009 019a 01       		.uleb128 0x1
 6010 019b 13       		.uleb128 0x13
 6011 019c 00       		.byte	0
 6012 019d 00       		.byte	0
 6013 019e 1E       		.uleb128 0x1e
 6014 019f 34       		.uleb128 0x34
 6015 01a0 00       		.byte	0
 6016 01a1 03       		.uleb128 0x3
 6017 01a2 0E       		.uleb128 0xe
 6018 01a3 3A       		.uleb128 0x3a
 6019 01a4 0B       		.uleb128 0xb
 6020 01a5 3B       		.uleb128 0x3b
 6021 01a6 05       		.uleb128 0x5
 6022 01a7 49       		.uleb128 0x49
 6023 01a8 13       		.uleb128 0x13
 6024 01a9 02       		.uleb128 0x2
 6025 01aa 18       		.uleb128 0x18
 6026 01ab 00       		.byte	0
 6027 01ac 00       		.byte	0
 6028 01ad 1F       		.uleb128 0x1f
 6029 01ae 0B       		.uleb128 0xb
 6030 01af 01       		.byte	0x1
 6031 01b0 55       		.uleb128 0x55
 6032 01b1 17       		.uleb128 0x17
 6033 01b2 01       		.uleb128 0x1
 6034 01b3 13       		.uleb128 0x13
 6035 01b4 00       		.byte	0
 6036 01b5 00       		.byte	0
 6037 01b6 20       		.uleb128 0x20
 6038 01b7 0B       		.uleb128 0xb
 6039 01b8 01       		.byte	0x1
 6040 01b9 55       		.uleb128 0x55
 6041 01ba 17       		.uleb128 0x17
 6042 01bb 00       		.byte	0
 6043 01bc 00       		.byte	0
 6044 01bd 21       		.uleb128 0x21
 6045 01be 2E       		.uleb128 0x2e
 6046 01bf 01       		.byte	0x1
 6047 01c0 3F       		.uleb128 0x3f
 6048 01c1 19       		.uleb128 0x19
 6049 01c2 03       		.uleb128 0x3
 6050 01c3 0E       		.uleb128 0xe
 6051 01c4 3A       		.uleb128 0x3a
 6052 01c5 0B       		.uleb128 0xb
 6053 01c6 3B       		.uleb128 0x3b
 6054 01c7 05       		.uleb128 0x5
 6055 01c8 27       		.uleb128 0x27
 6056 01c9 19       		.uleb128 0x19
 6057 01ca 11       		.uleb128 0x11
 6058 01cb 01       		.uleb128 0x1
 6059 01cc 12       		.uleb128 0x12
 6060 01cd 06       		.uleb128 0x6
 6061 01ce 40       		.uleb128 0x40
 6062 01cf 18       		.uleb128 0x18
 6063 01d0 9742     		.uleb128 0x2117
 6064 01d2 19       		.uleb128 0x19
 6065 01d3 01       		.uleb128 0x1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 163


 6066 01d4 13       		.uleb128 0x13
 6067 01d5 00       		.byte	0
 6068 01d6 00       		.byte	0
 6069 01d7 22       		.uleb128 0x22
 6070 01d8 34       		.uleb128 0x34
 6071 01d9 00       		.byte	0
 6072 01da 03       		.uleb128 0x3
 6073 01db 08       		.uleb128 0x8
 6074 01dc 3A       		.uleb128 0x3a
 6075 01dd 0B       		.uleb128 0xb
 6076 01de 3B       		.uleb128 0x3b
 6077 01df 05       		.uleb128 0x5
 6078 01e0 49       		.uleb128 0x49
 6079 01e1 13       		.uleb128 0x13
 6080 01e2 02       		.uleb128 0x2
 6081 01e3 17       		.uleb128 0x17
 6082 01e4 00       		.byte	0
 6083 01e5 00       		.byte	0
 6084 01e6 23       		.uleb128 0x23
 6085 01e7 01       		.uleb128 0x1
 6086 01e8 01       		.byte	0x1
 6087 01e9 49       		.uleb128 0x49
 6088 01ea 13       		.uleb128 0x13
 6089 01eb 01       		.uleb128 0x1
 6090 01ec 13       		.uleb128 0x13
 6091 01ed 00       		.byte	0
 6092 01ee 00       		.byte	0
 6093 01ef 24       		.uleb128 0x24
 6094 01f0 21       		.uleb128 0x21
 6095 01f1 00       		.byte	0
 6096 01f2 49       		.uleb128 0x49
 6097 01f3 13       		.uleb128 0x13
 6098 01f4 2F       		.uleb128 0x2f
 6099 01f5 0B       		.uleb128 0xb
 6100 01f6 00       		.byte	0
 6101 01f7 00       		.byte	0
 6102 01f8 25       		.uleb128 0x25
 6103 01f9 34       		.uleb128 0x34
 6104 01fa 00       		.byte	0
 6105 01fb 03       		.uleb128 0x3
 6106 01fc 0E       		.uleb128 0xe
 6107 01fd 3A       		.uleb128 0x3a
 6108 01fe 0B       		.uleb128 0xb
 6109 01ff 3B       		.uleb128 0x3b
 6110 0200 0B       		.uleb128 0xb
 6111 0201 49       		.uleb128 0x49
 6112 0202 13       		.uleb128 0x13
 6113 0203 3F       		.uleb128 0x3f
 6114 0204 19       		.uleb128 0x19
 6115 0205 02       		.uleb128 0x2
 6116 0206 18       		.uleb128 0x18
 6117 0207 00       		.byte	0
 6118 0208 00       		.byte	0
 6119 0209 26       		.uleb128 0x26
 6120 020a 2E       		.uleb128 0x2e
 6121 020b 00       		.byte	0
 6122 020c 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 164


 6123 020d 19       		.uleb128 0x19
 6124 020e 3C       		.uleb128 0x3c
 6125 020f 19       		.uleb128 0x19
 6126 0210 6E       		.uleb128 0x6e
 6127 0211 0E       		.uleb128 0xe
 6128 0212 03       		.uleb128 0x3
 6129 0213 0E       		.uleb128 0xe
 6130 0214 3A       		.uleb128 0x3a
 6131 0215 0B       		.uleb128 0xb
 6132 0216 3B       		.uleb128 0x3b
 6133 0217 0B       		.uleb128 0xb
 6134 0218 00       		.byte	0
 6135 0219 00       		.byte	0
 6136 021a 27       		.uleb128 0x27
 6137 021b 2E       		.uleb128 0x2e
 6138 021c 00       		.byte	0
 6139 021d 3F       		.uleb128 0x3f
 6140 021e 19       		.uleb128 0x19
 6141 021f 3C       		.uleb128 0x3c
 6142 0220 19       		.uleb128 0x19
 6143 0221 6E       		.uleb128 0x6e
 6144 0222 0E       		.uleb128 0xe
 6145 0223 03       		.uleb128 0x3
 6146 0224 0E       		.uleb128 0xe
 6147 0225 00       		.byte	0
 6148 0226 00       		.byte	0
 6149 0227 28       		.uleb128 0x28
 6150 0228 2E       		.uleb128 0x2e
 6151 0229 00       		.byte	0
 6152 022a 3F       		.uleb128 0x3f
 6153 022b 19       		.uleb128 0x19
 6154 022c 3C       		.uleb128 0x3c
 6155 022d 19       		.uleb128 0x19
 6156 022e 6E       		.uleb128 0x6e
 6157 022f 0E       		.uleb128 0xe
 6158 0230 03       		.uleb128 0x3
 6159 0231 0E       		.uleb128 0xe
 6160 0232 3A       		.uleb128 0x3a
 6161 0233 0B       		.uleb128 0xb
 6162 0234 3B       		.uleb128 0x3b
 6163 0235 05       		.uleb128 0x5
 6164 0236 00       		.byte	0
 6165 0237 00       		.byte	0
 6166 0238 00       		.byte	0
 6167              		.section	.debug_loc,"",%progbits
 6168              	.Ldebug_loc0:
 6169              	.LLST0:
 6170 0000 00000000 		.4byte	.LVL0
 6171 0004 07000000 		.4byte	.LVL1-1
 6172 0008 0100     		.2byte	0x1
 6173 000a 50       		.byte	0x50
 6174 000b 07000000 		.4byte	.LVL1-1
 6175 000f 12000000 		.4byte	.LVL2
 6176 0013 0100     		.2byte	0x1
 6177 0015 54       		.byte	0x54
 6178 0016 12000000 		.4byte	.LVL2
 6179 001a 14000000 		.4byte	.LVL3
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 165


 6180 001e 0400     		.2byte	0x4
 6181 0020 F3       		.byte	0xf3
 6182 0021 01       		.uleb128 0x1
 6183 0022 50       		.byte	0x50
 6184 0023 9F       		.byte	0x9f
 6185 0024 14000000 		.4byte	.LVL3
 6186 0028 16000000 		.4byte	.LVL4
 6187 002c 0100     		.2byte	0x1
 6188 002e 54       		.byte	0x54
 6189 002f 16000000 		.4byte	.LVL4
 6190 0033 1E000000 		.4byte	.LFE59
 6191 0037 0400     		.2byte	0x4
 6192 0039 F3       		.byte	0xf3
 6193 003a 01       		.uleb128 0x1
 6194 003b 50       		.byte	0x50
 6195 003c 9F       		.byte	0x9f
 6196 003d 00000000 		.4byte	0
 6197 0041 00000000 		.4byte	0
 6198              	.LLST1:
 6199 0045 16000000 		.4byte	.LVL4
 6200 0049 1C000000 		.4byte	.LVL6
 6201 004d 0100     		.2byte	0x1
 6202 004f 54       		.byte	0x54
 6203 0050 1C000000 		.4byte	.LVL6
 6204 0054 1E000000 		.4byte	.LFE59
 6205 0058 0100     		.2byte	0x1
 6206 005a 50       		.byte	0x50
 6207 005b 00000000 		.4byte	0
 6208 005f 00000000 		.4byte	0
 6209              	.LLST2:
 6210 0063 00000000 		.4byte	.LVL7
 6211 0067 07000000 		.4byte	.LVL8-1
 6212 006b 0100     		.2byte	0x1
 6213 006d 50       		.byte	0x50
 6214 006e 07000000 		.4byte	.LVL8-1
 6215 0072 10000000 		.4byte	.LVL9
 6216 0076 0100     		.2byte	0x1
 6217 0078 54       		.byte	0x54
 6218 0079 10000000 		.4byte	.LVL9
 6219 007d 12000000 		.4byte	.LVL10
 6220 0081 0400     		.2byte	0x4
 6221 0083 F3       		.byte	0xf3
 6222 0084 01       		.uleb128 0x1
 6223 0085 50       		.byte	0x50
 6224 0086 9F       		.byte	0x9f
 6225 0087 12000000 		.4byte	.LVL10
 6226 008b 14000000 		.4byte	.LVL11
 6227 008f 0100     		.2byte	0x1
 6228 0091 54       		.byte	0x54
 6229 0092 14000000 		.4byte	.LVL11
 6230 0096 1C000000 		.4byte	.LFE57
 6231 009a 0400     		.2byte	0x4
 6232 009c F3       		.byte	0xf3
 6233 009d 01       		.uleb128 0x1
 6234 009e 50       		.byte	0x50
 6235 009f 9F       		.byte	0x9f
 6236 00a0 00000000 		.4byte	0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 166


 6237 00a4 00000000 		.4byte	0
 6238              	.LLST3:
 6239 00a8 14000000 		.4byte	.LVL11
 6240 00ac 1A000000 		.4byte	.LVL13
 6241 00b0 0100     		.2byte	0x1
 6242 00b2 54       		.byte	0x54
 6243 00b3 1A000000 		.4byte	.LVL13
 6244 00b7 1C000000 		.4byte	.LFE57
 6245 00bb 0100     		.2byte	0x1
 6246 00bd 50       		.byte	0x50
 6247 00be 00000000 		.4byte	0
 6248 00c2 00000000 		.4byte	0
 6249              	.LLST4:
 6250 00c6 00000000 		.4byte	.LVL14
 6251 00ca 14000000 		.4byte	.LVL18
 6252 00ce 0100     		.2byte	0x1
 6253 00d0 50       		.byte	0x50
 6254 00d1 14000000 		.4byte	.LVL18
 6255 00d5 2E000000 		.4byte	.LVL20
 6256 00d9 0100     		.2byte	0x1
 6257 00db 54       		.byte	0x54
 6258 00dc 2E000000 		.4byte	.LVL20
 6259 00e0 30000000 		.4byte	.LVL21
 6260 00e4 0100     		.2byte	0x1
 6261 00e6 50       		.byte	0x50
 6262 00e7 30000000 		.4byte	.LVL21
 6263 00eb 5C000000 		.4byte	.LVL25
 6264 00ef 0100     		.2byte	0x1
 6265 00f1 54       		.byte	0x54
 6266 00f2 5C000000 		.4byte	.LVL25
 6267 00f6 5E000000 		.4byte	.LFE54
 6268 00fa 0400     		.2byte	0x4
 6269 00fc F3       		.byte	0xf3
 6270 00fd 01       		.uleb128 0x1
 6271 00fe 50       		.byte	0x50
 6272 00ff 9F       		.byte	0x9f
 6273 0100 00000000 		.4byte	0
 6274 0104 00000000 		.4byte	0
 6275              	.LLST5:
 6276 0108 00000000 		.4byte	.LVL14
 6277 010c 17000000 		.4byte	.LVL19-1
 6278 0110 0100     		.2byte	0x1
 6279 0112 51       		.byte	0x51
 6280 0113 17000000 		.4byte	.LVL19-1
 6281 0117 2E000000 		.4byte	.LVL20
 6282 011b 0400     		.2byte	0x4
 6283 011d F3       		.byte	0xf3
 6284 011e 01       		.uleb128 0x1
 6285 011f 51       		.byte	0x51
 6286 0120 9F       		.byte	0x9f
 6287 0121 2E000000 		.4byte	.LVL20
 6288 0125 33000000 		.4byte	.LVL22-1
 6289 0129 0100     		.2byte	0x1
 6290 012b 51       		.byte	0x51
 6291 012c 33000000 		.4byte	.LVL22-1
 6292 0130 5E000000 		.4byte	.LFE54
 6293 0134 0400     		.2byte	0x4
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 167


 6294 0136 F3       		.byte	0xf3
 6295 0137 01       		.uleb128 0x1
 6296 0138 51       		.byte	0x51
 6297 0139 9F       		.byte	0x9f
 6298 013a 00000000 		.4byte	0
 6299 013e 00000000 		.4byte	0
 6300              	.LLST6:
 6301 0142 00000000 		.4byte	.LVL14
 6302 0146 0A000000 		.4byte	.LVL17
 6303 014a 0100     		.2byte	0x1
 6304 014c 52       		.byte	0x52
 6305 014d 0A000000 		.4byte	.LVL17
 6306 0151 5C000000 		.4byte	.LVL27
 6307 0155 0100     		.2byte	0x1
 6308 0157 56       		.byte	0x56
 6309 0158 5C000000 		.4byte	.LVL27
 6310 015c 5E000000 		.4byte	.LFE54
 6311 0160 0400     		.2byte	0x4
 6312 0162 F3       		.byte	0xf3
 6313 0163 01       		.uleb128 0x1
 6314 0164 52       		.byte	0x52
 6315 0165 9F       		.byte	0x9f
 6316 0166 00000000 		.4byte	0
 6317 016a 00000000 		.4byte	0
 6318              	.LLST7:
 6319 016e 08000000 		.4byte	.LVL16
 6320 0172 58000000 		.4byte	.LVL24
 6321 0176 0100     		.2byte	0x1
 6322 0178 55       		.byte	0x55
 6323 0179 58000000 		.4byte	.LVL24
 6324 017d 5C000000 		.4byte	.LVL26
 6325 0181 0300     		.2byte	0x3
 6326 0183 75       		.byte	0x75
 6327 0184 7F       		.sleb128 -1
 6328 0185 9F       		.byte	0x9f
 6329 0186 5C000000 		.4byte	.LVL26
 6330 018a 5E000000 		.4byte	.LFE54
 6331 018e 0900     		.2byte	0x9
 6332 0190 F3       		.byte	0xf3
 6333 0191 01       		.uleb128 0x1
 6334 0192 50       		.byte	0x50
 6335 0193 23       		.byte	0x23
 6336 0194 38       		.uleb128 0x38
 6337 0195 06       		.byte	0x6
 6338 0196 31       		.byte	0x31
 6339 0197 1C       		.byte	0x1c
 6340 0198 9F       		.byte	0x9f
 6341 0199 00000000 		.4byte	0
 6342 019d 00000000 		.4byte	0
 6343              	.LLST8:
 6344 01a1 00000000 		.4byte	.LVL28
 6345 01a5 1E000000 		.4byte	.LVL30
 6346 01a9 0100     		.2byte	0x1
 6347 01ab 50       		.byte	0x50
 6348 01ac 1E000000 		.4byte	.LVL30
 6349 01b0 24000000 		.4byte	.LFE55
 6350 01b4 0400     		.2byte	0x4
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 168


 6351 01b6 F3       		.byte	0xf3
 6352 01b7 01       		.uleb128 0x1
 6353 01b8 50       		.byte	0x50
 6354 01b9 9F       		.byte	0x9f
 6355 01ba 00000000 		.4byte	0
 6356 01be 00000000 		.4byte	0
 6357              	.LLST9:
 6358 01c2 00000000 		.4byte	.LVL28
 6359 01c6 12000000 		.4byte	.LVL29
 6360 01ca 0100     		.2byte	0x1
 6361 01cc 51       		.byte	0x51
 6362 01cd 12000000 		.4byte	.LVL29
 6363 01d1 22000000 		.4byte	.LVL32
 6364 01d5 0100     		.2byte	0x1
 6365 01d7 54       		.byte	0x54
 6366 01d8 22000000 		.4byte	.LVL32
 6367 01dc 24000000 		.4byte	.LFE55
 6368 01e0 0400     		.2byte	0x4
 6369 01e2 F3       		.byte	0xf3
 6370 01e3 01       		.uleb128 0x1
 6371 01e4 51       		.byte	0x51
 6372 01e5 9F       		.byte	0x9f
 6373 01e6 00000000 		.4byte	0
 6374 01ea 00000000 		.4byte	0
 6375              	.LLST10:
 6376 01ee 00000000 		.4byte	.LVL33
 6377 01f2 07000000 		.4byte	.LVL34-1
 6378 01f6 0100     		.2byte	0x1
 6379 01f8 50       		.byte	0x50
 6380 01f9 07000000 		.4byte	.LVL34-1
 6381 01fd 6C000000 		.4byte	.LVL50
 6382 0201 0100     		.2byte	0x1
 6383 0203 55       		.byte	0x55
 6384 0204 6C000000 		.4byte	.LVL50
 6385 0208 6E000000 		.4byte	.LFE56
 6386 020c 0400     		.2byte	0x4
 6387 020e F3       		.byte	0xf3
 6388 020f 01       		.uleb128 0x1
 6389 0210 50       		.byte	0x50
 6390 0211 9F       		.byte	0x9f
 6391 0212 00000000 		.4byte	0
 6392 0216 00000000 		.4byte	0
 6393              	.LLST11:
 6394 021a 0E000000 		.4byte	.LVL35
 6395 021e 28000000 		.4byte	.LVL38
 6396 0222 0100     		.2byte	0x1
 6397 0224 54       		.byte	0x54
 6398 0225 2A000000 		.4byte	.LVL39
 6399 0229 40000000 		.4byte	.LVL42
 6400 022d 0100     		.2byte	0x1
 6401 022f 54       		.byte	0x54
 6402 0230 00000000 		.4byte	0
 6403 0234 00000000 		.4byte	0
 6404              	.LLST12:
 6405 0238 42000000 		.4byte	.LVL43
 6406 023c 5C000000 		.4byte	.LVL46
 6407 0240 0100     		.2byte	0x1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 169


 6408 0242 54       		.byte	0x54
 6409 0243 5E000000 		.4byte	.LVL47
 6410 0247 6C000000 		.4byte	.LVL49
 6411 024b 0100     		.2byte	0x1
 6412 024d 54       		.byte	0x54
 6413 024e 00000000 		.4byte	0
 6414 0252 00000000 		.4byte	0
 6415              	.LLST13:
 6416 0256 00000000 		.4byte	.LVL51
 6417 025a 11000000 		.4byte	.LVL53-1
 6418 025e 0100     		.2byte	0x1
 6419 0260 50       		.byte	0x50
 6420 0261 11000000 		.4byte	.LVL53-1
 6421 0265 6A000000 		.4byte	.LVL59
 6422 0269 0100     		.2byte	0x1
 6423 026b 54       		.byte	0x54
 6424 026c 6A000000 		.4byte	.LVL59
 6425 0270 6C000000 		.4byte	.LFE36
 6426 0274 0400     		.2byte	0x4
 6427 0276 F3       		.byte	0xf3
 6428 0277 01       		.uleb128 0x1
 6429 0278 50       		.byte	0x50
 6430 0279 9F       		.byte	0x9f
 6431 027a 00000000 		.4byte	0
 6432 027e 00000000 		.4byte	0
 6433              	.LLST14:
 6434 0282 00000000 		.4byte	.LVL51
 6435 0286 11000000 		.4byte	.LVL53-1
 6436 028a 0100     		.2byte	0x1
 6437 028c 51       		.byte	0x51
 6438 028d 11000000 		.4byte	.LVL53-1
 6439 0291 6A000000 		.4byte	.LVL60
 6440 0295 0100     		.2byte	0x1
 6441 0297 55       		.byte	0x55
 6442 0298 6A000000 		.4byte	.LVL60
 6443 029c 6C000000 		.4byte	.LFE36
 6444 02a0 0400     		.2byte	0x4
 6445 02a2 F3       		.byte	0xf3
 6446 02a3 01       		.uleb128 0x1
 6447 02a4 51       		.byte	0x51
 6448 02a5 9F       		.byte	0x9f
 6449 02a6 00000000 		.4byte	0
 6450 02aa 00000000 		.4byte	0
 6451              	.LLST15:
 6452 02ae 06000000 		.4byte	.LVL52
 6453 02b2 11000000 		.4byte	.LVL53-1
 6454 02b6 0100     		.2byte	0x1
 6455 02b8 50       		.byte	0x50
 6456 02b9 11000000 		.4byte	.LVL53-1
 6457 02bd 6A000000 		.4byte	.LVL59
 6458 02c1 0100     		.2byte	0x1
 6459 02c3 54       		.byte	0x54
 6460 02c4 6A000000 		.4byte	.LVL59
 6461 02c8 6C000000 		.4byte	.LFE36
 6462 02cc 0400     		.2byte	0x4
 6463 02ce F3       		.byte	0xf3
 6464 02cf 01       		.uleb128 0x1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 170


 6465 02d0 50       		.byte	0x50
 6466 02d1 9F       		.byte	0x9f
 6467 02d2 00000000 		.4byte	0
 6468 02d6 00000000 		.4byte	0
 6469              	.LLST16:
 6470 02da 00000000 		.4byte	.LVL61
 6471 02de 18000000 		.4byte	.LVL63
 6472 02e2 0100     		.2byte	0x1
 6473 02e4 50       		.byte	0x50
 6474 02e5 18000000 		.4byte	.LVL63
 6475 02e9 1B000000 		.4byte	.LVL64-1
 6476 02ed 0200     		.2byte	0x2
 6477 02ef 74       		.byte	0x74
 6478 02f0 3C       		.sleb128 60
 6479 02f1 1B000000 		.4byte	.LVL64-1
 6480 02f5 22000000 		.4byte	.LFE38
 6481 02f9 0400     		.2byte	0x4
 6482 02fb F3       		.byte	0xf3
 6483 02fc 01       		.uleb128 0x1
 6484 02fd 50       		.byte	0x50
 6485 02fe 9F       		.byte	0x9f
 6486 02ff 00000000 		.4byte	0
 6487 0303 00000000 		.4byte	0
 6488              	.LLST17:
 6489 0307 00000000 		.4byte	.LVL61
 6490 030b 16000000 		.4byte	.LVL62
 6491 030f 0100     		.2byte	0x1
 6492 0311 51       		.byte	0x51
 6493 0312 16000000 		.4byte	.LVL62
 6494 0316 1B000000 		.4byte	.LVL64-1
 6495 031a 0300     		.2byte	0x3
 6496 031c 74       		.byte	0x74
 6497 031d C000     		.sleb128 64
 6498 031f 1B000000 		.4byte	.LVL64-1
 6499 0323 22000000 		.4byte	.LFE38
 6500 0327 0400     		.2byte	0x4
 6501 0329 F3       		.byte	0xf3
 6502 032a 01       		.uleb128 0x1
 6503 032b 51       		.byte	0x51
 6504 032c 9F       		.byte	0x9f
 6505 032d 00000000 		.4byte	0
 6506 0331 00000000 		.4byte	0
 6507              	.LLST18:
 6508 0335 00000000 		.4byte	.LVL61
 6509 0339 1B000000 		.4byte	.LVL64-1
 6510 033d 0100     		.2byte	0x1
 6511 033f 52       		.byte	0x52
 6512 0340 1B000000 		.4byte	.LVL64-1
 6513 0344 22000000 		.4byte	.LFE38
 6514 0348 0400     		.2byte	0x4
 6515 034a F3       		.byte	0xf3
 6516 034b 01       		.uleb128 0x1
 6517 034c 52       		.byte	0x52
 6518 034d 9F       		.byte	0x9f
 6519 034e 00000000 		.4byte	0
 6520 0352 00000000 		.4byte	0
 6521              	.LLST19:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 171


 6522 0356 00000000 		.4byte	.LVL61
 6523 035a 1B000000 		.4byte	.LVL64-1
 6524 035e 0100     		.2byte	0x1
 6525 0360 53       		.byte	0x53
 6526 0361 1B000000 		.4byte	.LVL64-1
 6527 0365 22000000 		.4byte	.LFE38
 6528 0369 0400     		.2byte	0x4
 6529 036b F3       		.byte	0xf3
 6530 036c 01       		.uleb128 0x1
 6531 036d 53       		.byte	0x53
 6532 036e 9F       		.byte	0x9f
 6533 036f 00000000 		.4byte	0
 6534 0373 00000000 		.4byte	0
 6535              	.LLST20:
 6536 0377 00000000 		.4byte	.LVL65
 6537 037b 18000000 		.4byte	.LVL66
 6538 037f 0100     		.2byte	0x1
 6539 0381 50       		.byte	0x50
 6540 0382 18000000 		.4byte	.LVL66
 6541 0386 1C000000 		.4byte	.LVL68
 6542 038a 0100     		.2byte	0x1
 6543 038c 56       		.byte	0x56
 6544 038d 1C000000 		.4byte	.LVL68
 6545 0391 1E000000 		.4byte	.LVL69
 6546 0395 0100     		.2byte	0x1
 6547 0397 50       		.byte	0x50
 6548 0398 1E000000 		.4byte	.LVL69
 6549 039c 3C000000 		.4byte	.LVL76
 6550 03a0 0100     		.2byte	0x1
 6551 03a2 56       		.byte	0x56
 6552 03a3 3C000000 		.4byte	.LVL76
 6553 03a7 3E000000 		.4byte	.LFE37
 6554 03ab 0400     		.2byte	0x4
 6555 03ad F3       		.byte	0xf3
 6556 03ae 01       		.uleb128 0x1
 6557 03af 50       		.byte	0x50
 6558 03b0 9F       		.byte	0x9f
 6559 03b1 00000000 		.4byte	0
 6560 03b5 00000000 		.4byte	0
 6561              	.LLST21:
 6562 03b9 00000000 		.4byte	.LVL65
 6563 03bd 23000000 		.4byte	.LVL71-1
 6564 03c1 0100     		.2byte	0x1
 6565 03c3 51       		.byte	0x51
 6566 03c4 23000000 		.4byte	.LVL71-1
 6567 03c8 3C000000 		.4byte	.LVL77
 6568 03cc 0100     		.2byte	0x1
 6569 03ce 57       		.byte	0x57
 6570 03cf 3C000000 		.4byte	.LVL77
 6571 03d3 3E000000 		.4byte	.LFE37
 6572 03d7 0400     		.2byte	0x4
 6573 03d9 F3       		.byte	0xf3
 6574 03da 01       		.uleb128 0x1
 6575 03db 51       		.byte	0x51
 6576 03dc 9F       		.byte	0x9f
 6577 03dd 00000000 		.4byte	0
 6578 03e1 00000000 		.4byte	0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 172


 6579              	.LLST22:
 6580 03e5 00000000 		.4byte	.LVL65
 6581 03e9 23000000 		.4byte	.LVL71-1
 6582 03ed 0100     		.2byte	0x1
 6583 03ef 52       		.byte	0x52
 6584 03f0 23000000 		.4byte	.LVL71-1
 6585 03f4 3E000000 		.4byte	.LFE37
 6586 03f8 0400     		.2byte	0x4
 6587 03fa F3       		.byte	0xf3
 6588 03fb 01       		.uleb128 0x1
 6589 03fc 52       		.byte	0x52
 6590 03fd 9F       		.byte	0x9f
 6591 03fe 00000000 		.4byte	0
 6592 0402 00000000 		.4byte	0
 6593              	.LLST23:
 6594 0406 26000000 		.4byte	.LVL72
 6595 040a 34000000 		.4byte	.LVL73
 6596 040e 0100     		.2byte	0x1
 6597 0410 50       		.byte	0x50
 6598 0411 34000000 		.4byte	.LVL73
 6599 0415 3C000000 		.4byte	.LVL75
 6600 0419 0100     		.2byte	0x1
 6601 041b 54       		.byte	0x54
 6602 041c 3C000000 		.4byte	.LVL75
 6603 0420 3E000000 		.4byte	.LFE37
 6604 0424 0100     		.2byte	0x1
 6605 0426 50       		.byte	0x50
 6606 0427 00000000 		.4byte	0
 6607 042b 00000000 		.4byte	0
 6608              	.LLST24:
 6609 042f 1A000000 		.4byte	.LVL67
 6610 0433 1C000000 		.4byte	.LVL68
 6611 0437 0100     		.2byte	0x1
 6612 0439 50       		.byte	0x50
 6613 043a 1E000000 		.4byte	.LVL69
 6614 043e 20000000 		.4byte	.LVL70
 6615 0442 0100     		.2byte	0x1
 6616 0444 50       		.byte	0x50
 6617 0445 20000000 		.4byte	.LVL70
 6618 0449 23000000 		.4byte	.LVL71-1
 6619 044d 0400     		.2byte	0x4
 6620 044f 70       		.byte	0x70
 6621 0450 B07F     		.sleb128 -80
 6622 0452 9F       		.byte	0x9f
 6623 0453 00000000 		.4byte	0
 6624 0457 00000000 		.4byte	0
 6625              	.LLST25:
 6626 045b 00000000 		.4byte	.LVL78
 6627 045f 4D000000 		.4byte	.LVL83-1
 6628 0463 0100     		.2byte	0x1
 6629 0465 50       		.byte	0x50
 6630 0466 4D000000 		.4byte	.LVL83-1
 6631 046a 46010000 		.4byte	.LVL111
 6632 046e 0100     		.2byte	0x1
 6633 0470 54       		.byte	0x54
 6634 0471 46010000 		.4byte	.LVL111
 6635 0475 48010000 		.4byte	.LFE39
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 173


 6636 0479 0400     		.2byte	0x4
 6637 047b F3       		.byte	0xf3
 6638 047c 01       		.uleb128 0x1
 6639 047d 50       		.byte	0x50
 6640 047e 9F       		.byte	0x9f
 6641 047f 00000000 		.4byte	0
 6642 0483 00000000 		.4byte	0
 6643              	.LLST26:
 6644 0487 00000000 		.4byte	.LVL78
 6645 048b 4D000000 		.4byte	.LVL83-1
 6646 048f 0100     		.2byte	0x1
 6647 0491 51       		.byte	0x51
 6648 0492 4D000000 		.4byte	.LVL83-1
 6649 0496 46010000 		.4byte	.LVL113
 6650 049a 0100     		.2byte	0x1
 6651 049c 56       		.byte	0x56
 6652 049d 46010000 		.4byte	.LVL113
 6653 04a1 48010000 		.4byte	.LFE39
 6654 04a5 0400     		.2byte	0x4
 6655 04a7 F3       		.byte	0xf3
 6656 04a8 01       		.uleb128 0x1
 6657 04a9 51       		.byte	0x51
 6658 04aa 9F       		.byte	0x9f
 6659 04ab 00000000 		.4byte	0
 6660 04af 00000000 		.4byte	0
 6661              	.LLST27:
 6662 04b3 00000000 		.4byte	.LVL78
 6663 04b7 4D000000 		.4byte	.LVL83-1
 6664 04bb 0100     		.2byte	0x1
 6665 04bd 52       		.byte	0x52
 6666 04be 4D000000 		.4byte	.LVL83-1
 6667 04c2 FA000000 		.4byte	.LVL100
 6668 04c6 0200     		.2byte	0x2
 6669 04c8 91       		.byte	0x91
 6670 04c9 5C       		.sleb128 -36
 6671 04ca FA000000 		.4byte	.LVL100
 6672 04ce FF000000 		.4byte	.LVL101-1
 6673 04d2 0200     		.2byte	0x2
 6674 04d4 71       		.byte	0x71
 6675 04d5 00       		.sleb128 0
 6676 04d6 FF000000 		.4byte	.LVL101-1
 6677 04da 48010000 		.4byte	.LFE39
 6678 04de 0200     		.2byte	0x2
 6679 04e0 91       		.byte	0x91
 6680 04e1 5C       		.sleb128 -36
 6681 04e2 00000000 		.4byte	0
 6682 04e6 00000000 		.4byte	0
 6683              	.LLST28:
 6684 04ea 00000000 		.4byte	.LVL78
 6685 04ee 1A000000 		.4byte	.LVL80
 6686 04f2 0100     		.2byte	0x1
 6687 04f4 53       		.byte	0x53
 6688 04f5 1A000000 		.4byte	.LVL80
 6689 04f9 22000000 		.4byte	.LVL81
 6690 04fd 0100     		.2byte	0x1
 6691 04ff 55       		.byte	0x55
 6692 0500 22000000 		.4byte	.LVL81
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 174


 6693 0504 24000000 		.4byte	.LVL82
 6694 0508 0100     		.2byte	0x1
 6695 050a 53       		.byte	0x53
 6696 050b 24000000 		.4byte	.LVL82
 6697 050f 46010000 		.4byte	.LVL112
 6698 0513 0100     		.2byte	0x1
 6699 0515 55       		.byte	0x55
 6700 0516 46010000 		.4byte	.LVL112
 6701 051a 48010000 		.4byte	.LFE39
 6702 051e 0400     		.2byte	0x4
 6703 0520 F3       		.byte	0xf3
 6704 0521 01       		.uleb128 0x1
 6705 0522 53       		.byte	0x53
 6706 0523 9F       		.byte	0x9f
 6707 0524 00000000 		.4byte	0
 6708 0528 00000000 		.4byte	0
 6709              	.LLST29:
 6710 052c 0C000000 		.4byte	.LVL79
 6711 0530 6C000000 		.4byte	.LVL84
 6712 0534 0200     		.2byte	0x2
 6713 0536 30       		.byte	0x30
 6714 0537 9F       		.byte	0x9f
 6715 0538 6C000000 		.4byte	.LVL84
 6716 053c C6000000 		.4byte	.LVL94
 6717 0540 0100     		.2byte	0x1
 6718 0542 57       		.byte	0x57
 6719 0543 C6000000 		.4byte	.LVL94
 6720 0547 C8000000 		.4byte	.LVL95
 6721 054b 0200     		.2byte	0x2
 6722 054d 31       		.byte	0x31
 6723 054e 9F       		.byte	0x9f
 6724 054f C8000000 		.4byte	.LVL95
 6725 0553 46010000 		.4byte	.LVL114
 6726 0557 0100     		.2byte	0x1
 6727 0559 57       		.byte	0x57
 6728 055a 00000000 		.4byte	0
 6729 055e 00000000 		.4byte	0
 6730              	.LLST30:
 6731 0562 86000000 		.4byte	.LVL86
 6732 0566 8E000000 		.4byte	.LVL87
 6733 056a 0100     		.2byte	0x1
 6734 056c 50       		.byte	0x50
 6735 056d 9E000000 		.4byte	.LVL90
 6736 0571 A5000000 		.4byte	.LVL91-1
 6737 0575 0100     		.2byte	0x1
 6738 0577 50       		.byte	0x50
 6739 0578 00000000 		.4byte	0
 6740 057c 00000000 		.4byte	0
 6741              	.LLST31:
 6742 0580 0C000000 		.4byte	.LVL79
 6743 0584 4D000000 		.4byte	.LVL83-1
 6744 0588 0100     		.2byte	0x1
 6745 058a 50       		.byte	0x50
 6746 058b 4D000000 		.4byte	.LVL83-1
 6747 058f 46010000 		.4byte	.LVL111
 6748 0593 0100     		.2byte	0x1
 6749 0595 54       		.byte	0x54
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 175


 6750 0596 46010000 		.4byte	.LVL111
 6751 059a 48010000 		.4byte	.LFE39
 6752 059e 0400     		.2byte	0x4
 6753 05a0 F3       		.byte	0xf3
 6754 05a1 01       		.uleb128 0x1
 6755 05a2 50       		.byte	0x50
 6756 05a3 9F       		.byte	0x9f
 6757 05a4 00000000 		.4byte	0
 6758 05a8 00000000 		.4byte	0
 6759              	.LLST32:
 6760 05ac 00000000 		.4byte	.LVL115
 6761 05b0 4F000000 		.4byte	.LVL118-1
 6762 05b4 0100     		.2byte	0x1
 6763 05b6 50       		.byte	0x50
 6764 05b7 4F000000 		.4byte	.LVL118-1
 6765 05bb 8E000000 		.4byte	.LVL124
 6766 05bf 0100     		.2byte	0x1
 6767 05c1 54       		.byte	0x54
 6768 05c2 8E000000 		.4byte	.LVL124
 6769 05c6 90000000 		.4byte	.LVL125
 6770 05ca 0400     		.2byte	0x4
 6771 05cc F3       		.byte	0xf3
 6772 05cd 01       		.uleb128 0x1
 6773 05ce 50       		.byte	0x50
 6774 05cf 9F       		.byte	0x9f
 6775 05d0 90000000 		.4byte	.LVL125
 6776 05d4 9A000000 		.4byte	.LVL128
 6777 05d8 0100     		.2byte	0x1
 6778 05da 54       		.byte	0x54
 6779 05db 9A000000 		.4byte	.LVL128
 6780 05df 9C000000 		.4byte	.LVL129
 6781 05e3 0400     		.2byte	0x4
 6782 05e5 F3       		.byte	0xf3
 6783 05e6 01       		.uleb128 0x1
 6784 05e7 50       		.byte	0x50
 6785 05e8 9F       		.byte	0x9f
 6786 05e9 9C000000 		.4byte	.LVL129
 6787 05ed 9E000000 		.4byte	.LVL130
 6788 05f1 0100     		.2byte	0x1
 6789 05f3 54       		.byte	0x54
 6790 05f4 9E000000 		.4byte	.LVL130
 6791 05f8 A0000000 		.4byte	.LVL131
 6792 05fc 0400     		.2byte	0x4
 6793 05fe F3       		.byte	0xf3
 6794 05ff 01       		.uleb128 0x1
 6795 0600 50       		.byte	0x50
 6796 0601 9F       		.byte	0x9f
 6797 0602 A0000000 		.4byte	.LVL131
 6798 0606 A2000000 		.4byte	.LVL132
 6799 060a 0100     		.2byte	0x1
 6800 060c 54       		.byte	0x54
 6801 060d A2000000 		.4byte	.LVL132
 6802 0611 A4000000 		.4byte	.LVL133
 6803 0615 0400     		.2byte	0x4
 6804 0617 F3       		.byte	0xf3
 6805 0618 01       		.uleb128 0x1
 6806 0619 50       		.byte	0x50
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 176


 6807 061a 9F       		.byte	0x9f
 6808 061b A4000000 		.4byte	.LVL133
 6809 061f A6000000 		.4byte	.LVL134
 6810 0623 0100     		.2byte	0x1
 6811 0625 54       		.byte	0x54
 6812 0626 A6000000 		.4byte	.LVL134
 6813 062a A8000000 		.4byte	.LVL135
 6814 062e 0400     		.2byte	0x4
 6815 0630 F3       		.byte	0xf3
 6816 0631 01       		.uleb128 0x1
 6817 0632 50       		.byte	0x50
 6818 0633 9F       		.byte	0x9f
 6819 0634 A8000000 		.4byte	.LVL135
 6820 0638 AA000000 		.4byte	.LVL136
 6821 063c 0100     		.2byte	0x1
 6822 063e 54       		.byte	0x54
 6823 063f AA000000 		.4byte	.LVL136
 6824 0643 B6000000 		.4byte	.LFE40
 6825 0647 0400     		.2byte	0x4
 6826 0649 F3       		.byte	0xf3
 6827 064a 01       		.uleb128 0x1
 6828 064b 50       		.byte	0x50
 6829 064c 9F       		.byte	0x9f
 6830 064d 00000000 		.4byte	0
 6831 0651 00000000 		.4byte	0
 6832              	.LLST33:
 6833 0655 00000000 		.4byte	.LVL115
 6834 0659 4F000000 		.4byte	.LVL118-1
 6835 065d 0100     		.2byte	0x1
 6836 065f 51       		.byte	0x51
 6837 0660 4F000000 		.4byte	.LVL118-1
 6838 0664 B4000000 		.4byte	.LVL138
 6839 0668 0200     		.2byte	0x2
 6840 066a 7D       		.byte	0x7d
 6841 066b 00       		.sleb128 0
 6842 066c B4000000 		.4byte	.LVL138
 6843 0670 B6000000 		.4byte	.LFE40
 6844 0674 0200     		.2byte	0x2
 6845 0676 91       		.byte	0x91
 6846 0677 60       		.sleb128 -32
 6847 0678 00000000 		.4byte	0
 6848 067c 00000000 		.4byte	0
 6849              	.LLST34:
 6850 0680 00000000 		.4byte	.LVL115
 6851 0684 4F000000 		.4byte	.LVL118-1
 6852 0688 0100     		.2byte	0x1
 6853 068a 52       		.byte	0x52
 6854 068b 4F000000 		.4byte	.LVL118-1
 6855 068f B4000000 		.4byte	.LVL140
 6856 0693 0100     		.2byte	0x1
 6857 0695 56       		.byte	0x56
 6858 0696 B4000000 		.4byte	.LVL140
 6859 069a B6000000 		.4byte	.LFE40
 6860 069e 0400     		.2byte	0x4
 6861 06a0 F3       		.byte	0xf3
 6862 06a1 01       		.uleb128 0x1
 6863 06a2 52       		.byte	0x52
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 177


 6864 06a3 9F       		.byte	0x9f
 6865 06a4 00000000 		.4byte	0
 6866 06a8 00000000 		.4byte	0
 6867              	.LLST35:
 6868 06ac 00000000 		.4byte	.LVL115
 6869 06b0 16000000 		.4byte	.LVL117
 6870 06b4 0100     		.2byte	0x1
 6871 06b6 53       		.byte	0x53
 6872 06b7 16000000 		.4byte	.LVL117
 6873 06bb B4000000 		.4byte	.LVL141
 6874 06bf 0100     		.2byte	0x1
 6875 06c1 57       		.byte	0x57
 6876 06c2 B4000000 		.4byte	.LVL141
 6877 06c6 B6000000 		.4byte	.LFE40
 6878 06ca 0400     		.2byte	0x4
 6879 06cc F3       		.byte	0xf3
 6880 06cd 01       		.uleb128 0x1
 6881 06ce 53       		.byte	0x53
 6882 06cf 9F       		.byte	0x9f
 6883 06d0 00000000 		.4byte	0
 6884 06d4 00000000 		.4byte	0
 6885              	.LLST36:
 6886 06d8 AA000000 		.4byte	.LVL136
 6887 06dc B4000000 		.4byte	.LVL139
 6888 06e0 0100     		.2byte	0x1
 6889 06e2 54       		.byte	0x54
 6890 06e3 B4000000 		.4byte	.LVL139
 6891 06e7 B6000000 		.4byte	.LFE40
 6892 06eb 0100     		.2byte	0x1
 6893 06ed 50       		.byte	0x50
 6894 06ee 00000000 		.4byte	0
 6895 06f2 00000000 		.4byte	0
 6896              	.LLST37:
 6897 06f6 52000000 		.4byte	.LVL119
 6898 06fa 6A000000 		.4byte	.LVL121
 6899 06fe 0100     		.2byte	0x1
 6900 0700 50       		.byte	0x50
 6901 0701 6A000000 		.4byte	.LVL121
 6902 0705 9C000000 		.4byte	.LVL129
 6903 0709 0200     		.2byte	0x2
 6904 070b 91       		.byte	0x91
 6905 070c 64       		.sleb128 -28
 6906 070d 9C000000 		.4byte	.LVL129
 6907 0711 A0000000 		.4byte	.LVL131
 6908 0715 0100     		.2byte	0x1
 6909 0717 50       		.byte	0x50
 6910 0718 A0000000 		.4byte	.LVL131
 6911 071c B6000000 		.4byte	.LFE40
 6912 0720 0200     		.2byte	0x2
 6913 0722 91       		.byte	0x91
 6914 0723 64       		.sleb128 -28
 6915 0724 00000000 		.4byte	0
 6916 0728 00000000 		.4byte	0
 6917              	.LLST38:
 6918 072c 0C000000 		.4byte	.LVL116
 6919 0730 4F000000 		.4byte	.LVL118-1
 6920 0734 0100     		.2byte	0x1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 178


 6921 0736 50       		.byte	0x50
 6922 0737 4F000000 		.4byte	.LVL118-1
 6923 073b 8E000000 		.4byte	.LVL124
 6924 073f 0100     		.2byte	0x1
 6925 0741 54       		.byte	0x54
 6926 0742 8E000000 		.4byte	.LVL124
 6927 0746 90000000 		.4byte	.LVL125
 6928 074a 0400     		.2byte	0x4
 6929 074c F3       		.byte	0xf3
 6930 074d 01       		.uleb128 0x1
 6931 074e 50       		.byte	0x50
 6932 074f 9F       		.byte	0x9f
 6933 0750 90000000 		.4byte	.LVL125
 6934 0754 9A000000 		.4byte	.LVL128
 6935 0758 0100     		.2byte	0x1
 6936 075a 54       		.byte	0x54
 6937 075b 9A000000 		.4byte	.LVL128
 6938 075f 9C000000 		.4byte	.LVL129
 6939 0763 0400     		.2byte	0x4
 6940 0765 F3       		.byte	0xf3
 6941 0766 01       		.uleb128 0x1
 6942 0767 50       		.byte	0x50
 6943 0768 9F       		.byte	0x9f
 6944 0769 9C000000 		.4byte	.LVL129
 6945 076d 9E000000 		.4byte	.LVL130
 6946 0771 0100     		.2byte	0x1
 6947 0773 54       		.byte	0x54
 6948 0774 9E000000 		.4byte	.LVL130
 6949 0778 A0000000 		.4byte	.LVL131
 6950 077c 0400     		.2byte	0x4
 6951 077e F3       		.byte	0xf3
 6952 077f 01       		.uleb128 0x1
 6953 0780 50       		.byte	0x50
 6954 0781 9F       		.byte	0x9f
 6955 0782 A0000000 		.4byte	.LVL131
 6956 0786 A2000000 		.4byte	.LVL132
 6957 078a 0100     		.2byte	0x1
 6958 078c 54       		.byte	0x54
 6959 078d A2000000 		.4byte	.LVL132
 6960 0791 A4000000 		.4byte	.LVL133
 6961 0795 0400     		.2byte	0x4
 6962 0797 F3       		.byte	0xf3
 6963 0798 01       		.uleb128 0x1
 6964 0799 50       		.byte	0x50
 6965 079a 9F       		.byte	0x9f
 6966 079b A4000000 		.4byte	.LVL133
 6967 079f A6000000 		.4byte	.LVL134
 6968 07a3 0100     		.2byte	0x1
 6969 07a5 54       		.byte	0x54
 6970 07a6 A6000000 		.4byte	.LVL134
 6971 07aa A8000000 		.4byte	.LVL135
 6972 07ae 0400     		.2byte	0x4
 6973 07b0 F3       		.byte	0xf3
 6974 07b1 01       		.uleb128 0x1
 6975 07b2 50       		.byte	0x50
 6976 07b3 9F       		.byte	0x9f
 6977 07b4 A8000000 		.4byte	.LVL135
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 179


 6978 07b8 AA000000 		.4byte	.LVL136
 6979 07bc 0100     		.2byte	0x1
 6980 07be 54       		.byte	0x54
 6981 07bf AA000000 		.4byte	.LVL136
 6982 07c3 B6000000 		.4byte	.LFE40
 6983 07c7 0400     		.2byte	0x4
 6984 07c9 F3       		.byte	0xf3
 6985 07ca 01       		.uleb128 0x1
 6986 07cb 50       		.byte	0x50
 6987 07cc 9F       		.byte	0x9f
 6988 07cd 00000000 		.4byte	0
 6989 07d1 00000000 		.4byte	0
 6990              	.LLST39:
 6991 07d5 64000000 		.4byte	.LVL120
 6992 07d9 92000000 		.4byte	.LVL126
 6993 07dd 0100     		.2byte	0x1
 6994 07df 55       		.byte	0x55
 6995 07e0 92000000 		.4byte	.LVL126
 6996 07e4 94000000 		.4byte	.LVL127
 6997 07e8 0300     		.2byte	0x3
 6998 07ea 75       		.byte	0x75
 6999 07eb 7F       		.sleb128 -1
 7000 07ec 9F       		.byte	0x9f
 7001 07ed A0000000 		.4byte	.LVL131
 7002 07f1 AA000000 		.4byte	.LVL136
 7003 07f5 0100     		.2byte	0x1
 7004 07f7 55       		.byte	0x55
 7005 07f8 00000000 		.4byte	0
 7006 07fc 00000000 		.4byte	0
 7007              	.LLST40:
 7008 0800 00000000 		.4byte	.LVL142
 7009 0804 39000000 		.4byte	.LVL144-1
 7010 0808 0100     		.2byte	0x1
 7011 080a 50       		.byte	0x50
 7012 080b 39000000 		.4byte	.LVL144-1
 7013 080f 6E000000 		.4byte	.LVL153
 7014 0813 0100     		.2byte	0x1
 7015 0815 54       		.byte	0x54
 7016 0816 6E000000 		.4byte	.LVL153
 7017 081a 70000000 		.4byte	.LVL154
 7018 081e 0400     		.2byte	0x4
 7019 0820 F3       		.byte	0xf3
 7020 0821 01       		.uleb128 0x1
 7021 0822 50       		.byte	0x50
 7022 0823 9F       		.byte	0x9f
 7023 0824 70000000 		.4byte	.LVL154
 7024 0828 7A000000 		.4byte	.LVL158
 7025 082c 0100     		.2byte	0x1
 7026 082e 54       		.byte	0x54
 7027 082f 7A000000 		.4byte	.LVL158
 7028 0833 7C000000 		.4byte	.LVL159
 7029 0837 0400     		.2byte	0x4
 7030 0839 F3       		.byte	0xf3
 7031 083a 01       		.uleb128 0x1
 7032 083b 50       		.byte	0x50
 7033 083c 9F       		.byte	0x9f
 7034 083d 7C000000 		.4byte	.LVL159
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 180


 7035 0841 7E000000 		.4byte	.LVL160
 7036 0845 0100     		.2byte	0x1
 7037 0847 54       		.byte	0x54
 7038 0848 7E000000 		.4byte	.LVL160
 7039 084c 80000000 		.4byte	.LVL161
 7040 0850 0400     		.2byte	0x4
 7041 0852 F3       		.byte	0xf3
 7042 0853 01       		.uleb128 0x1
 7043 0854 50       		.byte	0x50
 7044 0855 9F       		.byte	0x9f
 7045 0856 80000000 		.4byte	.LVL161
 7046 085a 82000000 		.4byte	.LVL162
 7047 085e 0100     		.2byte	0x1
 7048 0860 54       		.byte	0x54
 7049 0861 82000000 		.4byte	.LVL162
 7050 0865 84000000 		.4byte	.LVL163
 7051 0869 0400     		.2byte	0x4
 7052 086b F3       		.byte	0xf3
 7053 086c 01       		.uleb128 0x1
 7054 086d 50       		.byte	0x50
 7055 086e 9F       		.byte	0x9f
 7056 086f 84000000 		.4byte	.LVL163
 7057 0873 86000000 		.4byte	.LVL164
 7058 0877 0100     		.2byte	0x1
 7059 0879 54       		.byte	0x54
 7060 087a 86000000 		.4byte	.LVL164
 7061 087e 88000000 		.4byte	.LVL165
 7062 0882 0400     		.2byte	0x4
 7063 0884 F3       		.byte	0xf3
 7064 0885 01       		.uleb128 0x1
 7065 0886 50       		.byte	0x50
 7066 0887 9F       		.byte	0x9f
 7067 0888 88000000 		.4byte	.LVL165
 7068 088c 8A000000 		.4byte	.LVL166
 7069 0890 0100     		.2byte	0x1
 7070 0892 54       		.byte	0x54
 7071 0893 8A000000 		.4byte	.LVL166
 7072 0897 94000000 		.4byte	.LFE41
 7073 089b 0400     		.2byte	0x4
 7074 089d F3       		.byte	0xf3
 7075 089e 01       		.uleb128 0x1
 7076 089f 50       		.byte	0x50
 7077 08a0 9F       		.byte	0x9f
 7078 08a1 00000000 		.4byte	0
 7079 08a5 00000000 		.4byte	0
 7080              	.LLST41:
 7081 08a9 00000000 		.4byte	.LVL142
 7082 08ad 39000000 		.4byte	.LVL144-1
 7083 08b1 0100     		.2byte	0x1
 7084 08b3 51       		.byte	0x51
 7085 08b4 39000000 		.4byte	.LVL144-1
 7086 08b8 92000000 		.4byte	.LVL170
 7087 08bc 0100     		.2byte	0x1
 7088 08be 56       		.byte	0x56
 7089 08bf 92000000 		.4byte	.LVL170
 7090 08c3 94000000 		.4byte	.LFE41
 7091 08c7 0400     		.2byte	0x4
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 181


 7092 08c9 F3       		.byte	0xf3
 7093 08ca 01       		.uleb128 0x1
 7094 08cb 51       		.byte	0x51
 7095 08cc 9F       		.byte	0x9f
 7096 08cd 00000000 		.4byte	0
 7097 08d1 00000000 		.4byte	0
 7098              	.LLST42:
 7099 08d5 8A000000 		.4byte	.LVL166
 7100 08d9 92000000 		.4byte	.LVL168
 7101 08dd 0100     		.2byte	0x1
 7102 08df 54       		.byte	0x54
 7103 08e0 92000000 		.4byte	.LVL168
 7104 08e4 94000000 		.4byte	.LFE41
 7105 08e8 0100     		.2byte	0x1
 7106 08ea 50       		.byte	0x50
 7107 08eb 00000000 		.4byte	0
 7108 08ef 00000000 		.4byte	0
 7109              	.LLST43:
 7110 08f3 3C000000 		.4byte	.LVL145
 7111 08f7 5A000000 		.4byte	.LVL151
 7112 08fb 0100     		.2byte	0x1
 7113 08fd 50       		.byte	0x50
 7114 08fe 5A000000 		.4byte	.LVL151
 7115 0902 70000000 		.4byte	.LVL154
 7116 0906 0100     		.2byte	0x1
 7117 0908 55       		.byte	0x55
 7118 0909 70000000 		.4byte	.LVL154
 7119 090d 84000000 		.4byte	.LVL163
 7120 0911 0100     		.2byte	0x1
 7121 0913 50       		.byte	0x50
 7122 0914 84000000 		.4byte	.LVL163
 7123 0918 92000000 		.4byte	.LVL169
 7124 091c 0100     		.2byte	0x1
 7125 091e 55       		.byte	0x55
 7126 091f 00000000 		.4byte	0
 7127 0923 00000000 		.4byte	0
 7128              	.LLST44:
 7129 0927 06000000 		.4byte	.LVL143
 7130 092b 39000000 		.4byte	.LVL144-1
 7131 092f 0100     		.2byte	0x1
 7132 0931 50       		.byte	0x50
 7133 0932 39000000 		.4byte	.LVL144-1
 7134 0936 6E000000 		.4byte	.LVL153
 7135 093a 0100     		.2byte	0x1
 7136 093c 54       		.byte	0x54
 7137 093d 6E000000 		.4byte	.LVL153
 7138 0941 70000000 		.4byte	.LVL154
 7139 0945 0400     		.2byte	0x4
 7140 0947 F3       		.byte	0xf3
 7141 0948 01       		.uleb128 0x1
 7142 0949 50       		.byte	0x50
 7143 094a 9F       		.byte	0x9f
 7144 094b 70000000 		.4byte	.LVL154
 7145 094f 7A000000 		.4byte	.LVL158
 7146 0953 0100     		.2byte	0x1
 7147 0955 54       		.byte	0x54
 7148 0956 7A000000 		.4byte	.LVL158
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 182


 7149 095a 7C000000 		.4byte	.LVL159
 7150 095e 0400     		.2byte	0x4
 7151 0960 F3       		.byte	0xf3
 7152 0961 01       		.uleb128 0x1
 7153 0962 50       		.byte	0x50
 7154 0963 9F       		.byte	0x9f
 7155 0964 7C000000 		.4byte	.LVL159
 7156 0968 7E000000 		.4byte	.LVL160
 7157 096c 0100     		.2byte	0x1
 7158 096e 54       		.byte	0x54
 7159 096f 7E000000 		.4byte	.LVL160
 7160 0973 80000000 		.4byte	.LVL161
 7161 0977 0400     		.2byte	0x4
 7162 0979 F3       		.byte	0xf3
 7163 097a 01       		.uleb128 0x1
 7164 097b 50       		.byte	0x50
 7165 097c 9F       		.byte	0x9f
 7166 097d 80000000 		.4byte	.LVL161
 7167 0981 82000000 		.4byte	.LVL162
 7168 0985 0100     		.2byte	0x1
 7169 0987 54       		.byte	0x54
 7170 0988 82000000 		.4byte	.LVL162
 7171 098c 84000000 		.4byte	.LVL163
 7172 0990 0400     		.2byte	0x4
 7173 0992 F3       		.byte	0xf3
 7174 0993 01       		.uleb128 0x1
 7175 0994 50       		.byte	0x50
 7176 0995 9F       		.byte	0x9f
 7177 0996 84000000 		.4byte	.LVL163
 7178 099a 86000000 		.4byte	.LVL164
 7179 099e 0100     		.2byte	0x1
 7180 09a0 54       		.byte	0x54
 7181 09a1 86000000 		.4byte	.LVL164
 7182 09a5 88000000 		.4byte	.LVL165
 7183 09a9 0400     		.2byte	0x4
 7184 09ab F3       		.byte	0xf3
 7185 09ac 01       		.uleb128 0x1
 7186 09ad 50       		.byte	0x50
 7187 09ae 9F       		.byte	0x9f
 7188 09af 88000000 		.4byte	.LVL165
 7189 09b3 8A000000 		.4byte	.LVL166
 7190 09b7 0100     		.2byte	0x1
 7191 09b9 54       		.byte	0x54
 7192 09ba 8A000000 		.4byte	.LVL166
 7193 09be 94000000 		.4byte	.LFE41
 7194 09c2 0400     		.2byte	0x4
 7195 09c4 F3       		.byte	0xf3
 7196 09c5 01       		.uleb128 0x1
 7197 09c6 50       		.byte	0x50
 7198 09c7 9F       		.byte	0x9f
 7199 09c8 00000000 		.4byte	0
 7200 09cc 00000000 		.4byte	0
 7201              	.LLST45:
 7202 09d0 3E000000 		.4byte	.LVL146
 7203 09d4 4C000000 		.4byte	.LVL148
 7204 09d8 0100     		.2byte	0x1
 7205 09da 52       		.byte	0x52
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 183


 7206 09db 4C000000 		.4byte	.LVL148
 7207 09df 52000000 		.4byte	.LVL149
 7208 09e3 0300     		.2byte	0x3
 7209 09e5 72       		.byte	0x72
 7210 09e6 7F       		.sleb128 -1
 7211 09e7 9F       		.byte	0x9f
 7212 09e8 52000000 		.4byte	.LVL149
 7213 09ec 5F000000 		.4byte	.LVL152-1
 7214 09f0 0600     		.2byte	0x6
 7215 09f2 74       		.byte	0x74
 7216 09f3 38       		.sleb128 56
 7217 09f4 06       		.byte	0x6
 7218 09f5 31       		.byte	0x31
 7219 09f6 1C       		.byte	0x1c
 7220 09f7 9F       		.byte	0x9f
 7221 09f8 70000000 		.4byte	.LVL154
 7222 09fc 78000000 		.4byte	.LVL157
 7223 0a00 0600     		.2byte	0x6
 7224 0a02 74       		.byte	0x74
 7225 0a03 38       		.sleb128 56
 7226 0a04 06       		.byte	0x6
 7227 0a05 31       		.byte	0x31
 7228 0a06 1C       		.byte	0x1c
 7229 0a07 9F       		.byte	0x9f
 7230 0a08 7C000000 		.4byte	.LVL159
 7231 0a0c 80000000 		.4byte	.LVL161
 7232 0a10 0100     		.2byte	0x1
 7233 0a12 52       		.byte	0x52
 7234 0a13 80000000 		.4byte	.LVL161
 7235 0a17 82000000 		.4byte	.LVL162
 7236 0a1b 0600     		.2byte	0x6
 7237 0a1d 74       		.byte	0x74
 7238 0a1e 38       		.sleb128 56
 7239 0a1f 06       		.byte	0x6
 7240 0a20 31       		.byte	0x31
 7241 0a21 1C       		.byte	0x1c
 7242 0a22 9F       		.byte	0x9f
 7243 0a23 82000000 		.4byte	.LVL162
 7244 0a27 84000000 		.4byte	.LVL163
 7245 0a2b 0900     		.2byte	0x9
 7246 0a2d F3       		.byte	0xf3
 7247 0a2e 01       		.uleb128 0x1
 7248 0a2f 50       		.byte	0x50
 7249 0a30 23       		.byte	0x23
 7250 0a31 38       		.uleb128 0x38
 7251 0a32 06       		.byte	0x6
 7252 0a33 31       		.byte	0x31
 7253 0a34 1C       		.byte	0x1c
 7254 0a35 9F       		.byte	0x9f
 7255 0a36 00000000 		.4byte	0
 7256 0a3a 00000000 		.4byte	0
 7257              	.LLST46:
 7258 0a3e 4A000000 		.4byte	.LVL147
 7259 0a42 54000000 		.4byte	.LVL150
 7260 0a46 0100     		.2byte	0x1
 7261 0a48 53       		.byte	0x53
 7262 0a49 70000000 		.4byte	.LVL154
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 184


 7263 0a4d 72000000 		.4byte	.LVL155
 7264 0a51 0100     		.2byte	0x1
 7265 0a53 53       		.byte	0x53
 7266 0a54 72000000 		.4byte	.LVL155
 7267 0a58 74000000 		.4byte	.LVL156
 7268 0a5c 0300     		.2byte	0x3
 7269 0a5e 73       		.byte	0x73
 7270 0a5f 7F       		.sleb128 -1
 7271 0a60 9F       		.byte	0x9f
 7272 0a61 00000000 		.4byte	0
 7273 0a65 00000000 		.4byte	0
 7274              	.LLST47:
 7275 0a69 00000000 		.4byte	.LVL171
 7276 0a6d 31000000 		.4byte	.LVL173-1
 7277 0a71 0100     		.2byte	0x1
 7278 0a73 50       		.byte	0x50
 7279 0a74 31000000 		.4byte	.LVL173-1
 7280 0a78 26010000 		.4byte	.LVL203
 7281 0a7c 0100     		.2byte	0x1
 7282 0a7e 54       		.byte	0x54
 7283 0a7f 26010000 		.4byte	.LVL203
 7284 0a83 28010000 		.4byte	.LFE42
 7285 0a87 0400     		.2byte	0x4
 7286 0a89 F3       		.byte	0xf3
 7287 0a8a 01       		.uleb128 0x1
 7288 0a8b 50       		.byte	0x50
 7289 0a8c 9F       		.byte	0x9f
 7290 0a8d 00000000 		.4byte	0
 7291 0a91 00000000 		.4byte	0
 7292              	.LLST48:
 7293 0a95 00000000 		.4byte	.LVL171
 7294 0a99 31000000 		.4byte	.LVL173-1
 7295 0a9d 0100     		.2byte	0x1
 7296 0a9f 51       		.byte	0x51
 7297 0aa0 31000000 		.4byte	.LVL173-1
 7298 0aa4 26010000 		.4byte	.LVL204
 7299 0aa8 0100     		.2byte	0x1
 7300 0aaa 56       		.byte	0x56
 7301 0aab 26010000 		.4byte	.LVL204
 7302 0aaf 28010000 		.4byte	.LFE42
 7303 0ab3 0400     		.2byte	0x4
 7304 0ab5 F3       		.byte	0xf3
 7305 0ab6 01       		.uleb128 0x1
 7306 0ab7 51       		.byte	0x51
 7307 0ab8 9F       		.byte	0x9f
 7308 0ab9 00000000 		.4byte	0
 7309 0abd 00000000 		.4byte	0
 7310              	.LLST49:
 7311 0ac1 00000000 		.4byte	.LVL171
 7312 0ac5 31000000 		.4byte	.LVL173-1
 7313 0ac9 0100     		.2byte	0x1
 7314 0acb 52       		.byte	0x52
 7315 0acc 31000000 		.4byte	.LVL173-1
 7316 0ad0 D0000000 		.4byte	.LVL190
 7317 0ad4 0200     		.2byte	0x2
 7318 0ad6 91       		.byte	0x91
 7319 0ad7 5C       		.sleb128 -36
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 185


 7320 0ad8 D0000000 		.4byte	.LVL190
 7321 0adc D5000000 		.4byte	.LVL191-1
 7322 0ae0 0200     		.2byte	0x2
 7323 0ae2 71       		.byte	0x71
 7324 0ae3 00       		.sleb128 0
 7325 0ae4 D5000000 		.4byte	.LVL191-1
 7326 0ae8 28010000 		.4byte	.LFE42
 7327 0aec 0200     		.2byte	0x2
 7328 0aee 91       		.byte	0x91
 7329 0aef 5C       		.sleb128 -36
 7330 0af0 00000000 		.4byte	0
 7331 0af4 00000000 		.4byte	0
 7332              	.LLST50:
 7333 0af8 0A000000 		.4byte	.LVL172
 7334 0afc 50000000 		.4byte	.LVL174
 7335 0b00 0200     		.2byte	0x2
 7336 0b02 30       		.byte	0x30
 7337 0b03 9F       		.byte	0x9f
 7338 0b04 50000000 		.4byte	.LVL174
 7339 0b08 9C000000 		.4byte	.LVL184
 7340 0b0c 0100     		.2byte	0x1
 7341 0b0e 57       		.byte	0x57
 7342 0b0f 9C000000 		.4byte	.LVL184
 7343 0b13 9E000000 		.4byte	.LVL185
 7344 0b17 0200     		.2byte	0x2
 7345 0b19 31       		.byte	0x31
 7346 0b1a 9F       		.byte	0x9f
 7347 0b1b 9E000000 		.4byte	.LVL185
 7348 0b1f 26010000 		.4byte	.LVL205
 7349 0b23 0100     		.2byte	0x1
 7350 0b25 57       		.byte	0x57
 7351 0b26 00000000 		.4byte	0
 7352 0b2a 00000000 		.4byte	0
 7353              	.LLST51:
 7354 0b2e 0A000000 		.4byte	.LVL172
 7355 0b32 31000000 		.4byte	.LVL173-1
 7356 0b36 0100     		.2byte	0x1
 7357 0b38 50       		.byte	0x50
 7358 0b39 31000000 		.4byte	.LVL173-1
 7359 0b3d 26010000 		.4byte	.LVL203
 7360 0b41 0100     		.2byte	0x1
 7361 0b43 54       		.byte	0x54
 7362 0b44 26010000 		.4byte	.LVL203
 7363 0b48 28010000 		.4byte	.LFE42
 7364 0b4c 0400     		.2byte	0x4
 7365 0b4e F3       		.byte	0xf3
 7366 0b4f 01       		.uleb128 0x1
 7367 0b50 50       		.byte	0x50
 7368 0b51 9F       		.byte	0x9f
 7369 0b52 00000000 		.4byte	0
 7370 0b56 00000000 		.4byte	0
 7371              	.LLST52:
 7372 0b5a 56000000 		.4byte	.LVL176
 7373 0b5e 64000000 		.4byte	.LVL178
 7374 0b62 0100     		.2byte	0x1
 7375 0b64 55       		.byte	0x55
 7376 0b65 64000000 		.4byte	.LVL178
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 186


 7377 0b69 84000000 		.4byte	.LVL182
 7378 0b6d 0300     		.2byte	0x3
 7379 0b6f 75       		.byte	0x75
 7380 0b70 01       		.sleb128 1
 7381 0b71 9F       		.byte	0x9f
 7382 0b72 84000000 		.4byte	.LVL182
 7383 0b76 24010000 		.4byte	.LVL202
 7384 0b7a 0100     		.2byte	0x1
 7385 0b7c 55       		.byte	0x55
 7386 0b7d 00000000 		.4byte	0
 7387 0b81 00000000 		.4byte	0
 7388              	.LLST53:
 7389 0b85 00000000 		.4byte	.LVL206
 7390 0b89 1B000000 		.4byte	.LVL208-1
 7391 0b8d 0100     		.2byte	0x1
 7392 0b8f 50       		.byte	0x50
 7393 0b90 1B000000 		.4byte	.LVL208-1
 7394 0b94 08010000 		.4byte	.LVL238
 7395 0b98 0100     		.2byte	0x1
 7396 0b9a 54       		.byte	0x54
 7397 0b9b 08010000 		.4byte	.LVL238
 7398 0b9f 0A010000 		.4byte	.LFE43
 7399 0ba3 0400     		.2byte	0x4
 7400 0ba5 F3       		.byte	0xf3
 7401 0ba6 01       		.uleb128 0x1
 7402 0ba7 50       		.byte	0x50
 7403 0ba8 9F       		.byte	0x9f
 7404 0ba9 00000000 		.4byte	0
 7405 0bad 00000000 		.4byte	0
 7406              	.LLST54:
 7407 0bb1 00000000 		.4byte	.LVL206
 7408 0bb5 1B000000 		.4byte	.LVL208-1
 7409 0bb9 0100     		.2byte	0x1
 7410 0bbb 51       		.byte	0x51
 7411 0bbc 1B000000 		.4byte	.LVL208-1
 7412 0bc0 B2000000 		.4byte	.LVL226
 7413 0bc4 0200     		.2byte	0x2
 7414 0bc6 91       		.byte	0x91
 7415 0bc7 64       		.sleb128 -28
 7416 0bc8 B2000000 		.4byte	.LVL226
 7417 0bcc B7000000 		.4byte	.LVL227-1
 7418 0bd0 0200     		.2byte	0x2
 7419 0bd2 71       		.byte	0x71
 7420 0bd3 00       		.sleb128 0
 7421 0bd4 B7000000 		.4byte	.LVL227-1
 7422 0bd8 0A010000 		.4byte	.LFE43
 7423 0bdc 0200     		.2byte	0x2
 7424 0bde 91       		.byte	0x91
 7425 0bdf 64       		.sleb128 -28
 7426 0be0 00000000 		.4byte	0
 7427 0be4 00000000 		.4byte	0
 7428              	.LLST55:
 7429 0be8 08000000 		.4byte	.LVL207
 7430 0bec 3A000000 		.4byte	.LVL209
 7431 0bf0 0200     		.2byte	0x2
 7432 0bf2 30       		.byte	0x30
 7433 0bf3 9F       		.byte	0x9f
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 187


 7434 0bf4 3A000000 		.4byte	.LVL209
 7435 0bf8 7E000000 		.4byte	.LVL220
 7436 0bfc 0100     		.2byte	0x1
 7437 0bfe 55       		.byte	0x55
 7438 0bff 7E000000 		.4byte	.LVL220
 7439 0c03 80000000 		.4byte	.LVL221
 7440 0c07 0200     		.2byte	0x2
 7441 0c09 31       		.byte	0x31
 7442 0c0a 9F       		.byte	0x9f
 7443 0c0b 80000000 		.4byte	.LVL221
 7444 0c0f 08010000 		.4byte	.LVL239
 7445 0c13 0100     		.2byte	0x1
 7446 0c15 55       		.byte	0x55
 7447 0c16 00000000 		.4byte	0
 7448 0c1a 00000000 		.4byte	0
 7449              	.LLST56:
 7450 0c1e 08000000 		.4byte	.LVL207
 7451 0c22 1B000000 		.4byte	.LVL208-1
 7452 0c26 0100     		.2byte	0x1
 7453 0c28 50       		.byte	0x50
 7454 0c29 1B000000 		.4byte	.LVL208-1
 7455 0c2d 08010000 		.4byte	.LVL238
 7456 0c31 0100     		.2byte	0x1
 7457 0c33 54       		.byte	0x54
 7458 0c34 08010000 		.4byte	.LVL238
 7459 0c38 0A010000 		.4byte	.LFE43
 7460 0c3c 0400     		.2byte	0x4
 7461 0c3e F3       		.byte	0xf3
 7462 0c3f 01       		.uleb128 0x1
 7463 0c40 50       		.byte	0x50
 7464 0c41 9F       		.byte	0x9f
 7465 0c42 00000000 		.4byte	0
 7466 0c46 00000000 		.4byte	0
 7467              	.LLST57:
 7468 0c4a 40000000 		.4byte	.LVL211
 7469 0c4e 46000000 		.4byte	.LVL212
 7470 0c52 0100     		.2byte	0x1
 7471 0c54 53       		.byte	0x53
 7472 0c55 46000000 		.4byte	.LVL212
 7473 0c59 4A000000 		.4byte	.LVL213
 7474 0c5d 0300     		.2byte	0x3
 7475 0c5f 73       		.byte	0x73
 7476 0c60 01       		.sleb128 1
 7477 0c61 9F       		.byte	0x9f
 7478 0c62 4A000000 		.4byte	.LVL213
 7479 0c66 55000000 		.4byte	.LVL214-1
 7480 0c6a 0600     		.2byte	0x6
 7481 0c6c 74       		.byte	0x74
 7482 0c6d 38       		.sleb128 56
 7483 0c6e 06       		.byte	0x6
 7484 0c6f 23       		.byte	0x23
 7485 0c70 01       		.uleb128 0x1
 7486 0c71 9F       		.byte	0x9f
 7487 0c72 66000000 		.4byte	.LVL217
 7488 0c76 68000000 		.4byte	.LVL218
 7489 0c7a 0100     		.2byte	0x1
 7490 0c7c 53       		.byte	0x53
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 188


 7491 0c7d 00000000 		.4byte	0
 7492 0c81 00000000 		.4byte	0
 7493              	.LLST58:
 7494 0c85 00000000 		.4byte	.LVL240
 7495 0c89 31000000 		.4byte	.LVL242-1
 7496 0c8d 0100     		.2byte	0x1
 7497 0c8f 50       		.byte	0x50
 7498 0c90 31000000 		.4byte	.LVL242-1
 7499 0c94 26010000 		.4byte	.LVL273
 7500 0c98 0100     		.2byte	0x1
 7501 0c9a 54       		.byte	0x54
 7502 0c9b 26010000 		.4byte	.LVL273
 7503 0c9f 28010000 		.4byte	.LFE44
 7504 0ca3 0400     		.2byte	0x4
 7505 0ca5 F3       		.byte	0xf3
 7506 0ca6 01       		.uleb128 0x1
 7507 0ca7 50       		.byte	0x50
 7508 0ca8 9F       		.byte	0x9f
 7509 0ca9 00000000 		.4byte	0
 7510 0cad 00000000 		.4byte	0
 7511              	.LLST59:
 7512 0cb1 00000000 		.4byte	.LVL240
 7513 0cb5 31000000 		.4byte	.LVL242-1
 7514 0cb9 0100     		.2byte	0x1
 7515 0cbb 51       		.byte	0x51
 7516 0cbc 31000000 		.4byte	.LVL242-1
 7517 0cc0 26010000 		.4byte	.LVL274
 7518 0cc4 0100     		.2byte	0x1
 7519 0cc6 55       		.byte	0x55
 7520 0cc7 26010000 		.4byte	.LVL274
 7521 0ccb 28010000 		.4byte	.LFE44
 7522 0ccf 0400     		.2byte	0x4
 7523 0cd1 F3       		.byte	0xf3
 7524 0cd2 01       		.uleb128 0x1
 7525 0cd3 51       		.byte	0x51
 7526 0cd4 9F       		.byte	0x9f
 7527 0cd5 00000000 		.4byte	0
 7528 0cd9 00000000 		.4byte	0
 7529              	.LLST60:
 7530 0cdd 00000000 		.4byte	.LVL240
 7531 0ce1 31000000 		.4byte	.LVL242-1
 7532 0ce5 0100     		.2byte	0x1
 7533 0ce7 52       		.byte	0x52
 7534 0ce8 31000000 		.4byte	.LVL242-1
 7535 0cec D0000000 		.4byte	.LVL260
 7536 0cf0 0200     		.2byte	0x2
 7537 0cf2 91       		.byte	0x91
 7538 0cf3 64       		.sleb128 -28
 7539 0cf4 D0000000 		.4byte	.LVL260
 7540 0cf8 D5000000 		.4byte	.LVL261-1
 7541 0cfc 0200     		.2byte	0x2
 7542 0cfe 71       		.byte	0x71
 7543 0cff 00       		.sleb128 0
 7544 0d00 D5000000 		.4byte	.LVL261-1
 7545 0d04 28010000 		.4byte	.LFE44
 7546 0d08 0200     		.2byte	0x2
 7547 0d0a 91       		.byte	0x91
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 189


 7548 0d0b 64       		.sleb128 -28
 7549 0d0c 00000000 		.4byte	0
 7550 0d10 00000000 		.4byte	0
 7551              	.LLST61:
 7552 0d14 0A000000 		.4byte	.LVL241
 7553 0d18 50000000 		.4byte	.LVL243
 7554 0d1c 0200     		.2byte	0x2
 7555 0d1e 30       		.byte	0x30
 7556 0d1f 9F       		.byte	0x9f
 7557 0d20 50000000 		.4byte	.LVL243
 7558 0d24 5C000000 		.4byte	.LVL246
 7559 0d28 0100     		.2byte	0x1
 7560 0d2a 56       		.byte	0x56
 7561 0d2b 84000000 		.4byte	.LVL251
 7562 0d2f 9C000000 		.4byte	.LVL254
 7563 0d33 0100     		.2byte	0x1
 7564 0d35 56       		.byte	0x56
 7565 0d36 9C000000 		.4byte	.LVL254
 7566 0d3a 9E000000 		.4byte	.LVL255
 7567 0d3e 0200     		.2byte	0x2
 7568 0d40 31       		.byte	0x31
 7569 0d41 9F       		.byte	0x9f
 7570 0d42 9E000000 		.4byte	.LVL255
 7571 0d46 24010000 		.4byte	.LVL272
 7572 0d4a 0100     		.2byte	0x1
 7573 0d4c 56       		.byte	0x56
 7574 0d4d 00000000 		.4byte	0
 7575 0d51 00000000 		.4byte	0
 7576              	.LLST62:
 7577 0d55 5C000000 		.4byte	.LVL246
 7578 0d59 84000000 		.4byte	.LVL251
 7579 0d5d 0100     		.2byte	0x1
 7580 0d5f 56       		.byte	0x56
 7581 0d60 00000000 		.4byte	0
 7582 0d64 00000000 		.4byte	0
 7583              	.LLST63:
 7584 0d68 0A000000 		.4byte	.LVL241
 7585 0d6c 31000000 		.4byte	.LVL242-1
 7586 0d70 0100     		.2byte	0x1
 7587 0d72 50       		.byte	0x50
 7588 0d73 31000000 		.4byte	.LVL242-1
 7589 0d77 26010000 		.4byte	.LVL273
 7590 0d7b 0100     		.2byte	0x1
 7591 0d7d 54       		.byte	0x54
 7592 0d7e 26010000 		.4byte	.LVL273
 7593 0d82 28010000 		.4byte	.LFE44
 7594 0d86 0400     		.2byte	0x4
 7595 0d88 F3       		.byte	0xf3
 7596 0d89 01       		.uleb128 0x1
 7597 0d8a 50       		.byte	0x50
 7598 0d8b 9F       		.byte	0x9f
 7599 0d8c 00000000 		.4byte	0
 7600 0d90 00000000 		.4byte	0
 7601              	.LLST64:
 7602 0d94 56000000 		.4byte	.LVL245
 7603 0d98 63000000 		.4byte	.LVL247-1
 7604 0d9c 0100     		.2byte	0x1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 190


 7605 0d9e 53       		.byte	0x53
 7606 0d9f 84000000 		.4byte	.LVL251
 7607 0da3 86000000 		.4byte	.LVL252
 7608 0da7 0100     		.2byte	0x1
 7609 0da9 53       		.byte	0x53
 7610 0daa 00000000 		.4byte	0
 7611 0dae 00000000 		.4byte	0
 7612              	.LLST65:
 7613 0db2 00000000 		.4byte	.LVL275
 7614 0db6 33000000 		.4byte	.LVL277-1
 7615 0dba 0100     		.2byte	0x1
 7616 0dbc 50       		.byte	0x50
 7617 0dbd 33000000 		.4byte	.LVL277-1
 7618 0dc1 6E000000 		.4byte	.LVL284
 7619 0dc5 0100     		.2byte	0x1
 7620 0dc7 54       		.byte	0x54
 7621 0dc8 6E000000 		.4byte	.LVL284
 7622 0dcc 70000000 		.4byte	.LVL285
 7623 0dd0 0400     		.2byte	0x4
 7624 0dd2 F3       		.byte	0xf3
 7625 0dd3 01       		.uleb128 0x1
 7626 0dd4 50       		.byte	0x50
 7627 0dd5 9F       		.byte	0x9f
 7628 0dd6 70000000 		.4byte	.LVL285
 7629 0dda 7A000000 		.4byte	.LVL288
 7630 0dde 0100     		.2byte	0x1
 7631 0de0 54       		.byte	0x54
 7632 0de1 7A000000 		.4byte	.LVL288
 7633 0de5 7C000000 		.4byte	.LVL289
 7634 0de9 0400     		.2byte	0x4
 7635 0deb F3       		.byte	0xf3
 7636 0dec 01       		.uleb128 0x1
 7637 0ded 50       		.byte	0x50
 7638 0dee 9F       		.byte	0x9f
 7639 0def 7C000000 		.4byte	.LVL289
 7640 0df3 7E000000 		.4byte	.LVL290
 7641 0df7 0100     		.2byte	0x1
 7642 0df9 54       		.byte	0x54
 7643 0dfa 7E000000 		.4byte	.LVL290
 7644 0dfe 80000000 		.4byte	.LVL291
 7645 0e02 0400     		.2byte	0x4
 7646 0e04 F3       		.byte	0xf3
 7647 0e05 01       		.uleb128 0x1
 7648 0e06 50       		.byte	0x50
 7649 0e07 9F       		.byte	0x9f
 7650 0e08 80000000 		.4byte	.LVL291
 7651 0e0c 82000000 		.4byte	.LVL292
 7652 0e10 0100     		.2byte	0x1
 7653 0e12 54       		.byte	0x54
 7654 0e13 82000000 		.4byte	.LVL292
 7655 0e17 84000000 		.4byte	.LVL293
 7656 0e1b 0400     		.2byte	0x4
 7657 0e1d F3       		.byte	0xf3
 7658 0e1e 01       		.uleb128 0x1
 7659 0e1f 50       		.byte	0x50
 7660 0e20 9F       		.byte	0x9f
 7661 0e21 84000000 		.4byte	.LVL293
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 191


 7662 0e25 86000000 		.4byte	.LVL294
 7663 0e29 0100     		.2byte	0x1
 7664 0e2b 54       		.byte	0x54
 7665 0e2c 86000000 		.4byte	.LVL294
 7666 0e30 88000000 		.4byte	.LVL295
 7667 0e34 0400     		.2byte	0x4
 7668 0e36 F3       		.byte	0xf3
 7669 0e37 01       		.uleb128 0x1
 7670 0e38 50       		.byte	0x50
 7671 0e39 9F       		.byte	0x9f
 7672 0e3a 88000000 		.4byte	.LVL295
 7673 0e3e 8A000000 		.4byte	.LVL296
 7674 0e42 0100     		.2byte	0x1
 7675 0e44 54       		.byte	0x54
 7676 0e45 8A000000 		.4byte	.LVL296
 7677 0e49 96000000 		.4byte	.LFE45
 7678 0e4d 0400     		.2byte	0x4
 7679 0e4f F3       		.byte	0xf3
 7680 0e50 01       		.uleb128 0x1
 7681 0e51 50       		.byte	0x50
 7682 0e52 9F       		.byte	0x9f
 7683 0e53 00000000 		.4byte	0
 7684 0e57 00000000 		.4byte	0
 7685              	.LLST66:
 7686 0e5b 00000000 		.4byte	.LVL275
 7687 0e5f 33000000 		.4byte	.LVL277-1
 7688 0e63 0100     		.2byte	0x1
 7689 0e65 51       		.byte	0x51
 7690 0e66 33000000 		.4byte	.LVL277-1
 7691 0e6a 94000000 		.4byte	.LVL298
 7692 0e6e 0200     		.2byte	0x2
 7693 0e70 7D       		.byte	0x7d
 7694 0e71 00       		.sleb128 0
 7695 0e72 94000000 		.4byte	.LVL298
 7696 0e76 96000000 		.4byte	.LFE45
 7697 0e7a 0200     		.2byte	0x2
 7698 0e7c 91       		.byte	0x91
 7699 0e7d 60       		.sleb128 -32
 7700 0e7e 00000000 		.4byte	0
 7701 0e82 00000000 		.4byte	0
 7702              	.LLST67:
 7703 0e86 00000000 		.4byte	.LVL275
 7704 0e8a 33000000 		.4byte	.LVL277-1
 7705 0e8e 0100     		.2byte	0x1
 7706 0e90 52       		.byte	0x52
 7707 0e91 33000000 		.4byte	.LVL277-1
 7708 0e95 94000000 		.4byte	.LVL300
 7709 0e99 0100     		.2byte	0x1
 7710 0e9b 56       		.byte	0x56
 7711 0e9c 94000000 		.4byte	.LVL300
 7712 0ea0 96000000 		.4byte	.LFE45
 7713 0ea4 0400     		.2byte	0x4
 7714 0ea6 F3       		.byte	0xf3
 7715 0ea7 01       		.uleb128 0x1
 7716 0ea8 52       		.byte	0x52
 7717 0ea9 9F       		.byte	0x9f
 7718 0eaa 00000000 		.4byte	0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 192


 7719 0eae 00000000 		.4byte	0
 7720              	.LLST68:
 7721 0eb2 8A000000 		.4byte	.LVL296
 7722 0eb6 94000000 		.4byte	.LVL299
 7723 0eba 0100     		.2byte	0x1
 7724 0ebc 54       		.byte	0x54
 7725 0ebd 94000000 		.4byte	.LVL299
 7726 0ec1 96000000 		.4byte	.LFE45
 7727 0ec5 0100     		.2byte	0x1
 7728 0ec7 50       		.byte	0x50
 7729 0ec8 00000000 		.4byte	0
 7730 0ecc 00000000 		.4byte	0
 7731              	.LLST69:
 7732 0ed0 36000000 		.4byte	.LVL278
 7733 0ed4 46000000 		.4byte	.LVL281
 7734 0ed8 0100     		.2byte	0x1
 7735 0eda 50       		.byte	0x50
 7736 0edb 46000000 		.4byte	.LVL281
 7737 0edf 7C000000 		.4byte	.LVL289
 7738 0ee3 0200     		.2byte	0x2
 7739 0ee5 91       		.byte	0x91
 7740 0ee6 64       		.sleb128 -28
 7741 0ee7 7C000000 		.4byte	.LVL289
 7742 0eeb 80000000 		.4byte	.LVL291
 7743 0eef 0100     		.2byte	0x1
 7744 0ef1 50       		.byte	0x50
 7745 0ef2 80000000 		.4byte	.LVL291
 7746 0ef6 96000000 		.4byte	.LFE45
 7747 0efa 0200     		.2byte	0x2
 7748 0efc 91       		.byte	0x91
 7749 0efd 64       		.sleb128 -28
 7750 0efe 00000000 		.4byte	0
 7751 0f02 00000000 		.4byte	0
 7752              	.LLST70:
 7753 0f06 0A000000 		.4byte	.LVL276
 7754 0f0a 33000000 		.4byte	.LVL277-1
 7755 0f0e 0100     		.2byte	0x1
 7756 0f10 50       		.byte	0x50
 7757 0f11 33000000 		.4byte	.LVL277-1
 7758 0f15 6E000000 		.4byte	.LVL284
 7759 0f19 0100     		.2byte	0x1
 7760 0f1b 54       		.byte	0x54
 7761 0f1c 6E000000 		.4byte	.LVL284
 7762 0f20 70000000 		.4byte	.LVL285
 7763 0f24 0400     		.2byte	0x4
 7764 0f26 F3       		.byte	0xf3
 7765 0f27 01       		.uleb128 0x1
 7766 0f28 50       		.byte	0x50
 7767 0f29 9F       		.byte	0x9f
 7768 0f2a 70000000 		.4byte	.LVL285
 7769 0f2e 7A000000 		.4byte	.LVL288
 7770 0f32 0100     		.2byte	0x1
 7771 0f34 54       		.byte	0x54
 7772 0f35 7A000000 		.4byte	.LVL288
 7773 0f39 7C000000 		.4byte	.LVL289
 7774 0f3d 0400     		.2byte	0x4
 7775 0f3f F3       		.byte	0xf3
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 193


 7776 0f40 01       		.uleb128 0x1
 7777 0f41 50       		.byte	0x50
 7778 0f42 9F       		.byte	0x9f
 7779 0f43 7C000000 		.4byte	.LVL289
 7780 0f47 7E000000 		.4byte	.LVL290
 7781 0f4b 0100     		.2byte	0x1
 7782 0f4d 54       		.byte	0x54
 7783 0f4e 7E000000 		.4byte	.LVL290
 7784 0f52 80000000 		.4byte	.LVL291
 7785 0f56 0400     		.2byte	0x4
 7786 0f58 F3       		.byte	0xf3
 7787 0f59 01       		.uleb128 0x1
 7788 0f5a 50       		.byte	0x50
 7789 0f5b 9F       		.byte	0x9f
 7790 0f5c 80000000 		.4byte	.LVL291
 7791 0f60 82000000 		.4byte	.LVL292
 7792 0f64 0100     		.2byte	0x1
 7793 0f66 54       		.byte	0x54
 7794 0f67 82000000 		.4byte	.LVL292
 7795 0f6b 84000000 		.4byte	.LVL293
 7796 0f6f 0400     		.2byte	0x4
 7797 0f71 F3       		.byte	0xf3
 7798 0f72 01       		.uleb128 0x1
 7799 0f73 50       		.byte	0x50
 7800 0f74 9F       		.byte	0x9f
 7801 0f75 84000000 		.4byte	.LVL293
 7802 0f79 86000000 		.4byte	.LVL294
 7803 0f7d 0100     		.2byte	0x1
 7804 0f7f 54       		.byte	0x54
 7805 0f80 86000000 		.4byte	.LVL294
 7806 0f84 88000000 		.4byte	.LVL295
 7807 0f88 0400     		.2byte	0x4
 7808 0f8a F3       		.byte	0xf3
 7809 0f8b 01       		.uleb128 0x1
 7810 0f8c 50       		.byte	0x50
 7811 0f8d 9F       		.byte	0x9f
 7812 0f8e 88000000 		.4byte	.LVL295
 7813 0f92 8A000000 		.4byte	.LVL296
 7814 0f96 0100     		.2byte	0x1
 7815 0f98 54       		.byte	0x54
 7816 0f99 8A000000 		.4byte	.LVL296
 7817 0f9d 96000000 		.4byte	.LFE45
 7818 0fa1 0400     		.2byte	0x4
 7819 0fa3 F3       		.byte	0xf3
 7820 0fa4 01       		.uleb128 0x1
 7821 0fa5 50       		.byte	0x50
 7822 0fa6 9F       		.byte	0x9f
 7823 0fa7 00000000 		.4byte	0
 7824 0fab 00000000 		.4byte	0
 7825              	.LLST71:
 7826 0faf 38000000 		.4byte	.LVL279
 7827 0fb3 94000000 		.4byte	.LVL301
 7828 0fb7 0100     		.2byte	0x1
 7829 0fb9 57       		.byte	0x57
 7830 0fba 00000000 		.4byte	0
 7831 0fbe 00000000 		.4byte	0
 7832              	.LLST72:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 194


 7833 0fc2 42000000 		.4byte	.LVL280
 7834 0fc6 72000000 		.4byte	.LVL286
 7835 0fca 0100     		.2byte	0x1
 7836 0fcc 55       		.byte	0x55
 7837 0fcd 72000000 		.4byte	.LVL286
 7838 0fd1 74000000 		.4byte	.LVL287
 7839 0fd5 0300     		.2byte	0x3
 7840 0fd7 75       		.byte	0x75
 7841 0fd8 7F       		.sleb128 -1
 7842 0fd9 9F       		.byte	0x9f
 7843 0fda 80000000 		.4byte	.LVL291
 7844 0fde 8A000000 		.4byte	.LVL296
 7845 0fe2 0100     		.2byte	0x1
 7846 0fe4 55       		.byte	0x55
 7847 0fe5 00000000 		.4byte	0
 7848 0fe9 00000000 		.4byte	0
 7849              	.LLST73:
 7850 0fed 00000000 		.4byte	.LVL302
 7851 0ff1 37000000 		.4byte	.LVL304-1
 7852 0ff5 0100     		.2byte	0x1
 7853 0ff7 50       		.byte	0x50
 7854 0ff8 37000000 		.4byte	.LVL304-1
 7855 0ffc 4E000000 		.4byte	.LVL310
 7856 1000 0100     		.2byte	0x1
 7857 1002 54       		.byte	0x54
 7858 1003 4E000000 		.4byte	.LVL310
 7859 1007 50000000 		.4byte	.LVL311
 7860 100b 0400     		.2byte	0x4
 7861 100d F3       		.byte	0xf3
 7862 100e 01       		.uleb128 0x1
 7863 100f 50       		.byte	0x50
 7864 1010 9F       		.byte	0x9f
 7865 1011 50000000 		.4byte	.LVL311
 7866 1015 52000000 		.4byte	.LVL312
 7867 1019 0100     		.2byte	0x1
 7868 101b 54       		.byte	0x54
 7869 101c 52000000 		.4byte	.LVL312
 7870 1020 5C000000 		.4byte	.LFE46
 7871 1024 0400     		.2byte	0x4
 7872 1026 F3       		.byte	0xf3
 7873 1027 01       		.uleb128 0x1
 7874 1028 50       		.byte	0x50
 7875 1029 9F       		.byte	0x9f
 7876 102a 00000000 		.4byte	0
 7877 102e 00000000 		.4byte	0
 7878              	.LLST74:
 7879 1032 00000000 		.4byte	.LVL302
 7880 1036 37000000 		.4byte	.LVL304-1
 7881 103a 0100     		.2byte	0x1
 7882 103c 51       		.byte	0x51
 7883 103d 37000000 		.4byte	.LVL304-1
 7884 1041 5A000000 		.4byte	.LVL315
 7885 1045 0100     		.2byte	0x1
 7886 1047 55       		.byte	0x55
 7887 1048 5A000000 		.4byte	.LVL315
 7888 104c 5C000000 		.4byte	.LFE46
 7889 1050 0400     		.2byte	0x4
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 195


 7890 1052 F3       		.byte	0xf3
 7891 1053 01       		.uleb128 0x1
 7892 1054 51       		.byte	0x51
 7893 1055 9F       		.byte	0x9f
 7894 1056 00000000 		.4byte	0
 7895 105a 00000000 		.4byte	0
 7896              	.LLST75:
 7897 105e 4C000000 		.4byte	.LVL309
 7898 1062 50000000 		.4byte	.LVL311
 7899 1066 0200     		.2byte	0x2
 7900 1068 31       		.byte	0x31
 7901 1069 9F       		.byte	0x9f
 7902 106a 52000000 		.4byte	.LVL312
 7903 106e 5A000000 		.4byte	.LVL314
 7904 1072 0100     		.2byte	0x1
 7905 1074 54       		.byte	0x54
 7906 1075 5A000000 		.4byte	.LVL314
 7907 1079 5C000000 		.4byte	.LFE46
 7908 107d 0100     		.2byte	0x1
 7909 107f 50       		.byte	0x50
 7910 1080 00000000 		.4byte	0
 7911 1084 00000000 		.4byte	0
 7912              	.LLST76:
 7913 1088 3A000000 		.4byte	.LVL305
 7914 108c 46000000 		.4byte	.LVL307
 7915 1090 0100     		.2byte	0x1
 7916 1092 50       		.byte	0x50
 7917 1093 46000000 		.4byte	.LVL307
 7918 1097 50000000 		.4byte	.LVL311
 7919 109b 0100     		.2byte	0x1
 7920 109d 56       		.byte	0x56
 7921 109e 50000000 		.4byte	.LVL311
 7922 10a2 52000000 		.4byte	.LVL312
 7923 10a6 0100     		.2byte	0x1
 7924 10a8 50       		.byte	0x50
 7925 10a9 52000000 		.4byte	.LVL312
 7926 10ad 5A000000 		.4byte	.LVL316
 7927 10b1 0100     		.2byte	0x1
 7928 10b3 56       		.byte	0x56
 7929 10b4 00000000 		.4byte	0
 7930 10b8 00000000 		.4byte	0
 7931              	.LLST77:
 7932 10bc 42000000 		.4byte	.LVL306
 7933 10c0 50000000 		.4byte	.LVL311
 7934 10c4 0100     		.2byte	0x1
 7935 10c6 57       		.byte	0x57
 7936 10c7 00000000 		.4byte	0
 7937 10cb 00000000 		.4byte	0
 7938              	.LLST78:
 7939 10cf 06000000 		.4byte	.LVL303
 7940 10d3 37000000 		.4byte	.LVL304-1
 7941 10d7 0100     		.2byte	0x1
 7942 10d9 50       		.byte	0x50
 7943 10da 37000000 		.4byte	.LVL304-1
 7944 10de 4E000000 		.4byte	.LVL310
 7945 10e2 0100     		.2byte	0x1
 7946 10e4 54       		.byte	0x54
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 196


 7947 10e5 4E000000 		.4byte	.LVL310
 7948 10e9 50000000 		.4byte	.LVL311
 7949 10ed 0400     		.2byte	0x4
 7950 10ef F3       		.byte	0xf3
 7951 10f0 01       		.uleb128 0x1
 7952 10f1 50       		.byte	0x50
 7953 10f2 9F       		.byte	0x9f
 7954 10f3 50000000 		.4byte	.LVL311
 7955 10f7 52000000 		.4byte	.LVL312
 7956 10fb 0100     		.2byte	0x1
 7957 10fd 54       		.byte	0x54
 7958 10fe 52000000 		.4byte	.LVL312
 7959 1102 5C000000 		.4byte	.LFE46
 7960 1106 0400     		.2byte	0x4
 7961 1108 F3       		.byte	0xf3
 7962 1109 01       		.uleb128 0x1
 7963 110a 50       		.byte	0x50
 7964 110b 9F       		.byte	0x9f
 7965 110c 00000000 		.4byte	0
 7966 1110 00000000 		.4byte	0
 7967              	.LLST79:
 7968 1114 00000000 		.4byte	.LVL317
 7969 1118 0D000000 		.4byte	.LVL318-1
 7970 111c 0100     		.2byte	0x1
 7971 111e 50       		.byte	0x50
 7972 111f 0D000000 		.4byte	.LVL318-1
 7973 1123 10000000 		.4byte	.LVL319
 7974 1127 0100     		.2byte	0x1
 7975 1129 54       		.byte	0x54
 7976 112a 10000000 		.4byte	.LVL319
 7977 112e 18000000 		.4byte	.LFE47
 7978 1132 0400     		.2byte	0x4
 7979 1134 F3       		.byte	0xf3
 7980 1135 01       		.uleb128 0x1
 7981 1136 50       		.byte	0x50
 7982 1137 9F       		.byte	0x9f
 7983 1138 00000000 		.4byte	0
 7984 113c 00000000 		.4byte	0
 7985              	.LLST80:
 7986 1140 10000000 		.4byte	.LVL319
 7987 1144 16000000 		.4byte	.LVL321
 7988 1148 0100     		.2byte	0x1
 7989 114a 54       		.byte	0x54
 7990 114b 16000000 		.4byte	.LVL321
 7991 114f 18000000 		.4byte	.LFE47
 7992 1153 0100     		.2byte	0x1
 7993 1155 50       		.byte	0x50
 7994 1156 00000000 		.4byte	0
 7995 115a 00000000 		.4byte	0
 7996              	.LLST81:
 7997 115e 00000000 		.4byte	.LVL322
 7998 1162 0D000000 		.4byte	.LVL324-1
 7999 1166 0100     		.2byte	0x1
 8000 1168 50       		.byte	0x50
 8001 1169 0D000000 		.4byte	.LVL324-1
 8002 116d 12000000 		.4byte	.LVL325
 8003 1171 0100     		.2byte	0x1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 197


 8004 1173 54       		.byte	0x54
 8005 1174 12000000 		.4byte	.LVL325
 8006 1178 1C000000 		.4byte	.LFE48
 8007 117c 0400     		.2byte	0x4
 8008 117e F3       		.byte	0xf3
 8009 117f 01       		.uleb128 0x1
 8010 1180 50       		.byte	0x50
 8011 1181 9F       		.byte	0x9f
 8012 1182 00000000 		.4byte	0
 8013 1186 00000000 		.4byte	0
 8014              	.LLST82:
 8015 118a 14000000 		.4byte	.LVL326
 8016 118e 1A000000 		.4byte	.LVL328
 8017 1192 0100     		.2byte	0x1
 8018 1194 54       		.byte	0x54
 8019 1195 1A000000 		.4byte	.LVL328
 8020 1199 1C000000 		.4byte	.LFE48
 8021 119d 0100     		.2byte	0x1
 8022 119f 50       		.byte	0x50
 8023 11a0 00000000 		.4byte	0
 8024 11a4 00000000 		.4byte	0
 8025              	.LLST83:
 8026 11a8 04000000 		.4byte	.LVL323
 8027 11ac 0D000000 		.4byte	.LVL324-1
 8028 11b0 0100     		.2byte	0x1
 8029 11b2 50       		.byte	0x50
 8030 11b3 0D000000 		.4byte	.LVL324-1
 8031 11b7 12000000 		.4byte	.LVL325
 8032 11bb 0100     		.2byte	0x1
 8033 11bd 54       		.byte	0x54
 8034 11be 12000000 		.4byte	.LVL325
 8035 11c2 1C000000 		.4byte	.LFE48
 8036 11c6 0400     		.2byte	0x4
 8037 11c8 F3       		.byte	0xf3
 8038 11c9 01       		.uleb128 0x1
 8039 11ca 50       		.byte	0x50
 8040 11cb 9F       		.byte	0x9f
 8041 11cc 00000000 		.4byte	0
 8042 11d0 00000000 		.4byte	0
 8043              	.LLST84:
 8044 11d4 00000000 		.4byte	.LVL329
 8045 11d8 0A000000 		.4byte	.LVL330
 8046 11dc 0100     		.2byte	0x1
 8047 11de 50       		.byte	0x50
 8048 11df 0A000000 		.4byte	.LVL330
 8049 11e3 0C000000 		.4byte	.LFE49
 8050 11e7 0400     		.2byte	0x4
 8051 11e9 F3       		.byte	0xf3
 8052 11ea 01       		.uleb128 0x1
 8053 11eb 50       		.byte	0x50
 8054 11ec 9F       		.byte	0x9f
 8055 11ed 00000000 		.4byte	0
 8056 11f1 00000000 		.4byte	0
 8057              	.LLST85:
 8058 11f5 00000000 		.4byte	.LVL331
 8059 11f9 02000000 		.4byte	.LVL332
 8060 11fd 0100     		.2byte	0x1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 198


 8061 11ff 50       		.byte	0x50
 8062 1200 02000000 		.4byte	.LVL332
 8063 1204 04000000 		.4byte	.LFE51
 8064 1208 0400     		.2byte	0x4
 8065 120a F3       		.byte	0xf3
 8066 120b 01       		.uleb128 0x1
 8067 120c 50       		.byte	0x50
 8068 120d 9F       		.byte	0x9f
 8069 120e 00000000 		.4byte	0
 8070 1212 00000000 		.4byte	0
 8071              	.LLST86:
 8072 1216 00000000 		.4byte	.LVL334
 8073 121a 04000000 		.4byte	.LVL335
 8074 121e 0100     		.2byte	0x1
 8075 1220 50       		.byte	0x50
 8076 1221 04000000 		.4byte	.LVL335
 8077 1225 06000000 		.4byte	.LFE53
 8078 1229 0400     		.2byte	0x4
 8079 122b F3       		.byte	0xf3
 8080 122c 01       		.uleb128 0x1
 8081 122d 50       		.byte	0x50
 8082 122e 9F       		.byte	0x9f
 8083 122f 00000000 		.4byte	0
 8084 1233 00000000 		.4byte	0
 8085              	.LLST87:
 8086 1237 00000000 		.4byte	.LVL336
 8087 123b 10000000 		.4byte	.LVL337
 8088 123f 0100     		.2byte	0x1
 8089 1241 50       		.byte	0x50
 8090 1242 10000000 		.4byte	.LVL337
 8091 1246 12000000 		.4byte	.LVL338
 8092 124a 0400     		.2byte	0x4
 8093 124c F3       		.byte	0xf3
 8094 124d 01       		.uleb128 0x1
 8095 124e 50       		.byte	0x50
 8096 124f 9F       		.byte	0x9f
 8097 1250 12000000 		.4byte	.LVL338
 8098 1254 14000000 		.4byte	.LVL339
 8099 1258 0100     		.2byte	0x1
 8100 125a 50       		.byte	0x50
 8101 125b 14000000 		.4byte	.LVL339
 8102 125f 16000000 		.4byte	.LFE58
 8103 1263 0400     		.2byte	0x4
 8104 1265 F3       		.byte	0xf3
 8105 1266 01       		.uleb128 0x1
 8106 1267 50       		.byte	0x50
 8107 1268 9F       		.byte	0x9f
 8108 1269 00000000 		.4byte	0
 8109 126d 00000000 		.4byte	0
 8110              	.LLST88:
 8111 1271 00000000 		.4byte	.LVL340
 8112 1275 12000000 		.4byte	.LVL341
 8113 1279 0100     		.2byte	0x1
 8114 127b 50       		.byte	0x50
 8115 127c 12000000 		.4byte	.LVL341
 8116 1280 14000000 		.4byte	.LVL342
 8117 1284 0400     		.2byte	0x4
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 199


 8118 1286 F3       		.byte	0xf3
 8119 1287 01       		.uleb128 0x1
 8120 1288 50       		.byte	0x50
 8121 1289 9F       		.byte	0x9f
 8122 128a 14000000 		.4byte	.LVL342
 8123 128e 16000000 		.4byte	.LVL343
 8124 1292 0100     		.2byte	0x1
 8125 1294 50       		.byte	0x50
 8126 1295 16000000 		.4byte	.LVL343
 8127 1299 18000000 		.4byte	.LFE60
 8128 129d 0400     		.2byte	0x4
 8129 129f F3       		.byte	0xf3
 8130 12a0 01       		.uleb128 0x1
 8131 12a1 50       		.byte	0x50
 8132 12a2 9F       		.byte	0x9f
 8133 12a3 00000000 		.4byte	0
 8134 12a7 00000000 		.4byte	0
 8135              	.LLST89:
 8136 12ab 02000000 		.4byte	.LVL345
 8137 12af 06000000 		.4byte	.LVL346
 8138 12b3 0200     		.2byte	0x2
 8139 12b5 30       		.byte	0x30
 8140 12b6 9F       		.byte	0x9f
 8141 12b7 06000000 		.4byte	.LVL346
 8142 12bb 12000000 		.4byte	.LVL347
 8143 12bf 0100     		.2byte	0x1
 8144 12c1 53       		.byte	0x53
 8145 12c2 1A000000 		.4byte	.LVL348
 8146 12c6 20000000 		.4byte	.LVL350
 8147 12ca 0100     		.2byte	0x1
 8148 12cc 53       		.byte	0x53
 8149 12cd 00000000 		.4byte	0
 8150 12d1 00000000 		.4byte	0
 8151              	.LLST90:
 8152 12d5 00000000 		.4byte	.LVL351
 8153 12d9 14000000 		.4byte	.LVL354
 8154 12dd 0100     		.2byte	0x1
 8155 12df 50       		.byte	0x50
 8156 12e0 14000000 		.4byte	.LVL354
 8157 12e4 16000000 		.4byte	.LVL355
 8158 12e8 0400     		.2byte	0x4
 8159 12ea F3       		.byte	0xf3
 8160 12eb 01       		.uleb128 0x1
 8161 12ec 50       		.byte	0x50
 8162 12ed 9F       		.byte	0x9f
 8163 12ee 16000000 		.4byte	.LVL355
 8164 12f2 1E000000 		.4byte	.LVL357
 8165 12f6 0100     		.2byte	0x1
 8166 12f8 50       		.byte	0x50
 8167 12f9 1E000000 		.4byte	.LVL357
 8168 12fd 24000000 		.4byte	.LFE62
 8169 1301 0400     		.2byte	0x4
 8170 1303 F3       		.byte	0xf3
 8171 1304 01       		.uleb128 0x1
 8172 1305 50       		.byte	0x50
 8173 1306 9F       		.byte	0x9f
 8174 1307 00000000 		.4byte	0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 200


 8175 130b 00000000 		.4byte	0
 8176              	.LLST91:
 8177 130f 00000000 		.4byte	.LVL351
 8178 1313 04000000 		.4byte	.LVL352
 8179 1317 0200     		.2byte	0x2
 8180 1319 30       		.byte	0x30
 8181 131a 9F       		.byte	0x9f
 8182 131b 04000000 		.4byte	.LVL352
 8183 131f 12000000 		.4byte	.LVL353
 8184 1323 0100     		.2byte	0x1
 8185 1325 52       		.byte	0x52
 8186 1326 16000000 		.4byte	.LVL355
 8187 132a 1E000000 		.4byte	.LVL357
 8188 132e 0100     		.2byte	0x1
 8189 1330 52       		.byte	0x52
 8190 1331 00000000 		.4byte	0
 8191 1335 00000000 		.4byte	0
 8192              	.LLST92:
 8193 1339 00000000 		.4byte	.LVL351
 8194 133d 14000000 		.4byte	.LVL354
 8195 1341 0200     		.2byte	0x2
 8196 1343 30       		.byte	0x30
 8197 1344 9F       		.byte	0x9f
 8198 1345 14000000 		.4byte	.LVL354
 8199 1349 16000000 		.4byte	.LVL355
 8200 134d 0100     		.2byte	0x1
 8201 134f 50       		.byte	0x50
 8202 1350 16000000 		.4byte	.LVL355
 8203 1354 1E000000 		.4byte	.LVL357
 8204 1358 0200     		.2byte	0x2
 8205 135a 30       		.byte	0x30
 8206 135b 9F       		.byte	0x9f
 8207 135c 1E000000 		.4byte	.LVL357
 8208 1360 24000000 		.4byte	.LFE62
 8209 1364 0100     		.2byte	0x1
 8210 1366 50       		.byte	0x50
 8211 1367 00000000 		.4byte	0
 8212 136b 00000000 		.4byte	0
 8213              	.LLST93:
 8214 136f 00000000 		.4byte	.LVL358
 8215 1373 04000000 		.4byte	.LVL359
 8216 1377 0200     		.2byte	0x2
 8217 1379 30       		.byte	0x30
 8218 137a 9F       		.byte	0x9f
 8219 137b 04000000 		.4byte	.LVL359
 8220 137f 12000000 		.4byte	.LVL360
 8221 1383 0100     		.2byte	0x1
 8222 1385 52       		.byte	0x52
 8223 1386 1C000000 		.4byte	.LVL361
 8224 138a 22000000 		.4byte	.LVL363
 8225 138e 0100     		.2byte	0x1
 8226 1390 52       		.byte	0x52
 8227 1391 00000000 		.4byte	0
 8228 1395 00000000 		.4byte	0
 8229              	.LLST94:
 8230 1399 00000000 		.4byte	.LVL364
 8231 139d 0D000000 		.4byte	.LVL366-1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 201


 8232 13a1 0100     		.2byte	0x1
 8233 13a3 50       		.byte	0x50
 8234 13a4 0D000000 		.4byte	.LVL366-1
 8235 13a8 14000000 		.4byte	.LVL368
 8236 13ac 0100     		.2byte	0x1
 8237 13ae 54       		.byte	0x54
 8238 13af 14000000 		.4byte	.LVL368
 8239 13b3 16000000 		.4byte	.LFE50
 8240 13b7 0400     		.2byte	0x4
 8241 13b9 F3       		.byte	0xf3
 8242 13ba 01       		.uleb128 0x1
 8243 13bb 50       		.byte	0x50
 8244 13bc 9F       		.byte	0x9f
 8245 13bd 00000000 		.4byte	0
 8246 13c1 00000000 		.4byte	0
 8247              	.LLST95:
 8248 13c5 04000000 		.4byte	.LVL365
 8249 13c9 0D000000 		.4byte	.LVL366-1
 8250 13cd 0100     		.2byte	0x1
 8251 13cf 50       		.byte	0x50
 8252 13d0 0D000000 		.4byte	.LVL366-1
 8253 13d4 14000000 		.4byte	.LVL368
 8254 13d8 0100     		.2byte	0x1
 8255 13da 54       		.byte	0x54
 8256 13db 14000000 		.4byte	.LVL368
 8257 13df 16000000 		.4byte	.LFE50
 8258 13e3 0400     		.2byte	0x4
 8259 13e5 F3       		.byte	0xf3
 8260 13e6 01       		.uleb128 0x1
 8261 13e7 50       		.byte	0x50
 8262 13e8 9F       		.byte	0x9f
 8263 13e9 00000000 		.4byte	0
 8264 13ed 00000000 		.4byte	0
 8265              	.LLST96:
 8266 13f1 00000000 		.4byte	.LVL369
 8267 13f5 0B000000 		.4byte	.LVL371-1
 8268 13f9 0100     		.2byte	0x1
 8269 13fb 50       		.byte	0x50
 8270 13fc 0B000000 		.4byte	.LVL371-1
 8271 1400 48000000 		.4byte	.LVL375
 8272 1404 0100     		.2byte	0x1
 8273 1406 54       		.byte	0x54
 8274 1407 48000000 		.4byte	.LVL375
 8275 140b 4A000000 		.4byte	.LFE64
 8276 140f 0400     		.2byte	0x4
 8277 1411 F3       		.byte	0xf3
 8278 1412 01       		.uleb128 0x1
 8279 1413 50       		.byte	0x50
 8280 1414 9F       		.byte	0x9f
 8281 1415 00000000 		.4byte	0
 8282 1419 00000000 		.4byte	0
 8283              	.LLST97:
 8284 141d 00000000 		.4byte	.LVL369
 8285 1421 0B000000 		.4byte	.LVL371-1
 8286 1425 0100     		.2byte	0x1
 8287 1427 51       		.byte	0x51
 8288 1428 0B000000 		.4byte	.LVL371-1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 202


 8289 142c 48000000 		.4byte	.LVL376
 8290 1430 0100     		.2byte	0x1
 8291 1432 55       		.byte	0x55
 8292 1433 48000000 		.4byte	.LVL376
 8293 1437 4A000000 		.4byte	.LFE64
 8294 143b 0400     		.2byte	0x4
 8295 143d F3       		.byte	0xf3
 8296 143e 01       		.uleb128 0x1
 8297 143f 51       		.byte	0x51
 8298 1440 9F       		.byte	0x9f
 8299 1441 00000000 		.4byte	0
 8300 1445 00000000 		.4byte	0
 8301              	.LLST98:
 8302 1449 00000000 		.4byte	.LVL369
 8303 144d 0B000000 		.4byte	.LVL371-1
 8304 1451 0100     		.2byte	0x1
 8305 1453 52       		.byte	0x52
 8306 1454 0B000000 		.4byte	.LVL371-1
 8307 1458 48000000 		.4byte	.LVL377
 8308 145c 0100     		.2byte	0x1
 8309 145e 56       		.byte	0x56
 8310 145f 48000000 		.4byte	.LVL377
 8311 1463 4A000000 		.4byte	.LFE64
 8312 1467 0400     		.2byte	0x4
 8313 1469 F3       		.byte	0xf3
 8314 146a 01       		.uleb128 0x1
 8315 146b 52       		.byte	0x52
 8316 146c 9F       		.byte	0x9f
 8317 146d 00000000 		.4byte	0
 8318 1471 00000000 		.4byte	0
 8319              	.LLST99:
 8320 1475 08000000 		.4byte	.LVL370
 8321 1479 0B000000 		.4byte	.LVL371-1
 8322 147d 0100     		.2byte	0x1
 8323 147f 50       		.byte	0x50
 8324 1480 0B000000 		.4byte	.LVL371-1
 8325 1484 48000000 		.4byte	.LVL375
 8326 1488 0100     		.2byte	0x1
 8327 148a 54       		.byte	0x54
 8328 148b 48000000 		.4byte	.LVL375
 8329 148f 4A000000 		.4byte	.LFE64
 8330 1493 0400     		.2byte	0x4
 8331 1495 F3       		.byte	0xf3
 8332 1496 01       		.uleb128 0x1
 8333 1497 50       		.byte	0x50
 8334 1498 9F       		.byte	0x9f
 8335 1499 00000000 		.4byte	0
 8336 149d 00000000 		.4byte	0
 8337              		.section	.debug_aranges,"",%progbits
 8338 0000 FC000000 		.4byte	0xfc
 8339 0004 0200     		.2byte	0x2
 8340 0006 00000000 		.4byte	.Ldebug_info0
 8341 000a 04       		.byte	0x4
 8342 000b 00       		.byte	0
 8343 000c 0000     		.2byte	0
 8344 000e 0000     		.2byte	0
 8345 0010 00000000 		.4byte	.LFB59
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 203


 8346 0014 1E000000 		.4byte	.LFE59-.LFB59
 8347 0018 00000000 		.4byte	.LFB57
 8348 001c 1C000000 		.4byte	.LFE57-.LFB57
 8349 0020 00000000 		.4byte	.LFB54
 8350 0024 5E000000 		.4byte	.LFE54-.LFB54
 8351 0028 00000000 		.4byte	.LFB55
 8352 002c 24000000 		.4byte	.LFE55-.LFB55
 8353 0030 00000000 		.4byte	.LFB56
 8354 0034 6E000000 		.4byte	.LFE56-.LFB56
 8355 0038 00000000 		.4byte	.LFB36
 8356 003c 6C000000 		.4byte	.LFE36-.LFB36
 8357 0040 00000000 		.4byte	.LFB38
 8358 0044 22000000 		.4byte	.LFE38-.LFB38
 8359 0048 00000000 		.4byte	.LFB37
 8360 004c 3E000000 		.4byte	.LFE37-.LFB37
 8361 0050 00000000 		.4byte	.LFB39
 8362 0054 48010000 		.4byte	.LFE39-.LFB39
 8363 0058 00000000 		.4byte	.LFB40
 8364 005c B6000000 		.4byte	.LFE40-.LFB40
 8365 0060 00000000 		.4byte	.LFB41
 8366 0064 94000000 		.4byte	.LFE41-.LFB41
 8367 0068 00000000 		.4byte	.LFB42
 8368 006c 28010000 		.4byte	.LFE42-.LFB42
 8369 0070 00000000 		.4byte	.LFB43
 8370 0074 0A010000 		.4byte	.LFE43-.LFB43
 8371 0078 00000000 		.4byte	.LFB44
 8372 007c 28010000 		.4byte	.LFE44-.LFB44
 8373 0080 00000000 		.4byte	.LFB45
 8374 0084 96000000 		.4byte	.LFE45-.LFB45
 8375 0088 00000000 		.4byte	.LFB46
 8376 008c 5C000000 		.4byte	.LFE46-.LFB46
 8377 0090 00000000 		.4byte	.LFB47
 8378 0094 18000000 		.4byte	.LFE47-.LFB47
 8379 0098 00000000 		.4byte	.LFB48
 8380 009c 1C000000 		.4byte	.LFE48-.LFB48
 8381 00a0 00000000 		.4byte	.LFB49
 8382 00a4 0C000000 		.4byte	.LFE49-.LFB49
 8383 00a8 00000000 		.4byte	.LFB51
 8384 00ac 04000000 		.4byte	.LFE51-.LFB51
 8385 00b0 00000000 		.4byte	.LFB52
 8386 00b4 04000000 		.4byte	.LFE52-.LFB52
 8387 00b8 00000000 		.4byte	.LFB53
 8388 00bc 06000000 		.4byte	.LFE53-.LFB53
 8389 00c0 00000000 		.4byte	.LFB58
 8390 00c4 16000000 		.4byte	.LFE58-.LFB58
 8391 00c8 00000000 		.4byte	.LFB60
 8392 00cc 18000000 		.4byte	.LFE60-.LFB60
 8393 00d0 00000000 		.4byte	.LFB61
 8394 00d4 28000000 		.4byte	.LFE61-.LFB61
 8395 00d8 00000000 		.4byte	.LFB62
 8396 00dc 24000000 		.4byte	.LFE62-.LFB62
 8397 00e0 00000000 		.4byte	.LFB63
 8398 00e4 28000000 		.4byte	.LFE63-.LFB63
 8399 00e8 00000000 		.4byte	.LFB50
 8400 00ec 16000000 		.4byte	.LFE50-.LFB50
 8401 00f0 00000000 		.4byte	.LFB64
 8402 00f4 4A000000 		.4byte	.LFE64-.LFB64
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 204


 8403 00f8 00000000 		.4byte	0
 8404 00fc 00000000 		.4byte	0
 8405              		.section	.debug_ranges,"",%progbits
 8406              	.Ldebug_ranges0:
 8407 0000 5E000000 		.4byte	.LBB4
 8408 0004 9C000000 		.4byte	.LBE4
 8409 0008 A0000000 		.4byte	.LBB5
 8410 000c AA000000 		.4byte	.LBE5
 8411 0010 00000000 		.4byte	0
 8412 0014 00000000 		.4byte	0
 8413 0018 44000000 		.4byte	.LBB7
 8414 001c 7C000000 		.4byte	.LBE7
 8415 0020 80000000 		.4byte	.LBB8
 8416 0024 8A000000 		.4byte	.LBE8
 8417 0028 00000000 		.4byte	0
 8418 002c 00000000 		.4byte	0
 8419 0030 3C000000 		.4byte	.LBB13
 8420 0034 7C000000 		.4byte	.LBE13
 8421 0038 80000000 		.4byte	.LBB14
 8422 003c 8A000000 		.4byte	.LBE14
 8423 0040 00000000 		.4byte	0
 8424 0044 00000000 		.4byte	0
 8425 0048 00000000 		.4byte	.LFB59
 8426 004c 1E000000 		.4byte	.LFE59
 8427 0050 00000000 		.4byte	.LFB57
 8428 0054 1C000000 		.4byte	.LFE57
 8429 0058 00000000 		.4byte	.LFB54
 8430 005c 5E000000 		.4byte	.LFE54
 8431 0060 00000000 		.4byte	.LFB55
 8432 0064 24000000 		.4byte	.LFE55
 8433 0068 00000000 		.4byte	.LFB56
 8434 006c 6E000000 		.4byte	.LFE56
 8435 0070 00000000 		.4byte	.LFB36
 8436 0074 6C000000 		.4byte	.LFE36
 8437 0078 00000000 		.4byte	.LFB38
 8438 007c 22000000 		.4byte	.LFE38
 8439 0080 00000000 		.4byte	.LFB37
 8440 0084 3E000000 		.4byte	.LFE37
 8441 0088 00000000 		.4byte	.LFB39
 8442 008c 48010000 		.4byte	.LFE39
 8443 0090 00000000 		.4byte	.LFB40
 8444 0094 B6000000 		.4byte	.LFE40
 8445 0098 00000000 		.4byte	.LFB41
 8446 009c 94000000 		.4byte	.LFE41
 8447 00a0 00000000 		.4byte	.LFB42
 8448 00a4 28010000 		.4byte	.LFE42
 8449 00a8 00000000 		.4byte	.LFB43
 8450 00ac 0A010000 		.4byte	.LFE43
 8451 00b0 00000000 		.4byte	.LFB44
 8452 00b4 28010000 		.4byte	.LFE44
 8453 00b8 00000000 		.4byte	.LFB45
 8454 00bc 96000000 		.4byte	.LFE45
 8455 00c0 00000000 		.4byte	.LFB46
 8456 00c4 5C000000 		.4byte	.LFE46
 8457 00c8 00000000 		.4byte	.LFB47
 8458 00cc 18000000 		.4byte	.LFE47
 8459 00d0 00000000 		.4byte	.LFB48
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 205


 8460 00d4 1C000000 		.4byte	.LFE48
 8461 00d8 00000000 		.4byte	.LFB49
 8462 00dc 0C000000 		.4byte	.LFE49
 8463 00e0 00000000 		.4byte	.LFB51
 8464 00e4 04000000 		.4byte	.LFE51
 8465 00e8 00000000 		.4byte	.LFB52
 8466 00ec 04000000 		.4byte	.LFE52
 8467 00f0 00000000 		.4byte	.LFB53
 8468 00f4 06000000 		.4byte	.LFE53
 8469 00f8 00000000 		.4byte	.LFB58
 8470 00fc 16000000 		.4byte	.LFE58
 8471 0100 00000000 		.4byte	.LFB60
 8472 0104 18000000 		.4byte	.LFE60
 8473 0108 00000000 		.4byte	.LFB61
 8474 010c 28000000 		.4byte	.LFE61
 8475 0110 00000000 		.4byte	.LFB62
 8476 0114 24000000 		.4byte	.LFE62
 8477 0118 00000000 		.4byte	.LFB63
 8478 011c 28000000 		.4byte	.LFE63
 8479 0120 00000000 		.4byte	.LFB50
 8480 0124 16000000 		.4byte	.LFE50
 8481 0128 00000000 		.4byte	.LFB64
 8482 012c 4A000000 		.4byte	.LFE64
 8483 0130 00000000 		.4byte	0
 8484 0134 00000000 		.4byte	0
 8485              		.section	.debug_line,"",%progbits
 8486              	.Ldebug_line0:
 8487 0000 1C080000 		.section	.debug_str,"MS",%progbits,1
 8487      02005002 
 8487      00000201 
 8487      FB0E0D00 
 8487      01010101 
 8488              	.LASF90:
 8489 0000 78517565 		.ascii	"xQueueGenericSendFromISR\000"
 8489      75654765 
 8489      6E657269 
 8489      6353656E 
 8489      6446726F 
 8490              	.LASF57:
 8491 0019 75635175 		.ascii	"ucQueueType\000"
 8491      65756554 
 8491      79706500 
 8492              	.LASF97:
 8493 0025 78517565 		.ascii	"xQueuePeek\000"
 8493      75655065 
 8493      656B00
 8494              	.LASF106:
 8495 0030 75635175 		.ascii	"ucQueueGetQueueType\000"
 8495      65756547 
 8495      65745175 
 8495      65756554 
 8495      79706500 
 8496              	.LASF101:
 8497 0044 75785175 		.ascii	"uxQueueMessagesWaiting\000"
 8497      6575654D 
 8497      65737361 
 8497      67657357 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 206


 8497      61697469 
 8498              	.LASF3:
 8499 005b 73697A65 		.ascii	"size_t\000"
 8499      5F7400
 8500              	.LASF32:
 8501 0062 4D696E69 		.ascii	"MiniListItem_t\000"
 8501      4C697374 
 8501      4974656D 
 8501      5F7400
 8502              	.LASF41:
 8503 0071 54696D65 		.ascii	"TimeOut_t\000"
 8503      4F75745F 
 8503      7400
 8504              	.LASF64:
 8505 007b 51756575 		.ascii	"QueueRegistryItem_t\000"
 8505      65526567 
 8505      69737472 
 8505      79497465 
 8505      6D5F7400 
 8506              	.LASF91:
 8507 008f 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 8507      67686572 
 8507      5072696F 
 8507      72697479 
 8507      5461736B 
 8508              	.LASF107:
 8509 00a9 78517565 		.ascii	"xQueueIsQueueEmptyFromISR\000"
 8509      75654973 
 8509      51756575 
 8509      65456D70 
 8509      74794672 
 8510              	.LASF66:
 8511 00c3 70727649 		.ascii	"prvIsQueueEmpty\000"
 8511      73517565 
 8511      7565456D 
 8511      70747900 
 8512              	.LASF109:
 8513 00d3 76517565 		.ascii	"vQueueSetQueueNumber\000"
 8513      75655365 
 8513      74517565 
 8513      75654E75 
 8513      6D626572 
 8514              	.LASF100:
 8515 00e8 78517565 		.ascii	"xQueuePeekFromISR\000"
 8515      75655065 
 8515      656B4672 
 8515      6F6D4953 
 8515      5200
 8516              	.LASF73:
 8517 00fa 70727643 		.ascii	"prvCopyDataFromQueue\000"
 8517      6F707944 
 8517      61746146 
 8517      726F6D51 
 8517      75657565 
 8518              	.LASF80:
 8519 010f 70784E65 		.ascii	"pxNewQueue\000"
 8519      77517565 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 207


 8519      756500
 8520              	.LASF13:
 8521 011a 6C6F6E67 		.ascii	"long long unsigned int\000"
 8521      206C6F6E 
 8521      6720756E 
 8521      7369676E 
 8521      65642069 
 8522              	.LASF76:
 8523 0131 784E6577 		.ascii	"xNewQueue\000"
 8523      51756575 
 8523      6500
 8524              	.LASF69:
 8525 013b 70727643 		.ascii	"prvCopyDataToQueue\000"
 8525      6F707944 
 8525      61746154 
 8525      6F517565 
 8525      756500
 8526              	.LASF60:
 8527 014e 51554555 		.ascii	"QUEUE_REGISTRY_ITEM\000"
 8527      455F5245 
 8527      47495354 
 8527      52595F49 
 8527      54454D00 
 8528              	.LASF4:
 8529 0162 5F5F696E 		.ascii	"__int8_t\000"
 8529      74385F74 
 8529      00
 8530              	.LASF38:
 8531 016b 7854494D 		.ascii	"xTIME_OUT\000"
 8531      455F4F55 
 8531      5400
 8532              	.LASF31:
 8533 0175 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 8533      495F4C49 
 8533      53545F49 
 8533      54454D00 
 8534              	.LASF1:
 8535 0185 6C6F6E67 		.ascii	"long long int\000"
 8535      206C6F6E 
 8535      6720696E 
 8535      7400
 8536              	.LASF5:
 8537 0193 7369676E 		.ascii	"signed char\000"
 8537      65642063 
 8537      68617200 
 8538              	.LASF63:
 8539 019f 78517565 		.ascii	"xQueueRegistryItem\000"
 8539      75655265 
 8539      67697374 
 8539      72794974 
 8539      656D00
 8540              	.LASF85:
 8541 01b2 78546963 		.ascii	"xTicksToWait\000"
 8541      6B73546F 
 8541      57616974 
 8541      00
 8542              	.LASF98:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 208


 8543 01bf 70634F72 		.ascii	"pcOriginalReadPosition\000"
 8543      6967696E 
 8543      616C5265 
 8543      6164506F 
 8543      73697469 
 8544              	.LASF10:
 8545 01d6 6C6F6E67 		.ascii	"long int\000"
 8545      20696E74 
 8545      00
 8546              	.LASF55:
 8547 01df 6354784C 		.ascii	"cTxLock\000"
 8547      6F636B00 
 8548              	.LASF138:
 8549 01e7 6D656D63 		.ascii	"memcpy\000"
 8549      707900
 8550              	.LASF56:
 8551 01ee 75785175 		.ascii	"uxQueueNumber\000"
 8551      6575654E 
 8551      756D6265 
 8551      7200
 8552              	.LASF23:
 8553 01fc 5469636B 		.ascii	"TickType_t\000"
 8553      54797065 
 8553      5F7400
 8554              	.LASF20:
 8555 0207 646F7562 		.ascii	"double\000"
 8555      6C6500
 8556              	.LASF43:
 8557 020e 70635265 		.ascii	"pcReadFrom\000"
 8557      61644672 
 8557      6F6D00
 8558              	.LASF21:
 8559 0219 42617365 		.ascii	"BaseType_t\000"
 8559      54797065 
 8559      5F7400
 8560              	.LASF89:
 8561 0224 7854696D 		.ascii	"xTimeOut\000"
 8561      654F7574 
 8561      00
 8562              	.LASF96:
 8563 022d 75785365 		.ascii	"uxSemaphoreCount\000"
 8563      6D617068 
 8563      6F726543 
 8563      6F756E74 
 8563      00
 8564              	.LASF77:
 8565 023e 70727649 		.ascii	"prvInitialiseNewQueue\000"
 8565      6E697469 
 8565      616C6973 
 8565      654E6577 
 8565      51756575 
 8566              	.LASF11:
 8567 0254 5F5F7569 		.ascii	"__uint32_t\000"
 8567      6E743332 
 8567      5F7400
 8568              	.LASF39:
 8569 025f 784F7665 		.ascii	"xOverflowCount\000"
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 209


 8569      72666C6F 
 8569      77436F75 
 8569      6E7400
 8570              	.LASF123:
 8571 026e 7076506F 		.ascii	"pvPortMalloc\000"
 8571      72744D61 
 8571      6C6C6F63 
 8571      00
 8572              	.LASF114:
 8573 027b 76517565 		.ascii	"vQueueDelete\000"
 8573      75654465 
 8573      6C657465 
 8573      00
 8574              	.LASF128:
 8575 0288 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 8575      6B506C61 
 8575      63654F6E 
 8575      4576656E 
 8575      744C6973 
 8576              	.LASF46:
 8577 029e 70634865 		.ascii	"pcHead\000"
 8577      616400
 8578              	.LASF27:
 8579 02a5 70764F77 		.ascii	"pvOwner\000"
 8579      6E657200 
 8580              	.LASF36:
 8581 02ad 784C6973 		.ascii	"xListEnd\000"
 8581      74456E64 
 8581      00
 8582              	.LASF68:
 8583 02b6 78526574 		.ascii	"xReturn\000"
 8583      75726E00 
 8584              	.LASF40:
 8585 02be 7854696D 		.ascii	"xTimeOnEntering\000"
 8585      654F6E45 
 8585      6E746572 
 8585      696E6700 
 8586              	.LASF34:
 8587 02ce 75784E75 		.ascii	"uxNumberOfItems\000"
 8587      6D626572 
 8587      4F664974 
 8587      656D7300 
 8588              	.LASF12:
 8589 02de 6C6F6E67 		.ascii	"long unsigned int\000"
 8589      20756E73 
 8589      69676E65 
 8589      6420696E 
 8589      7400
 8590              	.LASF135:
 8591 02f0 536F7572 		.ascii	"Source\\FreeRTOS\\10.0.1\\Source\\queue.c\000"
 8591      63655C46 
 8591      72656552 
 8591      544F535C 
 8591      31302E30 
 8592              	.LASF95:
 8593 0316 78517565 		.ascii	"xQueueSemaphoreTake\000"
 8593      75655365 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 210


 8593      6D617068 
 8593      6F726554 
 8593      616B6500 
 8594              	.LASF110:
 8595 032a 76517565 		.ascii	"vQueueAddToRegistry\000"
 8595      75654164 
 8595      64546F52 
 8595      65676973 
 8595      74727900 
 8596              	.LASF84:
 8597 033e 78517565 		.ascii	"xQueueGenericSend\000"
 8597      75654765 
 8597      6E657269 
 8597      6353656E 
 8597      6400
 8598              	.LASF131:
 8599 0350 76436C65 		.ascii	"vClearInterruptMaskFromISR\000"
 8599      6172496E 
 8599      74657272 
 8599      7570744D 
 8599      61736B46 
 8600              	.LASF9:
 8601 036b 73686F72 		.ascii	"short unsigned int\000"
 8601      7420756E 
 8601      7369676E 
 8601      65642069 
 8601      6E7400
 8602              	.LASF88:
 8603 037e 78596965 		.ascii	"xYieldRequired\000"
 8603      6C645265 
 8603      71756972 
 8603      656400
 8604              	.LASF94:
 8605 038d 78517565 		.ascii	"xQueueReceive\000"
 8605      75655265 
 8605      63656976 
 8605      6500
 8606              	.LASF102:
 8607 039b 75785265 		.ascii	"uxReturn\000"
 8607      7475726E 
 8607      00
 8608              	.LASF132:
 8609 03a4 76506F72 		.ascii	"vPortFree\000"
 8609      74467265 
 8609      6500
 8610              	.LASF99:
 8611 03ae 78517565 		.ascii	"xQueueReceiveFromISR\000"
 8611      75655265 
 8611      63656976 
 8611      6546726F 
 8611      6D495352 
 8612              	.LASF16:
 8613 03c3 696E7438 		.ascii	"int8_t\000"
 8613      5F7400
 8614              	.LASF65:
 8615 03ca 70727649 		.ascii	"prvIsQueueFull\000"
 8615      73517565 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 211


 8615      75654675 
 8615      6C6C00
 8616              	.LASF112:
 8617 03d9 70635265 		.ascii	"pcReturn\000"
 8617      7475726E 
 8617      00
 8618              	.LASF136:
 8619 03e2 433A5C55 		.ascii	"C:\\Users\\Phuong\\Documents\\PSoC Creator\\Dec0820"
 8619      73657273 
 8619      5C506875 
 8619      6F6E675C 
 8619      446F6375 
 8620 0410 31385C69 		.ascii	"18\\iot-sdk-iot-dev\\PSOC6_FreeRTOS+LwIP+MbedTLS_Az"
 8620      6F742D73 
 8620      646B2D69 
 8620      6F742D64 
 8620      65765C50 
 8621 0441 7572652D 		.ascii	"ure-IOT-Hub-Demo\\PSOC6_FreeRTOS+LwIP+MbedTLS_Azure"
 8621      494F542D 
 8621      4875622D 
 8621      44656D6F 
 8621      5C50534F 
 8622 0473 2D494F54 		.ascii	"-IOT-Hub-Demo.cydsn\000"
 8622      2D487562 
 8622      2D44656D 
 8622      6F2E6379 
 8622      64736E00 
 8623              	.LASF52:
 8624 0487 75784C65 		.ascii	"uxLength\000"
 8624      6E677468 
 8624      00
 8625              	.LASF59:
 8626 0490 51756575 		.ascii	"Queue_t\000"
 8626      655F7400 
 8627              	.LASF78:
 8628 0498 75785175 		.ascii	"uxQueueLength\000"
 8628      6575654C 
 8628      656E6774 
 8628      6800
 8629              	.LASF50:
 8630 04a6 78546173 		.ascii	"xTasksWaitingToReceive\000"
 8630      6B735761 
 8630      6974696E 
 8630      67546F52 
 8630      65636569 
 8631              	.LASF29:
 8632 04bd 4C697374 		.ascii	"ListItem_t\000"
 8632      4974656D 
 8632      5F7400
 8633              	.LASF75:
 8634 04c8 78517565 		.ascii	"xQueue\000"
 8634      756500
 8635              	.LASF26:
 8636 04cf 70785072 		.ascii	"pxPrevious\000"
 8636      6576696F 
 8636      757300
 8637              	.LASF104:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 212


 8638 04da 75785175 		.ascii	"uxQueueMessagesWaitingFromISR\000"
 8638      6575654D 
 8638      65737361 
 8638      67657357 
 8638      61697469 
 8639              	.LASF70:
 8640 04f8 70764974 		.ascii	"pvItemToQueue\000"
 8640      656D546F 
 8640      51756575 
 8640      6500
 8641              	.LASF19:
 8642 0506 666C6F61 		.ascii	"float\000"
 8642      7400
 8643              	.LASF58:
 8644 050c 78515545 		.ascii	"xQUEUE\000"
 8644      554500
 8645              	.LASF35:
 8646 0513 7078496E 		.ascii	"pxIndex\000"
 8646      64657800 
 8647              	.LASF28:
 8648 051b 7076436F 		.ascii	"pvContainer\000"
 8648      6E746169 
 8648      6E657200 
 8649              	.LASF62:
 8650 0527 7848616E 		.ascii	"xHandle\000"
 8650      646C6500 
 8651              	.LASF87:
 8652 052f 78456E74 		.ascii	"xEntryTimeSet\000"
 8652      72795469 
 8652      6D655365 
 8652      7400
 8653              	.LASF45:
 8654 053d 51756575 		.ascii	"QueueDefinition\000"
 8654      65446566 
 8654      696E6974 
 8654      696F6E00 
 8655              	.LASF7:
 8656 054d 756E7369 		.ascii	"unsigned char\000"
 8656      676E6564 
 8656      20636861 
 8656      7200
 8657              	.LASF0:
 8658 055b 756E7369 		.ascii	"unsigned int\000"
 8658      676E6564 
 8658      20696E74 
 8658      00
 8659              	.LASF44:
 8660 0568 75785265 		.ascii	"uxRecursiveCallCount\000"
 8660      63757273 
 8660      69766543 
 8660      616C6C43 
 8660      6F756E74 
 8661              	.LASF8:
 8662 057d 73686F72 		.ascii	"short int\000"
 8662      7420696E 
 8662      7400
 8663              	.LASF54:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 213


 8664 0587 6352784C 		.ascii	"cRxLock\000"
 8664      6F636B00 
 8665              	.LASF93:
 8666 058f 78517565 		.ascii	"xQueueGiveFromISR\000"
 8666      75654769 
 8666      76654672 
 8666      6F6D4953 
 8666      5200
 8667              	.LASF129:
 8668 05a1 78546173 		.ascii	"xTaskResumeAll\000"
 8668      6B526573 
 8668      756D6541 
 8668      6C6C00
 8669              	.LASF108:
 8670 05b0 78517565 		.ascii	"xQueueIsQueueFullFromISR\000"
 8670      75654973 
 8670      51756575 
 8670      6546756C 
 8670      6C46726F 
 8671              	.LASF82:
 8672 05c9 78517565 		.ascii	"xQueueGenericCreate\000"
 8672      75654765 
 8672      6E657269 
 8672      63437265 
 8672      61746500 
 8673              	.LASF33:
 8674 05dd 784C4953 		.ascii	"xLIST\000"
 8674      5400
 8675              	.LASF120:
 8676 05e3 76546173 		.ascii	"vTaskMissedYield\000"
 8676      6B4D6973 
 8676      73656459 
 8676      69656C64 
 8676      00
 8677              	.LASF119:
 8678 05f4 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 8678      6B52656D 
 8678      6F766546 
 8678      726F6D45 
 8678      76656E74 
 8679              	.LASF37:
 8680 060d 4C697374 		.ascii	"List_t\000"
 8680      5F7400
 8681              	.LASF124:
 8682 0614 78546173 		.ascii	"xTaskGetSchedulerState\000"
 8682      6B476574 
 8682      53636865 
 8682      64756C65 
 8682      72537461 
 8683              	.LASF92:
 8684 062b 75785361 		.ascii	"uxSavedInterruptStatus\000"
 8684      76656449 
 8684      6E746572 
 8684      72757074 
 8684      53746174 
 8685              	.LASF42:
 8686 0642 51756575 		.ascii	"QueueHandle_t\000"
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 214


 8686      6548616E 
 8686      646C655F 
 8686      7400
 8687              	.LASF18:
 8688 0650 75696E74 		.ascii	"uint32_t\000"
 8688      33325F74 
 8688      00
 8689              	.LASF51:
 8690 0659 75784D65 		.ascii	"uxMessagesWaiting\000"
 8690      73736167 
 8690      65735761 
 8690      6974696E 
 8690      6700
 8691              	.LASF6:
 8692 066b 5F5F7569 		.ascii	"__uint8_t\000"
 8692      6E74385F 
 8692      7400
 8693              	.LASF72:
 8694 0675 70764275 		.ascii	"pvBuffer\000"
 8694      66666572 
 8694      00
 8695              	.LASF134:
 8696 067e 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 8696      43313120 
 8696      352E342E 
 8696      31203230 
 8696      31363036 
 8697 06b1 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0plus -mthumb -"
 8697      20726576 
 8697      6973696F 
 8697      6E203233 
 8697      37373135 
 8698 06e4 67202D4F 		.ascii	"g -Og -ffunction-sections -ffat-lto-objects\000"
 8698      67202D66 
 8698      66756E63 
 8698      74696F6E 
 8698      2D736563 
 8699              	.LASF2:
 8700 0710 6C6F6E67 		.ascii	"long double\000"
 8700      20646F75 
 8700      626C6500 
 8701              	.LASF81:
 8702 071c 78517565 		.ascii	"xQueueGenericReset\000"
 8702      75654765 
 8702      6E657269 
 8702      63526573 
 8702      657400
 8703              	.LASF15:
 8704 072f 63686172 		.ascii	"char\000"
 8704      00
 8705              	.LASF118:
 8706 0734 76506F72 		.ascii	"vPortExitCritical\000"
 8706      74457869 
 8706      74437269 
 8706      74696361 
 8706      6C00
 8707              	.LASF86:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 215


 8708 0746 78436F70 		.ascii	"xCopyPosition\000"
 8708      79506F73 
 8708      6974696F 
 8708      6E00
 8709              	.LASF24:
 8710 0754 78497465 		.ascii	"xItemValue\000"
 8710      6D56616C 
 8710      756500
 8711              	.LASF61:
 8712 075f 70635175 		.ascii	"pcQueueName\000"
 8712      6575654E 
 8712      616D6500 
 8713              	.LASF74:
 8714 076b 70727655 		.ascii	"prvUnlockQueue\000"
 8714      6E6C6F63 
 8714      6B517565 
 8714      756500
 8715              	.LASF137:
 8716 077a 78517565 		.ascii	"xQueueRegistry\000"
 8716      75655265 
 8716      67697374 
 8716      727900
 8717              	.LASF47:
 8718 0789 70635461 		.ascii	"pcTail\000"
 8718      696C00
 8719              	.LASF127:
 8720 0790 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 8720      6B436865 
 8720      636B466F 
 8720      7254696D 
 8720      654F7574 
 8721              	.LASF79:
 8722 07a5 70756351 		.ascii	"pucQueueStorage\000"
 8722      75657565 
 8722      53746F72 
 8722      61676500 
 8723              	.LASF116:
 8724 07b5 78576169 		.ascii	"xWaitIndefinitely\000"
 8724      74496E64 
 8724      6566696E 
 8724      6974656C 
 8724      7900
 8725              	.LASF113:
 8726 07c7 76517565 		.ascii	"vQueueUnregisterQueue\000"
 8726      7565556E 
 8726      72656769 
 8726      73746572 
 8726      51756575 
 8727              	.LASF105:
 8728 07dd 75785175 		.ascii	"uxQueueGetQueueNumber\000"
 8728      65756547 
 8728      65745175 
 8728      6575654E 
 8728      756D6265 
 8729              	.LASF117:
 8730 07f3 76506F72 		.ascii	"vPortEnterCritical\000"
 8730      74456E74 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 216


 8730      65724372 
 8730      69746963 
 8730      616C00
 8731              	.LASF71:
 8732 0806 78506F73 		.ascii	"xPosition\000"
 8732      6974696F 
 8732      6E00
 8733              	.LASF121:
 8734 0810 76506F72 		.ascii	"vPortYield\000"
 8734      74596965 
 8734      6C6400
 8735              	.LASF126:
 8736 081b 76546173 		.ascii	"vTaskSuspendAll\000"
 8736      6B537573 
 8736      70656E64 
 8736      416C6C00 
 8737              	.LASF125:
 8738 082b 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 8738      6B496E74 
 8738      65726E61 
 8738      6C536574 
 8738      54696D65 
 8739              	.LASF49:
 8740 0848 78546173 		.ascii	"xTasksWaitingToSend\000"
 8740      6B735761 
 8740      6974696E 
 8740      67546F53 
 8740      656E6400 
 8741              	.LASF83:
 8742 085c 78517565 		.ascii	"xQueueSizeInBytes\000"
 8742      75655369 
 8742      7A65496E 
 8742      42797465 
 8742      7300
 8743              	.LASF67:
 8744 086e 70785175 		.ascii	"pxQueue\000"
 8744      65756500 
 8745              	.LASF17:
 8746 0876 75696E74 		.ascii	"uint8_t\000"
 8746      385F7400 
 8747              	.LASF48:
 8748 087e 70635772 		.ascii	"pcWriteTo\000"
 8748      69746554 
 8748      6F00
 8749              	.LASF53:
 8750 0888 75784974 		.ascii	"uxItemSize\000"
 8750      656D5369 
 8750      7A6500
 8751              	.LASF14:
 8752 0893 73697A65 		.ascii	"sizetype\000"
 8752      74797065 
 8752      00
 8753              	.LASF25:
 8754 089c 70784E65 		.ascii	"pxNext\000"
 8754      787400
 8755              	.LASF133:
 8756 08a3 76546173 		.ascii	"vTaskPlaceOnEventListRestricted\000"
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccPpAN7k.s 			page 217


 8756      6B506C61 
 8756      63654F6E 
 8756      4576656E 
 8756      744C6973 
 8757              	.LASF122:
 8758 08c3 764C6973 		.ascii	"vListInitialise\000"
 8758      74496E69 
 8758      7469616C 
 8758      69736500 
 8759              	.LASF115:
 8760 08d3 76517565 		.ascii	"vQueueWaitForMessageRestricted\000"
 8760      75655761 
 8760      6974466F 
 8760      724D6573 
 8760      73616765 
 8761              	.LASF30:
 8762 08f2 784C4953 		.ascii	"xLIST_ITEM\000"
 8762      545F4954 
 8762      454D00
 8763              	.LASF130:
 8764 08fd 756C5365 		.ascii	"ulSetInterruptMaskFromISR\000"
 8764      74496E74 
 8764      65727275 
 8764      70744D61 
 8764      736B4672 
 8765              	.LASF103:
 8766 0917 75785175 		.ascii	"uxQueueSpacesAvailable\000"
 8766      65756553 
 8766      70616365 
 8766      73417661 
 8766      696C6162 
 8767              	.LASF111:
 8768 092e 70635175 		.ascii	"pcQueueGetName\000"
 8768      65756547 
 8768      65744E61 
 8768      6D6500
 8769              	.LASF22:
 8770 093d 55426173 		.ascii	"UBaseType_t\000"
 8770      65547970 
 8770      655F7400 
 8771              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
