ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0plus
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  20              		.align	2
  21              		.code	16
  22              		.thumb_func
  23              		.type	prvTaskIsTaskSuspended, %function
  24              	prvTaskIsTaskSuspended:
  25              	.LFB48:
  26              		.file 1 "Source\\FreeRTOS\\10.0.1\\Source\\tasks.c"
   1:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*
   2:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * FreeRTOS Kernel V10.0.1
   3:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Source\FreeRTOS\10.0.1\Source/tasks.c ****  *
   5:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * subject to the following conditions:
  11:Source\FreeRTOS\10.0.1\Source/tasks.c ****  *
  12:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Source\FreeRTOS\10.0.1\Source/tasks.c ****  *
  15:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Source\FreeRTOS\10.0.1\Source/tasks.c ****  *
  22:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Source\FreeRTOS\10.0.1\Source/tasks.c ****  *
  25:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
  27:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
  28:Source\FreeRTOS\10.0.1\Source/tasks.c **** /* Standard includes. */
  29:Source\FreeRTOS\10.0.1\Source/tasks.c **** #include <stdlib.h>
  30:Source\FreeRTOS\10.0.1\Source/tasks.c **** #include <string.h>
  31:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 2


  32:Source\FreeRTOS\10.0.1\Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Source\FreeRTOS\10.0.1\Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Source\FreeRTOS\10.0.1\Source/tasks.c **** task.h is included from an application file. */
  35:Source\FreeRTOS\10.0.1\Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
  37:Source\FreeRTOS\10.0.1\Source/tasks.c **** /* FreeRTOS includes. */
  38:Source\FreeRTOS\10.0.1\Source/tasks.c **** #include "FreeRTOS.h"
  39:Source\FreeRTOS\10.0.1\Source/tasks.c **** #include "task.h"
  40:Source\FreeRTOS\10.0.1\Source/tasks.c **** #include "timers.h"
  41:Source\FreeRTOS\10.0.1\Source/tasks.c **** #include "stack_macros.h"
  42:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
  43:Source\FreeRTOS\10.0.1\Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  44:Source\FreeRTOS\10.0.1\Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  45:Source\FreeRTOS\10.0.1\Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  46:Source\FreeRTOS\10.0.1\Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  47:Source\FreeRTOS\10.0.1\Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  48:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
  49:Source\FreeRTOS\10.0.1\Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Source\FreeRTOS\10.0.1\Source/tasks.c **** functions but without including stdio.h here. */
  51:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#include <stdio.h>
  57:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
  59:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Source\FreeRTOS\10.0.1\Source/tasks.c **** #else
  64:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif
  66:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
  67:Source\FreeRTOS\10.0.1\Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Source\FreeRTOS\10.0.1\Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Source\FreeRTOS\10.0.1\Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Source\FreeRTOS\10.0.1\Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
  72:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*
  73:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
  76:Source\FreeRTOS\10.0.1\Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
  78:Source\FreeRTOS\10.0.1\Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:Source\FreeRTOS\10.0.1\Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:Source\FreeRTOS\10.0.1\Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:Source\FreeRTOS\10.0.1\Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:Source\FreeRTOS\10.0.1\Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:Source\FreeRTOS\10.0.1\Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:Source\FreeRTOS\10.0.1\Source/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:Source\FreeRTOS\10.0.1\Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:Source\FreeRTOS\10.0.1\Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:Source\FreeRTOS\10.0.1\Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:Source\FreeRTOS\10.0.1\Source/tasks.c **** made to free the RAM that was allocated statically.
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 3


  89:Source\FreeRTOS\10.0.1\Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
  90:Source\FreeRTOS\10.0.1\Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:Source\FreeRTOS\10.0.1\Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  92:Source\FreeRTOS\10.0.1\Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:Source\FreeRTOS\10.0.1\Source/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:Source\FreeRTOS\10.0.1\Source/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:Source\FreeRTOS\10.0.1\Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:Source\FreeRTOS\10.0.1\Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:Source\FreeRTOS\10.0.1\Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:Source\FreeRTOS\10.0.1\Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 100:Source\FreeRTOS\10.0.1\Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:Source\FreeRTOS\10.0.1\Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:Source\FreeRTOS\10.0.1\Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:Source\FreeRTOS\10.0.1\Source/tasks.c **** #else
 106:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 108:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 109:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*
 110:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
 112:Source\FreeRTOS\10.0.1\Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:Source\FreeRTOS\10.0.1\Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:Source\FreeRTOS\10.0.1\Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:Source\FreeRTOS\10.0.1\Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:Source\FreeRTOS\10.0.1\Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 118:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*
 119:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * global, rather than file scope.
 121:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
 122:Source\FreeRTOS\10.0.1\Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#define static
 124:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 125:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 126:Source\FreeRTOS\10.0.1\Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:Source\FreeRTOS\10.0.1\Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:Source\FreeRTOS\10.0.1\Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 131:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 132:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 134:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	microcontroller architecture. */
 137:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 138:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	state task. */
 140:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{																									\
 142:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{																								\
 144:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}																								\
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 4


 146:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 147:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 148:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 149:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 150:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{																									\
 152:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:Source\FreeRTOS\10.0.1\Source/tasks.c **** 																										\
 154:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{																								\
 157:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			--uxTopPriority;																			\
 159:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}																								\
 160:Source\FreeRTOS\10.0.1\Source/tasks.c **** 																										\
 161:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 167:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 169:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	being used. */
 172:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 175:Source\FreeRTOS\10.0.1\Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 177:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	architecture being used. */
 180:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 181:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 184:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 185:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 186:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{																								\
 188:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:Source\FreeRTOS\10.0.1\Source/tasks.c **** 																									\
 190:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 196:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 197:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 198:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{																									\
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 5


 203:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 204:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{																								\
 205:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}																								\
 207:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 208:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 209:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 211:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 212:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 213:Source\FreeRTOS\10.0.1\Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:Source\FreeRTOS\10.0.1\Source/tasks.c **** count overflows. */
 215:Source\FreeRTOS\10.0.1\Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:Source\FreeRTOS\10.0.1\Source/tasks.c **** {																									\
 217:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	List_t *pxTemp;																					\
 218:Source\FreeRTOS\10.0.1\Source/tasks.c **** 																									\
 219:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:Source\FreeRTOS\10.0.1\Source/tasks.c **** 																									\
 222:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	xNumOfOverflows++;																				\
 226:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
 228:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 229:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 230:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 231:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*
 232:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
 235:Source\FreeRTOS\10.0.1\Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 241:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 242:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*
 243:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
 248:Source\FreeRTOS\10.0.1\Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 249:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 250:Source\FreeRTOS\10.0.1\Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:Source\FreeRTOS\10.0.1\Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:Source\FreeRTOS\10.0.1\Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:Source\FreeRTOS\10.0.1\Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:Source\FreeRTOS\10.0.1\Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:Source\FreeRTOS\10.0.1\Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:Source\FreeRTOS\10.0.1\Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:Source\FreeRTOS\10.0.1\Source/tasks.c **** to its original value when it is released. */
 258:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 6


 260:Source\FreeRTOS\10.0.1\Source/tasks.c **** #else
 261:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 263:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 264:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*
 265:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * (the task's run time environment, including register values)
 268:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
 269:Source\FreeRTOS\10.0.1\Source/tasks.c **** typedef struct tskTaskControlBlock
 270:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
 271:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 273:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 276:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 277:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 283:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 286:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 287:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 290:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 291:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 295:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 296:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 300:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 301:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 304:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 305:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 308:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 309:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 312:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 313:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 7


 317:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 318:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		struct	_reent xNewLib_reent;
 322:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 323:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 324:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 328:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 329:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* See the comments above the definition of
 330:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for
 332:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 334:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 335:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		uint8_t ucDelayAborted;
 337:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 338:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 339:Source\FreeRTOS\10.0.1\Source/tasks.c **** } tskTCB;
 340:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 341:Source\FreeRTOS\10.0.1\Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:Source\FreeRTOS\10.0.1\Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:Source\FreeRTOS\10.0.1\Source/tasks.c **** typedef tskTCB TCB_t;
 344:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 345:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:Source\FreeRTOS\10.0.1\Source/tasks.c **** which static variables must be declared volatile. */
 347:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 348:Source\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 349:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 350:Source\FreeRTOS\10.0.1\Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 351:Source\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 352:Source\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 353:Source\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 354:Source\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 355:Source\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 356:Source\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 357:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 358:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 359:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 360:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 361:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 362:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 363:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 364:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 365:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 366:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 367:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 368:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 369:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 370:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 371:Source\FreeRTOS\10.0.1\Source/tasks.c **** /* Other file private variables. --------------------------------*/
 372:Source\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 373:Source\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 8


 374:Source\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 375:Source\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 376:Source\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 377:Source\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 378:Source\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 379:Source\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 380:Source\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 381:Source\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 382:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 383:Source\FreeRTOS\10.0.1\Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 384:Source\FreeRTOS\10.0.1\Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 385:Source\FreeRTOS\10.0.1\Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 386:Source\FreeRTOS\10.0.1\Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 387:Source\FreeRTOS\10.0.1\Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 388:Source\FreeRTOS\10.0.1\Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 389:Source\FreeRTOS\10.0.1\Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 390:Source\FreeRTOS\10.0.1\Source/tasks.c **** accessed from a critical section. */
 391:Source\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 392:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 393:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 394:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 395:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 398:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 399:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 400:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*lint -restore */
 401:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 402:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 404:Source\FreeRTOS\10.0.1\Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 407:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 409:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 410:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 411:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 413:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	extern void vApplicationTickHook( void );
 414:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 415:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 416:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 417:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 419:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 421:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 422:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 423:Source\FreeRTOS\10.0.1\Source/tasks.c **** /* File private functions. --------------------------------*/
 424:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 425:Source\FreeRTOS\10.0.1\Source/tasks.c **** /**
 426:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * is in any other state.
 429:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
 430:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 9


 431:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 432:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 434:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 436:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*
 437:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * automatically upon the creation of the first task.
 439:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
 440:Source\FreeRTOS\10.0.1\Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 442:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*
 443:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * creation of the first user task.
 446:Source\FreeRTOS\10.0.1\Source/tasks.c ****  *
 447:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:Source\FreeRTOS\10.0.1\Source/tasks.c ****  *
 450:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:Source\FreeRTOS\10.0.1\Source/tasks.c ****  *
 452:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
 453:Source\FreeRTOS\10.0.1\Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 455:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*
 456:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:Source\FreeRTOS\10.0.1\Source/tasks.c ****  *
 459:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
 462:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 464:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 466:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 467:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 468:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*
 469:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * and its TCB deleted.
 472:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
 473:Source\FreeRTOS\10.0.1\Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 475:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*
 476:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
 479:Source\FreeRTOS\10.0.1\Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 481:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*
 482:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * a suspended list, etc.).
 485:Source\FreeRTOS\10.0.1\Source/tasks.c ****  *
 486:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * NORMAL APPLICATION CODE.
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 10


 488:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
 489:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 491:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 493:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 494:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 495:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*
 496:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
 499:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 501:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 503:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 504:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 505:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*
 506:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
 510:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 511:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 512:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 513:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 514:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 515:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 516:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*
 517:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:Source\FreeRTOS\10.0.1\Source/tasks.c ****  *
 520:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * set to a value other than 1.
 524:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
 525:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 527:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 529:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 530:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 531:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*
 532:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * will exit the Blocked state.
 534:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
 535:Source\FreeRTOS\10.0.1\Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 537:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 539:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/*
 540:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	 * human readable tables of task information.
 542:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	 */
 543:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 11


 545:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 546:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 547:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*
 548:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
 551:Source\FreeRTOS\10.0.1\Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									void * const pvParameters,
 555:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									UBaseType_t uxPriority,
 556:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 560:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*
 561:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * under the control of the scheduler.
 563:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
 564:Source\FreeRTOS\10.0.1\Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 566:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*
 567:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * called by the function.
 570:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
 571:Source\FreeRTOS\10.0.1\Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 573:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 575:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 576:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 577:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 578:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 579:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 581:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									void * const pvParameters,
 585:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									UBaseType_t uxPriority,
 586:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 589:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskHandle_t xReturn;
 591:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 592:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 595:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 597:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			structure. */
 600:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 12


 602:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 603:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 604:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 605:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 606:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 607:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 608:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 609:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			function - use them. */
 610:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 611:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 612:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 613:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 614:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 615:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 616:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 617:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 618:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 619:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 620:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 621:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 622:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 623:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 624:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
 625:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 626:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = NULL;
 627:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 628:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 629:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
 630:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 631:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 632:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 633:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 634:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 635:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 636:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 637:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 638:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 639:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxNewTCB;
 640:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 641:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 642:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 643:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 644:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 645:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 646:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 647:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 648:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 649:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			not static allocation is being used. */
 650:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 651:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 652:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Store the stack location in the TCB. */
 653:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 654:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 655:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 656:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 657:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 658:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				task was created statically in case the task is later deleted. */
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 13


 659:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 660:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 661:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 662:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 663:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 664:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									pxTaskDefinition->pcName,
 665:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 666:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 667:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 668:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 669:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									pxTaskDefinition->xRegions );
 670:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 671:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 672:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = pdPASS;
 673:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 674:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 675:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
 676:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 677:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 678:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 679:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 680:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 681:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 682:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 683:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 684:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 685:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxNewTCB;
 686:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 687:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 688:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 689:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 690:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 691:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 692:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 693:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 694:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			not static allocation is being used. */
 695:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 696:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 697:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxNewTCB != NULL )
 698:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 699:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Store the stack location in the TCB. */
 700:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 701:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 702:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 703:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 704:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 705:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					this task had a statically allocated stack in case it is
 706:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 707:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 708:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 709:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				#endif
 710:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 711:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 712:Source\FreeRTOS\10.0.1\Source/tasks.c **** 										pxTaskDefinition->pcName,
 713:Source\FreeRTOS\10.0.1\Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 714:Source\FreeRTOS\10.0.1\Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 715:Source\FreeRTOS\10.0.1\Source/tasks.c **** 										pxTaskDefinition->uxPriority,
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 14


 716:Source\FreeRTOS\10.0.1\Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 717:Source\FreeRTOS\10.0.1\Source/tasks.c **** 										pxTaskDefinition->xRegions );
 718:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 719:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 720:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdPASS;
 721:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 722:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 723:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 724:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
 725:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 726:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 727:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 728:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 729:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 730:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 731:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 732:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 733:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 734:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 735:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							void * const pvParameters,
 736:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							UBaseType_t uxPriority,
 737:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 738:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 739:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxNewTCB;
 740:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn;
 741:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 742:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 743:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 744:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		the TCB then the stack. */
 745:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 746:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 747:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 748:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 749:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			allocation is being used. */
 750:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 751:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 752:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxNewTCB != NULL )
 753:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 754:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 755:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 756:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				be deleted later if required. */
 757:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 758:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 759:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 760:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 761:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 762:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					vPortFree( pxNewTCB );
 763:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxNewTCB = NULL;
 764:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 765:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 766:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 767:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 768:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 769:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		StackType_t *pxStack;
 770:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 771:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 772:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 15


 773:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 774:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxStack != NULL )
 775:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 776:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Allocate space for the TCB. */
 777:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 778:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 779:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxNewTCB != NULL )
 780:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 781:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Store the stack location in the TCB. */
 782:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 783:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 784:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
 785:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 786:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 787:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					it again. */
 788:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					vPortFree( pxStack );
 789:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 790:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 791:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
 792:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 793:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxNewTCB = NULL;
 794:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 795:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 796:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 797:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 798:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxNewTCB != NULL )
 799:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 800:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 801:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 802:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 803:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 804:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 805:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 806:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 807:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 808:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 809:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 810:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = pdPASS;
 811:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 812:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
 813:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 814:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 815:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 816:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 817:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
 818:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 819:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 820:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 821:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 822:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 823:Source\FreeRTOS\10.0.1\Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 824:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 825:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									const uint32_t ulStackDepth,
 826:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									void * const pvParameters,
 827:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									UBaseType_t uxPriority,
 828:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 829:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									TCB_t *pxNewTCB,
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 16


 830:Source\FreeRTOS\10.0.1\Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 831:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
 832:Source\FreeRTOS\10.0.1\Source/tasks.c **** StackType_t *pxTopOfStack;
 833:Source\FreeRTOS\10.0.1\Source/tasks.c **** UBaseType_t x;
 834:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 835:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 836:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 837:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		BaseType_t xRunPrivileged;
 838:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 839:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 840:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 841:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 842:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
 843:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 844:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 845:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 846:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 847:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 848:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 849:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 850:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 851:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 852:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 853:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 854:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 855:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 856:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 857:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 858:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 859:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 860:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	by the port. */
 861:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 862:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 863:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 864:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 865:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 866:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 867:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 868:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 869:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 870:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 871:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 872:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			debugging. */
 873:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 874:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 875:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 876:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 877:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 878:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 879:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 880:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 881:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 882:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 883:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 884:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 885:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		performed. */
 886:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 17


 887:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 888:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 889:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 890:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Store the task name in the TCB. */
 891:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 892:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 893:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 894:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 895:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 898:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 899:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 900:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			break;
 901:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 902:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
 903:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 904:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 905:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 906:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 907:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 908:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 909:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 910:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 911:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 912:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 913:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	remove the privilege bit if one is present. */
 914:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 915:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 916:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 917:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 918:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	else
 919:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 920:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 921:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 922:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 923:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 924:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 925:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 926:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 927:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 928:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 929:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 930:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 931:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 932:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 933:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 934:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 935:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 936:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 937:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 938:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Event lists are always in priority order. */
 939:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 940:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 941:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 942:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 943:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 18


 944:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 945:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 946:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 947:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 948:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 949:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 950:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 951:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 952:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 953:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 954:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 955:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 956:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 957:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 958:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 959:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 960:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 961:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 962:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 963:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 964:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#else
 965:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 966:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 967:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		( void ) xRegions;
 968:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 969:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 970:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 971:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 972:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 973:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 974:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 975:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 976:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 977:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 978:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 979:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 980:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 981:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 982:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 983:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 984:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 985:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 986:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 987:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 988:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 989:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 990:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 991:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 992:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 993:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 994:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 995:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 996:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 997:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 998:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 999:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1000:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 19


1001:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1002:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1003:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	the top of stack variable is updated. */
1004:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1005:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1006:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1007:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1008:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1009:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1010:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1011:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1012:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1013:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1014:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
1015:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1016:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1017:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1018:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1019:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1020:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	else
1021:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1022:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1023:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1024:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
1025:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1026:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1027:Source\FreeRTOS\10.0.1\Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1028:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
1029:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1030:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	updated. */
1031:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	taskENTER_CRITICAL();
1032:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1033:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1034:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1035:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1036:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1037:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			the suspended state - make this the current task. */
1038:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1039:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1040:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1041:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1042:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1043:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				initialisation required.  We will not recover if this call
1044:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				fails, but we will report the failure. */
1045:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				prvInitialiseTaskLists();
1046:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1047:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1048:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1049:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1050:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1051:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1052:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1053:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1054:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1055:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			current task if it is the highest priority task to be created
1056:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			so far. */
1057:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 20


1058:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1059:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1060:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1061:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1062:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1063:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1064:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1065:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1066:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1067:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1068:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1069:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1070:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1071:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1072:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1073:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1074:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		uxTaskNumber++;
1075:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1076:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1077:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1078:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1079:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1080:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1081:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1082:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1083:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1084:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1085:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1086:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1087:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1088:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	taskEXIT_CRITICAL();
1089:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1090:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1091:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1092:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1093:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		then it should run now. */
1094:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1095:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1096:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1097:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1098:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1099:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1100:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1101:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1102:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1103:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	else
1104:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1105:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1106:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1107:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
1108:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1109:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1110:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1111:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1112:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1113:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1114:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 21


1115:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1116:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
1117:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1118:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1119:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			being deleted. */
1120:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1121:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1122:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Remove task from the ready list. */
1123:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1124:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1125:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1126:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1127:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1128:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1129:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1130:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1131:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1132:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Is the task waiting on an event also? */
1133:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1134:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1135:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1136:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1137:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1138:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1139:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1140:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1141:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1142:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1143:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1144:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1145:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			not return. */
1146:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			uxTaskNumber++;
1147:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1148:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1149:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1150:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1151:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				task itself, as a context switch to another task is required.
1152:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1153:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				check the termination list and free up any memory allocated by
1154:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1155:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1156:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1157:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1158:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1159:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1160:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1161:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1162:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1163:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1164:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				after which it is not possible to yield away from this task -
1165:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1166:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				required. */
1167:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1168:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1169:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1170:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1171:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				--uxCurrentNumberOfTasks;
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 22


1172:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1173:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1174:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1175:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				the task that has just been deleted. */
1176:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1177:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1178:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1179:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1180:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1181:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
1182:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1183:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1184:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		been deleted. */
1185:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1186:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1187:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1188:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1189:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1190:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				portYIELD_WITHIN_API();
1191:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1192:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1193:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1194:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1195:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1196:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1197:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1198:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1199:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1200:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1201:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1202:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1203:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1204:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1205:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1206:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TickType_t xTimeToWake;
1207:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1208:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1209:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1210:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1211:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1212:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1213:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		vTaskSuspendAll();
1214:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1215:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1216:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			block. */
1217:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1218:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1219:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1220:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1221:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1222:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1223:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1224:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The tick count has overflowed since this function was
1225:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1226:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1227:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1228:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 23


1229:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1230:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1231:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					xShouldDelay = pdTRUE;
1232:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1233:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1234:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1235:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1236:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1237:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1238:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1239:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1240:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1241:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1242:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				tick time is less than the wake time. */
1243:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1244:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1245:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					xShouldDelay = pdTRUE;
1246:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1247:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1248:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1249:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1250:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1251:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1252:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1253:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1254:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1255:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1256:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1257:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1258:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1259:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1260:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1261:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1262:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1263:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1264:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1265:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1266:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1267:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1268:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1269:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1270:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1271:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1272:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		have put ourselves to sleep. */
1273:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1274:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1275:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			portYIELD_WITHIN_API();
1276:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1277:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1278:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1279:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1280:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1281:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1282:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1283:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1284:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1285:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 24


1286:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1287:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1288:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1289:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1290:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1291:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1292:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1293:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1294:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1295:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1296:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			vTaskSuspendAll();
1297:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1298:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				traceTASK_DELAY();
1299:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1300:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* A task that is removed from the event list while the
1301:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1302:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1303:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				is resumed.
1304:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1305:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1306:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				executing task. */
1307:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1308:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1309:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1310:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1311:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1312:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1313:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1314:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1315:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1316:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		have put ourselves to sleep. */
1318:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1319:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1320:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			portYIELD_WITHIN_API();
1321:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1322:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1323:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1324:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1326:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1327:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1328:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1329:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1330:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1331:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1332:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1333:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1334:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1335:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	eTaskState eReturn;
1336:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	List_t *pxStateList;
1337:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1338:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1339:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( pxTCB );
1340:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1341:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1342:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 25


1343:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1344:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			eReturn = eRunning;
1345:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1346:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1347:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1348:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			taskENTER_CRITICAL();
1349:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1350:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1351:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1352:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			taskEXIT_CRITICAL();
1353:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1354:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1355:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1356:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1357:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				lists. */
1358:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				eReturn = eBlocked;
1359:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1360:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1361:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1362:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1363:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1364:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1365:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1366:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					indefinitely? */
1367:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1368:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1369:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						eReturn = eSuspended;
1370:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1371:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
1372:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1373:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						eReturn = eBlocked;
1374:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1375:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1376:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#endif
1377:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1378:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1379:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1380:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1381:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1382:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1383:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					all. */
1384:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					eReturn = eDeleted;
1385:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1386:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#endif
1387:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1388:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1389:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1390:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1391:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				Ready (including pending ready) state. */
1392:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				eReturn = eReady;
1393:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1394:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1395:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1396:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return eReturn;
1397:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1398:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1399:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 26


1400:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1401:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1402:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1403:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1404:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1405:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1406:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
1407:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxReturn;
1408:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1409:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
1410:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1411:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1412:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1413:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1414:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1415:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1416:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
1417:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1418:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return uxReturn;
1419:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1420:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1421:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1422:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1423:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1424:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1425:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1426:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1427:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1428:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
1429:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1430:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1431:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1432:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1433:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1434:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1435:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1436:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1437:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1438:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1439:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1440:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1441:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1442:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1443:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1444:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1445:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		provided on the following link:
1446:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1447:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1448:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1449:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1450:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1451:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1452:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			task that is being queried. */
1453:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1454:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1455:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1456:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 27


1457:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1458:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return uxReturn;
1459:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1460:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1461:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1462:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1463:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1464:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1465:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1466:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1467:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1468:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
1469:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1470:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1471:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1472:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1473:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1474:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Ensure the new priority is valid. */
1475:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1476:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1477:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1478:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1479:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1480:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1481:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1482:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1483:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1484:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
1485:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1486:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1487:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			task that is being changed. */
1488:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1489:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1490:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1491:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1492:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1493:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1494:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1495:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1496:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#else
1497:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1498:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1499:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1500:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#endif
1501:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1502:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1503:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1504:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The priority change may have readied a task of higher
1505:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				priority than the calling task. */
1506:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1507:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1508:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1509:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1510:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						/* The priority of a task other than the currently
1511:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						running task is being raised.  Is the priority being
1512:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						raised above that of the running task? */
1513:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 28


1514:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						{
1515:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							xYieldRequired = pdTRUE;
1516:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						}
1517:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						else
1518:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						{
1519:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1520:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						}
1521:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1522:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
1523:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1524:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						/* The priority of the running task is being raised,
1525:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						but the running task must already be the highest
1526:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						priority task able to run so no yield is required. */
1527:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1528:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1529:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1530:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1531:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Setting the priority of the running task down means
1532:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					there may now be another task of higher priority that
1533:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					is ready to execute. */
1534:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					xYieldRequired = pdTRUE;
1535:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1536:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1537:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1538:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Setting the priority of any other task down does not
1539:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					require a yield as the running task must be above the
1540:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					new priority of the task being modified. */
1541:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1542:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1543:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1544:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				before its uxPriority member is changed so the
1545:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1546:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1547:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1548:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1549:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1550:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Only change the priority being used if the task is not
1551:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					currently using an inherited priority. */
1552:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1553:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1554:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1555:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1556:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
1557:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1558:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1559:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1560:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1561:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The base priority gets set whatever. */
1562:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1563:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1564:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				#else
1565:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1566:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1567:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1568:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				#endif
1569:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1570:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Only reset the event list item value if the value is not
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 29


1571:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				being used for anything else. */
1572:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1573:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1574:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1575:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1576:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1577:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1578:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1579:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1580:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1581:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1582:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				nothing more than change its priority variable. However, if
1583:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1584:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				in the list appropriate to its new priority. */
1585:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1586:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1587:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1588:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1589:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1590:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1591:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1592:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						/* It is known that the task is in its ready list so
1593:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						there is no need to check again and the port level
1594:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						reset macro can be called directly. */
1595:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1596:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1597:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
1598:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1599:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1600:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1601:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1602:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1603:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1604:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1605:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1606:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1607:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1608:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1609:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1610:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1611:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1612:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1613:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1614:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1615:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1616:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1617:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1618:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				optimised task selection is not being used. */
1619:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1620:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1621:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1622:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
1623:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1624:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1625:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1626:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1627:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 30


1628:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1629:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1630:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1631:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1632:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
1633:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1634:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
1635:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1636:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1637:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			being suspended. */
1638:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1639:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1640:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1641:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1642:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1643:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			suspended list. */
1644:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1645:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1646:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1647:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1648:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1649:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1650:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1651:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1652:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1653:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Is the task waiting on an event also? */
1654:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1655:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1656:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1657:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1658:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1659:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1660:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1661:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1662:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1663:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1664:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1665:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1666:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1667:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1668:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1669:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1670:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					now suspended, so no notification was received. */
1671:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1672:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1673:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1674:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#endif
1675:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1676:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
1677:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1678:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1679:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1680:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1681:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			task that is now in the Suspended state. */
1682:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			taskENTER_CRITICAL();
1683:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1684:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				prvResetNextTaskUnblockTime();
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 31


1685:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1686:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			taskEXIT_CRITICAL();
1687:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1688:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1689:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1690:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1691:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1692:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1693:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1694:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1695:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1696:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1697:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The current task has just been suspended. */
1698:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1699:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				portYIELD_WITHIN_API();
1700:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1701:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1702:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1703:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1704:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1705:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				must be adjusted to point to a different task. */
1706:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1707:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1708:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1709:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1710:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					be set to point to it no matter what its relative priority
1711:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					is. */
1712:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxCurrentTCB = NULL;
1713:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1714:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1715:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1716:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					vTaskSwitchContext();
1717:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1718:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1719:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1720:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1721:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1722:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1723:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1724:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1725:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1726:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1727:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1728:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1729:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1730:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1731:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1732:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
  27              		.loc 1 1732 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1733:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1734:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1735:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 32


1736:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1737:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		section. */
1738:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1739:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1740:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( xTask );
  33              		.loc 1 1740 0
  34 0000 0028     		cmp	r0, #0
  35 0002 01D1     		bne	.L2
  36              		.loc 1 1740 0 is_stmt 0 discriminator 1
  37              		.syntax divided
  38              	@ 1740 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
  39 0004 72B6     		 cpsid i 
  40              	@ 0 "" 2
  41              		.thumb
  42              		.syntax unified
  43              	.L3:
  44 0006 FEE7     		b	.L3
  45              	.L2:
1741:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1742:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1743:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  46              		.loc 1 1743 0 is_stmt 1
  47 0008 0D4B     		ldr	r3, .L12
  48 000a 4269     		ldr	r2, [r0, #20]
  49 000c 9A42     		cmp	r2, r3
  50 000e 01D1     		bne	.L7
  51 0010 0123     		movs	r3, #1
  52 0012 00E0     		b	.L4
  53              	.L7:
  54 0014 0023     		movs	r3, #0
  55              	.L4:
  56              		.loc 1 1743 0 is_stmt 0 discriminator 4
  57 0016 002B     		cmp	r3, #0
  58 0018 0BD0     		beq	.L8
1744:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1745:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1746:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  59              		.loc 1 1746 0 is_stmt 1
  60 001a 816A     		ldr	r1, [r0, #40]
  61 001c 084A     		ldr	r2, .L12
  62 001e 1432     		adds	r2, r2, #20
  63 0020 9142     		cmp	r1, r2
  64 0022 08D0     		beq	.L9
1747:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1748:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1749:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1750:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  65              		.loc 1 1750 0
  66 0024 0029     		cmp	r1, #0
  67 0026 00D0     		beq	.L6
  68 0028 0023     		movs	r3, #0
  69              	.L6:
  70              		.loc 1 1750 0 is_stmt 0 discriminator 4
  71 002a 002B     		cmp	r3, #0
  72 002c 05D1     		bne	.L11
1733:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  73              		.loc 1 1733 0 is_stmt 1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 33


  74 002e 0020     		movs	r0, #0
  75              	.LVL1:
  76 0030 04E0     		b	.L5
  77              	.LVL2:
  78              	.L8:
  79 0032 0020     		movs	r0, #0
  80              	.LVL3:
  81 0034 02E0     		b	.L5
  82              	.LVL4:
  83              	.L9:
  84 0036 0020     		movs	r0, #0
  85              	.LVL5:
  86 0038 00E0     		b	.L5
  87              	.LVL6:
  88              	.L11:
1751:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1752:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					xReturn = pdTRUE;
  89              		.loc 1 1752 0
  90 003a 0120     		movs	r0, #1
  91              	.LVL7:
  92              	.L5:
1753:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1754:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1755:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1756:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1757:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1758:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1759:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1760:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1761:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1762:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1763:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1764:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1765:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1766:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1767:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1768:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1769:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
1770:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  93              		.loc 1 1770 0
  94              		@ sp needed
  95 003c 7047     		bx	lr
  96              	.L13:
  97 003e C046     		.align	2
  98              	.L12:
  99 0040 00000000 		.word	.LANCHOR0
 100              		.cfi_endproc
 101              	.LFE48:
 102              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
 103              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 104              		.align	2
 105              		.code	16
 106              		.thumb_func
 107              		.type	prvTaskCheckFreeStackSpace, %function
 108              	prvTaskCheckFreeStackSpace:
 109              	.LFB80:
1771:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 34


1772:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1773:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1774:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1775:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1776:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1777:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1778:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1779:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1780:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1781:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1782:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( xTaskToResume );
1783:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1784:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1785:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		currently executing task. */
1786:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1787:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1788:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			taskENTER_CRITICAL();
1789:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1790:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1791:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1792:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1793:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1794:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1795:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					suspended because this is inside a critical section. */
1796:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1797:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1798:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1799:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1800:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1801:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1802:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1803:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						but will leave the lists in the correct state for the
1804:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						next yield. */
1805:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1806:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1807:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
1808:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1809:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1810:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1811:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1812:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1813:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1814:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1815:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1816:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1817:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			taskEXIT_CRITICAL();
1818:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1819:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1820:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1821:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1822:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1823:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1824:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1825:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1826:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1827:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1828:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 35


1829:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1830:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1831:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1832:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1833:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1834:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1835:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1836:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1837:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( xTaskToResume );
1838:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1839:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1840:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1841:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1842:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1843:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1844:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1845:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1846:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1847:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1848:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1849:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1850:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1851:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1852:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1853:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		provided on the following link:
1854:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1855:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1856:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1857:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1858:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1859:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1860:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1861:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1862:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1863:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1864:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1865:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1866:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1867:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					suspended list to the ready list directly. */
1868:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1869:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1870:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						xYieldRequired = pdTRUE;
1871:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1872:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
1873:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1874:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1875:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1876:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1877:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1878:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1879:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1880:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1881:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1882:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1883:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1884:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					unsuspended. */
1885:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 36


1886:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1887:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1888:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1889:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1890:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1891:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1892:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1893:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1894:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1895:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return xYieldRequired;
1896:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1897:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1898:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1899:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1900:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1901:Source\FreeRTOS\10.0.1\Source/tasks.c **** void vTaskStartScheduler( void )
1902:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
1903:Source\FreeRTOS\10.0.1\Source/tasks.c **** BaseType_t xReturn;
1904:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1905:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1906:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1907:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1908:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1909:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1910:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1911:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1912:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1913:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		address of the RAM then create the idle task. */
1914:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1915:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1916:Source\FreeRTOS\10.0.1\Source/tasks.c **** 												configIDLE_TASK_NAME,
1917:Source\FreeRTOS\10.0.1\Source/tasks.c **** 												ulIdleTaskStackSize,
1918:Source\FreeRTOS\10.0.1\Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1919:Source\FreeRTOS\10.0.1\Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1920:Source\FreeRTOS\10.0.1\Source/tasks.c **** 												pxIdleTaskStackBuffer,
1921:Source\FreeRTOS\10.0.1\Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1922:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1923:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1924:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1925:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = pdPASS;
1926:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1927:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1928:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1929:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = pdFAIL;
1930:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1931:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1932:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#else
1933:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1934:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1935:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1936:Source\FreeRTOS\10.0.1\Source/tasks.c **** 								configIDLE_TASK_NAME,
1937:Source\FreeRTOS\10.0.1\Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
1938:Source\FreeRTOS\10.0.1\Source/tasks.c **** 								( void * ) NULL,
1939:Source\FreeRTOS\10.0.1\Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1940:Source\FreeRTOS\10.0.1\Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1941:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1942:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 37


1943:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1944:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1945:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1946:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xReturn == pdPASS )
1947:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1948:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1949:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1950:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1951:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1952:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1953:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1954:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1955:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1956:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1957:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	if( xReturn == pdPASS )
1958:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1959:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1960:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1961:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		the only macro called by the function. */
1962:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1963:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1964:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			freertos_tasks_c_additions_init();
1965:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1966:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif
1967:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1968:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1969:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1970:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1971:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1972:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		starts to run. */
1973:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1974:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1975:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1976:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1977:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1978:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			structure specific to the task that will run first. */
1979:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1980:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1981:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1982:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1983:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1984:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1985:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1986:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1987:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1988:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1989:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
1990:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
1991:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
1992:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		FreeRTOSConfig.h file. */
1993:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1994:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
1995:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1996:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		portable interface. */
1997:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1998:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1999:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 38


2000:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			function will not return. */
2001:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2002:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
2003:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2004:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2005:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2006:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2007:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	else
2008:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2009:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2010:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2011:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		or the timer task. */
2012:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2013:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2014:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2015:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2016:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2017:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	( void ) xIdleTaskHandle;
2018:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
2019:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2020:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2021:Source\FreeRTOS\10.0.1\Source/tasks.c **** void vTaskEndScheduler( void )
2022:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
2023:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2024:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2025:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2026:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2027:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2028:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	vPortEndScheduler();
2029:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
2030:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*----------------------------------------------------------*/
2031:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2032:Source\FreeRTOS\10.0.1\Source/tasks.c **** void vTaskSuspendAll( void )
2033:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
2034:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2035:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2036:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2037:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	http://goo.gl/wu4acr */
2038:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	++uxSchedulerSuspended;
2039:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
2040:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*----------------------------------------------------------*/
2041:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2042:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2043:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2044:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2045:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2046:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TickType_t xReturn;
2047:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2048:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2049:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2050:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2051:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2052:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		running. */
2053:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2054:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2055:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2056:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 39


2057:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2058:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2059:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2060:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#else
2061:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2062:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2063:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2064:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2065:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2066:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2067:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2068:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2069:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2070:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2071:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2072:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2073:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2074:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif
2075:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2076:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2077:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2078:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = 0;
2079:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2080:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2081:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2082:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2083:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2084:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			processed. */
2085:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = 0;
2086:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2087:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2088:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2089:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2090:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			idle priority.  This path can only be reached if
2091:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2092:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = 0;
2093:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2094:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
2095:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2096:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2097:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2098:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2099:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
2100:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2101:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2102:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2103:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*----------------------------------------------------------*/
2104:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2105:Source\FreeRTOS\10.0.1\Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2106:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
2107:Source\FreeRTOS\10.0.1\Source/tasks.c **** TCB_t *pxTCB = NULL;
2108:Source\FreeRTOS\10.0.1\Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2109:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2110:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2111:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2112:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2113:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 40


2114:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2115:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2116:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2117:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2118:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2119:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	taskENTER_CRITICAL();
2120:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2121:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		--uxSchedulerSuspended;
2122:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2123:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2124:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2125:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2126:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2127:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2128:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				appropriate ready list. */
2129:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2130:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2131:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2132:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2133:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2134:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2135:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2136:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2137:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					task then a yield must be performed. */
2138:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2139:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2140:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						xYieldPending = pdTRUE;
2141:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2142:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
2143:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2144:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2145:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2146:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2147:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2148:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxTCB != NULL )
2149:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2150:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2151:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					which may have prevented the next unblock time from being
2152:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2153:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					important for low power tickless implementations, where
2154:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2155:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					state. */
2156:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2157:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2158:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2159:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2160:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2161:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2162:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				time. */
2163:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2164:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2165:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2166:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2167:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2168:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						do
2169:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						{
2170:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 41


2171:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							{
2172:Source\FreeRTOS\10.0.1\Source/tasks.c **** 								xYieldPending = pdTRUE;
2173:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							}
2174:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							else
2175:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							{
2176:Source\FreeRTOS\10.0.1\Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2177:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							}
2178:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							--uxPendedCounts;
2179:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2180:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2181:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						uxPendedTicks = 0;
2182:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2183:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
2184:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2185:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2186:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2187:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2188:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2189:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2190:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2191:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2192:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2193:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2194:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2195:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					#endif
2196:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2197:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2198:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
2199:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2200:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2201:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2202:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2203:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2204:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
2205:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2206:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2207:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2208:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2209:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	taskEXIT_CRITICAL();
2210:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2211:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	return xAlreadyYielded;
2212:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
2213:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2214:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2215:Source\FreeRTOS\10.0.1\Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2216:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
2217:Source\FreeRTOS\10.0.1\Source/tasks.c **** TickType_t xTicks;
2218:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2219:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2220:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2221:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2222:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xTicks = xTickCount;
2223:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2224:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2225:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2226:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	return xTicks;
2227:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 42


2228:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2229:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2230:Source\FreeRTOS\10.0.1\Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2231:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
2232:Source\FreeRTOS\10.0.1\Source/tasks.c **** TickType_t xReturn;
2233:Source\FreeRTOS\10.0.1\Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2234:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2235:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2236:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2237:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2238:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2239:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2240:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2241:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2242:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2243:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2244:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2245:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2246:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2247:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2248:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2249:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2250:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2251:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2252:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2253:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xReturn = xTickCount;
2254:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2255:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2256:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2257:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	return xReturn;
2258:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
2259:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2260:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2261:Source\FreeRTOS\10.0.1\Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2262:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
2263:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2264:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t. */
2265:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2266:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
2267:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2268:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2269:Source\FreeRTOS\10.0.1\Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2270:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
2271:Source\FreeRTOS\10.0.1\Source/tasks.c **** TCB_t *pxTCB;
2272:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2273:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2274:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	queried. */
2275:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2276:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxTCB );
2277:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2278:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
2279:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2280:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2281:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2282:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2283:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2284:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 43


2285:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2286:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t x;
2287:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	char cNextChar;
2288:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2289:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2290:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2291:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2292:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2293:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2294:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2295:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			do
2296:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2297:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2298:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2299:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Check each character in the name looking for a match or
2300:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mismatch. */
2301:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2302:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2303:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2304:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2305:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2306:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2307:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						/* Characters didn't match. */
2308:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						break;
2309:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2310:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else if( cNextChar == 0x00 )
2311:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2312:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						/* Both strings terminated, a match must have been
2313:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						found. */
2314:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						pxReturn = pxNextTCB;
2315:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						break;
2316:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2317:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
2318:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2319:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2320:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2321:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2322:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2323:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxReturn != NULL )
2324:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2325:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The handle has been found. */
2326:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
2327:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2328:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2329:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2330:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2331:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
2332:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2333:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2334:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2335:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2336:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return pxReturn;
2337:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2338:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2339:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2340:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2341:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 44


2342:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2343:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2344:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2345:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2346:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2347:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t* pxTCB;
2348:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2349:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2350:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2351:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2352:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		vTaskSuspendAll();
2353:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2354:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Search the ready lists. */
2355:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			do
2356:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2357:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				uxQueue--;
2358:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2359:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2360:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxTCB != NULL )
2361:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2362:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Found the handle. */
2363:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
2364:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2365:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2366:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2367:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2368:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Search the delayed lists. */
2369:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxTCB == NULL )
2370:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2371:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2372:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2373:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2374:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxTCB == NULL )
2375:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2376:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2377:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2378:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2379:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2380:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2381:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxTCB == NULL )
2382:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2383:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Search the suspended list. */
2384:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2385:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2386:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2387:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#endif
2388:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2389:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2390:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2391:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxTCB == NULL )
2392:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2393:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Search the deleted list. */
2394:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2395:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2396:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2397:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#endif
2398:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 45


2399:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		( void ) xTaskResumeAll();
2400:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2401:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2402:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2403:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2404:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2405:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2406:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2407:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2408:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2409:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2410:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2411:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2412:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2413:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		vTaskSuspendAll();
2414:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2415:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2416:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2417:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2418:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2419:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				task in the Ready state. */
2420:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				do
2421:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2422:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					uxQueue--;
2423:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2424:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2425:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2426:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2427:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2428:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				task in the Blocked state. */
2429:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2430:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2431:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2432:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2433:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2434:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2435:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2436:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2437:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2438:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				#endif
2439:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2440:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2441:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2442:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2443:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					each task in the Suspended state. */
2444:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2445:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2446:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				#endif
2447:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2448:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2449:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2450:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2451:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2452:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2453:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2454:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						#else
2455:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 46


2456:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						#endif
2457:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2458:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2459:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				#else
2460:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2461:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2462:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2463:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						*pulTotalRunTime = 0;
2464:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2465:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2466:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				#endif
2467:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2468:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
2469:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2470:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2471:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2472:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2473:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		( void ) xTaskResumeAll();
2474:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2475:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return uxTask;
2476:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2477:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2478:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2479:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*----------------------------------------------------------*/
2480:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2481:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2482:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2483:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2484:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2485:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2486:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2487:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2488:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return xIdleTaskHandle;
2489:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2490:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2491:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2492:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*----------------------------------------------------------*/
2493:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2494:Source\FreeRTOS\10.0.1\Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2495:Source\FreeRTOS\10.0.1\Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2496:Source\FreeRTOS\10.0.1\Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2497:Source\FreeRTOS\10.0.1\Source/tasks.c **** 1. */
2498:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2499:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2500:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2501:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2502:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2503:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2504:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		each stepped tick. */
2505:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2506:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xTickCount += xTicksToJump;
2507:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2508:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2509:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2510:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2511:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*----------------------------------------------------------*/
2512:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 47


2513:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2514:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2515:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2516:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2517:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2518:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn;
2519:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2520:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( pxTCB );
2521:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2522:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		vTaskSuspendAll();
2523:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2524:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2525:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			it is actually in the Blocked state. */
2526:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2527:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2528:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdPASS;
2529:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2530:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2531:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2532:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				scheduler is suspended. */
2533:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2534:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2535:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2536:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2537:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2538:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				is used. */
2539:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				taskENTER_CRITICAL();
2540:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2541:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2542:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2543:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2544:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2545:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2546:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
2547:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2548:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2549:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2550:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2551:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				taskEXIT_CRITICAL();
2552:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2553:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2554:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2555:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2556:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2557:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				switch if preemption is turned off. */
2558:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2559:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2560:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2561:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					performed if the unblocked task has a priority that is
2562:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					equal to or higher than the currently executing task. */
2563:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2564:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2565:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2566:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						is unsuspended. */
2567:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						xYieldPending = pdTRUE;
2568:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2569:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 48


2570:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2571:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2572:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2573:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2574:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2575:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2576:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
2577:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2578:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdFAIL;
2579:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2580:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2581:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		( void ) xTaskResumeAll();
2582:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2583:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
2584:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2585:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2586:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2587:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*----------------------------------------------------------*/
2588:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2589:Source\FreeRTOS\10.0.1\Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2590:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
2591:Source\FreeRTOS\10.0.1\Source/tasks.c **** TCB_t * pxTCB;
2592:Source\FreeRTOS\10.0.1\Source/tasks.c **** TickType_t xItemValue;
2593:Source\FreeRTOS\10.0.1\Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2594:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2595:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2596:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2597:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	tasks to be unblocked. */
2598:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2599:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2600:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2601:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2602:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		block. */
2603:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2604:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2605:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2606:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		delayed lists if it wraps to 0. */
2607:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xTickCount = xConstTickCount;
2608:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2609:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2610:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2611:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2612:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2613:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
2614:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2615:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2616:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2617:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2618:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2619:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2620:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2621:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		look any further down the list. */
2622:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2623:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2624:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			for( ;; )
2625:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2626:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 49


2627:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2628:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2629:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					to the maximum possible value so it is extremely
2630:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					unlikely that the
2631:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2632:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					next time through. */
2633:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2634:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
2635:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2636:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
2637:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2638:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2639:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2640:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					at which the task at the head of the delayed list must
2641:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					be removed from the Blocked state. */
2642:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2643:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2644:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2645:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2646:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2647:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2648:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						item value is the time at which the task at the head
2649:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2650:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						state -	so record the item value in
2651:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						xNextTaskUnblockTime. */
2652:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2653:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						break;
2654:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2655:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
2656:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2657:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2658:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2659:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2660:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2661:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2662:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2663:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2664:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					it from the event list. */
2665:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2666:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2667:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2668:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2669:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
2670:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2671:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2672:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2673:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2674:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2675:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					list. */
2676:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2677:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2678:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2679:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					context switch if preemption is turned off. */
2680:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2681:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2682:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						/* Preemption is on, but a context switch should
2683:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						only be performed if the unblocked task has a
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 50


2684:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						priority that is equal to or higher than the
2685:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						currently executing task. */
2686:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2687:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						{
2688:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2689:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						}
2690:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						else
2691:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						{
2692:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2693:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						}
2694:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2695:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2696:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2697:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2698:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2699:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2700:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2701:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2702:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2703:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2704:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2705:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2706:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2707:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2708:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2709:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
2710:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2711:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2712:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2713:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2714:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2715:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2716:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2717:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2718:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2719:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2720:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2721:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2722:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				vApplicationTickHook();
2723:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2724:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
2725:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2726:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2727:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2728:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2729:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2730:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2731:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	else
2732:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2733:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		++uxPendedTicks;
2734:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2735:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2736:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		scheduler is locked. */
2737:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2738:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2739:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			vApplicationTickHook();
2740:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 51


2741:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif
2742:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2743:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2744:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2745:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2746:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2747:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2748:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2749:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2750:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
2751:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2752:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2753:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2754:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2755:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2756:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2757:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	return xSwitchRequired;
2758:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
2759:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2760:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2761:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2762:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2763:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2764:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2765:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *xTCB;
2766:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2767:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2768:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		getting set. */
2769:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xTask == NULL )
2770:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2771:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2772:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2773:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
2774:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2775:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2776:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2777:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2778:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2779:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		the value can be accessed from an interrupt. */
2780:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
2781:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2782:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
2783:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2784:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2785:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2786:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2787:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2788:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2789:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2790:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2791:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2792:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *xTCB;
2793:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskHookFunction_t xReturn;
2794:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2795:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2796:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xTask == NULL )
2797:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 52


2798:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2799:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2800:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
2801:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2802:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2803:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2804:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2805:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2806:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		the value can be accessed from an interrupt. */
2807:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
2808:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2809:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2810:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2811:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
2812:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2813:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
2814:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2815:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2816:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2817:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2818:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2819:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2820:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2821:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2822:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2823:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *xTCB;
2824:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn;
2825:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2826:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2827:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xTask == NULL )
2828:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2829:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2830:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2831:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
2832:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2833:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2834:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2835:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2836:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2837:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2838:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2839:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2840:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
2841:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2842:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = pdFAIL;
2843:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2844:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2845:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
2846:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2847:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2848:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2849:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2850:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2851:Source\FreeRTOS\10.0.1\Source/tasks.c **** void vTaskSwitchContext( void )
2852:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
2853:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2854:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 53


2855:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2856:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		switch. */
2857:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xYieldPending = pdTRUE;
2858:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2859:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	else
2860:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2861:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xYieldPending = pdFALSE;
2862:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2863:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2864:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2865:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2866:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2867:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2868:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				#else
2869:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2870:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				#endif
2871:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2872:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2873:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2874:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2875:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				protection here so count values are only valid until the timer
2876:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2877:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				against suspect run time stat counter implementations - which
2878:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				are provided by the application, not the kernel. */
2879:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2880:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2881:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2882:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2883:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
2884:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2885:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2886:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2887:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2888:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2889:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2890:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2891:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2892:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{																									\
2893:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			const uint32_t * const pulStack = ( uint32_t * ) pxCurrentTCB->pxStack;							\
2894:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			const uint32_t ulCheckValue = ( uint32_t ) 0xa5a5a5a5;											\
2895:Source\FreeRTOS\10.0.1\Source/tasks.c **** 																											\
2896:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( ( pulStack[ 0 ] != ulCheckValue ) ||												\
2897:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				( pulStack[ 1 ] != ulCheckValue ) ||												\
2898:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				( pulStack[ 2 ] != ulCheckValue ) ||												\
2899:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				( pulStack[ 3 ] != ulCheckValue ) )												\
2900:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{																								\
2901:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				vApplicationStackOverflowHook( ( TaskHandle_t ) pxCurrentTCB, pxCurrentTCB->pcTaskName );	\
2902:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}																								\
2903:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2904:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2905:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2906:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		optimised asm code. */
2907:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2908:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2909:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2910:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2911:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 54


2912:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2913:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			structure specific to this task. */
2914:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2915:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2916:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2917:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2918:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
2919:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2920:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2921:Source\FreeRTOS\10.0.1\Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2922:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
2923:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxEventList );
2924:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2925:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2926:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2927:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2928:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2929:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2930:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2931:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2932:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2933:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2934:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2935:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
2936:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2937:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2938:Source\FreeRTOS\10.0.1\Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2939:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
2940:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxEventList );
2941:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2942:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2943:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	the event groups implementation. */
2944:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2945:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2946:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2947:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2948:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	task that is not in the Blocked state. */
2949:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2950:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2951:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2952:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2953:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2954:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2955:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	the task level). */
2956:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2957:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2958:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2959:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
2960:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2961:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2962:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2963:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2964:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2965:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2966:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( pxEventList );
2967:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2968:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* This function should not be called by application code hence the
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 55


2969:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2970:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2971:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		it should be called with the scheduler suspended. */
2972:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2973:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2974:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2975:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2976:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2977:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		can be used in place of vListInsert. */
2978:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2979:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2980:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2981:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2982:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2983:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2984:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2985:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2986:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2987:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2988:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2989:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2990:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2991:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2992:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TIMERS */
2993:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2994:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
2995:Source\FreeRTOS\10.0.1\Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2996:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
2997:Source\FreeRTOS\10.0.1\Source/tasks.c **** TCB_t *pxUnblockedTCB;
2998:Source\FreeRTOS\10.0.1\Source/tasks.c **** BaseType_t xReturn;
2999:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3000:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3001:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	called from a critical section within an ISR. */
3002:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3003:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3004:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3005:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	the delayed list, and add it to the ready list.
3006:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3007:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3008:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3009:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3010:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3011:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3012:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	pxEventList is not empty. */
3013:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
3014:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3015:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3016:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3017:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3018:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3019:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3020:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3021:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3022:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	else
3023:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3024:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3025:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pending until the scheduler is resumed. */
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 56


3026:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3027:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3028:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3029:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3030:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3031:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3032:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3033:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		it should force a context switch now. */
3034:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xReturn = pdTRUE;
3035:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3036:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3037:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3038:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xYieldPending = pdTRUE;
3039:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3040:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	else
3041:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3042:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xReturn = pdFALSE;
3043:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3044:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3045:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3046:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3047:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3048:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3049:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3050:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3051:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3052:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3053:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3054:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3055:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3056:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3057:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
3058:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3059:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	return xReturn;
3060:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
3061:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3062:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3063:Source\FreeRTOS\10.0.1\Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3064:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
3065:Source\FreeRTOS\10.0.1\Source/tasks.c **** TCB_t *pxUnblockedTCB;
3066:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3067:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3068:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	the event flags implementation. */
3069:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3070:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3071:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Store the new item value in the event list. */
3072:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3073:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3074:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3075:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	event flags. */
3076:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
3077:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3078:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3079:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3080:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3081:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3082:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	lists. */
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 57


3083:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3084:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3085:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3086:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3087:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3088:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3089:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		a context switch is required.  This function is called with the
3090:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3091:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3092:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xYieldPending = pdTRUE;
3093:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3094:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
3095:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3096:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3097:Source\FreeRTOS\10.0.1\Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3098:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
3099:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxTimeOut );
3100:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	taskENTER_CRITICAL();
3101:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3102:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3103:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3104:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3105:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	taskEXIT_CRITICAL();
3106:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
3107:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3108:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3109:Source\FreeRTOS\10.0.1\Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3110:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
3111:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3112:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3113:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3114:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
3115:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3116:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3117:Source\FreeRTOS\10.0.1\Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3118:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
3119:Source\FreeRTOS\10.0.1\Source/tasks.c **** BaseType_t xReturn;
3120:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3121:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxTimeOut );
3122:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxTicksToWait );
3123:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3124:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	taskENTER_CRITICAL();
3125:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3126:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3127:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3128:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3129:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3130:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3131:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3132:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3133:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3134:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				but has the same result. */
3135:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3136:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdTRUE;
3137:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3138:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
3139:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 58


3140:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3141:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3142:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3143:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3144:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3145:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				specified is the maximum block time then the task should block
3146:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				indefinitely, and therefore never time out. */
3147:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdFALSE;
3148:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3149:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
3150:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif
3151:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3152:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3153:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3154:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* The tick count is greater than the time at which
3155:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3156:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3157:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3158:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			was called. */
3159:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = pdTRUE;
3160:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3161:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3162:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3163:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3164:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3165:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3166:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = pdFALSE;
3167:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3168:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
3169:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3170:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			*pxTicksToWait = 0;
3171:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = pdTRUE;
3172:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3173:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3174:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	taskEXIT_CRITICAL();
3175:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3176:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	return xReturn;
3177:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
3178:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3179:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3180:Source\FreeRTOS\10.0.1\Source/tasks.c **** void vTaskMissedYield( void )
3181:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
3182:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	xYieldPending = pdTRUE;
3183:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
3184:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3185:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3186:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3187:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3188:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3189:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3190:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxReturn;
3191:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
3192:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3193:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xTask != NULL )
3194:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3195:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3196:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 59


3197:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3198:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
3199:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3200:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			uxReturn = 0U;
3201:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3202:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3203:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return uxReturn;
3204:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3205:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3206:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3207:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3208:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3209:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3210:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3211:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3212:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3213:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
3214:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3215:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xTask != NULL )
3216:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3217:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3218:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3219:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3220:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3221:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3222:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3223:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3224:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*
3225:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * -----------------------------------------------------------
3226:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * The Idle task.
3227:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * ----------------------------------------------------------
3228:Source\FreeRTOS\10.0.1\Source/tasks.c ****  *
3229:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3230:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3231:Source\FreeRTOS\10.0.1\Source/tasks.c ****  *
3232:Source\FreeRTOS\10.0.1\Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3233:Source\FreeRTOS\10.0.1\Source/tasks.c ****  *
3234:Source\FreeRTOS\10.0.1\Source/tasks.c ****  */
3235:Source\FreeRTOS\10.0.1\Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3236:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
3237:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Stop warnings. */
3238:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	( void ) pvParameters;
3239:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3240:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3241:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3242:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3243:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3244:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3245:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	any. */
3246:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3247:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3248:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	for( ;; )
3249:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3250:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3251:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3252:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3253:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 60


3254:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3255:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3256:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3257:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			see if any other task has become available.  If we are using
3258:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3259:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			will automatically get the processor anyway. */
3260:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			taskYIELD();
3261:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3262:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3263:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3264:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3265:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3266:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3267:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3268:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			to run then the idle task should yield before the end of the
3269:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			timeslice.
3270:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3271:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			A critical region is not required here as we are just reading from
3272:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3273:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3274:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3275:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3276:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3277:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				taskYIELD();
3278:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3279:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
3280:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3281:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3282:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3283:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3284:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3285:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3286:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3287:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3288:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3289:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3290:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3291:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			allows the application designer to add background functionality
3292:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			without the overhead of a separate task.
3293:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3294:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3295:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			vApplicationIdleHook();
3296:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3297:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3298:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3299:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3300:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3301:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		user defined low power mode	implementations require
3302:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3303:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3304:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3305:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3306:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3307:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3308:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3309:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			test of the expected idle time is performed without the
3310:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 61


3311:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			valid. */
3312:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3313:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3314:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3315:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3316:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				vTaskSuspendAll();
3317:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
3318:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3319:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					time can be sampled again, and this time its value can
3320:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					be used. */
3321:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3322:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3323:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3324:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3325:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if the application does not want
3326:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3327:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3328:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3329:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3330:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
3331:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3332:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3333:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3334:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
3335:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
3336:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
3337:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3338:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
3339:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
3340:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				( void ) xTaskResumeAll();
3341:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3342:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
3343:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3344:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3345:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3346:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3347:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3348:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3349:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
3350:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3351:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3352:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3353:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3354:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3355:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3356:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3357:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3358:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3359:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3360:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3361:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3362:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3363:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			eReturn = eAbortSleep;
3364:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3365:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3366:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3367:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 62


3368:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			eReturn = eAbortSleep;
3369:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3370:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
3371:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3372:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3373:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3374:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3375:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			interrupts. */
3376:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3377:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3378:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3379:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3380:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
3381:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3382:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3383:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3384:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3385:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3386:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return eReturn;
3387:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3388:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3389:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3390:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3391:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3392:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3393:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3394:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3395:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3396:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
3397:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3398:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3399:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3400:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3401:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3402:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3403:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3404:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3405:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3406:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3407:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3408:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3409:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3410:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3411:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3412:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void *pvReturn = NULL;
3413:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
3414:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3415:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3416:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3417:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3418:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3419:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3420:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
3421:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3422:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pvReturn = NULL;
3423:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3424:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 63


3425:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return pvReturn;
3426:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3427:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3428:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3429:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3430:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3431:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3432:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3433:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3434:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3435:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
3436:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3437:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3438:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		the calling task. */
3439:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3440:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3441:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3442:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3443:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3444:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3445:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3446:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3447:Source\FreeRTOS\10.0.1\Source/tasks.c **** static void prvInitialiseTaskLists( void )
3448:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
3449:Source\FreeRTOS\10.0.1\Source/tasks.c **** UBaseType_t uxPriority;
3450:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3451:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3452:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3453:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3454:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3455:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3456:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3457:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3458:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3459:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3460:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3461:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3462:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3463:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3464:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3465:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3466:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3467:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3468:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3469:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3470:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3471:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3472:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3473:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	using list2. */
3474:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3475:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3476:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
3477:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3478:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3479:Source\FreeRTOS\10.0.1\Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3480:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
3481:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 64


3482:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3483:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3484:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3485:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3486:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		TCB_t *pxTCB;
3487:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3488:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
3489:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		being called too often in the idle task. */
3490:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3491:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3492:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			taskENTER_CRITICAL();
3493:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3494:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3495:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3496:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3497:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3498:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3499:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			taskEXIT_CRITICAL();
3500:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3501:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3502:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3503:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3504:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3505:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
3506:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3507:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3508:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3509:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3510:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3511:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3512:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
3513:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3514:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3515:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3516:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3517:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3518:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3519:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3520:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3521:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3522:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3523:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3524:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3525:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3526:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3527:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#else
3528:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3529:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3530:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3531:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif
3532:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3533:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3534:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3535:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3536:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3537:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#else
3538:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 65


3539:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3540:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3541:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif
3542:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3543:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3544:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3545:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		state is just set to whatever is passed in. */
3546:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( eState != eInvalid )
3547:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3548:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3549:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3550:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3551:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3552:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
3553:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3554:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3555:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3556:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3557:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
3558:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3559:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3560:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3561:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( eState == eSuspended )
3562:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
3563:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						vTaskSuspendAll();
3564:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						{
3565:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3566:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							{
3567:Source\FreeRTOS\10.0.1\Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3568:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							}
3569:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						}
3570:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						( void ) xTaskResumeAll();
3571:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
3572:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
3573:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3574:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3575:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3576:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
3577:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3578:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3579:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3580:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3581:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3582:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3583:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3584:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3585:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3586:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3587:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3588:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3589:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#else
3590:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3591:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3592:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3593:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#endif
3594:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3595:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 66


3596:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3597:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3598:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3599:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3600:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3601:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3602:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3603:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3604:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3605:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3606:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3607:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3608:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3609:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxTask = 0;
3610:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3611:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3612:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3613:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3614:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3615:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3616:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3617:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3618:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3619:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			do
3620:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3621:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3622:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3623:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				uxTask++;
3624:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3625:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3626:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
3627:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3628:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3629:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3630:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3631:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return uxTask;
3632:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3633:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3634:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3635:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3636:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3637:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3638:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3639:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3640:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 110              		.loc 1 3640 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 115              	.LVL8:
3641:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	uint32_t ulCount = 0U;
 116              		.loc 1 3641 0
 117 0000 0023     		movs	r3, #0
3642:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3643:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 118              		.loc 1 3643 0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 67


 119 0002 01E0     		b	.L15
 120              	.LVL9:
 121              	.L16:
3644:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3645:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 122              		.loc 1 3645 0
 123 0004 0130     		adds	r0, r0, #1
 124              	.LVL10:
3646:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			ulCount++;
 125              		.loc 1 3646 0
 126 0006 0133     		adds	r3, r3, #1
 127              	.LVL11:
 128              	.L15:
3643:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 129              		.loc 1 3643 0
 130 0008 0278     		ldrb	r2, [r0]
 131 000a A52A     		cmp	r2, #165
 132 000c FAD0     		beq	.L16
3647:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3648:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3649:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 133              		.loc 1 3649 0
 134 000e 9B08     		lsrs	r3, r3, #2
 135              	.LVL12:
3650:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3651:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return ( uint16_t ) ulCount;
 136              		.loc 1 3651 0
 137 0010 98B2     		uxth	r0, r3
 138              	.LVL13:
3652:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 139              		.loc 1 3652 0
 140              		@ sp needed
 141 0012 7047     		bx	lr
 142              		.cfi_endproc
 143              	.LFE80:
 144              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 145              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 146              		.align	2
 147              		.code	16
 148              		.thumb_func
 149              		.type	prvResetNextTaskUnblockTime, %function
 150              	prvResetNextTaskUnblockTime:
 151              	.LFB83:
3653:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3654:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3655:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3656:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3657:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3658:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3659:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3660:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3661:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
3662:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	uint8_t *pucEndOfStack;
3663:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxReturn;
3664:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3665:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3666:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 68


3667:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3668:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3669:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) &(pxTCB->pxStack);
3670:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3671:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#else
3672:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3673:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3674:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3675:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif
3676:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3677:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3678:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3679:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return uxReturn;
3680:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3681:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3682:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3683:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3684:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3685:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3686:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3687:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3688:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3689:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3690:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3691:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		want to allocate and clean RAM statically. */
3692:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3693:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3694:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3695:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3696:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3697:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3698:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3699:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3700:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3701:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3702:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3703:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3704:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3705:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			the stack and TCB. */
3706:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3707:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			vPortFree( pxTCB );
3708:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3709:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated 
3710:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3711:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3712:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			check what was statically allocated before trying to free the
3713:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			memory. */
3714:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3715:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3716:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3717:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				must be freed. */
3718:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3719:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				vPortFree( pxTCB );
3720:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3721:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3722:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3723:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 69


3724:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				only memory that must be freed. */
3725:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				vPortFree( pxTCB );
3726:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3727:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
3728:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3729:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3730:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				nothing needs to be freed. */
3731:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3732:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3733:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3734:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3735:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3736:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3737:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3738:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3739:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3740:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3741:Source\FreeRTOS\10.0.1\Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3742:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
 152              		.loc 1 3742 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              		@ link register save eliminated.
3743:Source\FreeRTOS\10.0.1\Source/tasks.c **** TCB_t *pxTCB;
3744:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3745:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 157              		.loc 1 3745 0
 158 0000 0A4B     		ldr	r3, .L22
 159 0002 9B6A     		ldr	r3, [r3, #40]
 160 0004 1B68     		ldr	r3, [r3]
 161 0006 002B     		cmp	r3, #0
 162 0008 01D1     		bne	.L21
 163 000a 0133     		adds	r3, r3, #1
 164 000c 00E0     		b	.L18
 165              	.L21:
 166 000e 0023     		movs	r3, #0
 167              	.L18:
 168              		.loc 1 3745 0 is_stmt 0 discriminator 4
 169 0010 002B     		cmp	r3, #0
 170 0012 04D0     		beq	.L19
3746:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3747:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3748:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3749:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3750:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		there is an item in the delayed list. */
3751:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 171              		.loc 1 3751 0 is_stmt 1
 172 0014 0122     		movs	r2, #1
 173 0016 5242     		rsbs	r2, r2, #0
 174 0018 044B     		ldr	r3, .L22
 175 001a DA62     		str	r2, [r3, #44]
 176 001c 05E0     		b	.L17
 177              	.L19:
3752:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3753:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	else
3754:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 70


3755:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3756:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3757:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3758:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		from the Blocked state. */
3759:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 178              		.loc 1 3759 0
 179 001e 034B     		ldr	r3, .L22
 180 0020 9A6A     		ldr	r2, [r3, #40]
 181 0022 D268     		ldr	r2, [r2, #12]
 182 0024 D268     		ldr	r2, [r2, #12]
 183              	.LVL14:
3760:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 184              		.loc 1 3760 0
 185 0026 5268     		ldr	r2, [r2, #4]
 186              	.LVL15:
 187 0028 DA62     		str	r2, [r3, #44]
 188              	.L17:
3761:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3762:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
 189              		.loc 1 3762 0
 190              		@ sp needed
 191 002a 7047     		bx	lr
 192              	.L23:
 193              		.align	2
 194              	.L22:
 195 002c 00000000 		.word	.LANCHOR0
 196              		.cfi_endproc
 197              	.LFE83:
 198              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 199              		.section	.text.prvDeleteTCB,"ax",%progbits
 200              		.align	2
 201              		.code	16
 202              		.thumb_func
 203              		.type	prvDeleteTCB, %function
 204              	prvDeleteTCB:
 205              	.LFB82:
3688:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 206              		.loc 1 3688 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210              	.LVL16:
 211 0000 10B5     		push	{r4, lr}
 212              		.cfi_def_cfa_offset 8
 213              		.cfi_offset 4, -8
 214              		.cfi_offset 14, -4
 215 0002 0400     		movs	r4, r0
3706:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			vPortFree( pxTCB );
 216              		.loc 1 3706 0
 217 0004 006B     		ldr	r0, [r0, #48]
 218              	.LVL17:
 219 0006 FFF7FEFF 		bl	vPortFree
 220              	.LVL18:
3707:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 221              		.loc 1 3707 0
 222 000a 2000     		movs	r0, r4
 223 000c FFF7FEFF 		bl	vPortFree
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 71


 224              	.LVL19:
3736:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 225              		.loc 1 3736 0
 226              		@ sp needed
 227              	.LVL20:
 228 0010 10BD     		pop	{r4, pc}
 229              		.cfi_endproc
 230              	.LFE82:
 231              		.size	prvDeleteTCB, .-prvDeleteTCB
 232 0012 C046     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 233              		.align	2
 234              		.code	16
 235              		.thumb_func
 236              		.type	prvInitialiseNewTask, %function
 237              	prvInitialiseNewTask:
 238              	.LFB38:
 831:Source\FreeRTOS\10.0.1\Source/tasks.c **** StackType_t *pxTopOfStack;
 239              		.loc 1 831 0
 240              		.cfi_startproc
 241              		@ args = 16, pretend = 0, frame = 8
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 243              	.LVL21:
 244 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 245              		.cfi_def_cfa_offset 20
 246              		.cfi_offset 4, -20
 247              		.cfi_offset 5, -16
 248              		.cfi_offset 6, -12
 249              		.cfi_offset 7, -8
 250              		.cfi_offset 14, -4
 251 0002 83B0     		sub	sp, sp, #12
 252              		.cfi_def_cfa_offset 32
 253 0004 0090     		str	r0, [sp]
 254 0006 0D00     		movs	r5, r1
 255 0008 1700     		movs	r7, r2
 256 000a 0193     		str	r3, [sp, #4]
 257 000c 089C     		ldr	r4, [sp, #32]
 258 000e 0A9E     		ldr	r6, [sp, #40]
 853:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 259              		.loc 1 853 0
 260 0010 9200     		lsls	r2, r2, #2
 261              	.LVL22:
 262 0012 A521     		movs	r1, #165
 263              	.LVL23:
 264 0014 306B     		ldr	r0, [r6, #48]
 265              	.LVL24:
 266 0016 FFF7FEFF 		bl	memset
 267              	.LVL25:
 863:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 268              		.loc 1 863 0
 269 001a 224B     		ldr	r3, .L34
 270 001c FB18     		adds	r3, r7, r3
 271 001e 9B00     		lsls	r3, r3, #2
 272 0020 326B     		ldr	r2, [r6, #48]
 273 0022 9446     		mov	ip, r2
 274 0024 6344     		add	r3, r3, ip
 275              	.LVL26:
 864:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 72


 276              		.loc 1 864 0
 277 0026 0722     		movs	r2, #7
 278 0028 9343     		bics	r3, r2
 279              	.LVL27:
 280 002a 1F00     		movs	r7, r3
 281              	.LVL28:
 891:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 282              		.loc 1 891 0
 283 002c 0023     		movs	r3, #0
 284              	.LVL29:
 285 002e 08E0     		b	.L26
 286              	.LVL30:
 287              	.L28:
 893:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 288              		.loc 1 893 0
 289 0030 E918     		adds	r1, r5, r3
 290 0032 0878     		ldrb	r0, [r1]
 291 0034 F218     		adds	r2, r6, r3
 292 0036 3432     		adds	r2, r2, #52
 293 0038 1070     		strb	r0, [r2]
 898:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 294              		.loc 1 898 0
 295 003a 0A78     		ldrb	r2, [r1]
 296 003c 002A     		cmp	r2, #0
 297 003e 02D0     		beq	.L27
 891:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 298              		.loc 1 891 0 discriminator 2
 299 0040 0133     		adds	r3, r3, #1
 300              	.LVL31:
 301              	.L26:
 891:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 302              		.loc 1 891 0 is_stmt 0 discriminator 1
 303 0042 0F2B     		cmp	r3, #15
 304 0044 F4D9     		bls	.L28
 305              	.L27:
 910:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 306              		.loc 1 910 0 is_stmt 1
 307 0046 0022     		movs	r2, #0
 308 0048 4323     		movs	r3, #67
 309              	.LVL32:
 310 004a F254     		strb	r2, [r6, r3]
 914:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 311              		.loc 1 914 0
 312 004c 062C     		cmp	r4, #6
 313 004e 00D9     		bls	.L29
 916:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 314              		.loc 1 916 0
 315 0050 0624     		movs	r4, #6
 316              	.L29:
 317              	.LVL33:
 923:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 318              		.loc 1 923 0
 319 0052 F462     		str	r4, [r6, #44]
 931:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 320              		.loc 1 931 0
 321 0054 301D     		adds	r0, r6, #4
 322 0056 FFF7FEFF 		bl	vListInitialiseItem
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 73


 323              	.LVL34:
 932:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 324              		.loc 1 932 0
 325 005a 3000     		movs	r0, r6
 326 005c 1830     		adds	r0, r0, #24
 327 005e FFF7FEFF 		bl	vListInitialiseItem
 328              	.LVL35:
 936:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 329              		.loc 1 936 0
 330 0062 3661     		str	r6, [r6, #16]
 939:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 331              		.loc 1 939 0
 332 0064 0723     		movs	r3, #7
 333 0066 1C1B     		subs	r4, r3, r4
 334              	.LVL36:
 335 0068 B461     		str	r4, [r6, #24]
 940:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 336              		.loc 1 940 0
 337 006a 7662     		str	r6, [r6, #36]
 338              	.LVL37:
 973:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 339              		.loc 1 973 0
 340 006c 0022     		movs	r2, #0
 341 006e 06E0     		b	.L30
 342              	.LVL38:
 343              	.L31:
 975:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 344              		.loc 1 975 0 discriminator 3
 345 0070 1300     		movs	r3, r2
 346 0072 1233     		adds	r3, r3, #18
 347 0074 9B00     		lsls	r3, r3, #2
 348 0076 F318     		adds	r3, r6, r3
 349 0078 0021     		movs	r1, #0
 350 007a 5960     		str	r1, [r3, #4]
 973:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 351              		.loc 1 973 0 discriminator 3
 352 007c 0132     		adds	r2, r2, #1
 353              	.LVL39:
 354              	.L30:
 973:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 355              		.loc 1 973 0 is_stmt 0 discriminator 1
 356 007e 042A     		cmp	r2, #4
 357 0080 F6D9     		bls	.L31
 982:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 358              		.loc 1 982 0 is_stmt 1
 359 0082 0023     		movs	r3, #0
 360 0084 3366     		str	r3, [r6, #96]
 983:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 361              		.loc 1 983 0
 362 0086 6422     		movs	r2, #100
 363              	.LVL40:
 364 0088 B354     		strb	r3, [r6, r2]
1010:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 365              		.loc 1 1010 0
 366 008a 019A     		ldr	r2, [sp, #4]
 367 008c 0099     		ldr	r1, [sp]
 368 008e 3800     		movs	r0, r7
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 74


 369 0090 FFF7FEFF 		bl	pxPortInitialiseStack
 370              	.LVL41:
 371 0094 3060     		str	r0, [r6]
1014:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 372              		.loc 1 1014 0
 373 0096 099B     		ldr	r3, [sp, #36]
 374 0098 002B     		cmp	r3, #0
 375 009a 00D0     		beq	.L25
1018:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 376              		.loc 1 1018 0
 377 009c 1E60     		str	r6, [r3]
 378              	.L25:
1024:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 379              		.loc 1 1024 0
 380 009e 03B0     		add	sp, sp, #12
 381              	.LVL42:
 382              		@ sp needed
 383              	.LVL43:
 384              	.LVL44:
 385 00a0 F0BD     		pop	{r4, r5, r6, r7, pc}
 386              	.L35:
 387 00a2 C046     		.align	2
 388              	.L34:
 389 00a4 FFFFFF3F 		.word	1073741823
 390              		.cfi_endproc
 391              	.LFE38:
 392              		.size	prvInitialiseNewTask, .-prvInitialiseNewTask
 393              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 394              		.align	2
 395              		.code	16
 396              		.thumb_func
 397              		.type	prvInitialiseTaskLists, %function
 398              	prvInitialiseTaskLists:
 399              	.LFB76:
3448:Source\FreeRTOS\10.0.1\Source/tasks.c **** UBaseType_t uxPriority;
 400              		.loc 1 3448 0
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 0
 403              		@ frame_needed = 0, uses_anonymous_args = 0
 404 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 405              		.cfi_def_cfa_offset 24
 406              		.cfi_offset 3, -24
 407              		.cfi_offset 4, -20
 408              		.cfi_offset 5, -16
 409              		.cfi_offset 6, -12
 410              		.cfi_offset 7, -8
 411              		.cfi_offset 14, -4
 412              	.LVL45:
3451:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 413              		.loc 1 3451 0
 414 0002 0024     		movs	r4, #0
 415 0004 08E0     		b	.L37
 416              	.LVL46:
 417              	.L38:
3453:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 418              		.loc 1 3453 0 discriminator 3
 419 0006 A200     		lsls	r2, r4, #2
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 75


 420 0008 1219     		adds	r2, r2, r4
 421 000a 9300     		lsls	r3, r2, #2
 422 000c 1048     		ldr	r0, .L39
 423 000e 3030     		adds	r0, r0, #48
 424 0010 C018     		adds	r0, r0, r3
 425 0012 FFF7FEFF 		bl	vListInitialise
 426              	.LVL47:
3451:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 427              		.loc 1 3451 0 discriminator 3
 428 0016 0134     		adds	r4, r4, #1
 429              	.LVL48:
 430              	.L37:
3451:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 431              		.loc 1 3451 0 is_stmt 0 discriminator 1
 432 0018 062C     		cmp	r4, #6
 433 001a F4D9     		bls	.L38
3456:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 434              		.loc 1 3456 0 is_stmt 1
 435 001c 0D4C     		ldr	r4, .L39+4
 436              	.LVL49:
 437 001e 2700     		movs	r7, r4
 438 0020 3C37     		adds	r7, r7, #60
 439 0022 3800     		movs	r0, r7
 440 0024 FFF7FEFF 		bl	vListInitialise
 441              	.LVL50:
3457:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 442              		.loc 1 3457 0
 443 0028 2600     		movs	r6, r4
 444 002a 5036     		adds	r6, r6, #80
 445 002c 3000     		movs	r0, r6
 446 002e FFF7FEFF 		bl	vListInitialise
 447              	.LVL51:
3458:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 448              		.loc 1 3458 0
 449 0032 074D     		ldr	r5, .L39
 450 0034 2800     		movs	r0, r5
 451 0036 1430     		adds	r0, r0, #20
 452 0038 FFF7FEFF 		bl	vListInitialise
 453              	.LVL52:
3462:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 454              		.loc 1 3462 0
 455 003c 2000     		movs	r0, r4
 456 003e 6430     		adds	r0, r0, #100
 457 0040 FFF7FEFF 		bl	vListInitialise
 458              	.LVL53:
3468:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 459              		.loc 1 3468 0
 460 0044 2800     		movs	r0, r5
 461 0046 FFF7FEFF 		bl	vListInitialise
 462              	.LVL54:
3474:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 463              		.loc 1 3474 0
 464 004a AF62     		str	r7, [r5, #40]
3475:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
 465              		.loc 1 3475 0
 466 004c A667     		str	r6, [r4, #120]
3476:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 76


 467              		.loc 1 3476 0
 468              		@ sp needed
 469 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 470              	.L40:
 471              		.align	2
 472              	.L39:
 473 0050 00000000 		.word	.LANCHOR0
 474 0054 80000000 		.word	.LANCHOR1
 475              		.cfi_endproc
 476              	.LFE76:
 477              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 478              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 479              		.align	2
 480              		.code	16
 481              		.thumb_func
 482              		.type	prvAddNewTaskToReadyList, %function
 483              	prvAddNewTaskToReadyList:
 484              	.LFB39:
1028:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 485              		.loc 1 1028 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489              	.LVL55:
 490 0000 10B5     		push	{r4, lr}
 491              		.cfi_def_cfa_offset 8
 492              		.cfi_offset 4, -8
 493              		.cfi_offset 14, -4
 494 0002 0400     		movs	r4, r0
1031:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 495              		.loc 1 1031 0
 496 0004 FFF7FEFF 		bl	vPortEnterCritical
 497              	.LVL56:
1033:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 498              		.loc 1 1033 0
 499 0008 1F4A     		ldr	r2, .L46
 500 000a D36F     		ldr	r3, [r2, #124]
 501 000c 0133     		adds	r3, r3, #1
 502 000e D367     		str	r3, [r2, #124]
1034:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 503              		.loc 1 1034 0
 504 0010 1E4B     		ldr	r3, .L46+4
 505 0012 1B68     		ldr	r3, [r3]
 506 0014 002B     		cmp	r3, #0
 507 0016 07D1     		bne	.L42
1038:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 508              		.loc 1 1038 0
 509 0018 1C4B     		ldr	r3, .L46+4
 510 001a 1C60     		str	r4, [r3]
1040:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 511              		.loc 1 1040 0
 512 001c D36F     		ldr	r3, [r2, #124]
 513 001e 012B     		cmp	r3, #1
 514 0020 0ED1     		bne	.L43
1045:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 515              		.loc 1 1045 0
 516 0022 FFF7FEFF 		bl	prvInitialiseTaskLists
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 77


 517              	.LVL57:
 518 0026 0BE0     		b	.L43
 519              	.L42:
1057:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 520              		.loc 1 1057 0
 521 0028 184B     		ldr	r3, .L46+4
 522 002a 5B68     		ldr	r3, [r3, #4]
 523 002c 002B     		cmp	r3, #0
 524 002e 07D1     		bne	.L43
1059:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 525              		.loc 1 1059 0
 526 0030 164B     		ldr	r3, .L46+4
 527 0032 1B68     		ldr	r3, [r3]
 528 0034 DB6A     		ldr	r3, [r3, #44]
 529 0036 E26A     		ldr	r2, [r4, #44]
 530 0038 9342     		cmp	r3, r2
 531 003a 01D8     		bhi	.L43
1061:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 532              		.loc 1 1061 0
 533 003c 134B     		ldr	r3, .L46+4
 534 003e 1C60     		str	r4, [r3]
 535              	.L43:
1074:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 536              		.loc 1 1074 0
 537 0040 124A     		ldr	r2, .L46+4
 538 0042 9368     		ldr	r3, [r2, #8]
 539 0044 0133     		adds	r3, r3, #1
 540 0046 9360     		str	r3, [r2, #8]
1079:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 541              		.loc 1 1079 0
 542 0048 6364     		str	r3, [r4, #68]
1084:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 543              		.loc 1 1084 0
 544 004a E36A     		ldr	r3, [r4, #44]
 545 004c D268     		ldr	r2, [r2, #12]
 546 004e 9342     		cmp	r3, r2
 547 0050 01D9     		bls	.L44
1084:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 548              		.loc 1 1084 0 is_stmt 0 discriminator 1
 549 0052 0E4A     		ldr	r2, .L46+4
 550 0054 D360     		str	r3, [r2, #12]
 551              	.L44:
1084:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 552              		.loc 1 1084 0 discriminator 3
 553 0056 211D     		adds	r1, r4, #4
 554 0058 9A00     		lsls	r2, r3, #2
 555 005a D318     		adds	r3, r2, r3
 556 005c 9A00     		lsls	r2, r3, #2
 557 005e 0C48     		ldr	r0, .L46+8
 558 0060 3030     		adds	r0, r0, #48
 559 0062 8018     		adds	r0, r0, r2
 560 0064 FFF7FEFF 		bl	vListInsertEnd
 561              	.LVL58:
1088:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 562              		.loc 1 1088 0 is_stmt 1 discriminator 3
 563 0068 FFF7FEFF 		bl	vPortExitCritical
 564              	.LVL59:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 78


1090:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 565              		.loc 1 1090 0 discriminator 3
 566 006c 074B     		ldr	r3, .L46+4
 567 006e 5B68     		ldr	r3, [r3, #4]
 568 0070 002B     		cmp	r3, #0
 569 0072 07D0     		beq	.L41
1094:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 570              		.loc 1 1094 0
 571 0074 054B     		ldr	r3, .L46+4
 572 0076 1B68     		ldr	r3, [r3]
 573 0078 DA6A     		ldr	r2, [r3, #44]
 574 007a E36A     		ldr	r3, [r4, #44]
 575 007c 9A42     		cmp	r2, r3
 576 007e 01D2     		bcs	.L41
1096:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 577              		.loc 1 1096 0
 578 0080 FFF7FEFF 		bl	vPortYield
 579              	.LVL60:
 580              	.L41:
1107:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 581              		.loc 1 1107 0
 582              		@ sp needed
 583              	.LVL61:
 584 0084 10BD     		pop	{r4, pc}
 585              	.L47:
 586 0086 C046     		.align	2
 587              	.L46:
 588 0088 80000000 		.word	.LANCHOR1
 589 008c 00010000 		.word	.LANCHOR2
 590 0090 00000000 		.word	.LANCHOR0
 591              		.cfi_endproc
 592              	.LFE39:
 593              		.size	prvAddNewTaskToReadyList, .-prvAddNewTaskToReadyList
 594              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 595              		.align	2
 596              		.code	16
 597              		.thumb_func
 598              		.type	prvCheckTasksWaitingTermination, %function
 599              	prvCheckTasksWaitingTermination:
 600              	.LFB77:
3480:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 601              		.loc 1 3480 0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 0
 604              		@ frame_needed = 0, uses_anonymous_args = 0
 605 0000 70B5     		push	{r4, r5, r6, lr}
 606              		.cfi_def_cfa_offset 16
 607              		.cfi_offset 4, -16
 608              		.cfi_offset 5, -12
 609              		.cfi_offset 6, -8
 610              		.cfi_offset 14, -4
 611              	.LBB2:
3490:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 612              		.loc 1 3490 0
 613 0002 13E0     		b	.L49
 614              	.L50:
3492:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 79


 615              		.loc 1 3492 0
 616 0004 FFF7FEFF 		bl	vPortEnterCritical
 617              	.LVL62:
3494:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 618              		.loc 1 3494 0
 619 0008 0B4C     		ldr	r4, .L51
 620 000a 236F     		ldr	r3, [r4, #112]
 621 000c DD68     		ldr	r5, [r3, #12]
 622              	.LVL63:
3495:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 623              		.loc 1 3495 0
 624 000e 281D     		adds	r0, r5, #4
 625 0010 FFF7FEFF 		bl	uxListRemove
 626              	.LVL64:
3496:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 627              		.loc 1 3496 0
 628 0014 E36F     		ldr	r3, [r4, #124]
 629 0016 013B     		subs	r3, r3, #1
 630 0018 E367     		str	r3, [r4, #124]
3497:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 631              		.loc 1 3497 0
 632 001a 084A     		ldr	r2, .L51+4
 633 001c 1369     		ldr	r3, [r2, #16]
 634 001e 013B     		subs	r3, r3, #1
 635 0020 1361     		str	r3, [r2, #16]
3499:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 636              		.loc 1 3499 0
 637 0022 FFF7FEFF 		bl	vPortExitCritical
 638              	.LVL65:
3501:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 639              		.loc 1 3501 0
 640 0026 2800     		movs	r0, r5
 641 0028 FFF7FEFF 		bl	prvDeleteTCB
 642              	.LVL66:
 643              	.L49:
3490:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 644              		.loc 1 3490 0
 645 002c 034B     		ldr	r3, .L51+4
 646 002e 1B69     		ldr	r3, [r3, #16]
 647 0030 002B     		cmp	r3, #0
 648 0032 E7D1     		bne	.L50
 649              	.LBE2:
3505:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 650              		.loc 1 3505 0
 651              		@ sp needed
 652 0034 70BD     		pop	{r4, r5, r6, pc}
 653              	.L52:
 654 0036 C046     		.align	2
 655              	.L51:
 656 0038 80000000 		.word	.LANCHOR1
 657 003c 00010000 		.word	.LANCHOR2
 658              		.cfi_endproc
 659              	.LFE77:
 660              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 661              		.section	.text.prvIdleTask,"ax",%progbits
 662              		.align	2
 663              		.code	16
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 80


 664              		.thumb_func
 665              		.type	prvIdleTask, %function
 666              	prvIdleTask:
 667              	.LFB73:
3236:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Stop warnings. */
 668              		.loc 1 3236 0
 669              		.cfi_startproc
 670              		@ Volatile: function does not return.
 671              		@ args = 0, pretend = 0, frame = 0
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 673              	.LVL67:
 674 0000 10B5     		push	{r4, lr}
 675              		.cfi_def_cfa_offset 8
 676              		.cfi_offset 4, -8
 677              		.cfi_offset 14, -4
 678              	.LVL68:
 679              	.L54:
3252:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 680              		.loc 1 3252 0
 681 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 682              	.LVL69:
3275:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 683              		.loc 1 3275 0
 684 0006 034B     		ldr	r3, .L56
 685 0008 1B6B     		ldr	r3, [r3, #48]
 686 000a 012B     		cmp	r3, #1
 687 000c F9D9     		bls	.L54
3277:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 688              		.loc 1 3277 0
 689 000e FFF7FEFF 		bl	vPortYield
 690              	.LVL70:
 691 0012 F6E7     		b	.L54
 692              	.L57:
 693              		.align	2
 694              	.L56:
 695 0014 00000000 		.word	.LANCHOR0
 696              		.cfi_endproc
 697              	.LFE73:
 698              		.size	prvIdleTask, .-prvIdleTask
 699              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 700              		.align	2
 701              		.code	16
 702              		.thumb_func
 703              		.type	prvAddCurrentTaskToDelayedList, %function
 704              	prvAddCurrentTaskToDelayedList:
 705              	.LFB95:
3763:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3764:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3765:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3766:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3767:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3768:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3769:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskHandle_t xReturn;
3770:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3771:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* A critical section is not required as this is not called from
3772:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3773:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		individual execution thread. */
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 81


3774:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xReturn = pxCurrentTCB;
3775:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3776:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
3777:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3778:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3779:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3780:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3781:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3782:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3783:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3784:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3785:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3786:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn;
3787:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3788:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3789:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3790:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3791:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3792:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
3793:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3794:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3795:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3796:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3797:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3798:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
3799:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3800:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3801:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3802:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3803:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3804:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
3805:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3806:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3807:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3808:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3809:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3810:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3811:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3812:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3813:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3814:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
3815:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3816:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3817:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3818:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3819:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3820:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxMutexHolder != NULL )
3821:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3822:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3823:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3824:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3825:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3826:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3827:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3828:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3829:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				not being used for anything else. */
3830:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 82


3831:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
3832:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3833:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
3834:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
3835:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
3836:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3837:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
3838:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3839:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3840:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				to be moved into a new list. */
3841:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3842:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
3843:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3844:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
3845:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3846:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
3847:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
3848:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
3849:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3850:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
3851:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3852:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3853:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3854:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3855:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
3856:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
3857:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
3858:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Just inherit the priority. */
3859:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3860:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
3861:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3862:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3863:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3864:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Inheritance occurred. */
3865:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdTRUE;
3866:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3867:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
3868:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3869:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3870:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
3871:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3872:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
3873:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					current priority of the mutex holder is not lower than the
3874:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					priority of the task attempting to take the mutex.
3875:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
3876:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					priority, but inheritance would have occurred if that had
3877:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					not been the case. */
3878:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					xReturn = pdTRUE;
3879:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
3880:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
3881:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
3882:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3883:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
3884:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3885:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3886:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
3887:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 83


3888:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3889:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3890:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3891:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
3892:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3893:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3894:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_MUTEXES */
3895:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3896:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3897:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3898:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3899:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3900:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3901:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3902:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3903:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3904:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxMutexHolder != NULL )
3905:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3906:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3907:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3908:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3909:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			be the running state task. */
3910:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3911:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3912:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3913:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3914:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3915:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			task? */
3916:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3917:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3918:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3919:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3920:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
3921:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3922:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3923:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3924:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					holding task then it must be the running state task.  Remove
3925:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					the holding task from the ready list. */
3926:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3927:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
3928:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3929:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
3930:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
3931:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
3932:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3933:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
3934:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3935:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3936:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					new	ready list. */
3937:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3938:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3939:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3940:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3941:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					any other purpose if this task is running, and it must be
3942:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					running to give back the mutex. */
3943:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3944:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 84


3945:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3946:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3947:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					This is only actually required in the corner case whereby
3948:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3949:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					in an order different to that in which they were taken.
3950:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3951:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3952:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3953:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					a task is waiting on it or not. */
3954:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					xReturn = pdTRUE;
3955:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
3956:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
3957:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
3958:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3959:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
3960:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3961:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
3962:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3963:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3964:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3965:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3966:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
3967:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3968:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3969:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3970:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3971:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
3972:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3973:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3974:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_MUTEXES */
3975:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3976:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3977:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3978:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3979:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3980:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3981:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3982:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
3983:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
3984:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3985:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxMutexHolder != NULL )
3986:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3987:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
3988:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			one mutex. */
3989:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3990:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
3991:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
3992:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
3993:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			holding task's base priority and the priority of the highest
3994:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
3995:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3996:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3997:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
3998:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3999:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4000:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4001:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 85


4002:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4003:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4004:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Does the priority need to change? */
4005:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4006:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4007:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4008:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4009:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4010:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4011:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4012:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4013:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* If a task has timed out because it already holds the
4014:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4015:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					its own priority. */
4016:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4017:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4018:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4019:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					priority to facilitate determining the subject task's
4020:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					state. */
4021:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4022:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4023:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4024:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4025:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4026:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					being used for anything else. */
4027:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4028:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4029:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4030:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4031:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
4032:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4033:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4034:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4035:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4036:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4037:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					then the task that holds the mutex could be in either the
4038:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4039:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					from its current state list if it is in the Ready state as
4040:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					the task's priority is going to change and there is one
4041:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					Ready list per priority. */
4042:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4043:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4044:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4045:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						{
4046:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4047:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						}
4048:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						else
4049:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						{
4050:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4051:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						}
4052:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4053:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4054:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4055:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
4056:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4057:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4058:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 86


4059:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4060:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
4061:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4062:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4063:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4064:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4065:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4066:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4067:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4068:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4069:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4070:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
4071:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4072:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4073:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4074:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4075:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4076:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4077:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4078:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4079:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4080:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4081:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskEnterCritical( void )
4082:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4083:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4084:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4085:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4086:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4087:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4088:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4089:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4090:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4091:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4092:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4093:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4094:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			critical section. */
4095:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4096:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4097:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4098:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4099:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4100:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
4101:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4102:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4103:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4104:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4105:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4106:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4107:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4108:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4109:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4110:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4111:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskExitCritical( void )
4112:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4113:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4114:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4115:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 87


4116:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4117:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4118:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4119:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4120:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4121:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					portENABLE_INTERRUPTS();
4122:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4123:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
4124:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4125:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4126:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4127:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4128:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4129:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4130:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4131:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4132:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4133:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
4134:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4135:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4136:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4137:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4138:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4139:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4140:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4141:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4142:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4143:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4144:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4145:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4146:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	size_t x;
4147:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4148:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Start by copying the entire string. */
4149:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4150:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4151:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4152:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		printed out. */
4153:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4154:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4155:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4156:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4157:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4158:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Terminate. */
4159:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
4160:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4161:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Return the new end of string. */
4162:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return &( pcBuffer[ x ] );
4163:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4164:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4165:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4166:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4167:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4168:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4169:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4170:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4171:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4172:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 88


4173:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4174:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	char cStatus;
4175:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4176:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/*
4177:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * PLEASE NOTE:
4178:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 *
4179:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4180:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4181:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * scheduler.
4182:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 *
4183:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4184:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4185:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * displays task names, states and stack usage.
4186:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 *
4187:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4188:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4189:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4190:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4191:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4192:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4193:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * snprintf() implementation!).
4194:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 *
4195:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4196:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4197:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * through a call to vTaskList().
4198:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 */
4199:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4200:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4201:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4202:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4203:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4204:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4205:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		function is executing. */
4206:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4207:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4208:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4209:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4210:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		equate to NULL. */
4211:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4212:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4213:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4214:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4215:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Generate the (binary) data. */
4216:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4217:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4218:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4219:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4220:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4221:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4222:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4223:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4224:Source\FreeRTOS\10.0.1\Source/tasks.c **** 										break;
4225:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4226:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4227:Source\FreeRTOS\10.0.1\Source/tasks.c **** 										break;
4228:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4229:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 89


4230:Source\FreeRTOS\10.0.1\Source/tasks.c **** 										break;
4231:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4232:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4233:Source\FreeRTOS\10.0.1\Source/tasks.c **** 										break;
4234:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4235:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4236:Source\FreeRTOS\10.0.1\Source/tasks.c **** 										break;
4237:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4238:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					default:			/* Should not get here, but it is included
4239:Source\FreeRTOS\10.0.1\Source/tasks.c **** 										to prevent static checking errors. */
4240:Source\FreeRTOS\10.0.1\Source/tasks.c **** 										cStatus = 0x00;
4241:Source\FreeRTOS\10.0.1\Source/tasks.c **** 										break;
4242:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4243:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4244:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4245:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				can be printed in tabular form more easily. */
4246:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4247:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4248:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Write the rest of the string. */
4249:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4250:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4251:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4252:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4253:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4254:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4255:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4256:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4257:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
4258:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4259:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4260:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4261:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4262:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4263:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4264:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*----------------------------------------------------------*/
4265:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4266:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4267:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4268:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4269:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4270:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4271:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4272:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4273:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4274:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4275:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4276:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4277:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4278:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif
4279:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4280:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/*
4281:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * PLEASE NOTE:
4282:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 *
4283:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4284:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4285:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * scheduler.
4286:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 *
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 90


4287:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4288:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4289:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4290:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * in both absolute and percentage terms.
4291:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 *
4292:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4293:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4294:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4295:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4296:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4297:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4298:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * a full snprintf() implementation!).
4299:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 *
4300:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4301:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4302:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4303:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		 */
4304:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4305:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4306:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4307:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4308:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4309:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		function is executing. */
4310:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4311:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4312:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4313:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4314:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		equate to NULL. */
4315:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4316:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4317:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4318:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4319:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Generate the (binary) data. */
4320:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4321:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4322:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* For percentage calculations. */
4323:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			ulTotalTime /= 100UL;
4324:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4325:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Avoid divide by zero errors. */
4326:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( ulTotalTime > 0 )
4327:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4328:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4329:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4330:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4331:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4332:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4333:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4334:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4335:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4336:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Write the task name to the string, padding with
4337:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					spaces so it can be printed in tabular form more
4338:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					easily. */
4339:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4340:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4341:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4342:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4343:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 91


4344:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						{
4345:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4346:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						}
4347:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						#else
4348:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						{
4349:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4350:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							printf() library can be used. */
4351:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4352:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						}
4353:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						#endif
4354:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4355:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
4356:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4357:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						/* If the percentage is zero here then the task has
4358:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						consumed less than 1% of the total run time. */
4359:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4360:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						{
4361:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4362:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						}
4363:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						#else
4364:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						{
4365:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4366:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							printf() library can be used. */
4367:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4368:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						}
4369:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						#endif
4370:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4371:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4372:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4373:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4374:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4375:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4376:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4377:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4378:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4379:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4380:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4381:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4382:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4383:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4384:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
4385:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4386:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4387:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4388:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4389:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4390:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4391:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4392:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4393:Source\FreeRTOS\10.0.1\Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4394:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
4395:Source\FreeRTOS\10.0.1\Source/tasks.c **** TickType_t uxReturn;
4396:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4397:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4398:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4399:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4400:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	queues and semaphores. */
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 92


4401:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4402:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4403:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	return uxReturn;
4404:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
4405:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4406:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4407:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4408:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4409:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4410:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4411:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4412:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4413:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4414:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4415:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4416:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4417:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4418:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return pxCurrentTCB;
4419:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4420:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4421:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4422:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4423:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4424:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4425:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4426:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4427:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4428:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	uint32_t ulReturn;
4429:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4430:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
4431:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4432:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4433:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4434:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4435:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4436:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4437:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4438:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4439:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4440:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4441:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4442:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4443:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4444:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					section (some will yield immediately, others wait until the
4445:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					critical section exits) - but it is not something that
4446:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					application code should ever do. */
4447:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					portYIELD_WITHIN_API();
4448:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4449:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
4450:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4451:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4452:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4453:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4454:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4455:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4456:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4457:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 93


4458:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4459:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
4460:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4461:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
4462:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4463:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4464:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4465:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4466:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( ulReturn != 0UL )
4467:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4468:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4469:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4470:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4471:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4472:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
4473:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4474:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4475:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4476:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4477:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4478:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4479:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4480:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4481:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4482:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4483:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4484:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
4485:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4486:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return ulReturn;
4487:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4488:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4489:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4490:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4491:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4492:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4493:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4494:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4495:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4496:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn;
4497:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4498:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
4499:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4500:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4501:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4502:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4503:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4504:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4505:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				clear the value to zero. */
4506:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4507:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4508:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4509:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4510:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4511:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4512:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4513:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4514:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 94


4515:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4516:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4517:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					section (some will yield immediately, others wait until the
4518:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					critical section exits) - but it is not something that
4519:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					application code should ever do. */
4520:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					portYIELD_WITHIN_API();
4521:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4522:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
4523:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4524:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4525:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4526:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4527:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4528:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4529:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4530:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4531:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4532:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
4533:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4534:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
4535:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4536:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4537:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4538:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pulNotificationValue != NULL )
4539:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4540:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Output the current notification value, which may or may not
4541:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				have changed. */
4542:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4543:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4544:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4545:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4546:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4547:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4548:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			unblocked because of a timeout. */
4549:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4550:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4551:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* A notification was not received. */
4552:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdFALSE;
4553:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4554:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4555:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4556:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* A notification was already pending or a notification was
4557:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				received while the task was waiting. */
4558:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4559:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdTRUE;
4560:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4561:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4562:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4563:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4564:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
4565:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4566:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
4567:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4568:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4569:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4570:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4571:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 95


4572:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4573:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4574:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4575:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4576:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * pxTCB;
4577:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4578:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4579:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4580:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( xTaskToNotify );
4581:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4582:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4583:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
4584:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4585:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4586:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4587:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4588:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4589:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4590:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4591:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4592:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4593:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4594:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			switch( eAction )
4595:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4596:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				case eSetBits	:
4597:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4598:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
4599:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4600:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				case eIncrement	:
4601:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4602:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
4603:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4604:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				case eSetValueWithOverwrite	:
4605:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4606:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
4607:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4608:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4609:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4610:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4611:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4612:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4613:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
4614:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4615:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						/* The value could not be written to the task. */
4616:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						xReturn = pdFAIL;
4617:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4618:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
4619:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4620:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				case eNoAction:
4621:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The task is being notified without its notify value being
4622:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					updated. */
4623:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
4624:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4625:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4626:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			traceTASK_NOTIFY();
4627:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4628:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 96


4629:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			notification then unblock it now. */
4630:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4631:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4632:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4633:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4634:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4635:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The task should not have been on an event list. */
4636:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4637:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4638:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4639:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4640:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4641:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4642:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4643:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4644:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					because it will automatically get reset to a new value when
4645:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4646:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					tickless idling is used it might be more important to enter
4647:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4648:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4649:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					earliest possible time. */
4650:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4651:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4652:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				#endif
4653:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4654:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4655:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4656:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The notified task has a priority above the currently
4657:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					executing task so a yield is required. */
4658:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4659:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4660:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
4661:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4662:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4663:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4664:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4665:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4666:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4667:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4668:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4669:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4670:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
4671:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4672:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
4673:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4674:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4675:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4676:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4677:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4678:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4679:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4680:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4681:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4682:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * pxTCB;
4683:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4684:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4685:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 97


4686:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4687:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( xTaskToNotify );
4688:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4689:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4690:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4691:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4692:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4693:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4694:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4695:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4696:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4697:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4698:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4699:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4700:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4701:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4702:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4703:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		provided on the following link:
4704:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4705:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4706:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4707:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4708:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4709:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4710:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4711:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4712:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4713:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4714:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4715:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4716:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4717:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4718:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4719:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			switch( eAction )
4720:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4721:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				case eSetBits	:
4722:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4723:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
4724:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4725:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				case eIncrement	:
4726:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4727:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
4728:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4729:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				case eSetValueWithOverwrite	:
4730:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4731:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
4732:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4733:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4734:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4735:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4736:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4737:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4738:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
4739:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4740:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						/* The value could not be written to the task. */
4741:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						xReturn = pdFAIL;
4742:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 98


4743:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
4744:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4745:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				case eNoAction :
4746:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The task is being notified without its notify value being
4747:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					updated. */
4748:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
4749:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4750:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4751:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4752:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4753:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4754:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			notification then unblock it now. */
4755:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4756:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4757:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The task should not have been on an event list. */
4758:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4759:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4760:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4761:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4762:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4763:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4764:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4765:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
4766:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4767:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4768:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4769:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4770:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4771:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4772:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4773:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4774:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The notified task has a priority above the currently
4775:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					executing task so a yield is required. */
4776:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4777:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4778:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4779:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4780:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
4781:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4782:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4783:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4784:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						safe FreeRTOS function. */
4785:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						xYieldPending = pdTRUE;
4786:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4787:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4788:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
4789:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4790:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4791:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4792:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4793:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4794:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4795:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4796:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
4797:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4798:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4799:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 99


4800:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4801:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4802:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4803:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4804:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4805:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4806:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * pxTCB;
4807:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4808:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4809:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4810:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( xTaskToNotify );
4811:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4812:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4813:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4814:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4815:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4816:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4817:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4818:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4819:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4820:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4821:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4822:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4823:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4824:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4825:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4826:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		provided on the following link:
4827:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4828:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4829:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4830:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4831:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4832:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4833:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4834:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4835:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4836:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4837:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4838:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			semaphore. */
4839:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4840:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4841:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4842:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4843:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4844:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			notification then unblock it now. */
4845:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4846:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4847:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The task should not have been on an event list. */
4848:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4849:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4850:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4851:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4852:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4853:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4854:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4855:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
4856:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 100


4857:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4858:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4859:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4860:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4861:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4862:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4863:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4864:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The notified task has a priority above the currently
4865:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					executing task so a yield is required. */
4866:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4867:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4868:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4869:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4870:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					else
4871:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4872:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4873:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4874:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						safe FreeRTOS function. */
4875:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						xYieldPending = pdTRUE;
4876:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4877:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4878:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
4879:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4880:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4881:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4882:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4883:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4884:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4885:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4886:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4887:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4888:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4889:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4890:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4891:Source\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4892:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4893:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4894:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4895:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
4896:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn;
4897:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4898:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4899:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		its notification state cleared. */
4900:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4901:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4902:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
4903:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4904:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4905:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4906:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4907:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdPASS;
4908:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4909:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4910:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4911:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdFAIL;
4912:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4913:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 101


4914:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
4915:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4916:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
4917:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4918:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4919:Source\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4920:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4921:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4922:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4923:Source\FreeRTOS\10.0.1\Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4924:Source\FreeRTOS\10.0.1\Source/tasks.c **** {
 706              		.loc 1 4924 0
 707              		.cfi_startproc
 708              		@ args = 0, pretend = 0, frame = 0
 709              		@ frame_needed = 0, uses_anonymous_args = 0
 710              	.LVL71:
 711 0000 70B5     		push	{r4, r5, r6, lr}
 712              		.cfi_def_cfa_offset 16
 713              		.cfi_offset 4, -16
 714              		.cfi_offset 5, -12
 715              		.cfi_offset 6, -8
 716              		.cfi_offset 14, -4
 717 0002 0400     		movs	r4, r0
 718 0004 0D00     		movs	r5, r1
4925:Source\FreeRTOS\10.0.1\Source/tasks.c **** TickType_t xTimeToWake;
4926:Source\FreeRTOS\10.0.1\Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 719              		.loc 1 4926 0
 720 0006 164B     		ldr	r3, .L62
 721 0008 5E69     		ldr	r6, [r3, #20]
 722              	.LVL72:
4927:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4928:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4929:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4930:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4931:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4932:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		when the task leaves the Blocked state. */
4933:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4934:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4935:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
4936:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4937:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4938:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	as the same list item is used for both lists. */
4939:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 723              		.loc 1 4939 0
 724 000a 1868     		ldr	r0, [r3]
 725              	.LVL73:
 726 000c 0430     		adds	r0, r0, #4
 727 000e FFF7FEFF 		bl	uxListRemove
 728              	.LVL74:
4940:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4941:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4942:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4943:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
4944:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4945:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	else
4946:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4947:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 102


4948:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4949:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4950:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4951:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4952:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 729              		.loc 1 4952 0
 730 0012 631C     		adds	r3, r4, #1
 731 0014 08D1     		bne	.L59
 732              		.loc 1 4952 0 is_stmt 0 discriminator 1
 733 0016 002D     		cmp	r5, #0
 734 0018 06D0     		beq	.L59
4953:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4954:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4955:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4956:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			indefinitely. */
4957:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 735              		.loc 1 4957 0 is_stmt 1
 736 001a 114B     		ldr	r3, .L62
 737 001c 1968     		ldr	r1, [r3]
 738 001e 0431     		adds	r1, r1, #4
 739 0020 1048     		ldr	r0, .L62+4
 740 0022 FFF7FEFF 		bl	vListInsertEnd
 741              	.LVL75:
 742 0026 19E0     		b	.L58
 743              	.L59:
4958:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4959:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
4960:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4961:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4962:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4963:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			kernel will manage it correctly. */
4964:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 744              		.loc 1 4964 0
 745 0028 3419     		adds	r4, r6, r4
 746              	.LVL76:
4965:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4966:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4967:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 747              		.loc 1 4967 0
 748 002a 0D4B     		ldr	r3, .L62
 749 002c 1B68     		ldr	r3, [r3]
 750 002e 5C60     		str	r4, [r3, #4]
4968:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4969:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 751              		.loc 1 4969 0
 752 0030 A642     		cmp	r6, r4
 753 0032 07D9     		bls	.L61
4970:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4971:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4972:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				list. */
4973:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 754              		.loc 1 4973 0
 755 0034 0C4B     		ldr	r3, .L62+8
 756 0036 986F     		ldr	r0, [r3, #120]
 757 0038 094B     		ldr	r3, .L62
 758 003a 1968     		ldr	r1, [r3]
 759 003c 0431     		adds	r1, r1, #4
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 103


 760 003e FFF7FEFF 		bl	vListInsert
 761              	.LVL77:
 762 0042 0BE0     		b	.L58
 763              	.L61:
4974:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4975:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4976:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4977:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4978:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				is used. */
4979:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 764              		.loc 1 4979 0
 765 0044 074D     		ldr	r5, .L62+4
 766              	.LVL78:
 767 0046 A86A     		ldr	r0, [r5, #40]
 768 0048 054B     		ldr	r3, .L62
 769 004a 1968     		ldr	r1, [r3]
 770 004c 0431     		adds	r1, r1, #4
 771 004e FFF7FEFF 		bl	vListInsert
 772              	.LVL79:
4980:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
4981:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4982:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4983:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				needs to be updated too. */
4984:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 773              		.loc 1 4984 0
 774 0052 EB6A     		ldr	r3, [r5, #44]
 775 0054 9C42     		cmp	r4, r3
 776 0056 01D2     		bcs	.L58
4985:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4986:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 777              		.loc 1 4986 0
 778 0058 024B     		ldr	r3, .L62+4
 779 005a DC62     		str	r4, [r3, #44]
 780              	.LVL80:
 781              	.L58:
4987:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4988:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				else
4989:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4990:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4991:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4992:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4993:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4994:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4995:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4996:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4997:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4998:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4999:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		will manage it correctly. */
5000:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5001:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
5002:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5003:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5004:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
5005:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5006:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
5007:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5008:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 104


5009:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
5010:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		else
5011:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
5012:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5013:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5014:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
5015:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5016:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5017:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			too. */
5018:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5019:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
5020:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5021:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
5022:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			else
5023:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
5024:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5025:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
5026:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
5027:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
5028:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5029:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5030:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
5031:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5032:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
 782              		.loc 1 5032 0
 783              		@ sp needed
 784              	.LVL81:
 785 005c 70BD     		pop	{r4, r5, r6, pc}
 786              	.L63:
 787 005e C046     		.align	2
 788              	.L62:
 789 0060 00010000 		.word	.LANCHOR2
 790 0064 00000000 		.word	.LANCHOR0
 791 0068 80000000 		.word	.LANCHOR1
 792              		.cfi_endproc
 793              	.LFE95:
 794              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 795              		.section	.text.prvWriteNameToBuffer,"ax",%progbits
 796              		.align	2
 797              		.code	16
 798              		.thumb_func
 799              		.type	prvWriteNameToBuffer, %function
 800              	prvWriteNameToBuffer:
 801              	.LFB86:
4145:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	size_t x;
 802              		.loc 1 4145 0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 0
 805              		@ frame_needed = 0, uses_anonymous_args = 0
 806              	.LVL82:
 807 0000 10B5     		push	{r4, lr}
 808              		.cfi_def_cfa_offset 8
 809              		.cfi_offset 4, -8
 810              		.cfi_offset 14, -4
 811 0002 0400     		movs	r4, r0
4149:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 812              		.loc 1 4149 0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 105


 813 0004 FFF7FEFF 		bl	strcpy
 814              	.LVL83:
4153:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 815              		.loc 1 4153 0
 816 0008 2000     		movs	r0, r4
 817 000a FFF7FEFF 		bl	strlen
 818              	.LVL84:
 819 000e 02E0     		b	.L65
 820              	.L66:
4155:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 821              		.loc 1 4155 0 discriminator 3
 822 0010 2023     		movs	r3, #32
 823 0012 2354     		strb	r3, [r4, r0]
4153:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 824              		.loc 1 4153 0 discriminator 3
 825 0014 0130     		adds	r0, r0, #1
 826              	.LVL85:
 827              	.L65:
4153:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 828              		.loc 1 4153 0 is_stmt 0 discriminator 1
 829 0016 0E28     		cmp	r0, #14
 830 0018 FAD9     		bls	.L66
4159:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 831              		.loc 1 4159 0 is_stmt 1
 832 001a 2018     		adds	r0, r4, r0
 833              	.LVL86:
 834 001c 0023     		movs	r3, #0
 835 001e 0370     		strb	r3, [r0]
4163:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 836              		.loc 1 4163 0
 837              		@ sp needed
 838              	.LVL87:
 839 0020 10BD     		pop	{r4, pc}
 840              		.cfi_endproc
 841              	.LFE86:
 842              		.size	prvWriteNameToBuffer, .-prvWriteNameToBuffer
 843 0022 C046     		.section	.text.xTaskCreate,"ax",%progbits
 844              		.align	2
 845              		.global	xTaskCreate
 846              		.code	16
 847              		.thumb_func
 848              		.type	xTaskCreate, %function
 849              	xTaskCreate:
 850              	.LFB37:
 738:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxNewTCB;
 851              		.loc 1 738 0
 852              		.cfi_startproc
 853              		@ args = 8, pretend = 0, frame = 8
 854              		@ frame_needed = 0, uses_anonymous_args = 0
 855              	.LVL88:
 856 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 857              		.cfi_def_cfa_offset 20
 858              		.cfi_offset 4, -20
 859              		.cfi_offset 5, -16
 860              		.cfi_offset 6, -12
 861              		.cfi_offset 7, -8
 862              		.cfi_offset 14, -4
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 106


 863 0002 87B0     		sub	sp, sp, #28
 864              		.cfi_def_cfa_offset 48
 865 0004 0490     		str	r0, [sp, #16]
 866 0006 0591     		str	r1, [sp, #20]
 867 0008 1400     		movs	r4, r2
 868 000a 1F00     		movs	r7, r3
 869              	.LBB3:
 772:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 870              		.loc 1 772 0
 871 000c 9000     		lsls	r0, r2, #2
 872              	.LVL89:
 873 000e FFF7FEFF 		bl	pvPortMalloc
 874              	.LVL90:
 875 0012 061E     		subs	r6, r0, #0
 876              	.LVL91:
 774:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 877              		.loc 1 774 0
 878 0014 0AD0     		beq	.L71
 777:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 879              		.loc 1 777 0
 880 0016 6820     		movs	r0, #104
 881              	.LVL92:
 882 0018 FFF7FEFF 		bl	pvPortMalloc
 883              	.LVL93:
 884 001c 051E     		subs	r5, r0, #0
 885              	.LVL94:
 779:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 886              		.loc 1 779 0
 887 001e 01D0     		beq	.L69
 782:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 888              		.loc 1 782 0
 889 0020 0663     		str	r6, [r0, #48]
 890 0022 04E0     		b	.L68
 891              	.L69:
 788:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 892              		.loc 1 788 0
 893 0024 3000     		movs	r0, r6
 894              	.LVL95:
 895 0026 FFF7FEFF 		bl	vPortFree
 896              	.LVL96:
 897 002a 00E0     		b	.L68
 898              	.LVL97:
 899              	.L71:
 793:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 900              		.loc 1 793 0
 901 002c 0025     		movs	r5, #0
 902              	.LVL98:
 903              	.L68:
 904              	.LBE3:
 798:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 905              		.loc 1 798 0
 906 002e 002D     		cmp	r5, #0
 907 0030 11D0     		beq	.L72
 808:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 908              		.loc 1 808 0
 909 0032 0023     		movs	r3, #0
 910 0034 0393     		str	r3, [sp, #12]
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 107


 911 0036 0295     		str	r5, [sp, #8]
 912 0038 0D9B     		ldr	r3, [sp, #52]
 913 003a 0193     		str	r3, [sp, #4]
 914 003c 0C9B     		ldr	r3, [sp, #48]
 915 003e 0093     		str	r3, [sp]
 916 0040 3B00     		movs	r3, r7
 917 0042 2200     		movs	r2, r4
 918 0044 0599     		ldr	r1, [sp, #20]
 919 0046 0498     		ldr	r0, [sp, #16]
 920 0048 FFF7FEFF 		bl	prvInitialiseNewTask
 921              	.LVL99:
 809:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = pdPASS;
 922              		.loc 1 809 0
 923 004c 2800     		movs	r0, r5
 924 004e FFF7FEFF 		bl	prvAddNewTaskToReadyList
 925              	.LVL100:
 810:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 926              		.loc 1 810 0
 927 0052 0120     		movs	r0, #1
 928 0054 01E0     		b	.L70
 929              	.LVL101:
 930              	.L72:
 814:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 931              		.loc 1 814 0
 932 0056 0120     		movs	r0, #1
 933 0058 4042     		rsbs	r0, r0, #0
 934              	.L70:
 935              	.LVL102:
 818:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 936              		.loc 1 818 0
 937 005a 07B0     		add	sp, sp, #28
 938              		@ sp needed
 939              	.LVL103:
 940              	.LVL104:
 941              	.LVL105:
 942 005c F0BD     		pop	{r4, r5, r6, r7, pc}
 943              		.cfi_endproc
 944              	.LFE37:
 945              		.size	xTaskCreate, .-xTaskCreate
 946 005e C046     		.section	.text.vTaskDelete,"ax",%progbits
 947              		.align	2
 948              		.global	vTaskDelete
 949              		.code	16
 950              		.thumb_func
 951              		.type	vTaskDelete, %function
 952              	vTaskDelete:
 953              	.LFB40:
1113:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
 954              		.loc 1 1113 0
 955              		.cfi_startproc
 956              		@ args = 0, pretend = 0, frame = 0
 957              		@ frame_needed = 0, uses_anonymous_args = 0
 958              	.LVL106:
 959 0000 70B5     		push	{r4, r5, r6, lr}
 960              		.cfi_def_cfa_offset 16
 961              		.cfi_offset 4, -16
 962              		.cfi_offset 5, -12
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 108


 963              		.cfi_offset 6, -8
 964              		.cfi_offset 14, -4
 965 0002 0400     		movs	r4, r0
1116:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 966              		.loc 1 1116 0
 967 0004 FFF7FEFF 		bl	vPortEnterCritical
 968              	.LVL107:
1120:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 969              		.loc 1 1120 0
 970 0008 002C     		cmp	r4, #0
 971 000a 01D1     		bne	.L74
1120:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 972              		.loc 1 1120 0 is_stmt 0 discriminator 1
 973 000c 1C4B     		ldr	r3, .L81
 974 000e 1C68     		ldr	r4, [r3]
 975              	.LVL108:
 976              	.L74:
1123:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 977              		.loc 1 1123 0 is_stmt 1 discriminator 4
 978 0010 251D     		adds	r5, r4, #4
 979 0012 2800     		movs	r0, r5
 980 0014 FFF7FEFF 		bl	uxListRemove
 981              	.LVL109:
1133:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 982              		.loc 1 1133 0 discriminator 4
 983 0018 A36A     		ldr	r3, [r4, #40]
 984 001a 002B     		cmp	r3, #0
 985 001c 03D0     		beq	.L75
1135:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 986              		.loc 1 1135 0
 987 001e 2000     		movs	r0, r4
 988 0020 1830     		adds	r0, r0, #24
 989 0022 FFF7FEFF 		bl	uxListRemove
 990              	.LVL110:
 991              	.L75:
1146:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 992              		.loc 1 1146 0
 993 0026 164B     		ldr	r3, .L81
 994 0028 9A68     		ldr	r2, [r3, #8]
 995 002a 0132     		adds	r2, r2, #1
 996 002c 9A60     		str	r2, [r3, #8]
1148:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 997              		.loc 1 1148 0
 998 002e 1B68     		ldr	r3, [r3]
 999 0030 9C42     		cmp	r4, r3
 1000 0032 09D1     		bne	.L76
1155:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1001              		.loc 1 1155 0
 1002 0034 2900     		movs	r1, r5
 1003 0036 1348     		ldr	r0, .L81+4
 1004 0038 6430     		adds	r0, r0, #100
 1005 003a FFF7FEFF 		bl	vListInsertEnd
 1006              	.LVL111:
1160:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1007              		.loc 1 1160 0
 1008 003e 104A     		ldr	r2, .L81
 1009 0040 1369     		ldr	r3, [r2, #16]
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 109


 1010 0042 0133     		adds	r3, r3, #1
 1011 0044 1361     		str	r3, [r2, #16]
 1012 0046 08E0     		b	.L77
 1013              	.L76:
1171:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 1014              		.loc 1 1171 0
 1015 0048 0E4A     		ldr	r2, .L81+4
 1016 004a D36F     		ldr	r3, [r2, #124]
 1017 004c 013B     		subs	r3, r3, #1
 1018 004e D367     		str	r3, [r2, #124]
1172:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1019              		.loc 1 1172 0
 1020 0050 2000     		movs	r0, r4
 1021 0052 FFF7FEFF 		bl	prvDeleteTCB
 1022              	.LVL112:
1176:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 1023              		.loc 1 1176 0
 1024 0056 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1025              	.LVL113:
 1026              	.L77:
1181:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1027              		.loc 1 1181 0
 1028 005a FFF7FEFF 		bl	vPortExitCritical
 1029              	.LVL114:
1185:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 1030              		.loc 1 1185 0
 1031 005e 084B     		ldr	r3, .L81
 1032 0060 5B68     		ldr	r3, [r3, #4]
 1033 0062 002B     		cmp	r3, #0
 1034 0064 0BD0     		beq	.L73
1187:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 1035              		.loc 1 1187 0
 1036 0066 064B     		ldr	r3, .L81
 1037 0068 1B68     		ldr	r3, [r3]
 1038 006a 9C42     		cmp	r4, r3
 1039 006c 07D1     		bne	.L73
1189:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				portYIELD_WITHIN_API();
 1040              		.loc 1 1189 0
 1041 006e 044B     		ldr	r3, .L81
 1042 0070 9B69     		ldr	r3, [r3, #24]
 1043 0072 002B     		cmp	r3, #0
 1044 0074 01D0     		beq	.L79
1189:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				portYIELD_WITHIN_API();
 1045              		.loc 1 1189 0 is_stmt 0 discriminator 1
 1046              		.syntax divided
 1047              	@ 1189 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 1048 0076 72B6     		 cpsid i 
 1049              	@ 0 "" 2
 1050              		.thumb
 1051              		.syntax unified
 1052              	.L80:
 1053 0078 FEE7     		b	.L80
 1054              	.L79:
1190:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 1055              		.loc 1 1190 0 is_stmt 1
 1056 007a FFF7FEFF 		bl	vPortYield
 1057              	.LVL115:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 110


 1058              	.L73:
1197:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1059              		.loc 1 1197 0
 1060              		@ sp needed
 1061              	.LVL116:
 1062              	.LVL117:
 1063 007e 70BD     		pop	{r4, r5, r6, pc}
 1064              	.L82:
 1065              		.align	2
 1066              	.L81:
 1067 0080 00010000 		.word	.LANCHOR2
 1068 0084 80000000 		.word	.LANCHOR1
 1069              		.cfi_endproc
 1070              	.LFE40:
 1071              		.size	vTaskDelete, .-vTaskDelete
 1072              		.section	.text.eTaskGetState,"ax",%progbits
 1073              		.align	2
 1074              		.global	eTaskGetState
 1075              		.code	16
 1076              		.thumb_func
 1077              		.type	eTaskGetState, %function
 1078              	eTaskGetState:
 1079              	.LFB43:
1334:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	eTaskState eReturn;
 1080              		.loc 1 1334 0
 1081              		.cfi_startproc
 1082              		@ args = 0, pretend = 0, frame = 0
 1083              		@ frame_needed = 0, uses_anonymous_args = 0
 1084              	.LVL118:
 1085 0000 70B5     		push	{r4, r5, r6, lr}
 1086              		.cfi_def_cfa_offset 16
 1087              		.cfi_offset 4, -16
 1088              		.cfi_offset 5, -12
 1089              		.cfi_offset 6, -8
 1090              		.cfi_offset 14, -4
 1091 0002 051E     		subs	r5, r0, #0
 1092              	.LVL119:
1339:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1093              		.loc 1 1339 0
 1094 0004 01D1     		bne	.L84
1339:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1095              		.loc 1 1339 0 is_stmt 0 discriminator 1
 1096              		.syntax divided
 1097              	@ 1339 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 1098 0006 72B6     		 cpsid i 
 1099              	@ 0 "" 2
 1100              		.thumb
 1101              		.syntax unified
 1102              	.L85:
 1103 0008 FEE7     		b	.L85
 1104              	.L84:
1341:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 1105              		.loc 1 1341 0 is_stmt 1
 1106 000a 164B     		ldr	r3, .L94
 1107 000c 1B68     		ldr	r3, [r3]
 1108 000e 9842     		cmp	r0, r3
 1109 0010 1CD0     		beq	.L88
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 111


1348:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 1110              		.loc 1 1348 0
 1111 0012 FFF7FEFF 		bl	vPortEnterCritical
 1112              	.LVL120:
1350:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 1113              		.loc 1 1350 0
 1114 0016 6C69     		ldr	r4, [r5, #20]
 1115              	.LVL121:
1352:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1116              		.loc 1 1352 0
 1117 0018 FFF7FEFF 		bl	vPortExitCritical
 1118              	.LVL122:
1354:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 1119              		.loc 1 1354 0
 1120 001c 124B     		ldr	r3, .L94+4
 1121 001e 9B6A     		ldr	r3, [r3, #40]
 1122 0020 9C42     		cmp	r4, r3
 1123 0022 15D0     		beq	.L89
1354:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 1124              		.loc 1 1354 0 is_stmt 0 discriminator 1
 1125 0024 114B     		ldr	r3, .L94+8
 1126 0026 9B6F     		ldr	r3, [r3, #120]
 1127 0028 9C42     		cmp	r4, r3
 1128 002a 13D0     		beq	.L90
1362:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 1129              		.loc 1 1362 0 is_stmt 1
 1130 002c 0E4B     		ldr	r3, .L94+4
 1131 002e 9C42     		cmp	r4, r3
 1132 0030 04D1     		bne	.L87
1367:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
 1133              		.loc 1 1367 0
 1134 0032 AB6A     		ldr	r3, [r5, #40]
 1135 0034 002B     		cmp	r3, #0
 1136 0036 0FD1     		bne	.L91
1369:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
 1137              		.loc 1 1369 0
 1138 0038 0320     		movs	r0, #3
 1139 003a 12E0     		b	.L86
 1140              	.L87:
1379:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 1141              		.loc 1 1379 0
 1142 003c 0B4B     		ldr	r3, .L94+8
 1143 003e 6433     		adds	r3, r3, #100
 1144 0040 9C42     		cmp	r4, r3
 1145 0042 0BD0     		beq	.L92
1379:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 1146              		.loc 1 1379 0 is_stmt 0 discriminator 1
 1147 0044 002C     		cmp	r4, #0
 1148 0046 0BD1     		bne	.L93
1384:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 1149              		.loc 1 1384 0 is_stmt 1
 1150 0048 0420     		movs	r0, #4
 1151 004a 0AE0     		b	.L86
 1152              	.LVL123:
 1153              	.L88:
1344:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 1154              		.loc 1 1344 0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 112


 1155 004c 0020     		movs	r0, #0
 1156              	.LVL124:
 1157 004e 08E0     		b	.L86
 1158              	.LVL125:
 1159              	.L89:
1358:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 1160              		.loc 1 1358 0
 1161 0050 0220     		movs	r0, #2
 1162 0052 06E0     		b	.L86
 1163              	.L90:
 1164 0054 0220     		movs	r0, #2
 1165 0056 04E0     		b	.L86
 1166              	.L91:
1373:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
 1167              		.loc 1 1373 0
 1168 0058 0220     		movs	r0, #2
 1169 005a 02E0     		b	.L86
 1170              	.L92:
1384:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 1171              		.loc 1 1384 0
 1172 005c 0420     		movs	r0, #4
 1173 005e 00E0     		b	.L86
 1174              	.L93:
1392:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 1175              		.loc 1 1392 0
 1176 0060 0120     		movs	r0, #1
 1177              	.LVL126:
 1178              	.L86:
1397:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1179              		.loc 1 1397 0
 1180              		@ sp needed
 1181              	.LVL127:
 1182 0062 70BD     		pop	{r4, r5, r6, pc}
 1183              	.L95:
 1184              		.align	2
 1185              	.L94:
 1186 0064 00010000 		.word	.LANCHOR2
 1187 0068 00000000 		.word	.LANCHOR0
 1188 006c 80000000 		.word	.LANCHOR1
 1189              		.cfi_endproc
 1190              	.LFE43:
 1191              		.size	eTaskGetState, .-eTaskGetState
 1192              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1193              		.align	2
 1194              		.global	uxTaskPriorityGet
 1195              		.code	16
 1196              		.thumb_func
 1197              		.type	uxTaskPriorityGet, %function
 1198              	uxTaskPriorityGet:
 1199              	.LFB44:
1405:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
 1200              		.loc 1 1405 0
 1201              		.cfi_startproc
 1202              		@ args = 0, pretend = 0, frame = 0
 1203              		@ frame_needed = 0, uses_anonymous_args = 0
 1204              	.LVL128:
 1205 0000 10B5     		push	{r4, lr}
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 113


 1206              		.cfi_def_cfa_offset 8
 1207              		.cfi_offset 4, -8
 1208              		.cfi_offset 14, -4
 1209 0002 0400     		movs	r4, r0
1409:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 1210              		.loc 1 1409 0
 1211 0004 FFF7FEFF 		bl	vPortEnterCritical
 1212              	.LVL129:
1413:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1213              		.loc 1 1413 0
 1214 0008 002C     		cmp	r4, #0
 1215 000a 01D1     		bne	.L97
1413:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1216              		.loc 1 1413 0 is_stmt 0 discriminator 1
 1217 000c 034B     		ldr	r3, .L98
 1218 000e 1C68     		ldr	r4, [r3]
 1219              	.LVL130:
 1220              	.L97:
1414:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 1221              		.loc 1 1414 0 is_stmt 1 discriminator 4
 1222 0010 E46A     		ldr	r4, [r4, #44]
 1223              	.LVL131:
1416:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1224              		.loc 1 1416 0 discriminator 4
 1225 0012 FFF7FEFF 		bl	vPortExitCritical
 1226              	.LVL132:
1419:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1227              		.loc 1 1419 0 discriminator 4
 1228 0016 2000     		movs	r0, r4
 1229              		@ sp needed
 1230              	.LVL133:
 1231 0018 10BD     		pop	{r4, pc}
 1232              	.L99:
 1233 001a C046     		.align	2
 1234              	.L98:
 1235 001c 00010000 		.word	.LANCHOR2
 1236              		.cfi_endproc
 1237              	.LFE44:
 1238              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1239              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1240              		.align	2
 1241              		.global	uxTaskPriorityGetFromISR
 1242              		.code	16
 1243              		.thumb_func
 1244              		.type	uxTaskPriorityGetFromISR, %function
 1245              	uxTaskPriorityGetFromISR:
 1246              	.LFB45:
1427:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
 1247              		.loc 1 1427 0
 1248              		.cfi_startproc
 1249              		@ args = 0, pretend = 0, frame = 0
 1250              		@ frame_needed = 0, uses_anonymous_args = 0
 1251              	.LVL134:
 1252 0000 10B5     		push	{r4, lr}
 1253              		.cfi_def_cfa_offset 8
 1254              		.cfi_offset 4, -8
 1255              		.cfi_offset 14, -4
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 114


 1256 0002 0400     		movs	r4, r0
1449:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 1257              		.loc 1 1449 0
 1258 0004 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1259              	.LVL135:
1453:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1260              		.loc 1 1453 0
 1261 0008 002C     		cmp	r4, #0
 1262 000a 01D1     		bne	.L101
1453:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1263              		.loc 1 1453 0 is_stmt 0 discriminator 1
 1264 000c 034B     		ldr	r3, .L102
 1265 000e 1C68     		ldr	r4, [r3]
 1266              	.LVL136:
 1267              	.L101:
1454:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 1268              		.loc 1 1454 0 is_stmt 1 discriminator 4
 1269 0010 E46A     		ldr	r4, [r4, #44]
 1270              	.LVL137:
1456:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1271              		.loc 1 1456 0 discriminator 4
 1272 0012 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1273              	.LVL138:
1459:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1274              		.loc 1 1459 0 discriminator 4
 1275 0016 2000     		movs	r0, r4
 1276              		@ sp needed
 1277              	.LVL139:
 1278 0018 10BD     		pop	{r4, pc}
 1279              	.L103:
 1280 001a C046     		.align	2
 1281              	.L102:
 1282 001c 00010000 		.word	.LANCHOR2
 1283              		.cfi_endproc
 1284              	.LFE45:
 1285              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1286              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1287              		.align	2
 1288              		.global	vTaskPrioritySet
 1289              		.code	16
 1290              		.thumb_func
 1291              		.type	vTaskPrioritySet, %function
 1292              	vTaskPrioritySet:
 1293              	.LFB46:
1467:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
 1294              		.loc 1 1467 0
 1295              		.cfi_startproc
 1296              		@ args = 0, pretend = 0, frame = 0
 1297              		@ frame_needed = 0, uses_anonymous_args = 0
 1298              	.LVL140:
 1299 0000 70B5     		push	{r4, r5, r6, lr}
 1300              		.cfi_def_cfa_offset 16
 1301              		.cfi_offset 4, -16
 1302              		.cfi_offset 5, -12
 1303              		.cfi_offset 6, -8
 1304              		.cfi_offset 14, -4
 1305 0002 0400     		movs	r4, r0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 115


 1306 0004 0D00     		movs	r5, r1
 1307              	.LVL141:
1472:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1308              		.loc 1 1472 0
 1309 0006 0629     		cmp	r1, #6
 1310 0008 01D9     		bls	.L105
1472:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1311              		.loc 1 1472 0 is_stmt 0 discriminator 1
 1312              		.syntax divided
 1313              	@ 1472 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 1314 000a 72B6     		 cpsid i 
 1315              	@ 0 "" 2
 1316              		.thumb
 1317              		.syntax unified
 1318              	.L106:
 1319 000c FEE7     		b	.L106
 1320              	.L105:
1475:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 1321              		.loc 1 1475 0 is_stmt 1
 1322 000e 0629     		cmp	r1, #6
 1323 0010 00D9     		bls	.L107
1477:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 1324              		.loc 1 1477 0
 1325 0012 0625     		movs	r5, #6
 1326              	.L107:
 1327              	.LVL142:
1484:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 1328              		.loc 1 1484 0
 1329 0014 FFF7FEFF 		bl	vPortEnterCritical
 1330              	.LVL143:
1488:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1331              		.loc 1 1488 0
 1332 0018 002C     		cmp	r4, #0
 1333 001a 01D1     		bne	.L108
1488:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1334              		.loc 1 1488 0 is_stmt 0 discriminator 1
 1335 001c 254B     		ldr	r3, .L121
 1336 001e 1C68     		ldr	r4, [r3]
 1337              	.LVL144:
 1338              	.L108:
1498:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 1339              		.loc 1 1498 0 is_stmt 1 discriminator 4
 1340 0020 E36A     		ldr	r3, [r4, #44]
 1341              	.LVL145:
1502:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 1342              		.loc 1 1502 0 discriminator 4
 1343 0022 9D42     		cmp	r5, r3
 1344 0024 43D0     		beq	.L109
1506:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 1345              		.loc 1 1506 0
 1346 0026 0AD9     		bls	.L110
1508:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
 1347              		.loc 1 1508 0
 1348 0028 224A     		ldr	r2, .L121
 1349 002a 1268     		ldr	r2, [r2]
 1350 002c 9442     		cmp	r4, r2
 1351 002e 0CD0     		beq	.L117
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 116


1513:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						{
 1352              		.loc 1 1513 0
 1353 0030 204A     		ldr	r2, .L121
 1354 0032 1268     		ldr	r2, [r2]
 1355 0034 D26A     		ldr	r2, [r2, #44]
 1356 0036 9542     		cmp	r5, r2
 1357 0038 09D2     		bcs	.L118
1470:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1358              		.loc 1 1470 0
 1359 003a 0026     		movs	r6, #0
 1360 003c 0AE0     		b	.L111
 1361              	.L110:
1529:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 1362              		.loc 1 1529 0
 1363 003e 1D4A     		ldr	r2, .L121
 1364 0040 1268     		ldr	r2, [r2]
 1365 0042 9442     		cmp	r4, r2
 1366 0044 05D0     		beq	.L119
1470:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1367              		.loc 1 1470 0
 1368 0046 0026     		movs	r6, #0
 1369 0048 04E0     		b	.L111
 1370              	.L117:
 1371 004a 0026     		movs	r6, #0
 1372 004c 02E0     		b	.L111
 1373              	.L118:
1515:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						}
 1374              		.loc 1 1515 0
 1375 004e 0126     		movs	r6, #1
 1376 0050 00E0     		b	.L111
 1377              	.L119:
1534:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 1378              		.loc 1 1534 0
 1379 0052 0126     		movs	r6, #1
 1380              	.L111:
 1381              	.LVL146:
1566:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 1382              		.loc 1 1566 0
 1383 0054 E562     		str	r5, [r4, #44]
1572:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 1384              		.loc 1 1572 0
 1385 0056 A269     		ldr	r2, [r4, #24]
 1386 0058 002A     		cmp	r2, #0
 1387 005a 02DB     		blt	.L112
1574:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 1388              		.loc 1 1574 0
 1389 005c 0722     		movs	r2, #7
 1390 005e 551B     		subs	r5, r2, r5
 1391              	.LVL147:
 1392 0060 A561     		str	r5, [r4, #24]
 1393              	.L112:
1585:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 1394              		.loc 1 1585 0
 1395 0062 9A00     		lsls	r2, r3, #2
 1396 0064 D318     		adds	r3, r2, r3
 1397              	.LVL148:
 1398 0066 9A00     		lsls	r2, r3, #2
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 117


 1399 0068 134B     		ldr	r3, .L121+4
 1400 006a 3033     		adds	r3, r3, #48
 1401 006c 9A18     		adds	r2, r3, r2
 1402 006e 6369     		ldr	r3, [r4, #20]
 1403 0070 9342     		cmp	r3, r2
 1404 0072 01D1     		bne	.L120
 1405 0074 0123     		movs	r3, #1
 1406 0076 00E0     		b	.L113
 1407              	.L120:
 1408 0078 0023     		movs	r3, #0
 1409              	.L113:
1585:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 1410              		.loc 1 1585 0 is_stmt 0 discriminator 4
 1411 007a 002B     		cmp	r3, #0
 1412 007c 13D0     		beq	.L114
1590:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
 1413              		.loc 1 1590 0 is_stmt 1
 1414 007e 251D     		adds	r5, r4, #4
 1415 0080 2800     		movs	r0, r5
 1416 0082 FFF7FEFF 		bl	uxListRemove
 1417              	.LVL149:
1601:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 1418              		.loc 1 1601 0
 1419 0086 E36A     		ldr	r3, [r4, #44]
 1420 0088 0A4A     		ldr	r2, .L121
 1421 008a D268     		ldr	r2, [r2, #12]
 1422 008c 9342     		cmp	r3, r2
 1423 008e 01D9     		bls	.L115
1601:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 1424              		.loc 1 1601 0 is_stmt 0 discriminator 1
 1425 0090 084A     		ldr	r2, .L121
 1426 0092 D360     		str	r3, [r2, #12]
 1427              	.L115:
1601:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 1428              		.loc 1 1601 0 discriminator 3
 1429 0094 9A00     		lsls	r2, r3, #2
 1430 0096 D318     		adds	r3, r2, r3
 1431 0098 9A00     		lsls	r2, r3, #2
 1432 009a 0748     		ldr	r0, .L121+4
 1433 009c 3030     		adds	r0, r0, #48
 1434 009e 8018     		adds	r0, r0, r2
 1435 00a0 2900     		movs	r1, r5
 1436 00a2 FFF7FEFF 		bl	vListInsertEnd
 1437              	.LVL150:
 1438              	.L114:
1608:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 1439              		.loc 1 1608 0 is_stmt 1
 1440 00a6 002E     		cmp	r6, #0
 1441 00a8 01D0     		beq	.L109
1610:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 1442              		.loc 1 1610 0
 1443 00aa FFF7FEFF 		bl	vPortYield
 1444              	.LVL151:
 1445              	.L109:
1622:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 1446              		.loc 1 1622 0
 1447 00ae FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 118


 1448              	.LVL152:
1623:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1449              		.loc 1 1623 0
 1450              		@ sp needed
 1451              	.LVL153:
 1452 00b2 70BD     		pop	{r4, r5, r6, pc}
 1453              	.L122:
 1454              		.align	2
 1455              	.L121:
 1456 00b4 00010000 		.word	.LANCHOR2
 1457 00b8 00000000 		.word	.LANCHOR0
 1458              		.cfi_endproc
 1459              	.LFE46:
 1460              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1461              		.section	.text.vTaskResume,"ax",%progbits
 1462              		.align	2
 1463              		.global	vTaskResume
 1464              		.code	16
 1465              		.thumb_func
 1466              		.type	vTaskResume, %function
 1467              	vTaskResume:
 1468              	.LFB49:
1778:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1469              		.loc 1 1778 0
 1470              		.cfi_startproc
 1471              		@ args = 0, pretend = 0, frame = 0
 1472              		@ frame_needed = 0, uses_anonymous_args = 0
 1473              	.LVL154:
 1474 0000 70B5     		push	{r4, r5, r6, lr}
 1475              		.cfi_def_cfa_offset 16
 1476              		.cfi_offset 4, -16
 1477              		.cfi_offset 5, -12
 1478              		.cfi_offset 6, -8
 1479              		.cfi_offset 14, -4
 1480 0002 041E     		subs	r4, r0, #0
 1481              	.LVL155:
1782:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1482              		.loc 1 1782 0
 1483 0004 01D1     		bne	.L124
1782:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1484              		.loc 1 1782 0 is_stmt 0 discriminator 1
 1485              		.syntax divided
 1486              	@ 1782 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 1487 0006 72B6     		 cpsid i 
 1488              	@ 0 "" 2
 1489              		.thumb
 1490              		.syntax unified
 1491              	.L125:
 1492 0008 FEE7     		b	.L125
 1493              	.L124:
1786:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 1494              		.loc 1 1786 0 is_stmt 1
 1495 000a 0028     		cmp	r0, #0
 1496 000c 28D0     		beq	.L123
1786:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 1497              		.loc 1 1786 0 is_stmt 0 discriminator 1
 1498 000e 154B     		ldr	r3, .L129
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 119


 1499 0010 1B68     		ldr	r3, [r3]
 1500 0012 9842     		cmp	r0, r3
 1501 0014 24D0     		beq	.L123
1788:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 1502              		.loc 1 1788 0 is_stmt 1
 1503 0016 FFF7FEFF 		bl	vPortEnterCritical
 1504              	.LVL156:
1790:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 1505              		.loc 1 1790 0
 1506 001a 2000     		movs	r0, r4
 1507 001c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1508              	.LVL157:
 1509 0020 0028     		cmp	r0, #0
 1510 0022 1BD0     		beq	.L127
1796:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1511              		.loc 1 1796 0
 1512 0024 251D     		adds	r5, r4, #4
 1513 0026 2800     		movs	r0, r5
 1514 0028 FFF7FEFF 		bl	uxListRemove
 1515              	.LVL158:
1797:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1516              		.loc 1 1797 0
 1517 002c E36A     		ldr	r3, [r4, #44]
 1518 002e 0D4A     		ldr	r2, .L129
 1519 0030 D268     		ldr	r2, [r2, #12]
 1520 0032 9342     		cmp	r3, r2
 1521 0034 01D9     		bls	.L128
1797:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1522              		.loc 1 1797 0 is_stmt 0 discriminator 1
 1523 0036 0B4A     		ldr	r2, .L129
 1524 0038 D360     		str	r3, [r2, #12]
 1525              	.L128:
1797:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1526              		.loc 1 1797 0 discriminator 3
 1527 003a 9A00     		lsls	r2, r3, #2
 1528 003c D318     		adds	r3, r2, r3
 1529 003e 9A00     		lsls	r2, r3, #2
 1530 0040 0948     		ldr	r0, .L129+4
 1531 0042 3030     		adds	r0, r0, #48
 1532 0044 8018     		adds	r0, r0, r2
 1533 0046 2900     		movs	r1, r5
 1534 0048 FFF7FEFF 		bl	vListInsertEnd
 1535              	.LVL159:
1800:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
 1536              		.loc 1 1800 0 is_stmt 1 discriminator 3
 1537 004c E26A     		ldr	r2, [r4, #44]
 1538 004e 054B     		ldr	r3, .L129
 1539 0050 1B68     		ldr	r3, [r3]
 1540 0052 DB6A     		ldr	r3, [r3, #44]
 1541 0054 9A42     		cmp	r2, r3
 1542 0056 01D3     		bcc	.L127
1805:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
 1543              		.loc 1 1805 0
 1544 0058 FFF7FEFF 		bl	vPortYield
 1545              	.LVL160:
 1546              	.L127:
1817:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 120


 1547              		.loc 1 1817 0
 1548 005c FFF7FEFF 		bl	vPortExitCritical
 1549              	.LVL161:
 1550              	.L123:
1823:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1551              		.loc 1 1823 0
 1552              		@ sp needed
 1553              	.LVL162:
 1554 0060 70BD     		pop	{r4, r5, r6, pc}
 1555              	.L130:
 1556 0062 C046     		.align	2
 1557              	.L129:
 1558 0064 00010000 		.word	.LANCHOR2
 1559 0068 00000000 		.word	.LANCHOR0
 1560              		.cfi_endproc
 1561              	.LFE49:
 1562              		.size	vTaskResume, .-vTaskResume
 1563              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1564              		.align	2
 1565              		.global	xTaskResumeFromISR
 1566              		.code	16
 1567              		.thumb_func
 1568              		.type	xTaskResumeFromISR, %function
 1569              	xTaskResumeFromISR:
 1570              	.LFB50:
1832:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1571              		.loc 1 1832 0
 1572              		.cfi_startproc
 1573              		@ args = 0, pretend = 0, frame = 0
 1574              		@ frame_needed = 0, uses_anonymous_args = 0
 1575              	.LVL163:
 1576 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1577              		.cfi_def_cfa_offset 24
 1578              		.cfi_offset 3, -24
 1579              		.cfi_offset 4, -20
 1580              		.cfi_offset 5, -16
 1581              		.cfi_offset 6, -12
 1582              		.cfi_offset 7, -8
 1583              		.cfi_offset 14, -4
 1584 0002 041E     		subs	r4, r0, #0
 1585              	.LVL164:
1837:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1586              		.loc 1 1837 0
 1587 0004 01D1     		bne	.L132
1837:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1588              		.loc 1 1837 0 is_stmt 0 discriminator 1
 1589              		.syntax divided
 1590              	@ 1837 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 1591 0006 72B6     		 cpsid i 
 1592              	@ 0 "" 2
 1593              		.thumb
 1594              		.syntax unified
 1595              	.L133:
 1596 0008 FEE7     		b	.L133
 1597              	.L132:
1857:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 1598              		.loc 1 1857 0 is_stmt 1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 121


 1599 000a FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1600              	.LVL165:
 1601 000e 0500     		movs	r5, r0
 1602              	.LVL166:
1859:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 1603              		.loc 1 1859 0
 1604 0010 2000     		movs	r0, r4
 1605              	.LVL167:
 1606 0012 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1607              	.LVL168:
 1608 0016 0028     		cmp	r0, #0
 1609 0018 29D0     		beq	.L138
1864:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 1610              		.loc 1 1864 0
 1611 001a 184B     		ldr	r3, .L140
 1612 001c 9B69     		ldr	r3, [r3, #24]
 1613 001e 002B     		cmp	r3, #0
 1614 0020 1DD1     		bne	.L135
1868:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
 1615              		.loc 1 1868 0
 1616 0022 164B     		ldr	r3, .L140
 1617 0024 1B68     		ldr	r3, [r3]
 1618 0026 DB6A     		ldr	r3, [r3, #44]
 1619 0028 E26A     		ldr	r2, [r4, #44]
 1620 002a 9A42     		cmp	r2, r3
 1621 002c 01D2     		bcs	.L139
1833:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1622              		.loc 1 1833 0
 1623 002e 0027     		movs	r7, #0
 1624 0030 00E0     		b	.L136
 1625              	.L139:
1870:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
 1626              		.loc 1 1870 0
 1627 0032 0127     		movs	r7, #1
 1628              	.L136:
 1629              	.LVL169:
1877:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1630              		.loc 1 1877 0
 1631 0034 261D     		adds	r6, r4, #4
 1632 0036 3000     		movs	r0, r6
 1633 0038 FFF7FEFF 		bl	uxListRemove
 1634              	.LVL170:
1878:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 1635              		.loc 1 1878 0
 1636 003c E36A     		ldr	r3, [r4, #44]
 1637 003e 0F4A     		ldr	r2, .L140
 1638 0040 D268     		ldr	r2, [r2, #12]
 1639 0042 9342     		cmp	r3, r2
 1640 0044 01D9     		bls	.L137
1878:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 1641              		.loc 1 1878 0 is_stmt 0 discriminator 1
 1642 0046 0D4A     		ldr	r2, .L140
 1643 0048 D360     		str	r3, [r2, #12]
 1644              	.L137:
1878:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 1645              		.loc 1 1878 0 discriminator 3
 1646 004a 9A00     		lsls	r2, r3, #2
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 122


 1647 004c D318     		adds	r3, r2, r3
 1648 004e 9A00     		lsls	r2, r3, #2
 1649 0050 0B48     		ldr	r0, .L140+4
 1650 0052 3030     		adds	r0, r0, #48
 1651 0054 8018     		adds	r0, r0, r2
 1652 0056 3100     		movs	r1, r6
 1653 0058 FFF7FEFF 		bl	vListInsertEnd
 1654              	.LVL171:
 1655 005c 08E0     		b	.L134
 1656              	.LVL172:
 1657              	.L135:
1885:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 1658              		.loc 1 1885 0 is_stmt 1
 1659 005e 2100     		movs	r1, r4
 1660 0060 1831     		adds	r1, r1, #24
 1661 0062 0748     		ldr	r0, .L140+4
 1662 0064 1430     		adds	r0, r0, #20
 1663 0066 FFF7FEFF 		bl	vListInsertEnd
 1664              	.LVL173:
1833:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1665              		.loc 1 1833 0
 1666 006a 0027     		movs	r7, #0
 1667 006c 00E0     		b	.L134
 1668              	.L138:
 1669 006e 0027     		movs	r7, #0
 1670              	.LVL174:
 1671              	.L134:
1893:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1672              		.loc 1 1893 0
 1673 0070 2800     		movs	r0, r5
 1674 0072 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1675              	.LVL175:
1896:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1676              		.loc 1 1896 0
 1677 0076 3800     		movs	r0, r7
 1678              		@ sp needed
 1679              	.LVL176:
 1680              	.LVL177:
 1681              	.LVL178:
 1682 0078 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1683              	.L141:
 1684 007a C046     		.align	2
 1685              	.L140:
 1686 007c 00010000 		.word	.LANCHOR2
 1687 0080 00000000 		.word	.LANCHOR0
 1688              		.cfi_endproc
 1689              	.LFE50:
 1690              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1691              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1692              		.align	2
 1693              		.global	vTaskStartScheduler
 1694              		.code	16
 1695              		.thumb_func
 1696              		.type	vTaskStartScheduler, %function
 1697              	vTaskStartScheduler:
 1698              	.LFB51:
1902:Source\FreeRTOS\10.0.1\Source/tasks.c **** BaseType_t xReturn;
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 123


 1699              		.loc 1 1902 0
 1700              		.cfi_startproc
 1701              		@ args = 0, pretend = 0, frame = 0
 1702              		@ frame_needed = 0, uses_anonymous_args = 0
 1703 0000 00B5     		push	{lr}
 1704              		.cfi_def_cfa_offset 4
 1705              		.cfi_offset 14, -4
 1706 0002 83B0     		sub	sp, sp, #12
 1707              		.cfi_def_cfa_offset 16
1935:Source\FreeRTOS\10.0.1\Source/tasks.c **** 								configIDLE_TASK_NAME,
 1708              		.loc 1 1935 0
 1709 0004 114B     		ldr	r3, .L147
 1710 0006 1C33     		adds	r3, r3, #28
 1711 0008 0193     		str	r3, [sp, #4]
 1712 000a 0023     		movs	r3, #0
 1713 000c 0093     		str	r3, [sp]
 1714 000e 8022     		movs	r2, #128
 1715 0010 0F49     		ldr	r1, .L147+4
 1716 0012 1048     		ldr	r0, .L147+8
 1717 0014 FFF7FEFF 		bl	xTaskCreate
 1718              	.LVL179:
1946:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 1719              		.loc 1 1946 0
 1720 0018 0128     		cmp	r0, #1
 1721 001a 01D1     		bne	.L143
1948:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 1722              		.loc 1 1948 0
 1723 001c FFF7FEFF 		bl	xTimerCreateTimerTask
 1724              	.LVL180:
 1725              	.L143:
1957:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 1726              		.loc 1 1957 0
 1727 0020 0128     		cmp	r0, #1
 1728 0022 0CD1     		bne	.L144
1973:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1729              		.loc 1 1973 0
 1730              		.syntax divided
 1731              	@ 1973 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 1732 0024 72B6     		 cpsid i 
 1733              	@ 0 "" 2
1983:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1734              		.loc 1 1983 0
 1735              		.thumb
 1736              		.syntax unified
 1737 0026 0122     		movs	r2, #1
 1738 0028 5242     		rsbs	r2, r2, #0
 1739 002a 0B4B     		ldr	r3, .L147+12
 1740 002c DA62     		str	r2, [r3, #44]
1984:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1741              		.loc 1 1984 0
 1742 002e 074B     		ldr	r3, .L147
 1743 0030 0232     		adds	r2, r2, #2
 1744 0032 5A60     		str	r2, [r3, #4]
1985:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 1745              		.loc 1 1985 0
 1746 0034 0022     		movs	r2, #0
 1747 0036 5A61     		str	r2, [r3, #20]
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 124


1997:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 1748              		.loc 1 1997 0
 1749 0038 FFF7FEFF 		bl	xPortStartScheduler
 1750              	.LVL181:
 1751 003c 03E0     		b	.L142
 1752              	.LVL182:
 1753              	.L144:
2012:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 1754              		.loc 1 2012 0
 1755 003e 431C     		adds	r3, r0, #1
 1756 0040 01D1     		bne	.L142
2012:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 1757              		.loc 1 2012 0 is_stmt 0 discriminator 1
 1758              		.syntax divided
 1759              	@ 2012 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 1760 0042 72B6     		 cpsid i 
 1761              	@ 0 "" 2
 1762              		.thumb
 1763              		.syntax unified
 1764              	.L146:
 1765 0044 FEE7     		b	.L146
 1766              	.LVL183:
 1767              	.L142:
2018:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 1768              		.loc 1 2018 0 is_stmt 1
 1769 0046 03B0     		add	sp, sp, #12
 1770              		@ sp needed
 1771 0048 00BD     		pop	{pc}
 1772              	.L148:
 1773 004a C046     		.align	2
 1774              	.L147:
 1775 004c 00010000 		.word	.LANCHOR2
 1776 0050 00000000 		.word	.LC37
 1777 0054 00000000 		.word	prvIdleTask
 1778 0058 00000000 		.word	.LANCHOR0
 1779              		.cfi_endproc
 1780              	.LFE51:
 1781              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1782              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1783              		.align	2
 1784              		.global	vTaskEndScheduler
 1785              		.code	16
 1786              		.thumb_func
 1787              		.type	vTaskEndScheduler, %function
 1788              	vTaskEndScheduler:
 1789              	.LFB52:
2022:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1790              		.loc 1 2022 0
 1791              		.cfi_startproc
 1792              		@ args = 0, pretend = 0, frame = 0
 1793              		@ frame_needed = 0, uses_anonymous_args = 0
 1794 0000 10B5     		push	{r4, lr}
 1795              		.cfi_def_cfa_offset 8
 1796              		.cfi_offset 4, -8
 1797              		.cfi_offset 14, -4
2026:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1798              		.loc 1 2026 0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 125


 1799              		.syntax divided
 1800              	@ 2026 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 1801 0002 72B6     		 cpsid i 
 1802              	@ 0 "" 2
2027:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	vPortEndScheduler();
 1803              		.loc 1 2027 0
 1804              		.thumb
 1805              		.syntax unified
 1806 0004 0022     		movs	r2, #0
 1807 0006 024B     		ldr	r3, .L150
 1808 0008 5A60     		str	r2, [r3, #4]
2028:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
 1809              		.loc 1 2028 0
 1810 000a FFF7FEFF 		bl	vPortEndScheduler
 1811              	.LVL184:
2029:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*----------------------------------------------------------*/
 1812              		.loc 1 2029 0
 1813              		@ sp needed
 1814 000e 10BD     		pop	{r4, pc}
 1815              	.L151:
 1816              		.align	2
 1817              	.L150:
 1818 0010 00010000 		.word	.LANCHOR2
 1819              		.cfi_endproc
 1820              	.LFE52:
 1821              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1822              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1823              		.align	2
 1824              		.global	vTaskSuspendAll
 1825              		.code	16
 1826              		.thumb_func
 1827              		.type	vTaskSuspendAll, %function
 1828              	vTaskSuspendAll:
 1829              	.LFB53:
2033:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1830              		.loc 1 2033 0
 1831              		.cfi_startproc
 1832              		@ args = 0, pretend = 0, frame = 0
 1833              		@ frame_needed = 0, uses_anonymous_args = 0
 1834              		@ link register save eliminated.
2038:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
 1835              		.loc 1 2038 0
 1836 0000 024A     		ldr	r2, .L153
 1837 0002 9369     		ldr	r3, [r2, #24]
 1838 0004 0133     		adds	r3, r3, #1
 1839 0006 9361     		str	r3, [r2, #24]
2039:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*----------------------------------------------------------*/
 1840              		.loc 1 2039 0
 1841              		@ sp needed
 1842 0008 7047     		bx	lr
 1843              	.L154:
 1844 000a C046     		.align	2
 1845              	.L153:
 1846 000c 00010000 		.word	.LANCHOR2
 1847              		.cfi_endproc
 1848              	.LFE53:
 1849              		.size	vTaskSuspendAll, .-vTaskSuspendAll
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 126


 1850              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1851              		.align	2
 1852              		.global	xTaskGetTickCount
 1853              		.code	16
 1854              		.thumb_func
 1855              		.type	xTaskGetTickCount, %function
 1856              	xTaskGetTickCount:
 1857              	.LFB55:
2216:Source\FreeRTOS\10.0.1\Source/tasks.c **** TickType_t xTicks;
 1858              		.loc 1 2216 0
 1859              		.cfi_startproc
 1860              		@ args = 0, pretend = 0, frame = 0
 1861              		@ frame_needed = 0, uses_anonymous_args = 0
 1862              		@ link register save eliminated.
2222:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 1863              		.loc 1 2222 0
 1864 0000 014B     		ldr	r3, .L156
 1865 0002 5869     		ldr	r0, [r3, #20]
 1866              	.LVL185:
2227:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 1867              		.loc 1 2227 0
 1868              		@ sp needed
 1869 0004 7047     		bx	lr
 1870              	.L157:
 1871 0006 C046     		.align	2
 1872              	.L156:
 1873 0008 00010000 		.word	.LANCHOR2
 1874              		.cfi_endproc
 1875              	.LFE55:
 1876              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1877              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1878              		.align	2
 1879              		.global	xTaskGetTickCountFromISR
 1880              		.code	16
 1881              		.thumb_func
 1882              		.type	xTaskGetTickCountFromISR, %function
 1883              	xTaskGetTickCountFromISR:
 1884              	.LFB56:
2231:Source\FreeRTOS\10.0.1\Source/tasks.c **** TickType_t xReturn;
 1885              		.loc 1 2231 0
 1886              		.cfi_startproc
 1887              		@ args = 0, pretend = 0, frame = 0
 1888              		@ frame_needed = 0, uses_anonymous_args = 0
 1889              		@ link register save eliminated.
 1890              	.LVL186:
2253:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 1891              		.loc 1 2253 0
 1892 0000 014B     		ldr	r3, .L159
 1893 0002 5869     		ldr	r0, [r3, #20]
 1894              	.LVL187:
2258:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 1895              		.loc 1 2258 0
 1896              		@ sp needed
 1897 0004 7047     		bx	lr
 1898              	.L160:
 1899 0006 C046     		.align	2
 1900              	.L159:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 127


 1901 0008 00010000 		.word	.LANCHOR2
 1902              		.cfi_endproc
 1903              	.LFE56:
 1904              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 1905              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1906              		.align	2
 1907              		.global	uxTaskGetNumberOfTasks
 1908              		.code	16
 1909              		.thumb_func
 1910              		.type	uxTaskGetNumberOfTasks, %function
 1911              	uxTaskGetNumberOfTasks:
 1912              	.LFB57:
2262:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 1913              		.loc 1 2262 0
 1914              		.cfi_startproc
 1915              		@ args = 0, pretend = 0, frame = 0
 1916              		@ frame_needed = 0, uses_anonymous_args = 0
 1917              		@ link register save eliminated.
2265:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
 1918              		.loc 1 2265 0
 1919 0000 014B     		ldr	r3, .L162
 1920 0002 D86F     		ldr	r0, [r3, #124]
2266:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 1921              		.loc 1 2266 0
 1922              		@ sp needed
 1923 0004 7047     		bx	lr
 1924              	.L163:
 1925 0006 C046     		.align	2
 1926              	.L162:
 1927 0008 80000000 		.word	.LANCHOR1
 1928              		.cfi_endproc
 1929              	.LFE57:
 1930              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 1931              		.section	.text.pcTaskGetName,"ax",%progbits
 1932              		.align	2
 1933              		.global	pcTaskGetName
 1934              		.code	16
 1935              		.thumb_func
 1936              		.type	pcTaskGetName, %function
 1937              	pcTaskGetName:
 1938              	.LFB58:
2270:Source\FreeRTOS\10.0.1\Source/tasks.c **** TCB_t *pxTCB;
 1939              		.loc 1 2270 0
 1940              		.cfi_startproc
 1941              		@ args = 0, pretend = 0, frame = 0
 1942              		@ frame_needed = 0, uses_anonymous_args = 0
 1943              		@ link register save eliminated.
 1944              	.LVL188:
2275:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxTCB );
 1945              		.loc 1 2275 0
 1946 0000 0028     		cmp	r0, #0
 1947 0002 01D1     		bne	.L165
2275:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxTCB );
 1948              		.loc 1 2275 0 is_stmt 0 discriminator 1
 1949 0004 034B     		ldr	r3, .L168
 1950 0006 1868     		ldr	r0, [r3]
 1951              	.LVL189:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 128


 1952              	.L165:
2276:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1953              		.loc 1 2276 0 is_stmt 1 discriminator 4
 1954 0008 0028     		cmp	r0, #0
 1955 000a 01D1     		bne	.L166
2276:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1956              		.loc 1 2276 0 is_stmt 0 discriminator 1
 1957              		.syntax divided
 1958              	@ 2276 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 1959 000c 72B6     		 cpsid i 
 1960              	@ 0 "" 2
 1961              		.thumb
 1962              		.syntax unified
 1963              	.L167:
 1964 000e FEE7     		b	.L167
 1965              	.L166:
2277:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
 1966              		.loc 1 2277 0 is_stmt 1
 1967 0010 3430     		adds	r0, r0, #52
 1968              	.LVL190:
2278:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 1969              		.loc 1 2278 0
 1970              		@ sp needed
 1971 0012 7047     		bx	lr
 1972              	.L169:
 1973              		.align	2
 1974              	.L168:
 1975 0014 00010000 		.word	.LANCHOR2
 1976              		.cfi_endproc
 1977              	.LFE58:
 1978              		.size	pcTaskGetName, .-pcTaskGetName
 1979              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1980              		.align	2
 1981              		.global	xTaskIncrementTick
 1982              		.code	16
 1983              		.thumb_func
 1984              		.type	xTaskIncrementTick, %function
 1985              	xTaskIncrementTick:
 1986              	.LFB60:
2590:Source\FreeRTOS\10.0.1\Source/tasks.c **** TCB_t * pxTCB;
 1987              		.loc 1 2590 0
 1988              		.cfi_startproc
 1989              		@ args = 0, pretend = 0, frame = 0
 1990              		@ frame_needed = 0, uses_anonymous_args = 0
 1991 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1992              		.cfi_def_cfa_offset 24
 1993              		.cfi_offset 3, -24
 1994              		.cfi_offset 4, -20
 1995              		.cfi_offset 5, -16
 1996              		.cfi_offset 6, -12
 1997              		.cfi_offset 7, -8
 1998              		.cfi_offset 14, -4
 1999              	.LVL191:
2599:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 2000              		.loc 1 2599 0
 2001 0002 364B     		ldr	r3, .L189
 2002 0004 9B69     		ldr	r3, [r3, #24]
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 129


 2003 0006 002B     		cmp	r3, #0
 2004 0008 5CD1     		bne	.L171
 2005              	.LBB4:
2603:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2006              		.loc 1 2603 0
 2007 000a 344B     		ldr	r3, .L189
 2008 000c 5C69     		ldr	r4, [r3, #20]
 2009 000e 0134     		adds	r4, r4, #1
 2010              	.LVL192:
2607:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2011              		.loc 1 2607 0
 2012 0010 5C61     		str	r4, [r3, #20]
2609:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 2013              		.loc 1 2609 0
 2014 0012 002C     		cmp	r4, #0
 2015 0014 12D1     		bne	.L172
 2016              	.LBB5:
2611:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 2017              		.loc 1 2611 0
 2018 0016 324B     		ldr	r3, .L189+4
 2019 0018 9B6A     		ldr	r3, [r3, #40]
 2020 001a 1B68     		ldr	r3, [r3]
 2021 001c 002B     		cmp	r3, #0
 2022 001e 01D0     		beq	.L173
2611:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 2023              		.loc 1 2611 0 is_stmt 0 discriminator 1
 2024              		.syntax divided
 2025              	@ 2611 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 2026 0020 72B6     		 cpsid i 
 2027              	@ 0 "" 2
 2028              		.thumb
 2029              		.syntax unified
 2030              	.L174:
 2031 0022 FEE7     		b	.L174
 2032              	.L173:
2611:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 2033              		.loc 1 2611 0 discriminator 2
 2034 0024 2E4A     		ldr	r2, .L189+4
 2035 0026 916A     		ldr	r1, [r2, #40]
 2036              	.LVL193:
 2037 0028 2E4B     		ldr	r3, .L189+8
 2038 002a 986F     		ldr	r0, [r3, #120]
 2039 002c 9062     		str	r0, [r2, #40]
 2040 002e 9967     		str	r1, [r3, #120]
 2041 0030 2A4A     		ldr	r2, .L189
 2042 0032 136A     		ldr	r3, [r2, #32]
 2043 0034 0133     		adds	r3, r3, #1
 2044 0036 1362     		str	r3, [r2, #32]
 2045 0038 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2046              	.LVL194:
 2047              	.L172:
 2048              	.LBE5:
2622:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 2049              		.loc 1 2622 0 is_stmt 1
 2050 003c 284B     		ldr	r3, .L189+4
 2051 003e DB6A     		ldr	r3, [r3, #44]
 2052 0040 9C42     		cmp	r4, r3
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 130


 2053 0042 03D2     		bcs	.L185
 2054              	.LBE4:
2593:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2055              		.loc 1 2593 0
 2056 0044 0027     		movs	r7, #0
 2057 0046 42E0     		b	.L176
 2058              	.LVL195:
 2059              	.L187:
 2060              	.LBB6:
2688:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						}
 2061              		.loc 1 2688 0
 2062 0048 0127     		movs	r7, #1
 2063              	.LVL196:
 2064 004a 00E0     		b	.L175
 2065              	.LVL197:
 2066              	.L185:
 2067 004c 0027     		movs	r7, #0
 2068              	.LVL198:
 2069              	.L175:
2626:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 2070              		.loc 1 2626 0
 2071 004e 244B     		ldr	r3, .L189+4
 2072 0050 9B6A     		ldr	r3, [r3, #40]
 2073 0052 1B68     		ldr	r3, [r3]
 2074 0054 002B     		cmp	r3, #0
 2075 0056 01D1     		bne	.L186
 2076 0058 0133     		adds	r3, r3, #1
 2077 005a 00E0     		b	.L177
 2078              	.L186:
 2079 005c 0023     		movs	r3, #0
 2080              	.L177:
2626:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 2081              		.loc 1 2626 0 is_stmt 0 discriminator 4
 2082 005e 002B     		cmp	r3, #0
 2083 0060 04D0     		beq	.L178
2633:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
 2084              		.loc 1 2633 0 is_stmt 1
 2085 0062 0122     		movs	r2, #1
 2086 0064 5242     		rsbs	r2, r2, #0
 2087 0066 1E4B     		ldr	r3, .L189+4
 2088 0068 DA62     		str	r2, [r3, #44]
2634:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 2089              		.loc 1 2634 0
 2090 006a 30E0     		b	.L176
 2091              	.L178:
2642:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2092              		.loc 1 2642 0
 2093 006c 1C4B     		ldr	r3, .L189+4
 2094 006e 9B6A     		ldr	r3, [r3, #40]
 2095 0070 DB68     		ldr	r3, [r3, #12]
 2096 0072 DE68     		ldr	r6, [r3, #12]
 2097              	.LVL199:
2643:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2098              		.loc 1 2643 0
 2099 0074 7368     		ldr	r3, [r6, #4]
 2100              	.LVL200:
2645:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 131


 2101              		.loc 1 2645 0
 2102 0076 9C42     		cmp	r4, r3
 2103 0078 02D2     		bcs	.L179
2652:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						break;
 2104              		.loc 1 2652 0
 2105 007a 194A     		ldr	r2, .L189+4
 2106 007c D362     		str	r3, [r2, #44]
2653:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
 2107              		.loc 1 2653 0
 2108 007e 26E0     		b	.L176
 2109              	.L179:
2661:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2110              		.loc 1 2661 0
 2111 0080 351D     		adds	r5, r6, #4
 2112 0082 2800     		movs	r0, r5
 2113 0084 FFF7FEFF 		bl	uxListRemove
 2114              	.LVL201:
2665:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
 2115              		.loc 1 2665 0
 2116 0088 B36A     		ldr	r3, [r6, #40]
 2117 008a 002B     		cmp	r3, #0
 2118 008c 03D0     		beq	.L180
2667:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
 2119              		.loc 1 2667 0
 2120 008e 3000     		movs	r0, r6
 2121 0090 1830     		adds	r0, r0, #24
 2122 0092 FFF7FEFF 		bl	uxListRemove
 2123              	.LVL202:
 2124              	.L180:
2676:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2125              		.loc 1 2676 0
 2126 0096 F36A     		ldr	r3, [r6, #44]
 2127 0098 104A     		ldr	r2, .L189
 2128 009a D268     		ldr	r2, [r2, #12]
 2129 009c 9342     		cmp	r3, r2
 2130 009e 01D9     		bls	.L181
2676:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2131              		.loc 1 2676 0 is_stmt 0 discriminator 1
 2132 00a0 0E4A     		ldr	r2, .L189
 2133 00a2 D360     		str	r3, [r2, #12]
 2134              	.L181:
2676:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2135              		.loc 1 2676 0 discriminator 3
 2136 00a4 9A00     		lsls	r2, r3, #2
 2137 00a6 D318     		adds	r3, r2, r3
 2138 00a8 9A00     		lsls	r2, r3, #2
 2139 00aa 0D48     		ldr	r0, .L189+4
 2140 00ac 3030     		adds	r0, r0, #48
 2141 00ae 8018     		adds	r0, r0, r2
 2142 00b0 2900     		movs	r1, r5
 2143 00b2 FFF7FEFF 		bl	vListInsertEnd
 2144              	.LVL203:
2686:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						{
 2145              		.loc 1 2686 0 is_stmt 1 discriminator 3
 2146 00b6 F26A     		ldr	r2, [r6, #44]
 2147 00b8 084B     		ldr	r3, .L189
 2148 00ba 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 132


 2149 00bc DB6A     		ldr	r3, [r3, #44]
 2150 00be 9A42     		cmp	r2, r3
 2151 00c0 C2D2     		bcs	.L187
 2152 00c2 C4E7     		b	.L175
 2153              	.LVL204:
 2154              	.L171:
 2155              	.LBE6:
2733:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2156              		.loc 1 2733 0
 2157 00c4 054A     		ldr	r2, .L189
 2158 00c6 536A     		ldr	r3, [r2, #36]
 2159 00c8 0133     		adds	r3, r3, #1
 2160 00ca 5362     		str	r3, [r2, #36]
2593:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2161              		.loc 1 2593 0
 2162 00cc 0027     		movs	r7, #0
 2163              	.LVL205:
 2164              	.L176:
2746:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 2165              		.loc 1 2746 0
 2166 00ce 034B     		ldr	r3, .L189
 2167 00d0 9B6A     		ldr	r3, [r3, #40]
 2168 00d2 002B     		cmp	r3, #0
 2169 00d4 00D0     		beq	.L184
2748:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 2170              		.loc 1 2748 0
 2171 00d6 0127     		movs	r7, #1
 2172              	.LVL206:
 2173              	.L184:
2758:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 2174              		.loc 1 2758 0
 2175 00d8 3800     		movs	r0, r7
 2176              		@ sp needed
 2177              	.LVL207:
 2178 00da F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2179              	.L190:
 2180              		.align	2
 2181              	.L189:
 2182 00dc 00010000 		.word	.LANCHOR2
 2183 00e0 00000000 		.word	.LANCHOR0
 2184 00e4 80000000 		.word	.LANCHOR1
 2185              		.cfi_endproc
 2186              	.LFE60:
 2187              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 2188              		.section	.text.xTaskResumeAll,"ax",%progbits
 2189              		.align	2
 2190              		.global	xTaskResumeAll
 2191              		.code	16
 2192              		.thumb_func
 2193              		.type	xTaskResumeAll, %function
 2194              	xTaskResumeAll:
 2195              	.LFB54:
2106:Source\FreeRTOS\10.0.1\Source/tasks.c **** TCB_t *pxTCB = NULL;
 2196              		.loc 1 2106 0
 2197              		.cfi_startproc
 2198              		@ args = 0, pretend = 0, frame = 0
 2199              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 133


 2200 0000 70B5     		push	{r4, r5, r6, lr}
 2201              		.cfi_def_cfa_offset 16
 2202              		.cfi_offset 4, -16
 2203              		.cfi_offset 5, -12
 2204              		.cfi_offset 6, -8
 2205              		.cfi_offset 14, -4
 2206              	.LVL208:
2112:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2207              		.loc 1 2112 0
 2208 0002 314B     		ldr	r3, .L206
 2209 0004 9B69     		ldr	r3, [r3, #24]
 2210 0006 002B     		cmp	r3, #0
 2211 0008 01D1     		bne	.L192
2112:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2212              		.loc 1 2112 0 is_stmt 0 discriminator 1
 2213              		.syntax divided
 2214              	@ 2112 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 2215 000a 72B6     		 cpsid i 
 2216              	@ 0 "" 2
 2217              		.thumb
 2218              		.syntax unified
 2219              	.L193:
 2220 000c FEE7     		b	.L193
 2221              	.L192:
2119:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 2222              		.loc 1 2119 0 is_stmt 1
 2223 000e FFF7FEFF 		bl	vPortEnterCritical
 2224              	.LVL209:
2121:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2225              		.loc 1 2121 0
 2226 0012 2D4B     		ldr	r3, .L206
 2227 0014 9A69     		ldr	r2, [r3, #24]
 2228 0016 013A     		subs	r2, r2, #1
 2229 0018 9A61     		str	r2, [r3, #24]
2123:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 2230              		.loc 1 2123 0
 2231 001a 9B69     		ldr	r3, [r3, #24]
 2232 001c 002B     		cmp	r3, #0
 2233 001e 4CD1     		bne	.L203
2125:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 2234              		.loc 1 2125 0
 2235 0020 2A4B     		ldr	r3, .L206+4
 2236 0022 DB6F     		ldr	r3, [r3, #124]
 2237 0024 002B     		cmp	r3, #0
 2238 0026 26D1     		bne	.L204
2108:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2239              		.loc 1 2108 0
 2240 0028 0024     		movs	r4, #0
 2241 002a 49E0     		b	.L194
 2242              	.LVL210:
 2243              	.L198:
2131:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2244              		.loc 1 2131 0
 2245 002c 284B     		ldr	r3, .L206+8
 2246 002e 1B6A     		ldr	r3, [r3, #32]
 2247 0030 DC68     		ldr	r4, [r3, #12]
 2248              	.LVL211:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 134


2132:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2249              		.loc 1 2132 0
 2250 0032 2000     		movs	r0, r4
 2251 0034 1830     		adds	r0, r0, #24
 2252 0036 FFF7FEFF 		bl	uxListRemove
 2253              	.LVL212:
2133:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2254              		.loc 1 2133 0
 2255 003a 251D     		adds	r5, r4, #4
 2256 003c 2800     		movs	r0, r5
 2257 003e FFF7FEFF 		bl	uxListRemove
 2258              	.LVL213:
2134:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2259              		.loc 1 2134 0
 2260 0042 E36A     		ldr	r3, [r4, #44]
 2261 0044 204A     		ldr	r2, .L206
 2262 0046 D268     		ldr	r2, [r2, #12]
 2263 0048 9342     		cmp	r3, r2
 2264 004a 01D9     		bls	.L196
2134:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2265              		.loc 1 2134 0 is_stmt 0 discriminator 1
 2266 004c 1E4A     		ldr	r2, .L206
 2267 004e D360     		str	r3, [r2, #12]
 2268              	.L196:
2134:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2269              		.loc 1 2134 0 discriminator 3
 2270 0050 9A00     		lsls	r2, r3, #2
 2271 0052 D318     		adds	r3, r2, r3
 2272 0054 9A00     		lsls	r2, r3, #2
 2273 0056 1E48     		ldr	r0, .L206+8
 2274 0058 3030     		adds	r0, r0, #48
 2275 005a 8018     		adds	r0, r0, r2
 2276 005c 2900     		movs	r1, r5
 2277 005e FFF7FEFF 		bl	vListInsertEnd
 2278              	.LVL214:
2138:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
 2279              		.loc 1 2138 0 is_stmt 1 discriminator 3
 2280 0062 194B     		ldr	r3, .L206
 2281 0064 1B68     		ldr	r3, [r3]
 2282 0066 DB6A     		ldr	r3, [r3, #44]
 2283 0068 E26A     		ldr	r2, [r4, #44]
 2284 006a 9A42     		cmp	r2, r3
 2285 006c 04D3     		bcc	.L195
2140:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
 2286              		.loc 1 2140 0
 2287 006e 0122     		movs	r2, #1
 2288 0070 154B     		ldr	r3, .L206
 2289 0072 9A62     		str	r2, [r3, #40]
 2290 0074 00E0     		b	.L195
 2291              	.LVL215:
 2292              	.L204:
 2293 0076 0024     		movs	r4, #0
 2294              	.LVL216:
 2295              	.L195:
2129:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 2296              		.loc 1 2129 0
 2297 0078 154B     		ldr	r3, .L206+8
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 135


 2298 007a 5B69     		ldr	r3, [r3, #20]
 2299 007c 002B     		cmp	r3, #0
 2300 007e D5D1     		bne	.L198
2148:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 2301              		.loc 1 2148 0
 2302 0080 002C     		cmp	r4, #0
 2303 0082 01D0     		beq	.L199
2156:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 2304              		.loc 1 2156 0
 2305 0084 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2306              	.LVL217:
 2307              	.L199:
 2308              	.LBB7:
2164:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2309              		.loc 1 2164 0
 2310 0088 0F4B     		ldr	r3, .L206
 2311 008a 5C6A     		ldr	r4, [r3, #36]
 2312              	.LVL218:
2166:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
 2313              		.loc 1 2166 0
 2314 008c 002C     		cmp	r4, #0
 2315 008e 0CD0     		beq	.L200
 2316              	.L202:
2170:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							{
 2317              		.loc 1 2170 0
 2318 0090 FFF7FEFF 		bl	xTaskIncrementTick
 2319              	.LVL219:
 2320 0094 0028     		cmp	r0, #0
 2321 0096 02D0     		beq	.L201
2172:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							}
 2322              		.loc 1 2172 0
 2323 0098 0122     		movs	r2, #1
 2324 009a 0B4B     		ldr	r3, .L206
 2325 009c 9A62     		str	r2, [r3, #40]
 2326              	.L201:
2178:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2327              		.loc 1 2178 0
 2328 009e 013C     		subs	r4, r4, #1
 2329              	.LVL220:
2179:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2330              		.loc 1 2179 0
 2331 00a0 002C     		cmp	r4, #0
 2332 00a2 F5D1     		bne	.L202
2181:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
 2333              		.loc 1 2181 0
 2334 00a4 0022     		movs	r2, #0
 2335 00a6 084B     		ldr	r3, .L206
 2336 00a8 5A62     		str	r2, [r3, #36]
 2337              	.L200:
 2338              	.LBE7:
2189:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 2339              		.loc 1 2189 0
 2340 00aa 074B     		ldr	r3, .L206
 2341 00ac 9B6A     		ldr	r3, [r3, #40]
 2342 00ae 002B     		cmp	r3, #0
 2343 00b0 05D0     		beq	.L205
 2344              	.LVL221:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 136


2196:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 2345              		.loc 1 2196 0
 2346 00b2 FFF7FEFF 		bl	vPortYield
 2347              	.LVL222:
2193:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
 2348              		.loc 1 2193 0
 2349 00b6 0124     		movs	r4, #1
 2350              	.LVL223:
 2351 00b8 02E0     		b	.L194
 2352              	.LVL224:
 2353              	.L203:
2108:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2354              		.loc 1 2108 0
 2355 00ba 0024     		movs	r4, #0
 2356 00bc 00E0     		b	.L194
 2357              	.LVL225:
 2358              	.L205:
 2359 00be 0024     		movs	r4, #0
 2360              	.LVL226:
 2361              	.L194:
2209:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2362              		.loc 1 2209 0
 2363 00c0 FFF7FEFF 		bl	vPortExitCritical
 2364              	.LVL227:
2212:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 2365              		.loc 1 2212 0
 2366 00c4 2000     		movs	r0, r4
 2367              		@ sp needed
 2368              	.LVL228:
 2369 00c6 70BD     		pop	{r4, r5, r6, pc}
 2370              	.L207:
 2371              		.align	2
 2372              	.L206:
 2373 00c8 00010000 		.word	.LANCHOR2
 2374 00cc 80000000 		.word	.LANCHOR1
 2375 00d0 00000000 		.word	.LANCHOR0
 2376              		.cfi_endproc
 2377              	.LFE54:
 2378              		.size	xTaskResumeAll, .-xTaskResumeAll
 2379              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2380              		.align	2
 2381              		.global	vTaskDelayUntil
 2382              		.code	16
 2383              		.thumb_func
 2384              		.type	vTaskDelayUntil, %function
 2385              	vTaskDelayUntil:
 2386              	.LFB41:
1205:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TickType_t xTimeToWake;
 2387              		.loc 1 1205 0
 2388              		.cfi_startproc
 2389              		@ args = 0, pretend = 0, frame = 0
 2390              		@ frame_needed = 0, uses_anonymous_args = 0
 2391              	.LVL229:
 2392 0000 70B5     		push	{r4, r5, r6, lr}
 2393              		.cfi_def_cfa_offset 16
 2394              		.cfi_offset 4, -16
 2395              		.cfi_offset 5, -12
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 137


 2396              		.cfi_offset 6, -8
 2397              		.cfi_offset 14, -4
 2398 0002 0500     		movs	r5, r0
 2399 0004 0C00     		movs	r4, r1
 2400              	.LVL230:
1209:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2401              		.loc 1 1209 0
 2402 0006 0028     		cmp	r0, #0
 2403 0008 01D1     		bne	.L209
1209:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2404              		.loc 1 1209 0 is_stmt 0 discriminator 1
 2405              		.syntax divided
 2406              	@ 1209 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 2407 000a 72B6     		 cpsid i 
 2408              	@ 0 "" 2
 2409              		.thumb
 2410              		.syntax unified
 2411              	.L210:
 2412 000c FEE7     		b	.L210
 2413              	.L209:
1210:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2414              		.loc 1 1210 0 is_stmt 1
 2415 000e 0029     		cmp	r1, #0
 2416 0010 01D1     		bne	.L211
1210:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2417              		.loc 1 1210 0 is_stmt 0 discriminator 1
 2418              		.syntax divided
 2419              	@ 1210 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 2420 0012 72B6     		 cpsid i 
 2421              	@ 0 "" 2
 2422              		.thumb
 2423              		.syntax unified
 2424              	.L212:
 2425 0014 FEE7     		b	.L212
 2426              	.L211:
1211:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2427              		.loc 1 1211 0 is_stmt 1
 2428 0016 174B     		ldr	r3, .L223
 2429 0018 9B69     		ldr	r3, [r3, #24]
 2430 001a 002B     		cmp	r3, #0
 2431 001c 01D0     		beq	.L213
1211:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2432              		.loc 1 1211 0 is_stmt 0 discriminator 1
 2433              		.syntax divided
 2434              	@ 1211 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 2435 001e 72B6     		 cpsid i 
 2436              	@ 0 "" 2
 2437              		.thumb
 2438              		.syntax unified
 2439              	.L214:
 2440 0020 FEE7     		b	.L214
 2441              	.L213:
1213:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 2442              		.loc 1 1213 0 is_stmt 1
 2443 0022 FFF7FEFF 		bl	vTaskSuspendAll
 2444              	.LVL231:
 2445              	.LBB8:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 138


1217:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2446              		.loc 1 1217 0
 2447 0026 134B     		ldr	r3, .L223
 2448 0028 5869     		ldr	r0, [r3, #20]
 2449              	.LVL232:
1220:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2450              		.loc 1 1220 0
 2451 002a 2A68     		ldr	r2, [r5]
 2452 002c A318     		adds	r3, r4, r2
 2453              	.LVL233:
1222:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 2454              		.loc 1 1222 0
 2455 002e 9042     		cmp	r0, r2
 2456 0030 05D2     		bcs	.L215
1229:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 2457              		.loc 1 1229 0
 2458 0032 9A42     		cmp	r2, r3
 2459 0034 09D9     		bls	.L219
1229:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 2460              		.loc 1 1229 0 is_stmt 0 discriminator 1
 2461 0036 9842     		cmp	r0, r3
 2462 0038 09D3     		bcc	.L220
 2463              	.LBE8:
1207:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2464              		.loc 1 1207 0 is_stmt 1
 2465 003a 0022     		movs	r2, #0
 2466 003c 0CE0     		b	.L216
 2467              	.L215:
 2468              	.LBB9:
1243:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 2469              		.loc 1 1243 0
 2470 003e 9A42     		cmp	r2, r3
 2471 0040 07D8     		bhi	.L221
1243:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 2472              		.loc 1 1243 0 is_stmt 0 discriminator 1
 2473 0042 9842     		cmp	r0, r3
 2474 0044 07D3     		bcc	.L222
 2475              	.LBE9:
1207:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2476              		.loc 1 1207 0 is_stmt 1
 2477 0046 0022     		movs	r2, #0
 2478 0048 06E0     		b	.L216
 2479              	.L219:
 2480 004a 0022     		movs	r2, #0
 2481 004c 04E0     		b	.L216
 2482              	.L220:
 2483              	.LBB10:
1231:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 2484              		.loc 1 1231 0
 2485 004e 0122     		movs	r2, #1
 2486 0050 02E0     		b	.L216
 2487              	.L221:
1245:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 2488              		.loc 1 1245 0
 2489 0052 0122     		movs	r2, #1
 2490 0054 00E0     		b	.L216
 2491              	.L222:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 139


 2492 0056 0122     		movs	r2, #1
 2493              	.L216:
 2494              	.LVL234:
1254:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2495              		.loc 1 1254 0
 2496 0058 2B60     		str	r3, [r5]
1256:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 2497              		.loc 1 1256 0
 2498 005a 002A     		cmp	r2, #0
 2499 005c 03D0     		beq	.L217
1262:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 2500              		.loc 1 1262 0
 2501 005e 181A     		subs	r0, r3, r0
 2502              	.LVL235:
 2503 0060 0021     		movs	r1, #0
 2504 0062 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2505              	.LVL236:
 2506              	.L217:
 2507              	.LBE10:
1269:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2508              		.loc 1 1269 0
 2509 0066 FFF7FEFF 		bl	xTaskResumeAll
 2510              	.LVL237:
1273:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 2511              		.loc 1 1273 0
 2512 006a 0028     		cmp	r0, #0
 2513 006c 01D1     		bne	.L208
1275:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 2514              		.loc 1 1275 0
 2515 006e FFF7FEFF 		bl	vPortYield
 2516              	.LVL238:
 2517              	.L208:
1281:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2518              		.loc 1 1281 0
 2519              		@ sp needed
 2520              	.LVL239:
 2521              	.LVL240:
 2522 0072 70BD     		pop	{r4, r5, r6, pc}
 2523              	.L224:
 2524              		.align	2
 2525              	.L223:
 2526 0074 00010000 		.word	.LANCHOR2
 2527              		.cfi_endproc
 2528              	.LFE41:
 2529              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 2530              		.section	.text.vTaskDelay,"ax",%progbits
 2531              		.align	2
 2532              		.global	vTaskDelay
 2533              		.code	16
 2534              		.thumb_func
 2535              		.type	vTaskDelay, %function
 2536              	vTaskDelay:
 2537              	.LFB42:
1289:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2538              		.loc 1 1289 0
 2539              		.cfi_startproc
 2540              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 140


 2541              		@ frame_needed = 0, uses_anonymous_args = 0
 2542              	.LVL241:
 2543 0000 10B5     		push	{r4, lr}
 2544              		.cfi_def_cfa_offset 8
 2545              		.cfi_offset 4, -8
 2546              		.cfi_offset 14, -4
 2547 0002 041E     		subs	r4, r0, #0
 2548              	.LVL242:
1293:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 2549              		.loc 1 1293 0
 2550 0004 0ED0     		beq	.L230
1295:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			vTaskSuspendAll();
 2551              		.loc 1 1295 0
 2552 0006 0A4B     		ldr	r3, .L231
 2553 0008 9B69     		ldr	r3, [r3, #24]
 2554 000a 002B     		cmp	r3, #0
 2555 000c 01D0     		beq	.L227
1295:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			vTaskSuspendAll();
 2556              		.loc 1 1295 0 is_stmt 0 discriminator 1
 2557              		.syntax divided
 2558              	@ 1295 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 2559 000e 72B6     		 cpsid i 
 2560              	@ 0 "" 2
 2561              		.thumb
 2562              		.syntax unified
 2563              	.L228:
 2564 0010 FEE7     		b	.L228
 2565              	.L227:
1296:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 2566              		.loc 1 1296 0 is_stmt 1
 2567 0012 FFF7FEFF 		bl	vTaskSuspendAll
 2568              	.LVL243:
1307:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 2569              		.loc 1 1307 0
 2570 0016 0021     		movs	r1, #0
 2571 0018 2000     		movs	r0, r4
 2572 001a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2573              	.LVL244:
1309:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 2574              		.loc 1 1309 0
 2575 001e FFF7FEFF 		bl	xTaskResumeAll
 2576              	.LVL245:
 2577 0022 00E0     		b	.L226
 2578              	.LVL246:
 2579              	.L230:
1290:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2580              		.loc 1 1290 0
 2581 0024 0020     		movs	r0, #0
 2582              	.LVL247:
 2583              	.L226:
1318:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 2584              		.loc 1 1318 0
 2585 0026 0028     		cmp	r0, #0
 2586 0028 01D1     		bne	.L225
1320:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 2587              		.loc 1 1320 0
 2588 002a FFF7FEFF 		bl	vPortYield
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 141


 2589              	.LVL248:
 2590              	.L225:
1326:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2591              		.loc 1 1326 0
 2592              		@ sp needed
 2593              	.LVL249:
 2594 002e 10BD     		pop	{r4, pc}
 2595              	.L232:
 2596              		.align	2
 2597              	.L231:
 2598 0030 00010000 		.word	.LANCHOR2
 2599              		.cfi_endproc
 2600              	.LFE42:
 2601              		.size	vTaskDelay, .-vTaskDelay
 2602              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2603              		.align	2
 2604              		.global	vTaskSwitchContext
 2605              		.code	16
 2606              		.thumb_func
 2607              		.type	vTaskSwitchContext, %function
 2608              	vTaskSwitchContext:
 2609              	.LFB61:
2852:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2610              		.loc 1 2852 0
 2611              		.cfi_startproc
 2612              		@ args = 0, pretend = 0, frame = 0
 2613              		@ frame_needed = 0, uses_anonymous_args = 0
 2614 0000 10B5     		push	{r4, lr}
 2615              		.cfi_def_cfa_offset 8
 2616              		.cfi_offset 4, -8
 2617              		.cfi_offset 14, -4
2853:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 2618              		.loc 1 2853 0
 2619 0002 294B     		ldr	r3, .L243
 2620 0004 9B69     		ldr	r3, [r3, #24]
 2621 0006 002B     		cmp	r3, #0
 2622 0008 03D0     		beq	.L234
2857:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 2623              		.loc 1 2857 0
 2624 000a 0122     		movs	r2, #1
 2625 000c 264B     		ldr	r3, .L243
 2626 000e 9A62     		str	r2, [r3, #40]
 2627 0010 49E0     		b	.L233
 2628              	.L234:
2861:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2629              		.loc 1 2861 0
 2630 0012 254B     		ldr	r3, .L243
 2631 0014 0022     		movs	r2, #0
 2632 0016 9A62     		str	r2, [r3, #40]
 2633              	.LBB11:
2893:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			const uint32_t ulCheckValue = ( uint32_t ) 0xa5a5a5a5;											\
 2634              		.loc 1 2893 0
 2635 0018 1B68     		ldr	r3, [r3]
 2636 001a 1B6B     		ldr	r3, [r3, #48]
 2637              	.LVL250:
2896:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				( pulStack[ 1 ] != ulCheckValue ) ||												\
 2638              		.loc 1 2896 0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 142


 2639 001c 234A     		ldr	r2, .L243+4
 2640 001e 1968     		ldr	r1, [r3]
 2641 0020 9142     		cmp	r1, r2
 2642 0022 09D1     		bne	.L236
2896:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				( pulStack[ 1 ] != ulCheckValue ) ||												\
 2643              		.loc 1 2896 0 is_stmt 0 discriminator 1
 2644 0024 5968     		ldr	r1, [r3, #4]
 2645 0026 9142     		cmp	r1, r2
 2646 0028 06D1     		bne	.L236
2897:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				( pulStack[ 2 ] != ulCheckValue ) ||												\
 2647              		.loc 1 2897 0 is_stmt 1
 2648 002a 9968     		ldr	r1, [r3, #8]
 2649 002c 9142     		cmp	r1, r2
 2650 002e 03D1     		bne	.L236
2899:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{																								\
 2651              		.loc 1 2899 0
 2652 0030 DA68     		ldr	r2, [r3, #12]
2898:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				( pulStack[ 3 ] != ulCheckValue ) )												\
 2653              		.loc 1 2898 0
 2654 0032 1E4B     		ldr	r3, .L243+4
 2655              	.LVL251:
 2656 0034 9A42     		cmp	r2, r3
 2657 0036 05D0     		beq	.L237
 2658              	.L236:
2901:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}																								\
 2659              		.loc 1 2901 0
 2660 0038 1B4B     		ldr	r3, .L243
 2661 003a 1868     		ldr	r0, [r3]
 2662 003c 1968     		ldr	r1, [r3]
 2663 003e 3431     		adds	r1, r1, #52
 2664 0040 FFF7FEFF 		bl	vApplicationStackOverflowHook
 2665              	.LVL252:
 2666              	.L237:
 2667              	.LBE11:
 2668              	.LBB12:
2907:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2669              		.loc 1 2907 0
 2670 0044 184B     		ldr	r3, .L243
 2671 0046 DB68     		ldr	r3, [r3, #12]
 2672              	.LVL253:
 2673 0048 04E0     		b	.L238
 2674              	.L241:
2907:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2675              		.loc 1 2907 0 is_stmt 0 discriminator 5
 2676 004a 002B     		cmp	r3, #0
 2677 004c 01D1     		bne	.L239
2907:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2678              		.loc 1 2907 0 discriminator 2
 2679              		.syntax divided
 2680              	@ 2907 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 2681 004e 72B6     		 cpsid i 
 2682              	@ 0 "" 2
 2683              		.thumb
 2684              		.syntax unified
 2685              	.L240:
 2686 0050 FEE7     		b	.L240
 2687              	.L239:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 143


2907:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2688              		.loc 1 2907 0 discriminator 3
 2689 0052 013B     		subs	r3, r3, #1
 2690              	.LVL254:
 2691              	.L238:
2907:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2692              		.loc 1 2907 0 discriminator 4
 2693 0054 9900     		lsls	r1, r3, #2
 2694 0056 C918     		adds	r1, r1, r3
 2695 0058 8A00     		lsls	r2, r1, #2
 2696 005a 1549     		ldr	r1, .L243+8
 2697 005c 8A18     		adds	r2, r1, r2
 2698 005e 126B     		ldr	r2, [r2, #48]
 2699 0060 002A     		cmp	r2, #0
 2700 0062 F2D0     		beq	.L241
 2701              	.LVL255:
 2702              	.LBB13:
2907:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2703              		.loc 1 2907 0 discriminator 6
 2704 0064 0A00     		movs	r2, r1
 2705 0066 9900     		lsls	r1, r3, #2
 2706 0068 CC18     		adds	r4, r1, r3
 2707 006a A000     		lsls	r0, r4, #2
 2708 006c 1018     		adds	r0, r2, r0
 2709 006e 446B     		ldr	r4, [r0, #52]
 2710 0070 6468     		ldr	r4, [r4, #4]
 2711 0072 4463     		str	r4, [r0, #52]
 2712 0074 3032     		adds	r2, r2, #48
 2713 0076 1000     		movs	r0, r2
 2714 0078 C918     		adds	r1, r1, r3
 2715 007a 8A00     		lsls	r2, r1, #2
 2716 007c 0832     		adds	r2, r2, #8
 2717 007e 8218     		adds	r2, r0, r2
 2718 0080 9442     		cmp	r4, r2
 2719 0082 06D1     		bne	.L242
2907:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2720              		.loc 1 2907 0 discriminator 7
 2721 0084 6068     		ldr	r0, [r4, #4]
 2722 0086 9900     		lsls	r1, r3, #2
 2723 0088 C918     		adds	r1, r1, r3
 2724 008a 8A00     		lsls	r2, r1, #2
 2725 008c 0849     		ldr	r1, .L243+8
 2726 008e 8A18     		adds	r2, r1, r2
 2727 0090 5063     		str	r0, [r2, #52]
 2728              	.L242:
2907:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2729              		.loc 1 2907 0 discriminator 9
 2730 0092 9900     		lsls	r1, r3, #2
 2731 0094 C918     		adds	r1, r1, r3
 2732 0096 8A00     		lsls	r2, r1, #2
 2733 0098 0549     		ldr	r1, .L243+8
 2734 009a 8A18     		adds	r2, r1, r2
 2735 009c 526B     		ldr	r2, [r2, #52]
 2736 009e D168     		ldr	r1, [r2, #12]
 2737 00a0 014A     		ldr	r2, .L243
 2738 00a2 1160     		str	r1, [r2]
 2739              	.LBE13:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 144


 2740 00a4 D360     		str	r3, [r2, #12]
 2741              	.LVL256:
 2742              	.L233:
 2743              	.LBE12:
2918:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 2744              		.loc 1 2918 0 is_stmt 1
 2745              		@ sp needed
 2746 00a6 10BD     		pop	{r4, pc}
 2747              	.L244:
 2748              		.align	2
 2749              	.L243:
 2750 00a8 00010000 		.word	.LANCHOR2
 2751 00ac A5A5A5A5 		.word	-1515870811
 2752 00b0 00000000 		.word	.LANCHOR0
 2753              		.cfi_endproc
 2754              	.LFE61:
 2755              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2756              		.section	.text.vTaskSuspend,"ax",%progbits
 2757              		.align	2
 2758              		.global	vTaskSuspend
 2759              		.code	16
 2760              		.thumb_func
 2761              		.type	vTaskSuspend, %function
 2762              	vTaskSuspend:
 2763              	.LFB47:
1631:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
 2764              		.loc 1 1631 0
 2765              		.cfi_startproc
 2766              		@ args = 0, pretend = 0, frame = 0
 2767              		@ frame_needed = 0, uses_anonymous_args = 0
 2768              	.LVL257:
 2769 0000 70B5     		push	{r4, r5, r6, lr}
 2770              		.cfi_def_cfa_offset 16
 2771              		.cfi_offset 4, -16
 2772              		.cfi_offset 5, -12
 2773              		.cfi_offset 6, -8
 2774              		.cfi_offset 14, -4
 2775 0002 0400     		movs	r4, r0
1634:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 2776              		.loc 1 1634 0
 2777 0004 FFF7FEFF 		bl	vPortEnterCritical
 2778              	.LVL258:
1638:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2779              		.loc 1 1638 0
 2780 0008 002C     		cmp	r4, #0
 2781 000a 01D1     		bne	.L246
1638:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2782              		.loc 1 1638 0 is_stmt 0 discriminator 1
 2783 000c 204B     		ldr	r3, .L255
 2784 000e 1C68     		ldr	r4, [r3]
 2785              	.LVL259:
 2786              	.L246:
1644:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 2787              		.loc 1 1644 0 is_stmt 1 discriminator 4
 2788 0010 251D     		adds	r5, r4, #4
 2789 0012 2800     		movs	r0, r5
 2790 0014 FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 145


 2791              	.LVL260:
1654:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 2792              		.loc 1 1654 0 discriminator 4
 2793 0018 A36A     		ldr	r3, [r4, #40]
 2794 001a 002B     		cmp	r3, #0
 2795 001c 03D0     		beq	.L247
1656:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 2796              		.loc 1 1656 0
 2797 001e 2000     		movs	r0, r4
 2798 0020 1830     		adds	r0, r0, #24
 2799 0022 FFF7FEFF 		bl	uxListRemove
 2800              	.LVL261:
 2801              	.L247:
1663:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2802              		.loc 1 1663 0
 2803 0026 2900     		movs	r1, r5
 2804 0028 1A48     		ldr	r0, .L255+4
 2805 002a FFF7FEFF 		bl	vListInsertEnd
 2806              	.LVL262:
1667:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 2807              		.loc 1 1667 0
 2808 002e 6423     		movs	r3, #100
 2809 0030 E35C     		ldrb	r3, [r4, r3]
 2810 0032 012B     		cmp	r3, #1
 2811 0034 02D1     		bne	.L248
1671:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 2812              		.loc 1 1671 0
 2813 0036 0022     		movs	r2, #0
 2814 0038 6333     		adds	r3, r3, #99
 2815 003a E254     		strb	r2, [r4, r3]
 2816              	.L248:
1676:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2817              		.loc 1 1676 0
 2818 003c FFF7FEFF 		bl	vPortExitCritical
 2819              	.LVL263:
1678:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 2820              		.loc 1 1678 0
 2821 0040 134B     		ldr	r3, .L255
 2822 0042 5B68     		ldr	r3, [r3, #4]
 2823 0044 002B     		cmp	r3, #0
 2824 0046 05D0     		beq	.L249
1682:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 2825              		.loc 1 1682 0
 2826 0048 FFF7FEFF 		bl	vPortEnterCritical
 2827              	.LVL264:
1684:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 2828              		.loc 1 1684 0
 2829 004c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2830              	.LVL265:
1686:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 2831              		.loc 1 1686 0
 2832 0050 FFF7FEFF 		bl	vPortExitCritical
 2833              	.LVL266:
 2834              	.L249:
1693:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 2835              		.loc 1 1693 0
 2836 0054 0E4B     		ldr	r3, .L255
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 146


 2837 0056 1B68     		ldr	r3, [r3]
 2838 0058 9C42     		cmp	r4, r3
 2839 005a 18D1     		bne	.L245
1695:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 2840              		.loc 1 1695 0
 2841 005c 0C4B     		ldr	r3, .L255
 2842 005e 5B68     		ldr	r3, [r3, #4]
 2843 0060 002B     		cmp	r3, #0
 2844 0062 08D0     		beq	.L251
1698:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				portYIELD_WITHIN_API();
 2845              		.loc 1 1698 0
 2846 0064 0A4B     		ldr	r3, .L255
 2847 0066 9B69     		ldr	r3, [r3, #24]
 2848 0068 002B     		cmp	r3, #0
 2849 006a 01D0     		beq	.L252
1698:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				portYIELD_WITHIN_API();
 2850              		.loc 1 1698 0 is_stmt 0 discriminator 1
 2851              		.syntax divided
 2852              	@ 1698 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 2853 006c 72B6     		 cpsid i 
 2854              	@ 0 "" 2
 2855              		.thumb
 2856              		.syntax unified
 2857              	.L253:
 2858 006e FEE7     		b	.L253
 2859              	.L252:
1699:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 2860              		.loc 1 1699 0 is_stmt 1
 2861 0070 FFF7FEFF 		bl	vPortYield
 2862              	.LVL267:
 2863 0074 0BE0     		b	.L245
 2864              	.L251:
1706:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 2865              		.loc 1 1706 0
 2866 0076 074B     		ldr	r3, .L255+4
 2867 0078 1A68     		ldr	r2, [r3]
 2868 007a 074B     		ldr	r3, .L255+8
 2869 007c DB6F     		ldr	r3, [r3, #124]
 2870 007e 9A42     		cmp	r2, r3
 2871 0080 03D1     		bne	.L254
1712:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 2872              		.loc 1 1712 0
 2873 0082 0022     		movs	r2, #0
 2874 0084 024B     		ldr	r3, .L255
 2875 0086 1A60     		str	r2, [r3]
 2876 0088 01E0     		b	.L245
 2877              	.L254:
1716:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 2878              		.loc 1 1716 0
 2879 008a FFF7FEFF 		bl	vTaskSwitchContext
 2880              	.LVL268:
 2881              	.L245:
1724:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2882              		.loc 1 1724 0
 2883              		@ sp needed
 2884              	.LVL269:
 2885              	.LVL270:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 147


 2886 008e 70BD     		pop	{r4, r5, r6, pc}
 2887              	.L256:
 2888              		.align	2
 2889              	.L255:
 2890 0090 00010000 		.word	.LANCHOR2
 2891 0094 00000000 		.word	.LANCHOR0
 2892 0098 80000000 		.word	.LANCHOR1
 2893              		.cfi_endproc
 2894              	.LFE47:
 2895              		.size	vTaskSuspend, .-vTaskSuspend
 2896              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2897              		.align	2
 2898              		.global	vTaskPlaceOnEventList
 2899              		.code	16
 2900              		.thumb_func
 2901              		.type	vTaskPlaceOnEventList, %function
 2902              	vTaskPlaceOnEventList:
 2903              	.LFB62:
2922:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxEventList );
 2904              		.loc 1 2922 0
 2905              		.cfi_startproc
 2906              		@ args = 0, pretend = 0, frame = 0
 2907              		@ frame_needed = 0, uses_anonymous_args = 0
 2908              	.LVL271:
 2909 0000 10B5     		push	{r4, lr}
 2910              		.cfi_def_cfa_offset 8
 2911              		.cfi_offset 4, -8
 2912              		.cfi_offset 14, -4
 2913 0002 0C00     		movs	r4, r1
2923:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2914              		.loc 1 2923 0
 2915 0004 0028     		cmp	r0, #0
 2916 0006 01D1     		bne	.L258
2923:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2917              		.loc 1 2923 0 is_stmt 0 discriminator 1
 2918              		.syntax divided
 2919              	@ 2923 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 2920 0008 72B6     		 cpsid i 
 2921              	@ 0 "" 2
 2922              		.thumb
 2923              		.syntax unified
 2924              	.L259:
 2925 000a FEE7     		b	.L259
 2926              	.L258:
2932:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2927              		.loc 1 2932 0 is_stmt 1
 2928 000c 044B     		ldr	r3, .L260
 2929 000e 1968     		ldr	r1, [r3]
 2930              	.LVL272:
 2931 0010 1831     		adds	r1, r1, #24
 2932 0012 FFF7FEFF 		bl	vListInsert
 2933              	.LVL273:
2934:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
 2934              		.loc 1 2934 0
 2935 0016 0121     		movs	r1, #1
 2936 0018 2000     		movs	r0, r4
 2937 001a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 148


 2938              	.LVL274:
2935:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 2939              		.loc 1 2935 0
 2940              		@ sp needed
 2941              	.LVL275:
 2942 001e 10BD     		pop	{r4, pc}
 2943              	.L261:
 2944              		.align	2
 2945              	.L260:
 2946 0020 00010000 		.word	.LANCHOR2
 2947              		.cfi_endproc
 2948              	.LFE62:
 2949              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2950              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2951              		.align	2
 2952              		.global	vTaskPlaceOnUnorderedEventList
 2953              		.code	16
 2954              		.thumb_func
 2955              		.type	vTaskPlaceOnUnorderedEventList, %function
 2956              	vTaskPlaceOnUnorderedEventList:
 2957              	.LFB63:
2939:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxEventList );
 2958              		.loc 1 2939 0
 2959              		.cfi_startproc
 2960              		@ args = 0, pretend = 0, frame = 0
 2961              		@ frame_needed = 0, uses_anonymous_args = 0
 2962              	.LVL276:
 2963 0000 70B5     		push	{r4, r5, r6, lr}
 2964              		.cfi_def_cfa_offset 16
 2965              		.cfi_offset 4, -16
 2966              		.cfi_offset 5, -12
 2967              		.cfi_offset 6, -8
 2968              		.cfi_offset 14, -4
 2969 0002 1400     		movs	r4, r2
2940:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2970              		.loc 1 2940 0
 2971 0004 0028     		cmp	r0, #0
 2972 0006 01D1     		bne	.L263
2940:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2973              		.loc 1 2940 0 is_stmt 0 discriminator 1
 2974              		.syntax divided
 2975              	@ 2940 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 2976 0008 72B6     		 cpsid i 
 2977              	@ 0 "" 2
 2978              		.thumb
 2979              		.syntax unified
 2980              	.L264:
 2981 000a FEE7     		b	.L264
 2982              	.L263:
2944:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2983              		.loc 1 2944 0 is_stmt 1
 2984 000c 0A4B     		ldr	r3, .L267
 2985 000e 9B69     		ldr	r3, [r3, #24]
 2986 0010 002B     		cmp	r3, #0
 2987 0012 01D1     		bne	.L265
2944:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2988              		.loc 1 2944 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 149


 2989              		.syntax divided
 2990              	@ 2944 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 2991 0014 72B6     		 cpsid i 
 2992              	@ 0 "" 2
 2993              		.thumb
 2994              		.syntax unified
 2995              	.L266:
 2996 0016 FEE7     		b	.L266
 2997              	.L265:
2949:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 2998              		.loc 1 2949 0 is_stmt 1
 2999 0018 074B     		ldr	r3, .L267
 3000 001a 1A68     		ldr	r2, [r3]
 3001              	.LVL277:
 3002 001c 8025     		movs	r5, #128
 3003 001e 2D06     		lsls	r5, r5, #24
 3004 0020 2943     		orrs	r1, r5
 3005              	.LVL278:
 3006 0022 9161     		str	r1, [r2, #24]
2956:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3007              		.loc 1 2956 0
 3008 0024 1968     		ldr	r1, [r3]
 3009 0026 1831     		adds	r1, r1, #24
 3010 0028 FFF7FEFF 		bl	vListInsertEnd
 3011              	.LVL279:
2958:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
 3012              		.loc 1 2958 0
 3013 002c 0121     		movs	r1, #1
 3014 002e 2000     		movs	r0, r4
 3015 0030 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3016              	.LVL280:
2959:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 3017              		.loc 1 2959 0
 3018              		@ sp needed
 3019              	.LVL281:
 3020 0034 70BD     		pop	{r4, r5, r6, pc}
 3021              	.L268:
 3022 0036 C046     		.align	2
 3023              	.L267:
 3024 0038 00010000 		.word	.LANCHOR2
 3025              		.cfi_endproc
 3026              	.LFE63:
 3027              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 3028              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3029              		.align	2
 3030              		.global	vTaskPlaceOnEventListRestricted
 3031              		.code	16
 3032              		.thumb_func
 3033              		.type	vTaskPlaceOnEventListRestricted, %function
 3034              	vTaskPlaceOnEventListRestricted:
 3035              	.LFB64:
2965:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( pxEventList );
 3036              		.loc 1 2965 0
 3037              		.cfi_startproc
 3038              		@ args = 0, pretend = 0, frame = 0
 3039              		@ frame_needed = 0, uses_anonymous_args = 0
 3040              	.LVL282:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 150


 3041 0000 70B5     		push	{r4, r5, r6, lr}
 3042              		.cfi_def_cfa_offset 16
 3043              		.cfi_offset 4, -16
 3044              		.cfi_offset 5, -12
 3045              		.cfi_offset 6, -8
 3046              		.cfi_offset 14, -4
 3047 0002 0C00     		movs	r4, r1
 3048 0004 1500     		movs	r5, r2
2966:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3049              		.loc 1 2966 0
 3050 0006 0028     		cmp	r0, #0
 3051 0008 01D1     		bne	.L270
2966:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3052              		.loc 1 2966 0 is_stmt 0 discriminator 1
 3053              		.syntax divided
 3054              	@ 2966 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 3055 000a 72B6     		 cpsid i 
 3056              	@ 0 "" 2
 3057              		.thumb
 3058              		.syntax unified
 3059              	.L271:
 3060 000c FEE7     		b	.L271
 3061              	.L270:
2978:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3062              		.loc 1 2978 0 is_stmt 1
 3063 000e 074B     		ldr	r3, .L274
 3064 0010 1968     		ldr	r1, [r3]
 3065              	.LVL283:
 3066 0012 1831     		adds	r1, r1, #24
 3067 0014 FFF7FEFF 		bl	vListInsertEnd
 3068              	.LVL284:
2983:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 3069              		.loc 1 2983 0
 3070 0018 002D     		cmp	r5, #0
 3071 001a 01D0     		beq	.L272
2985:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 3072              		.loc 1 2985 0
 3073 001c 0124     		movs	r4, #1
 3074              	.LVL285:
 3075 001e 6442     		rsbs	r4, r4, #0
 3076              	.L272:
 3077              	.LVL286:
2989:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 3078              		.loc 1 2989 0
 3079 0020 2900     		movs	r1, r5
 3080 0022 2000     		movs	r0, r4
 3081 0024 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3082              	.LVL287:
2990:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3083              		.loc 1 2990 0
 3084              		@ sp needed
 3085              	.LVL288:
 3086              	.LVL289:
 3087 0028 70BD     		pop	{r4, r5, r6, pc}
 3088              	.L275:
 3089 002a C046     		.align	2
 3090              	.L274:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 151


 3091 002c 00010000 		.word	.LANCHOR2
 3092              		.cfi_endproc
 3093              	.LFE64:
 3094              		.size	vTaskPlaceOnEventListRestricted, .-vTaskPlaceOnEventListRestricted
 3095              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3096              		.align	2
 3097              		.global	xTaskRemoveFromEventList
 3098              		.code	16
 3099              		.thumb_func
 3100              		.type	xTaskRemoveFromEventList, %function
 3101              	xTaskRemoveFromEventList:
 3102              	.LFB65:
2996:Source\FreeRTOS\10.0.1\Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3103              		.loc 1 2996 0
 3104              		.cfi_startproc
 3105              		@ args = 0, pretend = 0, frame = 0
 3106              		@ frame_needed = 0, uses_anonymous_args = 0
 3107              	.LVL290:
 3108 0000 70B5     		push	{r4, r5, r6, lr}
 3109              		.cfi_def_cfa_offset 16
 3110              		.cfi_offset 4, -16
 3111              		.cfi_offset 5, -12
 3112              		.cfi_offset 6, -8
 3113              		.cfi_offset 14, -4
3013:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3114              		.loc 1 3013 0
 3115 0002 C368     		ldr	r3, [r0, #12]
 3116 0004 DC68     		ldr	r4, [r3, #12]
 3117              	.LVL291:
3014:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3118              		.loc 1 3014 0
 3119 0006 002C     		cmp	r4, #0
 3120 0008 01D1     		bne	.L277
3014:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3121              		.loc 1 3014 0 is_stmt 0 discriminator 1
 3122              		.syntax divided
 3123              	@ 3014 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 3124 000a 72B6     		 cpsid i 
 3125              	@ 0 "" 2
 3126              		.thumb
 3127              		.syntax unified
 3128              	.L278:
 3129 000c FEE7     		b	.L278
 3130              	.L277:
3015:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3131              		.loc 1 3015 0 is_stmt 1
 3132 000e 2500     		movs	r5, r4
 3133 0010 1835     		adds	r5, r5, #24
 3134 0012 2800     		movs	r0, r5
 3135              	.LVL292:
 3136 0014 FFF7FEFF 		bl	uxListRemove
 3137              	.LVL293:
3017:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 3138              		.loc 1 3017 0
 3139 0018 154B     		ldr	r3, .L284
 3140 001a 9B69     		ldr	r3, [r3, #24]
 3141 001c 002B     		cmp	r3, #0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 152


 3142 001e 14D1     		bne	.L279
3019:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3143              		.loc 1 3019 0
 3144 0020 251D     		adds	r5, r4, #4
 3145 0022 2800     		movs	r0, r5
 3146 0024 FFF7FEFF 		bl	uxListRemove
 3147              	.LVL294:
3020:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 3148              		.loc 1 3020 0
 3149 0028 E36A     		ldr	r3, [r4, #44]
 3150 002a 114A     		ldr	r2, .L284
 3151 002c D268     		ldr	r2, [r2, #12]
 3152 002e 9342     		cmp	r3, r2
 3153 0030 01D9     		bls	.L280
3020:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 3154              		.loc 1 3020 0 is_stmt 0 discriminator 1
 3155 0032 0F4A     		ldr	r2, .L284
 3156 0034 D360     		str	r3, [r2, #12]
 3157              	.L280:
3020:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 3158              		.loc 1 3020 0 discriminator 3
 3159 0036 9A00     		lsls	r2, r3, #2
 3160 0038 D318     		adds	r3, r2, r3
 3161 003a 9A00     		lsls	r2, r3, #2
 3162 003c 0D48     		ldr	r0, .L284+4
 3163 003e 3030     		adds	r0, r0, #48
 3164 0040 8018     		adds	r0, r0, r2
 3165 0042 2900     		movs	r1, r5
 3166 0044 FFF7FEFF 		bl	vListInsertEnd
 3167              	.LVL295:
 3168 0048 04E0     		b	.L281
 3169              	.L279:
3026:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 3170              		.loc 1 3026 0 is_stmt 1
 3171 004a 2900     		movs	r1, r5
 3172 004c 0948     		ldr	r0, .L284+4
 3173 004e 1430     		adds	r0, r0, #20
 3174 0050 FFF7FEFF 		bl	vListInsertEnd
 3175              	.LVL296:
 3176              	.L281:
3029:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 3177              		.loc 1 3029 0
 3178 0054 E26A     		ldr	r2, [r4, #44]
 3179 0056 064B     		ldr	r3, .L284
 3180 0058 1B68     		ldr	r3, [r3]
 3181 005a DB6A     		ldr	r3, [r3, #44]
 3182 005c 9A42     		cmp	r2, r3
 3183 005e 04D9     		bls	.L283
 3184              	.LVL297:
3038:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 3185              		.loc 1 3038 0
 3186 0060 0122     		movs	r2, #1
 3187 0062 034B     		ldr	r3, .L284
 3188 0064 9A62     		str	r2, [r3, #40]
3034:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3189              		.loc 1 3034 0
 3190 0066 0120     		movs	r0, #1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 153


 3191 0068 00E0     		b	.L282
 3192              	.LVL298:
 3193              	.L283:
3042:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 3194              		.loc 1 3042 0
 3195 006a 0020     		movs	r0, #0
 3196              	.L282:
 3197              	.LVL299:
3060:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 3198              		.loc 1 3060 0
 3199              		@ sp needed
 3200              	.LVL300:
 3201 006c 70BD     		pop	{r4, r5, r6, pc}
 3202              	.L285:
 3203 006e C046     		.align	2
 3204              	.L284:
 3205 0070 00010000 		.word	.LANCHOR2
 3206 0074 00000000 		.word	.LANCHOR0
 3207              		.cfi_endproc
 3208              	.LFE65:
 3209              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 3210              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3211              		.align	2
 3212              		.global	vTaskRemoveFromUnorderedEventList
 3213              		.code	16
 3214              		.thumb_func
 3215              		.type	vTaskRemoveFromUnorderedEventList, %function
 3216              	vTaskRemoveFromUnorderedEventList:
 3217              	.LFB66:
3064:Source\FreeRTOS\10.0.1\Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3218              		.loc 1 3064 0
 3219              		.cfi_startproc
 3220              		@ args = 0, pretend = 0, frame = 0
 3221              		@ frame_needed = 0, uses_anonymous_args = 0
 3222              	.LVL301:
 3223 0000 70B5     		push	{r4, r5, r6, lr}
 3224              		.cfi_def_cfa_offset 16
 3225              		.cfi_offset 4, -16
 3226              		.cfi_offset 5, -12
 3227              		.cfi_offset 6, -8
 3228              		.cfi_offset 14, -4
3069:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3229              		.loc 1 3069 0
 3230 0002 174B     		ldr	r3, .L293
 3231 0004 9B69     		ldr	r3, [r3, #24]
 3232 0006 002B     		cmp	r3, #0
 3233 0008 01D1     		bne	.L287
3069:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3234              		.loc 1 3069 0 is_stmt 0 discriminator 1
 3235              		.syntax divided
 3236              	@ 3069 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 3237 000a 72B6     		 cpsid i 
 3238              	@ 0 "" 2
 3239              		.thumb
 3240              		.syntax unified
 3241              	.L288:
 3242 000c FEE7     		b	.L288
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 154


 3243              	.L287:
3072:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3244              		.loc 1 3072 0 is_stmt 1
 3245 000e 8023     		movs	r3, #128
 3246 0010 1B06     		lsls	r3, r3, #24
 3247 0012 1943     		orrs	r1, r3
 3248              	.LVL302:
 3249 0014 0160     		str	r1, [r0]
3076:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3250              		.loc 1 3076 0
 3251 0016 C468     		ldr	r4, [r0, #12]
 3252              	.LVL303:
3077:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3253              		.loc 1 3077 0
 3254 0018 002C     		cmp	r4, #0
 3255 001a 01D1     		bne	.L289
3077:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3256              		.loc 1 3077 0 is_stmt 0 discriminator 1
 3257              		.syntax divided
 3258              	@ 3077 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 3259 001c 72B6     		 cpsid i 
 3260              	@ 0 "" 2
 3261              		.thumb
 3262              		.syntax unified
 3263              	.L290:
 3264 001e FEE7     		b	.L290
 3265              	.L289:
3078:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3266              		.loc 1 3078 0 is_stmt 1
 3267 0020 FFF7FEFF 		bl	uxListRemove
 3268              	.LVL304:
3083:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3269              		.loc 1 3083 0
 3270 0024 251D     		adds	r5, r4, #4
 3271 0026 2800     		movs	r0, r5
 3272 0028 FFF7FEFF 		bl	uxListRemove
 3273              	.LVL305:
3084:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3274              		.loc 1 3084 0
 3275 002c E36A     		ldr	r3, [r4, #44]
 3276 002e 0C4A     		ldr	r2, .L293
 3277 0030 D268     		ldr	r2, [r2, #12]
 3278 0032 9342     		cmp	r3, r2
 3279 0034 01D9     		bls	.L291
3084:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3280              		.loc 1 3084 0 is_stmt 0 discriminator 1
 3281 0036 0A4A     		ldr	r2, .L293
 3282 0038 D360     		str	r3, [r2, #12]
 3283              	.L291:
3084:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3284              		.loc 1 3084 0 discriminator 3
 3285 003a 9A00     		lsls	r2, r3, #2
 3286 003c D318     		adds	r3, r2, r3
 3287 003e 9A00     		lsls	r2, r3, #2
 3288 0040 0848     		ldr	r0, .L293+4
 3289 0042 3030     		adds	r0, r0, #48
 3290 0044 8018     		adds	r0, r0, r2
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 155


 3291 0046 2900     		movs	r1, r5
 3292 0048 FFF7FEFF 		bl	vListInsertEnd
 3293              	.LVL306:
3086:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 3294              		.loc 1 3086 0 is_stmt 1 discriminator 3
 3295 004c E26A     		ldr	r2, [r4, #44]
 3296 004e 044B     		ldr	r3, .L293
 3297 0050 1B68     		ldr	r3, [r3]
 3298 0052 DB6A     		ldr	r3, [r3, #44]
 3299 0054 9A42     		cmp	r2, r3
 3300 0056 02D9     		bls	.L286
3092:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 3301              		.loc 1 3092 0
 3302 0058 0122     		movs	r2, #1
 3303 005a 014B     		ldr	r3, .L293
 3304 005c 9A62     		str	r2, [r3, #40]
 3305              	.L286:
3094:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 3306              		.loc 1 3094 0
 3307              		@ sp needed
 3308              	.LVL307:
 3309              	.LVL308:
 3310 005e 70BD     		pop	{r4, r5, r6, pc}
 3311              	.L294:
 3312              		.align	2
 3313              	.L293:
 3314 0060 00010000 		.word	.LANCHOR2
 3315 0064 00000000 		.word	.LANCHOR0
 3316              		.cfi_endproc
 3317              	.LFE66:
 3318              		.size	vTaskRemoveFromUnorderedEventList, .-vTaskRemoveFromUnorderedEventList
 3319              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3320              		.align	2
 3321              		.global	vTaskSetTimeOutState
 3322              		.code	16
 3323              		.thumb_func
 3324              		.type	vTaskSetTimeOutState, %function
 3325              	vTaskSetTimeOutState:
 3326              	.LFB67:
3098:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxTimeOut );
 3327              		.loc 1 3098 0
 3328              		.cfi_startproc
 3329              		@ args = 0, pretend = 0, frame = 0
 3330              		@ frame_needed = 0, uses_anonymous_args = 0
 3331              	.LVL309:
 3332 0000 10B5     		push	{r4, lr}
 3333              		.cfi_def_cfa_offset 8
 3334              		.cfi_offset 4, -8
 3335              		.cfi_offset 14, -4
 3336 0002 041E     		subs	r4, r0, #0
3099:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	taskENTER_CRITICAL();
 3337              		.loc 1 3099 0
 3338 0004 01D1     		bne	.L296
3099:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	taskENTER_CRITICAL();
 3339              		.loc 1 3099 0 is_stmt 0 discriminator 1
 3340              		.syntax divided
 3341              	@ 3099 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 156


 3342 0006 72B6     		 cpsid i 
 3343              	@ 0 "" 2
 3344              		.thumb
 3345              		.syntax unified
 3346              	.L297:
 3347 0008 FEE7     		b	.L297
 3348              	.L296:
3100:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 3349              		.loc 1 3100 0 is_stmt 1
 3350 000a FFF7FEFF 		bl	vPortEnterCritical
 3351              	.LVL310:
3102:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3352              		.loc 1 3102 0
 3353 000e 044B     		ldr	r3, .L298
 3354 0010 1A6A     		ldr	r2, [r3, #32]
 3355 0012 2260     		str	r2, [r4]
3103:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 3356              		.loc 1 3103 0
 3357 0014 5B69     		ldr	r3, [r3, #20]
 3358 0016 6360     		str	r3, [r4, #4]
3105:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
 3359              		.loc 1 3105 0
 3360 0018 FFF7FEFF 		bl	vPortExitCritical
 3361              	.LVL311:
3106:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 3362              		.loc 1 3106 0
 3363              		@ sp needed
 3364              	.LVL312:
 3365 001c 10BD     		pop	{r4, pc}
 3366              	.L299:
 3367 001e C046     		.align	2
 3368              	.L298:
 3369 0020 00010000 		.word	.LANCHOR2
 3370              		.cfi_endproc
 3371              	.LFE67:
 3372              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 3373              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3374              		.align	2
 3375              		.global	vTaskInternalSetTimeOutState
 3376              		.code	16
 3377              		.thumb_func
 3378              		.type	vTaskInternalSetTimeOutState, %function
 3379              	vTaskInternalSetTimeOutState:
 3380              	.LFB68:
3110:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3381              		.loc 1 3110 0
 3382              		.cfi_startproc
 3383              		@ args = 0, pretend = 0, frame = 0
 3384              		@ frame_needed = 0, uses_anonymous_args = 0
 3385              		@ link register save eliminated.
 3386              	.LVL313:
3112:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3387              		.loc 1 3112 0
 3388 0000 024B     		ldr	r3, .L301
 3389 0002 1A6A     		ldr	r2, [r3, #32]
 3390 0004 0260     		str	r2, [r0]
3113:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 157


 3391              		.loc 1 3113 0
 3392 0006 5B69     		ldr	r3, [r3, #20]
 3393 0008 4360     		str	r3, [r0, #4]
3114:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 3394              		.loc 1 3114 0
 3395              		@ sp needed
 3396 000a 7047     		bx	lr
 3397              	.L302:
 3398              		.align	2
 3399              	.L301:
 3400 000c 00010000 		.word	.LANCHOR2
 3401              		.cfi_endproc
 3402              	.LFE68:
 3403              		.size	vTaskInternalSetTimeOutState, .-vTaskInternalSetTimeOutState
 3404              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3405              		.align	2
 3406              		.global	xTaskCheckForTimeOut
 3407              		.code	16
 3408              		.thumb_func
 3409              		.type	xTaskCheckForTimeOut, %function
 3410              	xTaskCheckForTimeOut:
 3411              	.LFB69:
3118:Source\FreeRTOS\10.0.1\Source/tasks.c **** BaseType_t xReturn;
 3412              		.loc 1 3118 0
 3413              		.cfi_startproc
 3414              		@ args = 0, pretend = 0, frame = 0
 3415              		@ frame_needed = 0, uses_anonymous_args = 0
 3416              	.LVL314:
 3417 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3418              		.cfi_def_cfa_offset 24
 3419              		.cfi_offset 3, -24
 3420              		.cfi_offset 4, -20
 3421              		.cfi_offset 5, -16
 3422              		.cfi_offset 6, -12
 3423              		.cfi_offset 7, -8
 3424              		.cfi_offset 14, -4
 3425 0002 0500     		movs	r5, r0
 3426 0004 0C00     		movs	r4, r1
3121:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3427              		.loc 1 3121 0
 3428 0006 0028     		cmp	r0, #0
 3429 0008 01D1     		bne	.L304
3121:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3430              		.loc 1 3121 0 is_stmt 0 discriminator 1
 3431              		.syntax divided
 3432              	@ 3121 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 3433 000a 72B6     		 cpsid i 
 3434              	@ 0 "" 2
 3435              		.thumb
 3436              		.syntax unified
 3437              	.L305:
 3438 000c FEE7     		b	.L305
 3439              	.L304:
3122:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3440              		.loc 1 3122 0 is_stmt 1
 3441 000e 0029     		cmp	r1, #0
 3442 0010 01D1     		bne	.L306
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 158


3122:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3443              		.loc 1 3122 0 is_stmt 0 discriminator 1
 3444              		.syntax divided
 3445              	@ 3122 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 3446 0012 72B6     		 cpsid i 
 3447              	@ 0 "" 2
 3448              		.thumb
 3449              		.syntax unified
 3450              	.L307:
 3451 0014 FEE7     		b	.L307
 3452              	.L306:
3124:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 3453              		.loc 1 3124 0 is_stmt 1
 3454 0016 FFF7FEFF 		bl	vPortEnterCritical
 3455              	.LVL315:
 3456              	.LBB14:
3127:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3457              		.loc 1 3127 0
 3458 001a 114B     		ldr	r3, .L313
 3459 001c 5869     		ldr	r0, [r3, #20]
 3460              	.LVL316:
3128:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3461              		.loc 1 3128 0
 3462 001e 6968     		ldr	r1, [r5, #4]
 3463 0020 421A     		subs	r2, r0, r1
 3464              	.LVL317:
3142:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 3465              		.loc 1 3142 0
 3466 0022 2368     		ldr	r3, [r4]
 3467 0024 5E1C     		adds	r6, r3, #1
 3468 0026 13D0     		beq	.L311
3152:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 3469              		.loc 1 3152 0
 3470 0028 0D4E     		ldr	r6, .L313
 3471 002a 366A     		ldr	r6, [r6, #32]
 3472 002c 2F68     		ldr	r7, [r5]
 3473 002e B742     		cmp	r7, r6
 3474 0030 01D0     		beq	.L309
3152:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 3475              		.loc 1 3152 0 is_stmt 0 discriminator 1
 3476 0032 8842     		cmp	r0, r1
 3477 0034 0ED2     		bcs	.L312
 3478              	.L309:
3161:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 3479              		.loc 1 3161 0 is_stmt 1
 3480 0036 9A42     		cmp	r2, r3
 3481 0038 06D2     		bcs	.L310
3164:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3482              		.loc 1 3164 0
 3483 003a 9B1A     		subs	r3, r3, r2
 3484 003c 2360     		str	r3, [r4]
3165:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = pdFALSE;
 3485              		.loc 1 3165 0
 3486 003e 2800     		movs	r0, r5
 3487              	.LVL318:
 3488 0040 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3489              	.LVL319:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 159


3166:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 3490              		.loc 1 3166 0
 3491 0044 0024     		movs	r4, #0
 3492              	.LVL320:
 3493 0046 06E0     		b	.L308
 3494              	.LVL321:
 3495              	.L310:
3170:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = pdTRUE;
 3496              		.loc 1 3170 0
 3497 0048 0023     		movs	r3, #0
 3498 004a 2360     		str	r3, [r4]
 3499              	.LVL322:
3171:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 3500              		.loc 1 3171 0
 3501 004c 0124     		movs	r4, #1
 3502              	.LVL323:
 3503 004e 02E0     		b	.L308
 3504              	.LVL324:
 3505              	.L311:
3147:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 3506              		.loc 1 3147 0
 3507 0050 0024     		movs	r4, #0
 3508              	.LVL325:
 3509 0052 00E0     		b	.L308
 3510              	.LVL326:
 3511              	.L312:
3159:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 3512              		.loc 1 3159 0
 3513 0054 0124     		movs	r4, #1
 3514              	.LVL327:
 3515              	.L308:
 3516              	.LBE14:
3174:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3517              		.loc 1 3174 0
 3518 0056 FFF7FEFF 		bl	vPortExitCritical
 3519              	.LVL328:
3177:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 3520              		.loc 1 3177 0
 3521 005a 2000     		movs	r0, r4
 3522              		@ sp needed
 3523              	.LVL329:
 3524              	.LVL330:
 3525 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3526              	.L314:
 3527 005e C046     		.align	2
 3528              	.L313:
 3529 0060 00010000 		.word	.LANCHOR2
 3530              		.cfi_endproc
 3531              	.LFE69:
 3532              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3533              		.section	.text.vTaskMissedYield,"ax",%progbits
 3534              		.align	2
 3535              		.global	vTaskMissedYield
 3536              		.code	16
 3537              		.thumb_func
 3538              		.type	vTaskMissedYield, %function
 3539              	vTaskMissedYield:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 160


 3540              	.LFB70:
3181:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	xYieldPending = pdTRUE;
 3541              		.loc 1 3181 0
 3542              		.cfi_startproc
 3543              		@ args = 0, pretend = 0, frame = 0
 3544              		@ frame_needed = 0, uses_anonymous_args = 0
 3545              		@ link register save eliminated.
3182:Source\FreeRTOS\10.0.1\Source/tasks.c **** }
 3546              		.loc 1 3182 0
 3547 0000 0122     		movs	r2, #1
 3548 0002 014B     		ldr	r3, .L316
 3549 0004 9A62     		str	r2, [r3, #40]
3183:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 3550              		.loc 1 3183 0
 3551              		@ sp needed
 3552 0006 7047     		bx	lr
 3553              	.L317:
 3554              		.align	2
 3555              	.L316:
 3556 0008 00010000 		.word	.LANCHOR2
 3557              		.cfi_endproc
 3558              	.LFE70:
 3559              		.size	vTaskMissedYield, .-vTaskMissedYield
 3560              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 3561              		.align	2
 3562              		.global	uxTaskGetTaskNumber
 3563              		.code	16
 3564              		.thumb_func
 3565              		.type	uxTaskGetTaskNumber, %function
 3566              	uxTaskGetTaskNumber:
 3567              	.LFB71:
3189:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxReturn;
 3568              		.loc 1 3189 0
 3569              		.cfi_startproc
 3570              		@ args = 0, pretend = 0, frame = 0
 3571              		@ frame_needed = 0, uses_anonymous_args = 0
 3572              		@ link register save eliminated.
 3573              	.LVL331:
3193:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 3574              		.loc 1 3193 0
 3575 0000 0028     		cmp	r0, #0
 3576 0002 01D0     		beq	.L320
 3577              	.LVL332:
3196:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 3578              		.loc 1 3196 0
 3579 0004 806C     		ldr	r0, [r0, #72]
 3580              	.LVL333:
 3581 0006 00E0     		b	.L319
 3582              	.LVL334:
 3583              	.L320:
3200:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 3584              		.loc 1 3200 0
 3585 0008 0020     		movs	r0, #0
 3586              	.LVL335:
 3587              	.L319:
3204:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3588              		.loc 1 3204 0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 161


 3589              		@ sp needed
 3590 000a 7047     		bx	lr
 3591              		.cfi_endproc
 3592              	.LFE71:
 3593              		.size	uxTaskGetTaskNumber, .-uxTaskGetTaskNumber
 3594              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 3595              		.align	2
 3596              		.global	vTaskSetTaskNumber
 3597              		.code	16
 3598              		.thumb_func
 3599              		.type	vTaskSetTaskNumber, %function
 3600              	vTaskSetTaskNumber:
 3601              	.LFB72:
3212:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
 3602              		.loc 1 3212 0
 3603              		.cfi_startproc
 3604              		@ args = 0, pretend = 0, frame = 0
 3605              		@ frame_needed = 0, uses_anonymous_args = 0
 3606              		@ link register save eliminated.
 3607              	.LVL336:
3215:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 3608              		.loc 1 3215 0
 3609 0000 0028     		cmp	r0, #0
 3610 0002 00D0     		beq	.L321
 3611              	.LVL337:
3218:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 3612              		.loc 1 3218 0
 3613 0004 8164     		str	r1, [r0, #72]
 3614              	.LVL338:
 3615              	.L321:
3220:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3616              		.loc 1 3220 0
 3617              		@ sp needed
 3618 0006 7047     		bx	lr
 3619              		.cfi_endproc
 3620              	.LFE72:
 3621              		.size	vTaskSetTaskNumber, .-vTaskSetTaskNumber
 3622              		.section	.text.vTaskSetThreadLocalStoragePointer,"ax",%progbits
 3623              		.align	2
 3624              		.global	vTaskSetThreadLocalStoragePointer
 3625              		.code	16
 3626              		.thumb_func
 3627              		.type	vTaskSetThreadLocalStoragePointer, %function
 3628              	vTaskSetThreadLocalStoragePointer:
 3629              	.LFB74:
3395:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
 3630              		.loc 1 3395 0
 3631              		.cfi_startproc
 3632              		@ args = 0, pretend = 0, frame = 0
 3633              		@ frame_needed = 0, uses_anonymous_args = 0
 3634              		@ link register save eliminated.
 3635              	.LVL339:
3398:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 3636              		.loc 1 3398 0
 3637 0000 0429     		cmp	r1, #4
 3638 0002 07DC     		bgt	.L323
3400:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 162


 3639              		.loc 1 3400 0
 3640 0004 0028     		cmp	r0, #0
 3641 0006 01D1     		bne	.L325
3400:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 3642              		.loc 1 3400 0 is_stmt 0 discriminator 1
 3643 0008 034B     		ldr	r3, .L326
 3644 000a 1868     		ldr	r0, [r3]
 3645              	.LVL340:
 3646              	.L325:
3401:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 3647              		.loc 1 3401 0 is_stmt 1 discriminator 4
 3648 000c 1231     		adds	r1, r1, #18
 3649              	.LVL341:
 3650 000e 8900     		lsls	r1, r1, #2
 3651              	.LVL342:
 3652 0010 4018     		adds	r0, r0, r1
 3653              	.LVL343:
 3654 0012 4260     		str	r2, [r0, #4]
 3655              	.L323:
3403:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3656              		.loc 1 3403 0
 3657              		@ sp needed
 3658 0014 7047     		bx	lr
 3659              	.L327:
 3660 0016 C046     		.align	2
 3661              	.L326:
 3662 0018 00010000 		.word	.LANCHOR2
 3663              		.cfi_endproc
 3664              	.LFE74:
 3665              		.size	vTaskSetThreadLocalStoragePointer, .-vTaskSetThreadLocalStoragePointer
 3666              		.section	.text.pvTaskGetThreadLocalStoragePointer,"ax",%progbits
 3667              		.align	2
 3668              		.global	pvTaskGetThreadLocalStoragePointer
 3669              		.code	16
 3670              		.thumb_func
 3671              		.type	pvTaskGetThreadLocalStoragePointer, %function
 3672              	pvTaskGetThreadLocalStoragePointer:
 3673              	.LFB75:
3411:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	void *pvReturn = NULL;
 3674              		.loc 1 3411 0
 3675              		.cfi_startproc
 3676              		@ args = 0, pretend = 0, frame = 0
 3677              		@ frame_needed = 0, uses_anonymous_args = 0
 3678              		@ link register save eliminated.
 3679              	.LVL344:
3415:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 3680              		.loc 1 3415 0
 3681 0000 0429     		cmp	r1, #4
 3682 0002 08DC     		bgt	.L331
3417:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 3683              		.loc 1 3417 0
 3684 0004 0028     		cmp	r0, #0
 3685 0006 01D1     		bne	.L330
3417:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 3686              		.loc 1 3417 0 is_stmt 0 discriminator 1
 3687 0008 044B     		ldr	r3, .L332
 3688 000a 1868     		ldr	r0, [r3]
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 163


 3689              	.LVL345:
 3690              	.L330:
3418:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 3691              		.loc 1 3418 0 is_stmt 1 discriminator 4
 3692 000c 1231     		adds	r1, r1, #18
 3693              	.LVL346:
 3694 000e 8900     		lsls	r1, r1, #2
 3695              	.LVL347:
 3696 0010 4018     		adds	r0, r0, r1
 3697              	.LVL348:
 3698 0012 4068     		ldr	r0, [r0, #4]
 3699              	.LVL349:
 3700 0014 00E0     		b	.L329
 3701              	.LVL350:
 3702              	.L331:
3422:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 3703              		.loc 1 3422 0
 3704 0016 0020     		movs	r0, #0
 3705              	.LVL351:
 3706              	.L329:
3426:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3707              		.loc 1 3426 0
 3708              		@ sp needed
 3709 0018 7047     		bx	lr
 3710              	.L333:
 3711 001a C046     		.align	2
 3712              	.L332:
 3713 001c 00010000 		.word	.LANCHOR2
 3714              		.cfi_endproc
 3715              	.LFE75:
 3716              		.size	pvTaskGetThreadLocalStoragePointer, .-pvTaskGetThreadLocalStoragePointer
 3717              		.section	.text.vTaskGetInfo,"ax",%progbits
 3718              		.align	2
 3719              		.global	vTaskGetInfo
 3720              		.code	16
 3721              		.thumb_func
 3722              		.type	vTaskGetInfo, %function
 3723              	vTaskGetInfo:
 3724              	.LFB78:
3511:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
 3725              		.loc 1 3511 0
 3726              		.cfi_startproc
 3727              		@ args = 0, pretend = 0, frame = 0
 3728              		@ frame_needed = 0, uses_anonymous_args = 0
 3729              	.LVL352:
 3730 0000 70B5     		push	{r4, r5, r6, lr}
 3731              		.cfi_def_cfa_offset 16
 3732              		.cfi_offset 4, -16
 3733              		.cfi_offset 5, -12
 3734              		.cfi_offset 6, -8
 3735              		.cfi_offset 14, -4
 3736 0002 0500     		movs	r5, r0
 3737 0004 0C00     		movs	r4, r1
 3738 0006 1600     		movs	r6, r2
3515:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3739              		.loc 1 3515 0
 3740 0008 0028     		cmp	r0, #0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 164


 3741 000a 01D1     		bne	.L335
3515:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3742              		.loc 1 3515 0 is_stmt 0 discriminator 1
 3743 000c 194A     		ldr	r2, .L342
 3744              	.LVL353:
 3745 000e 1568     		ldr	r5, [r2]
 3746              	.LVL354:
 3747              	.L335:
3517:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 3748              		.loc 1 3517 0 is_stmt 1 discriminator 4
 3749 0010 2560     		str	r5, [r4]
3518:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 3750              		.loc 1 3518 0 discriminator 4
 3751 0012 2A00     		movs	r2, r5
 3752 0014 3432     		adds	r2, r2, #52
 3753 0016 6260     		str	r2, [r4, #4]
3519:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 3754              		.loc 1 3519 0 discriminator 4
 3755 0018 EA6A     		ldr	r2, [r5, #44]
 3756 001a 2261     		str	r2, [r4, #16]
3520:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 3757              		.loc 1 3520 0 discriminator 4
 3758 001c 2A6B     		ldr	r2, [r5, #48]
 3759 001e E261     		str	r2, [r4, #28]
3521:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3760              		.loc 1 3521 0 discriminator 4
 3761 0020 6A6C     		ldr	r2, [r5, #68]
 3762 0022 A260     		str	r2, [r4, #8]
3529:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 3763              		.loc 1 3529 0 discriminator 4
 3764 0024 0022     		movs	r2, #0
 3765 0026 6261     		str	r2, [r4, #20]
3539:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 3766              		.loc 1 3539 0 discriminator 4
 3767 0028 A261     		str	r2, [r4, #24]
3546:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 3768              		.loc 1 3546 0 discriminator 4
 3769 002a 052B     		cmp	r3, #5
 3770 002c 13D0     		beq	.L336
3548:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 3771              		.loc 1 3548 0
 3772 002e 114A     		ldr	r2, .L342
 3773 0030 1268     		ldr	r2, [r2]
 3774 0032 9542     		cmp	r5, r2
 3775 0034 02D1     		bne	.L337
3550:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 3776              		.loc 1 3550 0
 3777 0036 0023     		movs	r3, #0
 3778              	.LVL355:
 3779 0038 2373     		strb	r3, [r4, #12]
 3780 003a 10E0     		b	.L338
 3781              	.LVL356:
 3782              	.L337:
3554:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3783              		.loc 1 3554 0
 3784 003c 2373     		strb	r3, [r4, #12]
3561:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 165


 3785              		.loc 1 3561 0
 3786 003e 032B     		cmp	r3, #3
 3787 0040 0DD1     		bne	.L338
3563:Source\FreeRTOS\10.0.1\Source/tasks.c **** 						{
 3788              		.loc 1 3563 0
 3789 0042 FFF7FEFF 		bl	vTaskSuspendAll
 3790              	.LVL357:
3565:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							{
 3791              		.loc 1 3565 0
 3792 0046 AB6A     		ldr	r3, [r5, #40]
 3793 0048 002B     		cmp	r3, #0
 3794 004a 01D0     		beq	.L339
3567:Source\FreeRTOS\10.0.1\Source/tasks.c **** 							}
 3795              		.loc 1 3567 0
 3796 004c 0223     		movs	r3, #2
 3797 004e 2373     		strb	r3, [r4, #12]
 3798              	.L339:
3570:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
 3799              		.loc 1 3570 0
 3800 0050 FFF7FEFF 		bl	xTaskResumeAll
 3801              	.LVL358:
 3802 0054 03E0     		b	.L338
 3803              	.LVL359:
 3804              	.L336:
3578:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 3805              		.loc 1 3578 0
 3806 0056 2800     		movs	r0, r5
 3807 0058 FFF7FEFF 		bl	eTaskGetState
 3808              	.LVL360:
 3809 005c 2073     		strb	r0, [r4, #12]
 3810              	.L338:
3583:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 3811              		.loc 1 3583 0
 3812 005e 002E     		cmp	r6, #0
 3813 0060 04D0     		beq	.L340
3591:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 3814              		.loc 1 3591 0
 3815 0062 286B     		ldr	r0, [r5, #48]
 3816 0064 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 3817              	.LVL361:
 3818 0068 2084     		strh	r0, [r4, #32]
 3819 006a 01E0     		b	.L334
 3820              	.L340:
3597:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 3821              		.loc 1 3597 0
 3822 006c 0023     		movs	r3, #0
 3823 006e 2384     		strh	r3, [r4, #32]
 3824              	.L334:
3599:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3825              		.loc 1 3599 0
 3826              		@ sp needed
 3827              	.LVL362:
 3828              	.LVL363:
 3829              	.LVL364:
 3830 0070 70BD     		pop	{r4, r5, r6, pc}
 3831              	.L343:
 3832 0072 C046     		.align	2
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 166


 3833              	.L342:
 3834 0074 00010000 		.word	.LANCHOR2
 3835              		.cfi_endproc
 3836              	.LFE78:
 3837              		.size	vTaskGetInfo, .-vTaskGetInfo
 3838              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 3839              		.align	2
 3840              		.code	16
 3841              		.thumb_func
 3842              		.type	prvListTasksWithinSingleList, %function
 3843              	prvListTasksWithinSingleList:
 3844              	.LFB79:
3607:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 3845              		.loc 1 3607 0
 3846              		.cfi_startproc
 3847              		@ args = 0, pretend = 0, frame = 8
 3848              		@ frame_needed = 0, uses_anonymous_args = 0
 3849              	.LVL365:
 3850 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3851              		.cfi_def_cfa_offset 20
 3852              		.cfi_offset 4, -20
 3853              		.cfi_offset 5, -16
 3854              		.cfi_offset 6, -12
 3855              		.cfi_offset 7, -8
 3856              		.cfi_offset 14, -4
 3857 0002 4F46     		mov	r7, r9
 3858 0004 4646     		mov	r6, r8
 3859 0006 C0B4     		push	{r6, r7}
 3860              		.cfi_def_cfa_offset 28
 3861              		.cfi_offset 8, -28
 3862              		.cfi_offset 9, -24
 3863 0008 83B0     		sub	sp, sp, #12
 3864              		.cfi_def_cfa_offset 40
 3865 000a 8146     		mov	r9, r0
 3866 000c 0D00     		movs	r5, r1
 3867 000e 0192     		str	r2, [sp, #4]
 3868              	.LVL366:
3611:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 3869              		.loc 1 3611 0
 3870 0010 0B68     		ldr	r3, [r1]
 3871 0012 002B     		cmp	r3, #0
 3872 0014 22D0     		beq	.L349
 3873              	.LVL367:
 3874              	.LBB15:
3613:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3875              		.loc 1 3613 0
 3876 0016 4B68     		ldr	r3, [r1, #4]
 3877 0018 5B68     		ldr	r3, [r3, #4]
 3878 001a 4B60     		str	r3, [r1, #4]
 3879 001c 0822     		movs	r2, #8
 3880              	.LVL368:
 3881 001e 9046     		mov	r8, r2
 3882 0020 8844     		add	r8, r8, r1
 3883 0022 4345     		cmp	r3, r8
 3884 0024 01D1     		bne	.L346
3613:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3885              		.loc 1 3613 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 167


 3886 0026 5B68     		ldr	r3, [r3, #4]
 3887 0028 4B60     		str	r3, [r1, #4]
 3888              	.L346:
3613:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3889              		.loc 1 3613 0 discriminator 3
 3890 002a 6B68     		ldr	r3, [r5, #4]
 3891 002c DE68     		ldr	r6, [r3, #12]
 3892              	.LVL369:
 3893              	.LBE15:
3609:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3894              		.loc 1 3609 0 is_stmt 1 discriminator 3
 3895 002e 0024     		movs	r4, #0
 3896              	.LVL370:
 3897              	.L348:
 3898              	.LBB16:
3621:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 3899              		.loc 1 3621 0
 3900 0030 6B68     		ldr	r3, [r5, #4]
 3901 0032 5B68     		ldr	r3, [r3, #4]
 3902 0034 6B60     		str	r3, [r5, #4]
 3903 0036 9845     		cmp	r8, r3
 3904 0038 01D1     		bne	.L347
3621:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 3905              		.loc 1 3621 0 is_stmt 0 discriminator 1
 3906 003a 5B68     		ldr	r3, [r3, #4]
 3907 003c 6B60     		str	r3, [r5, #4]
 3908              	.L347:
3621:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 3909              		.loc 1 3621 0 discriminator 3
 3910 003e 6B68     		ldr	r3, [r5, #4]
 3911 0040 DF68     		ldr	r7, [r3, #12]
 3912              	.LVL371:
 3913              	.LBE16:
3622:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				uxTask++;
 3914              		.loc 1 3622 0 is_stmt 1 discriminator 3
 3915 0042 E300     		lsls	r3, r4, #3
 3916 0044 1B19     		adds	r3, r3, r4
 3917 0046 9900     		lsls	r1, r3, #2
 3918 0048 4944     		add	r1, r1, r9
 3919 004a 019B     		ldr	r3, [sp, #4]
 3920 004c 0122     		movs	r2, #1
 3921 004e 3800     		movs	r0, r7
 3922 0050 FFF7FEFF 		bl	vTaskGetInfo
 3923              	.LVL372:
3623:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 3924              		.loc 1 3623 0 discriminator 3
 3925 0054 0134     		adds	r4, r4, #1
 3926              	.LVL373:
3624:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 3927              		.loc 1 3624 0 discriminator 3
 3928 0056 BE42     		cmp	r6, r7
 3929 0058 EAD1     		bne	.L348
 3930 005a 00E0     		b	.L345
 3931              	.LVL374:
 3932              	.L349:
3609:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3933              		.loc 1 3609 0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 168


 3934 005c 0024     		movs	r4, #0
 3935              	.LVL375:
 3936              	.L345:
3632:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3937              		.loc 1 3632 0
 3938 005e 2000     		movs	r0, r4
 3939 0060 03B0     		add	sp, sp, #12
 3940              		@ sp needed
 3941              	.LVL376:
 3942              	.LVL377:
 3943              	.LVL378:
 3944 0062 0CBC     		pop	{r2, r3}
 3945 0064 9046     		mov	r8, r2
 3946 0066 9946     		mov	r9, r3
 3947 0068 F0BD     		pop	{r4, r5, r6, r7, pc}
 3948              		.cfi_endproc
 3949              	.LFE79:
 3950              		.size	prvListTasksWithinSingleList, .-prvListTasksWithinSingleList
 3951 006a C046     		.section	.text.uxTaskGetSystemState,"ax",%progbits
 3952              		.align	2
 3953              		.global	uxTaskGetSystemState
 3954              		.code	16
 3955              		.thumb_func
 3956              		.type	uxTaskGetSystemState, %function
 3957              	uxTaskGetSystemState:
 3958              	.LFB59:
2410:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3959              		.loc 1 2410 0
 3960              		.cfi_startproc
 3961              		@ args = 0, pretend = 0, frame = 0
 3962              		@ frame_needed = 0, uses_anonymous_args = 0
 3963              	.LVL379:
 3964 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3965              		.cfi_def_cfa_offset 20
 3966              		.cfi_offset 4, -20
 3967              		.cfi_offset 5, -16
 3968              		.cfi_offset 6, -12
 3969              		.cfi_offset 7, -8
 3970              		.cfi_offset 14, -4
 3971 0002 4746     		mov	r7, r8
 3972 0004 80B4     		push	{r7}
 3973              		.cfi_def_cfa_offset 24
 3974              		.cfi_offset 8, -24
 3975 0006 0600     		movs	r6, r0
 3976 0008 0C00     		movs	r4, r1
 3977 000a 1700     		movs	r7, r2
 3978              	.LVL380:
2413:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 3979              		.loc 1 2413 0
 3980 000c FFF7FEFF 		bl	vTaskSuspendAll
 3981              	.LVL381:
2416:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 3982              		.loc 1 2416 0
 3983 0010 254B     		ldr	r3, .L354
 3984 0012 DB6F     		ldr	r3, [r3, #124]
 3985 0014 A342     		cmp	r3, r4
 3986 0016 3FD8     		bhi	.L353
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 169


 3987 0018 0724     		movs	r4, #7
 3988              	.LVL382:
 3989 001a 0025     		movs	r5, #0
 3990              	.LVL383:
 3991              	.L352:
2422:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 3992              		.loc 1 2422 0 discriminator 1
 3993 001c 013C     		subs	r4, r4, #1
 3994              	.LVL384:
2423:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 3995              		.loc 1 2423 0 discriminator 1
 3996 001e EB00     		lsls	r3, r5, #3
 3997 0020 5B19     		adds	r3, r3, r5
 3998 0022 9800     		lsls	r0, r3, #2
 3999 0024 A200     		lsls	r2, r4, #2
 4000 0026 1219     		adds	r2, r2, r4
 4001 0028 9300     		lsls	r3, r2, #2
 4002 002a 2049     		ldr	r1, .L354+4
 4003 002c 3031     		adds	r1, r1, #48
 4004 002e C918     		adds	r1, r1, r3
 4005 0030 3018     		adds	r0, r6, r0
 4006 0032 0122     		movs	r2, #1
 4007 0034 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4008              	.LVL385:
 4009 0038 2D18     		adds	r5, r5, r0
 4010              	.LVL386:
2425:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4011              		.loc 1 2425 0 discriminator 1
 4012 003a 002C     		cmp	r4, #0
 4013 003c EED1     		bne	.L352
2429:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4014              		.loc 1 2429 0
 4015 003e EB00     		lsls	r3, r5, #3
 4016 0040 5B19     		adds	r3, r3, r5
 4017 0042 9800     		lsls	r0, r3, #2
 4018 0044 194C     		ldr	r4, .L354+4
 4019              	.LVL387:
 4020 0046 A16A     		ldr	r1, [r4, #40]
 4021 0048 3018     		adds	r0, r6, r0
 4022 004a 0222     		movs	r2, #2
 4023 004c FFF7FEFF 		bl	prvListTasksWithinSingleList
 4024              	.LVL388:
 4025 0050 2D18     		adds	r5, r5, r0
 4026              	.LVL389:
2430:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4027              		.loc 1 2430 0
 4028 0052 EB00     		lsls	r3, r5, #3
 4029 0054 5B19     		adds	r3, r3, r5
 4030 0056 9800     		lsls	r0, r3, #2
 4031 0058 134B     		ldr	r3, .L354
 4032 005a 9846     		mov	r8, r3
 4033 005c 996F     		ldr	r1, [r3, #120]
 4034 005e 3018     		adds	r0, r6, r0
 4035 0060 0222     		movs	r2, #2
 4036 0062 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4037              	.LVL390:
 4038 0066 2D18     		adds	r5, r5, r0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 170


 4039              	.LVL391:
2436:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 4040              		.loc 1 2436 0
 4041 0068 EB00     		lsls	r3, r5, #3
 4042 006a 5B19     		adds	r3, r3, r5
 4043 006c 9800     		lsls	r0, r3, #2
 4044 006e 4146     		mov	r1, r8
 4045 0070 6431     		adds	r1, r1, #100
 4046 0072 3018     		adds	r0, r6, r0
 4047 0074 0422     		movs	r2, #4
 4048 0076 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4049              	.LVL392:
 4050 007a 2D18     		adds	r5, r5, r0
 4051              	.LVL393:
2444:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 4052              		.loc 1 2444 0
 4053 007c EB00     		lsls	r3, r5, #3
 4054 007e 5B19     		adds	r3, r3, r5
 4055 0080 9800     		lsls	r0, r3, #2
 4056 0082 3018     		adds	r0, r6, r0
 4057 0084 0322     		movs	r2, #3
 4058 0086 2100     		movs	r1, r4
 4059 0088 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4060              	.LVL394:
 4061 008c 2D18     		adds	r5, r5, r0
 4062              	.LVL395:
2461:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
 4063              		.loc 1 2461 0
 4064 008e 002F     		cmp	r7, #0
 4065 0090 03D0     		beq	.L351
2463:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
 4066              		.loc 1 2463 0
 4067 0092 0023     		movs	r3, #0
 4068 0094 3B60     		str	r3, [r7]
 4069 0096 00E0     		b	.L351
 4070              	.LVL396:
 4071              	.L353:
2411:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4072              		.loc 1 2411 0
 4073 0098 0025     		movs	r5, #0
 4074              	.LVL397:
 4075              	.L351:
2473:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4076              		.loc 1 2473 0
 4077 009a FFF7FEFF 		bl	xTaskResumeAll
 4078              	.LVL398:
2476:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4079              		.loc 1 2476 0
 4080 009e 2800     		movs	r0, r5
 4081              		@ sp needed
 4082              	.LVL399:
 4083              	.LVL400:
 4084              	.LVL401:
 4085 00a0 04BC     		pop	{r2}
 4086 00a2 9046     		mov	r8, r2
 4087 00a4 F0BD     		pop	{r4, r5, r6, r7, pc}
 4088              	.L355:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 171


 4089 00a6 C046     		.align	2
 4090              	.L354:
 4091 00a8 80000000 		.word	.LANCHOR1
 4092 00ac 00000000 		.word	.LANCHOR0
 4093              		.cfi_endproc
 4094              	.LFE59:
 4095              		.size	uxTaskGetSystemState, .-uxTaskGetSystemState
 4096              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 4097              		.align	2
 4098              		.global	uxTaskGetStackHighWaterMark
 4099              		.code	16
 4100              		.thumb_func
 4101              		.type	uxTaskGetStackHighWaterMark, %function
 4102              	uxTaskGetStackHighWaterMark:
 4103              	.LFB81:
3660:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
 4104              		.loc 1 3660 0
 4105              		.cfi_startproc
 4106              		@ args = 0, pretend = 0, frame = 0
 4107              		@ frame_needed = 0, uses_anonymous_args = 0
 4108              	.LVL402:
 4109 0000 10B5     		push	{r4, lr}
 4110              		.cfi_def_cfa_offset 8
 4111              		.cfi_offset 4, -8
 4112              		.cfi_offset 14, -4
3665:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4113              		.loc 1 3665 0
 4114 0002 0028     		cmp	r0, #0
 4115 0004 01D1     		bne	.L357
3665:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4116              		.loc 1 3665 0 is_stmt 0 discriminator 1
 4117 0006 034B     		ldr	r3, .L358
 4118 0008 1868     		ldr	r0, [r3]
 4119              	.LVL403:
 4120              	.L357:
3669:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 4121              		.loc 1 3669 0 is_stmt 1 discriminator 4
 4122 000a 3030     		adds	r0, r0, #48
 4123              	.LVL404:
3677:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4124              		.loc 1 3677 0 discriminator 4
 4125 000c FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4126              	.LVL405:
3680:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4127              		.loc 1 3680 0 discriminator 4
 4128              		@ sp needed
 4129 0010 10BD     		pop	{r4, pc}
 4130              	.L359:
 4131 0012 C046     		.align	2
 4132              	.L358:
 4133 0014 00010000 		.word	.LANCHOR2
 4134              		.cfi_endproc
 4135              	.LFE81:
 4136              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 4137              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4138              		.align	2
 4139              		.global	xTaskGetCurrentTaskHandle
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 172


 4140              		.code	16
 4141              		.thumb_func
 4142              		.type	xTaskGetCurrentTaskHandle, %function
 4143              	xTaskGetCurrentTaskHandle:
 4144              	.LFB84:
3768:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskHandle_t xReturn;
 4145              		.loc 1 3768 0
 4146              		.cfi_startproc
 4147              		@ args = 0, pretend = 0, frame = 0
 4148              		@ frame_needed = 0, uses_anonymous_args = 0
 4149              		@ link register save eliminated.
3774:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4150              		.loc 1 3774 0
 4151 0000 014B     		ldr	r3, .L361
 4152 0002 1868     		ldr	r0, [r3]
 4153              	.LVL406:
3777:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4154              		.loc 1 3777 0
 4155              		@ sp needed
 4156 0004 7047     		bx	lr
 4157              	.L362:
 4158 0006 C046     		.align	2
 4159              	.L361:
 4160 0008 00010000 		.word	.LANCHOR2
 4161              		.cfi_endproc
 4162              	.LFE84:
 4163              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 4164              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4165              		.align	2
 4166              		.global	xTaskGetSchedulerState
 4167              		.code	16
 4168              		.thumb_func
 4169              		.type	xTaskGetSchedulerState, %function
 4170              	xTaskGetSchedulerState:
 4171              	.LFB85:
3785:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn;
 4172              		.loc 1 3785 0
 4173              		.cfi_startproc
 4174              		@ args = 0, pretend = 0, frame = 0
 4175              		@ frame_needed = 0, uses_anonymous_args = 0
 4176              		@ link register save eliminated.
3788:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 4177              		.loc 1 3788 0
 4178 0000 064B     		ldr	r3, .L367
 4179 0002 5B68     		ldr	r3, [r3, #4]
 4180 0004 002B     		cmp	r3, #0
 4181 0006 05D0     		beq	.L365
3794:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 4182              		.loc 1 3794 0
 4183 0008 044B     		ldr	r3, .L367
 4184 000a 9B69     		ldr	r3, [r3, #24]
 4185 000c 002B     		cmp	r3, #0
 4186 000e 03D1     		bne	.L366
3796:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 4187              		.loc 1 3796 0
 4188 0010 0220     		movs	r0, #2
 4189 0012 02E0     		b	.L364
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 173


 4190              	.L365:
3790:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 4191              		.loc 1 3790 0
 4192 0014 0120     		movs	r0, #1
 4193 0016 00E0     		b	.L364
 4194              	.L366:
3800:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 4195              		.loc 1 3800 0
 4196 0018 0020     		movs	r0, #0
 4197              	.L364:
 4198              	.LVL407:
3805:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4199              		.loc 1 3805 0
 4200              		@ sp needed
 4201 001a 7047     		bx	lr
 4202              	.L368:
 4203              		.align	2
 4204              	.L367:
 4205 001c 00010000 		.word	.LANCHOR2
 4206              		.cfi_endproc
 4207              	.LFE85:
 4208              		.size	xTaskGetSchedulerState, .-xTaskGetSchedulerState
 4209              		.section	.text.vTaskList,"ax",%progbits
 4210              		.align	2
 4211              		.global	vTaskList
 4212              		.code	16
 4213              		.thumb_func
 4214              		.type	vTaskList, %function
 4215              	vTaskList:
 4216              	.LFB87:
4171:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 4217              		.loc 1 4171 0
 4218              		.cfi_startproc
 4219              		@ args = 0, pretend = 0, frame = 8
 4220              		@ frame_needed = 0, uses_anonymous_args = 0
 4221              	.LVL408:
 4222 0000 70B5     		push	{r4, r5, r6, lr}
 4223              		.cfi_def_cfa_offset 16
 4224              		.cfi_offset 4, -16
 4225              		.cfi_offset 5, -12
 4226              		.cfi_offset 6, -8
 4227              		.cfi_offset 14, -4
 4228 0002 84B0     		sub	sp, sp, #16
 4229              		.cfi_def_cfa_offset 32
 4230 0004 0400     		movs	r4, r0
4202:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4231              		.loc 1 4202 0
 4232 0006 0023     		movs	r3, #0
 4233 0008 0370     		strb	r3, [r0]
4206:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4234              		.loc 1 4206 0
 4235 000a 2E4B     		ldr	r3, .L381
 4236 000c DA6F     		ldr	r2, [r3, #124]
 4237 000e 0392     		str	r2, [sp, #12]
4211:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4238              		.loc 1 4211 0
 4239 0010 DB6F     		ldr	r3, [r3, #124]
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 174


 4240 0012 DA00     		lsls	r2, r3, #3
 4241 0014 D318     		adds	r3, r2, r3
 4242 0016 9800     		lsls	r0, r3, #2
 4243              	.LVL409:
 4244 0018 FFF7FEFF 		bl	pvPortMalloc
 4245              	.LVL410:
 4246 001c 061E     		subs	r6, r0, #0
 4247              	.LVL411:
4213:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 4248              		.loc 1 4213 0
 4249 001e 4FD0     		beq	.L369
4216:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4250              		.loc 1 4216 0
 4251 0020 0399     		ldr	r1, [sp, #12]
 4252 0022 0022     		movs	r2, #0
 4253 0024 FFF7FEFF 		bl	uxTaskGetSystemState
 4254              	.LVL412:
 4255 0028 0390     		str	r0, [sp, #12]
4219:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 4256              		.loc 1 4219 0
 4257 002a 0023     		movs	r3, #0
 4258 002c 0293     		str	r3, [sp, #8]
 4259 002e 40E0     		b	.L371
 4260              	.L379:
4221:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 4261              		.loc 1 4221 0
 4262 0030 029B     		ldr	r3, [sp, #8]
 4263 0032 DA00     		lsls	r2, r3, #3
 4264 0034 D318     		adds	r3, r2, r3
 4265 0036 9A00     		lsls	r2, r3, #2
 4266 0038 B218     		adds	r2, r6, r2
 4267 003a 137B     		ldrb	r3, [r2, #12]
 4268 003c 042B     		cmp	r3, #4
 4269 003e 0BD8     		bhi	.L372
 4270 0040 9B00     		lsls	r3, r3, #2
 4271 0042 214A     		ldr	r2, .L381+4
 4272 0044 D358     		ldr	r3, [r2, r3]
 4273 0046 9F46     		mov	pc, r3
 4274              		.section	.rodata
 4275              		.align	2
 4276              	.L374:
 4277 0000 48000000 		.word	.L373
 4278 0004 5C000000 		.word	.L380
 4279 0008 4C000000 		.word	.L376
 4280 000c 50000000 		.word	.L377
 4281 0010 54000000 		.word	.L378
 4282              		.section	.text.vTaskList
 4283              	.L373:
4223:Source\FreeRTOS\10.0.1\Source/tasks.c **** 										break;
 4284              		.loc 1 4223 0
 4285 0048 5825     		movs	r5, #88
 4286 004a 08E0     		b	.L375
 4287              	.L376:
 4288              	.LVL413:
4229:Source\FreeRTOS\10.0.1\Source/tasks.c **** 										break;
 4289              		.loc 1 4229 0
 4290 004c 4225     		movs	r5, #66
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 175


4230:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4291              		.loc 1 4230 0
 4292 004e 06E0     		b	.L375
 4293              	.LVL414:
 4294              	.L377:
4232:Source\FreeRTOS\10.0.1\Source/tasks.c **** 										break;
 4295              		.loc 1 4232 0
 4296 0050 5325     		movs	r5, #83
4233:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4297              		.loc 1 4233 0
 4298 0052 04E0     		b	.L375
 4299              	.LVL415:
 4300              	.L378:
4235:Source\FreeRTOS\10.0.1\Source/tasks.c **** 										break;
 4301              		.loc 1 4235 0
 4302 0054 4425     		movs	r5, #68
4236:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4303              		.loc 1 4236 0
 4304 0056 02E0     		b	.L375
 4305              	.LVL416:
 4306              	.L372:
4240:Source\FreeRTOS\10.0.1\Source/tasks.c **** 										break;
 4307              		.loc 1 4240 0
 4308 0058 0025     		movs	r5, #0
4241:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 4309              		.loc 1 4241 0
 4310 005a 00E0     		b	.L375
 4311              	.LVL417:
 4312              	.L380:
4226:Source\FreeRTOS\10.0.1\Source/tasks.c **** 										break;
 4313              		.loc 1 4226 0
 4314 005c 5225     		movs	r5, #82
 4315              	.L375:
 4316              	.LVL418:
4246:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4317              		.loc 1 4246 0 discriminator 2
 4318 005e 029B     		ldr	r3, [sp, #8]
 4319 0060 DA00     		lsls	r2, r3, #3
 4320 0062 D318     		adds	r3, r2, r3
 4321 0064 9A00     		lsls	r2, r3, #2
 4322 0066 B218     		adds	r2, r6, r2
 4323 0068 5168     		ldr	r1, [r2, #4]
 4324 006a 2000     		movs	r0, r4
 4325 006c FFF7FEFF 		bl	prvWriteNameToBuffer
 4326              	.LVL419:
 4327 0070 0400     		movs	r4, r0
 4328              	.LVL420:
4249:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
 4329              		.loc 1 4249 0 discriminator 2
 4330 0072 029B     		ldr	r3, [sp, #8]
 4331 0074 DA00     		lsls	r2, r3, #3
 4332 0076 D318     		adds	r3, r2, r3
 4333 0078 9A00     		lsls	r2, r3, #2
 4334 007a B218     		adds	r2, r6, r2
 4335 007c 1369     		ldr	r3, [r2, #16]
 4336 007e 029A     		ldr	r2, [sp, #8]
 4337 0080 D100     		lsls	r1, r2, #3
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 176


 4338 0082 8A18     		adds	r2, r1, r2
 4339 0084 9100     		lsls	r1, r2, #2
 4340 0086 7118     		adds	r1, r6, r1
 4341 0088 088C     		ldrh	r0, [r1, #32]
 4342              	.LVL421:
 4343 008a 029A     		ldr	r2, [sp, #8]
 4344 008c D100     		lsls	r1, r2, #3
 4345 008e 8A18     		adds	r2, r1, r2
 4346 0090 9100     		lsls	r1, r2, #2
 4347 0092 7118     		adds	r1, r6, r1
 4348 0094 8A68     		ldr	r2, [r1, #8]
 4349 0096 0192     		str	r2, [sp, #4]
 4350 0098 0090     		str	r0, [sp]
 4351 009a 2A00     		movs	r2, r5
 4352 009c 0B49     		ldr	r1, .L381+8
 4353 009e 2000     		movs	r0, r4
 4354 00a0 FFF7FEFF 		bl	sprintf
 4355              	.LVL422:
4250:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 4356              		.loc 1 4250 0 discriminator 2
 4357 00a4 2000     		movs	r0, r4
 4358 00a6 FFF7FEFF 		bl	strlen
 4359              	.LVL423:
 4360 00aa 2418     		adds	r4, r4, r0
 4361              	.LVL424:
4219:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 4362              		.loc 1 4219 0 discriminator 2
 4363 00ac 029B     		ldr	r3, [sp, #8]
 4364 00ae 0133     		adds	r3, r3, #1
 4365 00b0 0293     		str	r3, [sp, #8]
 4366              	.LVL425:
 4367              	.L371:
4219:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 4368              		.loc 1 4219 0 is_stmt 0 discriminator 1
 4369 00b2 029A     		ldr	r2, [sp, #8]
 4370 00b4 039B     		ldr	r3, [sp, #12]
 4371 00b6 9A42     		cmp	r2, r3
 4372 00b8 BAD3     		bcc	.L379
4255:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 4373              		.loc 1 4255 0 is_stmt 1
 4374 00ba 3000     		movs	r0, r6
 4375 00bc FFF7FEFF 		bl	vPortFree
 4376              	.LVL426:
 4377              	.L369:
4261:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4378              		.loc 1 4261 0
 4379 00c0 04B0     		add	sp, sp, #16
 4380              		@ sp needed
 4381              	.LVL427:
 4382              	.LVL428:
 4383 00c2 70BD     		pop	{r4, r5, r6, pc}
 4384              	.L382:
 4385              		.align	2
 4386              	.L381:
 4387 00c4 80000000 		.word	.LANCHOR1
 4388 00c8 00000000 		.word	.L374
 4389 00cc 08000000 		.word	.LC90
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 177


 4390              		.cfi_endproc
 4391              	.LFE87:
 4392              		.size	vTaskList, .-vTaskList
 4393              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4394              		.align	2
 4395              		.global	uxTaskResetEventItemValue
 4396              		.code	16
 4397              		.thumb_func
 4398              		.type	uxTaskResetEventItemValue, %function
 4399              	uxTaskResetEventItemValue:
 4400              	.LFB88:
4394:Source\FreeRTOS\10.0.1\Source/tasks.c **** TickType_t uxReturn;
 4401              		.loc 1 4394 0
 4402              		.cfi_startproc
 4403              		@ args = 0, pretend = 0, frame = 0
 4404              		@ frame_needed = 0, uses_anonymous_args = 0
 4405              		@ link register save eliminated.
4397:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4406              		.loc 1 4397 0
 4407 0000 044B     		ldr	r3, .L384
 4408 0002 1A68     		ldr	r2, [r3]
 4409 0004 9069     		ldr	r0, [r2, #24]
 4410              	.LVL429:
4401:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4411              		.loc 1 4401 0
 4412 0006 1A68     		ldr	r2, [r3]
 4413 0008 1B68     		ldr	r3, [r3]
 4414 000a D96A     		ldr	r1, [r3, #44]
 4415 000c 0723     		movs	r3, #7
 4416 000e 5B1A     		subs	r3, r3, r1
 4417 0010 9361     		str	r3, [r2, #24]
4404:Source\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 4418              		.loc 1 4404 0
 4419              		@ sp needed
 4420 0012 7047     		bx	lr
 4421              	.L385:
 4422              		.align	2
 4423              	.L384:
 4424 0014 00010000 		.word	.LANCHOR2
 4425              		.cfi_endproc
 4426              	.LFE88:
 4427              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 4428              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4429              		.align	2
 4430              		.global	ulTaskNotifyTake
 4431              		.code	16
 4432              		.thumb_func
 4433              		.type	ulTaskNotifyTake, %function
 4434              	ulTaskNotifyTake:
 4435              	.LFB89:
4427:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	uint32_t ulReturn;
 4436              		.loc 1 4427 0
 4437              		.cfi_startproc
 4438              		@ args = 0, pretend = 0, frame = 0
 4439              		@ frame_needed = 0, uses_anonymous_args = 0
 4440              	.LVL430:
 4441 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 178


 4442              		.cfi_def_cfa_offset 16
 4443              		.cfi_offset 4, -16
 4444              		.cfi_offset 5, -12
 4445              		.cfi_offset 6, -8
 4446              		.cfi_offset 14, -4
 4447 0002 0500     		movs	r5, r0
 4448 0004 0C00     		movs	r4, r1
4430:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 4449              		.loc 1 4430 0
 4450 0006 FFF7FEFF 		bl	vPortEnterCritical
 4451              	.LVL431:
4433:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 4452              		.loc 1 4433 0
 4453 000a 174B     		ldr	r3, .L390
 4454 000c 1B68     		ldr	r3, [r3]
 4455 000e 1B6E     		ldr	r3, [r3, #96]
 4456 0010 002B     		cmp	r3, #0
 4457 0012 0BD1     		bne	.L387
4436:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4458              		.loc 1 4436 0
 4459 0014 144B     		ldr	r3, .L390
 4460 0016 1A68     		ldr	r2, [r3]
 4461 0018 0121     		movs	r1, #1
 4462 001a 6423     		movs	r3, #100
 4463 001c D154     		strb	r1, [r2, r3]
4438:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 4464              		.loc 1 4438 0
 4465 001e 002C     		cmp	r4, #0
 4466 0020 04D0     		beq	.L387
4440:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4467              		.loc 1 4440 0
 4468 0022 2000     		movs	r0, r4
 4469 0024 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4470              	.LVL432:
4447:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 4471              		.loc 1 4447 0
 4472 0028 FFF7FEFF 		bl	vPortYield
 4473              	.LVL433:
 4474              	.L387:
4459:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4475              		.loc 1 4459 0
 4476 002c FFF7FEFF 		bl	vPortExitCritical
 4477              	.LVL434:
4461:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 4478              		.loc 1 4461 0
 4479 0030 FFF7FEFF 		bl	vPortEnterCritical
 4480              	.LVL435:
4464:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4481              		.loc 1 4464 0
 4482 0034 0C4B     		ldr	r3, .L390
 4483 0036 1B68     		ldr	r3, [r3]
 4484 0038 1C6E     		ldr	r4, [r3, #96]
 4485              	.LVL436:
4466:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 4486              		.loc 1 4466 0
 4487 003a 002C     		cmp	r4, #0
 4488 003c 0AD0     		beq	.L388
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 179


4468:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 4489              		.loc 1 4468 0
 4490 003e 002D     		cmp	r5, #0
 4491 0040 04D0     		beq	.L389
4470:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 4492              		.loc 1 4470 0
 4493 0042 094B     		ldr	r3, .L390
 4494 0044 1B68     		ldr	r3, [r3]
 4495 0046 0022     		movs	r2, #0
 4496 0048 1A66     		str	r2, [r3, #96]
 4497 004a 03E0     		b	.L388
 4498              	.L389:
4474:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 4499              		.loc 1 4474 0
 4500 004c 064B     		ldr	r3, .L390
 4501 004e 1B68     		ldr	r3, [r3]
 4502 0050 621E     		subs	r2, r4, #1
 4503 0052 1A66     		str	r2, [r3, #96]
 4504              	.L388:
4482:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 4505              		.loc 1 4482 0
 4506 0054 044B     		ldr	r3, .L390
 4507 0056 1A68     		ldr	r2, [r3]
 4508 0058 0021     		movs	r1, #0
 4509 005a 6423     		movs	r3, #100
 4510 005c D154     		strb	r1, [r2, r3]
4484:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4511              		.loc 1 4484 0
 4512 005e FFF7FEFF 		bl	vPortExitCritical
 4513              	.LVL437:
4487:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4514              		.loc 1 4487 0
 4515 0062 2000     		movs	r0, r4
 4516              		@ sp needed
 4517              	.LVL438:
 4518              	.LVL439:
 4519 0064 70BD     		pop	{r4, r5, r6, pc}
 4520              	.L391:
 4521 0066 C046     		.align	2
 4522              	.L390:
 4523 0068 00010000 		.word	.LANCHOR2
 4524              		.cfi_endproc
 4525              	.LFE89:
 4526              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 4527              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4528              		.align	2
 4529              		.global	xTaskNotifyWait
 4530              		.code	16
 4531              		.thumb_func
 4532              		.type	xTaskNotifyWait, %function
 4533              	xTaskNotifyWait:
 4534              	.LFB90:
4495:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn;
 4535              		.loc 1 4495 0
 4536              		.cfi_startproc
 4537              		@ args = 0, pretend = 0, frame = 0
 4538              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 180


 4539              	.LVL440:
 4540 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4541              		.cfi_def_cfa_offset 24
 4542              		.cfi_offset 3, -24
 4543              		.cfi_offset 4, -20
 4544              		.cfi_offset 5, -16
 4545              		.cfi_offset 6, -12
 4546              		.cfi_offset 7, -8
 4547              		.cfi_offset 14, -4
 4548 0002 0600     		movs	r6, r0
 4549 0004 0D00     		movs	r5, r1
 4550 0006 1700     		movs	r7, r2
 4551 0008 1C00     		movs	r4, r3
4498:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 4552              		.loc 1 4498 0
 4553 000a FFF7FEFF 		bl	vPortEnterCritical
 4554              	.LVL441:
4501:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 4555              		.loc 1 4501 0
 4556 000e 1B4B     		ldr	r3, .L397
 4557 0010 1A68     		ldr	r2, [r3]
 4558 0012 6423     		movs	r3, #100
 4559 0014 D35C     		ldrb	r3, [r2, r3]
 4560 0016 022B     		cmp	r3, #2
 4561 0018 0FD0     		beq	.L393
4506:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4562              		.loc 1 4506 0
 4563 001a 184A     		ldr	r2, .L397
 4564 001c 1168     		ldr	r1, [r2]
 4565 001e 0B6E     		ldr	r3, [r1, #96]
 4566 0020 B343     		bics	r3, r6
 4567 0022 0B66     		str	r3, [r1, #96]
4509:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4568              		.loc 1 4509 0
 4569 0024 1268     		ldr	r2, [r2]
 4570 0026 0121     		movs	r1, #1
 4571 0028 6423     		movs	r3, #100
 4572 002a D154     		strb	r1, [r2, r3]
4511:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 4573              		.loc 1 4511 0
 4574 002c 002C     		cmp	r4, #0
 4575 002e 04D0     		beq	.L393
4513:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 4576              		.loc 1 4513 0
 4577 0030 2000     		movs	r0, r4
 4578 0032 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4579              	.LVL442:
4520:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 4580              		.loc 1 4520 0
 4581 0036 FFF7FEFF 		bl	vPortYield
 4582              	.LVL443:
 4583              	.L393:
4532:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4584              		.loc 1 4532 0
 4585 003a FFF7FEFF 		bl	vPortExitCritical
 4586              	.LVL444:
4534:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 181


 4587              		.loc 1 4534 0
 4588 003e FFF7FEFF 		bl	vPortEnterCritical
 4589              	.LVL445:
4538:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 4590              		.loc 1 4538 0
 4591 0042 002F     		cmp	r7, #0
 4592 0044 03D0     		beq	.L394
4542:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 4593              		.loc 1 4542 0
 4594 0046 0D4B     		ldr	r3, .L397
 4595 0048 1B68     		ldr	r3, [r3]
 4596 004a 1B6E     		ldr	r3, [r3, #96]
 4597 004c 3B60     		str	r3, [r7]
 4598              	.L394:
4549:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 4599              		.loc 1 4549 0
 4600 004e 0B4B     		ldr	r3, .L397
 4601 0050 1A68     		ldr	r2, [r3]
 4602 0052 6423     		movs	r3, #100
 4603 0054 D35C     		ldrb	r3, [r2, r3]
 4604 0056 022B     		cmp	r3, #2
 4605 0058 06D1     		bne	.L396
4558:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdTRUE;
 4606              		.loc 1 4558 0
 4607 005a 084B     		ldr	r3, .L397
 4608 005c 1A68     		ldr	r2, [r3]
 4609 005e 136E     		ldr	r3, [r2, #96]
 4610 0060 AB43     		bics	r3, r5
 4611 0062 1366     		str	r3, [r2, #96]
 4612              	.LVL446:
4559:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 4613              		.loc 1 4559 0
 4614 0064 0124     		movs	r4, #1
 4615              	.LVL447:
 4616 0066 00E0     		b	.L395
 4617              	.LVL448:
 4618              	.L396:
4552:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 4619              		.loc 1 4552 0
 4620 0068 0024     		movs	r4, #0
 4621              	.LVL449:
 4622              	.L395:
4562:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 4623              		.loc 1 4562 0
 4624 006a 044B     		ldr	r3, .L397
 4625 006c 1A68     		ldr	r2, [r3]
 4626 006e 0021     		movs	r1, #0
 4627 0070 6423     		movs	r3, #100
 4628 0072 D154     		strb	r1, [r2, r3]
4564:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4629              		.loc 1 4564 0
 4630 0074 FFF7FEFF 		bl	vPortExitCritical
 4631              	.LVL450:
4567:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4632              		.loc 1 4567 0
 4633 0078 2000     		movs	r0, r4
 4634              		@ sp needed
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 182


 4635              	.LVL451:
 4636              	.LVL452:
 4637              	.LVL453:
 4638              	.LVL454:
 4639 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4640              	.L398:
 4641              		.align	2
 4642              	.L397:
 4643 007c 00010000 		.word	.LANCHOR2
 4644              		.cfi_endproc
 4645              	.LFE90:
 4646              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 4647              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4648              		.align	2
 4649              		.global	xTaskGenericNotify
 4650              		.code	16
 4651              		.thumb_func
 4652              		.type	xTaskGenericNotify, %function
 4653              	xTaskGenericNotify:
 4654              	.LFB91:
4575:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * pxTCB;
 4655              		.loc 1 4575 0
 4656              		.cfi_startproc
 4657              		@ args = 0, pretend = 0, frame = 0
 4658              		@ frame_needed = 0, uses_anonymous_args = 0
 4659              	.LVL455:
 4660 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4661              		.cfi_def_cfa_offset 24
 4662              		.cfi_offset 3, -24
 4663              		.cfi_offset 4, -20
 4664              		.cfi_offset 5, -16
 4665              		.cfi_offset 6, -12
 4666              		.cfi_offset 7, -8
 4667              		.cfi_offset 14, -4
 4668 0002 0400     		movs	r4, r0
 4669 0004 0E00     		movs	r6, r1
 4670 0006 1500     		movs	r5, r2
 4671 0008 1F00     		movs	r7, r3
 4672              	.LVL456:
4580:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4673              		.loc 1 4580 0
 4674 000a 0028     		cmp	r0, #0
 4675 000c 01D1     		bne	.L400
4580:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4676              		.loc 1 4580 0 is_stmt 0 discriminator 1
 4677              		.syntax divided
 4678              	@ 4580 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 4679 000e 72B6     		 cpsid i 
 4680              	@ 0 "" 2
 4681              		.thumb
 4682              		.syntax unified
 4683              	.L401:
 4684 0010 FEE7     		b	.L401
 4685              	.L400:
 4686              	.LVL457:
4583:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 4687              		.loc 1 4583 0 is_stmt 1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 183


 4688 0012 FFF7FEFF 		bl	vPortEnterCritical
 4689              	.LVL458:
4585:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 4690              		.loc 1 4585 0
 4691 0016 002F     		cmp	r7, #0
 4692 0018 01D0     		beq	.L402
4587:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 4693              		.loc 1 4587 0
 4694 001a 236E     		ldr	r3, [r4, #96]
 4695 001c 3B60     		str	r3, [r7]
 4696              	.L402:
4590:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4697              		.loc 1 4590 0
 4698 001e 6422     		movs	r2, #100
 4699 0020 A35C     		ldrb	r3, [r4, r2]
 4700 0022 DBB2     		uxtb	r3, r3
 4701              	.LVL459:
4592:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4702              		.loc 1 4592 0
 4703 0024 0221     		movs	r1, #2
 4704 0026 A154     		strb	r1, [r4, r2]
4594:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 4705              		.loc 1 4594 0
 4706 0028 022D     		cmp	r5, #2
 4707 002a 0DD0     		beq	.L404
 4708 002c 02D8     		bhi	.L405
 4709 002e 012D     		cmp	r5, #1
 4710 0030 05D0     		beq	.L406
 4711 0032 16E0     		b	.L413
 4712              	.L405:
 4713 0034 032D     		cmp	r5, #3
 4714 0036 0CD0     		beq	.L407
 4715 0038 042D     		cmp	r5, #4
 4716 003a 0DD0     		beq	.L408
 4717 003c 11E0     		b	.L413
 4718              	.L406:
4597:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
 4719              		.loc 1 4597 0
 4720 003e 226E     		ldr	r2, [r4, #96]
 4721 0040 1643     		orrs	r6, r2
 4722              	.LVL460:
 4723 0042 2666     		str	r6, [r4, #96]
4577:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4724              		.loc 1 4577 0
 4725 0044 0126     		movs	r6, #1
4598:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4726              		.loc 1 4598 0
 4727 0046 0FE0     		b	.L403
 4728              	.LVL461:
 4729              	.L404:
4601:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
 4730              		.loc 1 4601 0
 4731 0048 226E     		ldr	r2, [r4, #96]
 4732 004a 0132     		adds	r2, r2, #1
 4733 004c 2266     		str	r2, [r4, #96]
4577:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4734              		.loc 1 4577 0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 184


 4735 004e 0126     		movs	r6, #1
 4736              	.LVL462:
4602:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4737              		.loc 1 4602 0
 4738 0050 0AE0     		b	.L403
 4739              	.LVL463:
 4740              	.L407:
4605:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
 4741              		.loc 1 4605 0
 4742 0052 2666     		str	r6, [r4, #96]
4577:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4743              		.loc 1 4577 0
 4744 0054 0126     		movs	r6, #1
 4745              	.LVL464:
4606:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4746              		.loc 1 4606 0
 4747 0056 07E0     		b	.L403
 4748              	.LVL465:
 4749              	.L408:
4609:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
 4750              		.loc 1 4609 0
 4751 0058 022B     		cmp	r3, #2
 4752 005a 04D0     		beq	.L414
4611:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
 4753              		.loc 1 4611 0
 4754 005c 2666     		str	r6, [r4, #96]
4577:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4755              		.loc 1 4577 0
 4756 005e 0126     		movs	r6, #1
 4757              	.LVL466:
 4758 0060 02E0     		b	.L403
 4759              	.LVL467:
 4760              	.L413:
 4761 0062 0126     		movs	r6, #1
 4762              	.LVL468:
 4763 0064 00E0     		b	.L403
 4764              	.LVL469:
 4765              	.L414:
4616:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
 4766              		.loc 1 4616 0
 4767 0066 0026     		movs	r6, #0
 4768              	.LVL470:
 4769              	.L403:
4630:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 4770              		.loc 1 4630 0
 4771 0068 012B     		cmp	r3, #1
 4772 006a 20D1     		bne	.L409
4632:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4773              		.loc 1 4632 0
 4774 006c 251D     		adds	r5, r4, #4
 4775 006e 2800     		movs	r0, r5
 4776 0070 FFF7FEFF 		bl	uxListRemove
 4777              	.LVL471:
4633:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4778              		.loc 1 4633 0
 4779 0074 E36A     		ldr	r3, [r4, #44]
 4780 0076 104A     		ldr	r2, .L415
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 185


 4781 0078 D268     		ldr	r2, [r2, #12]
 4782 007a 9342     		cmp	r3, r2
 4783 007c 01D9     		bls	.L410
4633:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4784              		.loc 1 4633 0 is_stmt 0 discriminator 1
 4785 007e 0E4A     		ldr	r2, .L415
 4786 0080 D360     		str	r3, [r2, #12]
 4787              	.L410:
4633:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4788              		.loc 1 4633 0 discriminator 3
 4789 0082 9A00     		lsls	r2, r3, #2
 4790 0084 D318     		adds	r3, r2, r3
 4791 0086 9A00     		lsls	r2, r3, #2
 4792 0088 0C48     		ldr	r0, .L415+4
 4793 008a 3030     		adds	r0, r0, #48
 4794 008c 8018     		adds	r0, r0, r2
 4795 008e 2900     		movs	r1, r5
 4796 0090 FFF7FEFF 		bl	vListInsertEnd
 4797              	.LVL472:
4636:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4798              		.loc 1 4636 0 is_stmt 1 discriminator 3
 4799 0094 A36A     		ldr	r3, [r4, #40]
 4800 0096 002B     		cmp	r3, #0
 4801 0098 01D0     		beq	.L411
4636:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4802              		.loc 1 4636 0 is_stmt 0 discriminator 1
 4803              		.syntax divided
 4804              	@ 4636 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 4805 009a 72B6     		 cpsid i 
 4806              	@ 0 "" 2
 4807              		.thumb
 4808              		.syntax unified
 4809              	.L412:
 4810 009c FEE7     		b	.L412
 4811              	.L411:
4654:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 4812              		.loc 1 4654 0 is_stmt 1
 4813 009e E26A     		ldr	r2, [r4, #44]
 4814 00a0 054B     		ldr	r3, .L415
 4815 00a2 1B68     		ldr	r3, [r3]
 4816 00a4 DB6A     		ldr	r3, [r3, #44]
 4817 00a6 9A42     		cmp	r2, r3
 4818 00a8 01D9     		bls	.L409
4658:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 4819              		.loc 1 4658 0
 4820 00aa FFF7FEFF 		bl	vPortYield
 4821              	.LVL473:
 4822              	.L409:
4670:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4823              		.loc 1 4670 0
 4824 00ae FFF7FEFF 		bl	vPortExitCritical
 4825              	.LVL474:
4673:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4826              		.loc 1 4673 0
 4827 00b2 3000     		movs	r0, r6
 4828              		@ sp needed
 4829              	.LVL475:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 186


 4830              	.LVL476:
 4831              	.LVL477:
 4832 00b4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4833              	.L416:
 4834 00b6 C046     		.align	2
 4835              	.L415:
 4836 00b8 00010000 		.word	.LANCHOR2
 4837 00bc 00000000 		.word	.LANCHOR0
 4838              		.cfi_endproc
 4839              	.LFE91:
 4840              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 4841              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4842              		.align	2
 4843              		.global	xTaskGenericNotifyFromISR
 4844              		.code	16
 4845              		.thumb_func
 4846              		.type	xTaskGenericNotifyFromISR, %function
 4847              	xTaskGenericNotifyFromISR:
 4848              	.LFB92:
4681:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * pxTCB;
 4849              		.loc 1 4681 0
 4850              		.cfi_startproc
 4851              		@ args = 4, pretend = 0, frame = 8
 4852              		@ frame_needed = 0, uses_anonymous_args = 0
 4853              	.LVL478:
 4854 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4855              		.cfi_def_cfa_offset 20
 4856              		.cfi_offset 4, -20
 4857              		.cfi_offset 5, -16
 4858              		.cfi_offset 6, -12
 4859              		.cfi_offset 7, -8
 4860              		.cfi_offset 14, -4
 4861 0002 83B0     		sub	sp, sp, #12
 4862              		.cfi_def_cfa_offset 32
 4863 0004 0400     		movs	r4, r0
 4864 0006 0F00     		movs	r7, r1
 4865 0008 1600     		movs	r6, r2
 4866 000a 1D00     		movs	r5, r3
 4867              	.LVL479:
4687:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4868              		.loc 1 4687 0
 4869 000c 0028     		cmp	r0, #0
 4870 000e 01D1     		bne	.L418
4687:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4871              		.loc 1 4687 0 is_stmt 0 discriminator 1
 4872              		.syntax divided
 4873              	@ 4687 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 4874 0010 72B6     		 cpsid i 
 4875              	@ 0 "" 2
 4876              		.thumb
 4877              		.syntax unified
 4878              	.L419:
 4879 0012 FEE7     		b	.L419
 4880              	.L418:
 4881              	.LVL480:
4709:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 4882              		.loc 1 4709 0 is_stmt 1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 187


 4883 0014 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 4884              	.LVL481:
 4885 0018 0190     		str	r0, [sp, #4]
 4886              	.LVL482:
4711:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 4887              		.loc 1 4711 0
 4888 001a 002D     		cmp	r5, #0
 4889 001c 01D0     		beq	.L420
4713:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 4890              		.loc 1 4713 0
 4891 001e 236E     		ldr	r3, [r4, #96]
 4892 0020 2B60     		str	r3, [r5]
 4893              	.L420:
4716:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4894              		.loc 1 4716 0
 4895 0022 6422     		movs	r2, #100
 4896 0024 A35C     		ldrb	r3, [r4, r2]
 4897 0026 DBB2     		uxtb	r3, r3
 4898              	.LVL483:
4717:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4899              		.loc 1 4717 0
 4900 0028 0221     		movs	r1, #2
 4901 002a A154     		strb	r1, [r4, r2]
4719:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 4902              		.loc 1 4719 0
 4903 002c 022E     		cmp	r6, #2
 4904 002e 0DD0     		beq	.L422
 4905 0030 02D8     		bhi	.L423
 4906 0032 012E     		cmp	r6, #1
 4907 0034 05D0     		beq	.L424
 4908 0036 16E0     		b	.L434
 4909              	.L423:
 4910 0038 032E     		cmp	r6, #3
 4911 003a 0CD0     		beq	.L425
 4912 003c 042E     		cmp	r6, #4
 4913 003e 0DD0     		beq	.L426
 4914 0040 11E0     		b	.L434
 4915              	.L424:
4722:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
 4916              		.loc 1 4722 0
 4917 0042 226E     		ldr	r2, [r4, #96]
 4918 0044 3A43     		orrs	r2, r7
 4919 0046 2266     		str	r2, [r4, #96]
4684:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4920              		.loc 1 4684 0
 4921 0048 0127     		movs	r7, #1
 4922              	.LVL484:
4723:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4923              		.loc 1 4723 0
 4924 004a 0FE0     		b	.L421
 4925              	.LVL485:
 4926              	.L422:
4726:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
 4927              		.loc 1 4726 0
 4928 004c 226E     		ldr	r2, [r4, #96]
 4929 004e 0132     		adds	r2, r2, #1
 4930 0050 2266     		str	r2, [r4, #96]
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 188


4684:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4931              		.loc 1 4684 0
 4932 0052 0127     		movs	r7, #1
 4933              	.LVL486:
4727:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4934              		.loc 1 4727 0
 4935 0054 0AE0     		b	.L421
 4936              	.LVL487:
 4937              	.L425:
4730:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
 4938              		.loc 1 4730 0
 4939 0056 2766     		str	r7, [r4, #96]
4684:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4940              		.loc 1 4684 0
 4941 0058 0127     		movs	r7, #1
 4942              	.LVL488:
4731:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4943              		.loc 1 4731 0
 4944 005a 07E0     		b	.L421
 4945              	.LVL489:
 4946              	.L426:
4734:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
 4947              		.loc 1 4734 0
 4948 005c 022B     		cmp	r3, #2
 4949 005e 04D0     		beq	.L435
4736:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
 4950              		.loc 1 4736 0
 4951 0060 2766     		str	r7, [r4, #96]
4684:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4952              		.loc 1 4684 0
 4953 0062 0127     		movs	r7, #1
 4954              	.LVL490:
 4955 0064 02E0     		b	.L421
 4956              	.LVL491:
 4957              	.L434:
 4958 0066 0127     		movs	r7, #1
 4959              	.LVL492:
 4960 0068 00E0     		b	.L421
 4961              	.LVL493:
 4962              	.L435:
4741:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
 4963              		.loc 1 4741 0
 4964 006a 0027     		movs	r7, #0
 4965              	.LVL494:
 4966              	.L421:
4755:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 4967              		.loc 1 4755 0
 4968 006c 012B     		cmp	r3, #1
 4969 006e 33D1     		bne	.L427
4758:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4970              		.loc 1 4758 0
 4971 0070 A36A     		ldr	r3, [r4, #40]
 4972              	.LVL495:
 4973 0072 002B     		cmp	r3, #0
 4974 0074 01D0     		beq	.L428
4758:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 4975              		.loc 1 4758 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 189


 4976              		.syntax divided
 4977              	@ 4758 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 4978 0076 72B6     		 cpsid i 
 4979              	@ 0 "" 2
 4980              		.thumb
 4981              		.syntax unified
 4982              	.L429:
 4983 0078 FEE7     		b	.L429
 4984              	.L428:
4760:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 4985              		.loc 1 4760 0 is_stmt 1
 4986 007a 1A4B     		ldr	r3, .L436
 4987 007c 9B69     		ldr	r3, [r3, #24]
 4988 007e 002B     		cmp	r3, #0
 4989 0080 14D1     		bne	.L430
4762:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4990              		.loc 1 4762 0
 4991 0082 261D     		adds	r6, r4, #4
 4992 0084 3000     		movs	r0, r6
 4993              	.LVL496:
 4994 0086 FFF7FEFF 		bl	uxListRemove
 4995              	.LVL497:
4763:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 4996              		.loc 1 4763 0
 4997 008a E36A     		ldr	r3, [r4, #44]
 4998 008c 154A     		ldr	r2, .L436
 4999 008e D268     		ldr	r2, [r2, #12]
 5000 0090 9342     		cmp	r3, r2
 5001 0092 01D9     		bls	.L431
4763:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 5002              		.loc 1 4763 0 is_stmt 0 discriminator 1
 5003 0094 134A     		ldr	r2, .L436
 5004 0096 D360     		str	r3, [r2, #12]
 5005              	.L431:
4763:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 5006              		.loc 1 4763 0 discriminator 3
 5007 0098 9A00     		lsls	r2, r3, #2
 5008 009a D318     		adds	r3, r2, r3
 5009 009c 9A00     		lsls	r2, r3, #2
 5010 009e 1248     		ldr	r0, .L436+4
 5011 00a0 3030     		adds	r0, r0, #48
 5012 00a2 8018     		adds	r0, r0, r2
 5013 00a4 3100     		movs	r1, r6
 5014 00a6 FFF7FEFF 		bl	vListInsertEnd
 5015              	.LVL498:
 5016 00aa 05E0     		b	.L432
 5017              	.LVL499:
 5018              	.L430:
4769:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 5019              		.loc 1 4769 0 is_stmt 1
 5020 00ac 2100     		movs	r1, r4
 5021 00ae 1831     		adds	r1, r1, #24
 5022 00b0 0D48     		ldr	r0, .L436+4
 5023              	.LVL500:
 5024 00b2 1430     		adds	r0, r0, #20
 5025 00b4 FFF7FEFF 		bl	vListInsertEnd
 5026              	.LVL501:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 190


 5027              	.L432:
4772:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 5028              		.loc 1 4772 0
 5029 00b8 E26A     		ldr	r2, [r4, #44]
 5030 00ba 0A4B     		ldr	r3, .L436
 5031 00bc 1B68     		ldr	r3, [r3]
 5032 00be DB6A     		ldr	r3, [r3, #44]
 5033 00c0 9A42     		cmp	r2, r3
 5034 00c2 09D9     		bls	.L427
4776:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
 5035              		.loc 1 4776 0
 5036 00c4 089B     		ldr	r3, [sp, #32]
 5037 00c6 002B     		cmp	r3, #0
 5038 00c8 03D0     		beq	.L433
4778:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
 5039              		.loc 1 4778 0
 5040 00ca 0123     		movs	r3, #1
 5041 00cc 089A     		ldr	r2, [sp, #32]
 5042 00ce 1360     		str	r3, [r2]
 5043 00d0 02E0     		b	.L427
 5044              	.L433:
4785:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
 5045              		.loc 1 4785 0
 5046 00d2 0122     		movs	r2, #1
 5047 00d4 034B     		ldr	r3, .L436
 5048 00d6 9A62     		str	r2, [r3, #40]
 5049              	.L427:
4794:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 5050              		.loc 1 4794 0
 5051 00d8 0198     		ldr	r0, [sp, #4]
 5052 00da FFF7FEFF 		bl	vClearInterruptMaskFromISR
 5053              	.LVL502:
4797:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 5054              		.loc 1 4797 0
 5055 00de 3800     		movs	r0, r7
 5056 00e0 03B0     		add	sp, sp, #12
 5057              		@ sp needed
 5058              	.LVL503:
 5059              	.LVL504:
 5060              	.LVL505:
 5061 00e2 F0BD     		pop	{r4, r5, r6, r7, pc}
 5062              	.L437:
 5063              		.align	2
 5064              	.L436:
 5065 00e4 00010000 		.word	.LANCHOR2
 5066 00e8 00000000 		.word	.LANCHOR0
 5067              		.cfi_endproc
 5068              	.LFE92:
 5069              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 5070              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5071              		.align	2
 5072              		.global	vTaskNotifyGiveFromISR
 5073              		.code	16
 5074              		.thumb_func
 5075              		.type	vTaskNotifyGiveFromISR, %function
 5076              	vTaskNotifyGiveFromISR:
 5077              	.LFB93:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 191


4805:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * pxTCB;
 5078              		.loc 1 4805 0
 5079              		.cfi_startproc
 5080              		@ args = 0, pretend = 0, frame = 0
 5081              		@ frame_needed = 0, uses_anonymous_args = 0
 5082              	.LVL506:
 5083 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5084              		.cfi_def_cfa_offset 24
 5085              		.cfi_offset 3, -24
 5086              		.cfi_offset 4, -20
 5087              		.cfi_offset 5, -16
 5088              		.cfi_offset 6, -12
 5089              		.cfi_offset 7, -8
 5090              		.cfi_offset 14, -4
 5091 0002 0400     		movs	r4, r0
 5092 0004 0F00     		movs	r7, r1
4810:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 5093              		.loc 1 4810 0
 5094 0006 0028     		cmp	r0, #0
 5095 0008 01D1     		bne	.L439
4810:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 5096              		.loc 1 4810 0 is_stmt 0 discriminator 1
 5097              		.syntax divided
 5098              	@ 4810 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 5099 000a 72B6     		 cpsid i 
 5100              	@ 0 "" 2
 5101              		.thumb
 5102              		.syntax unified
 5103              	.L440:
 5104 000c FEE7     		b	.L440
 5105              	.L439:
 5106              	.LVL507:
4832:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 5107              		.loc 1 4832 0 is_stmt 1
 5108 000e FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 5109              	.LVL508:
 5110 0012 0600     		movs	r6, r0
 5111              	.LVL509:
4834:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5112              		.loc 1 4834 0
 5113 0014 6423     		movs	r3, #100
 5114 0016 E25C     		ldrb	r2, [r4, r3]
 5115              	.LVL510:
4835:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 5116              		.loc 1 4835 0
 5117 0018 0221     		movs	r1, #2
 5118 001a E154     		strb	r1, [r4, r3]
4839:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 5119              		.loc 1 4839 0
 5120 001c 236E     		ldr	r3, [r4, #96]
 5121 001e 0133     		adds	r3, r3, #1
 5122 0020 2366     		str	r3, [r4, #96]
4845:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 5123              		.loc 1 4845 0
 5124 0022 012A     		cmp	r2, #1
 5125 0024 31D1     		bne	.L441
4848:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 192


 5126              		.loc 1 4848 0
 5127 0026 A36A     		ldr	r3, [r4, #40]
 5128 0028 002B     		cmp	r3, #0
 5129 002a 01D0     		beq	.L442
4848:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 5130              		.loc 1 4848 0 is_stmt 0 discriminator 1
 5131              		.syntax divided
 5132              	@ 4848 "Source\FreeRTOS\10.0.1\Source\tasks.c" 1
 5133 002c 72B6     		 cpsid i 
 5134              	@ 0 "" 2
 5135              		.thumb
 5136              		.syntax unified
 5137              	.L443:
 5138 002e FEE7     		b	.L443
 5139              	.L442:
4850:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 5140              		.loc 1 4850 0 is_stmt 1
 5141 0030 184B     		ldr	r3, .L448
 5142 0032 9B69     		ldr	r3, [r3, #24]
 5143 0034 002B     		cmp	r3, #0
 5144 0036 14D1     		bne	.L444
4852:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5145              		.loc 1 4852 0
 5146 0038 251D     		adds	r5, r4, #4
 5147 003a 2800     		movs	r0, r5
 5148              	.LVL511:
 5149 003c FFF7FEFF 		bl	uxListRemove
 5150              	.LVL512:
4853:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 5151              		.loc 1 4853 0
 5152 0040 E36A     		ldr	r3, [r4, #44]
 5153 0042 144A     		ldr	r2, .L448
 5154 0044 D268     		ldr	r2, [r2, #12]
 5155 0046 9342     		cmp	r3, r2
 5156 0048 01D9     		bls	.L445
4853:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 5157              		.loc 1 4853 0 is_stmt 0 discriminator 1
 5158 004a 124A     		ldr	r2, .L448
 5159 004c D360     		str	r3, [r2, #12]
 5160              	.L445:
4853:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 5161              		.loc 1 4853 0 discriminator 3
 5162 004e 9A00     		lsls	r2, r3, #2
 5163 0050 D318     		adds	r3, r2, r3
 5164 0052 9A00     		lsls	r2, r3, #2
 5165 0054 1048     		ldr	r0, .L448+4
 5166 0056 3030     		adds	r0, r0, #48
 5167 0058 8018     		adds	r0, r0, r2
 5168 005a 2900     		movs	r1, r5
 5169 005c FFF7FEFF 		bl	vListInsertEnd
 5170              	.LVL513:
 5171 0060 05E0     		b	.L446
 5172              	.LVL514:
 5173              	.L444:
4859:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 5174              		.loc 1 4859 0 is_stmt 1
 5175 0062 2100     		movs	r1, r4
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 193


 5176 0064 1831     		adds	r1, r1, #24
 5177 0066 0C48     		ldr	r0, .L448+4
 5178              	.LVL515:
 5179 0068 1430     		adds	r0, r0, #20
 5180 006a FFF7FEFF 		bl	vListInsertEnd
 5181              	.LVL516:
 5182              	.L446:
4862:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 5183              		.loc 1 4862 0
 5184 006e E26A     		ldr	r2, [r4, #44]
 5185 0070 084B     		ldr	r3, .L448
 5186 0072 1B68     		ldr	r3, [r3]
 5187 0074 DB6A     		ldr	r3, [r3, #44]
 5188 0076 9A42     		cmp	r2, r3
 5189 0078 07D9     		bls	.L441
4866:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					{
 5190              		.loc 1 4866 0
 5191 007a 002F     		cmp	r7, #0
 5192 007c 02D0     		beq	.L447
4868:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
 5193              		.loc 1 4868 0
 5194 007e 0123     		movs	r3, #1
 5195 0080 3B60     		str	r3, [r7]
 5196 0082 02E0     		b	.L441
 5197              	.L447:
4875:Source\FreeRTOS\10.0.1\Source/tasks.c **** 					}
 5198              		.loc 1 4875 0
 5199 0084 0122     		movs	r2, #1
 5200 0086 034B     		ldr	r3, .L448
 5201 0088 9A62     		str	r2, [r3, #40]
 5202              	.L441:
4884:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 5203              		.loc 1 4884 0
 5204 008a 3000     		movs	r0, r6
 5205 008c FFF7FEFF 		bl	vClearInterruptMaskFromISR
 5206              	.LVL517:
4885:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 5207              		.loc 1 4885 0
 5208              		@ sp needed
 5209              	.LVL518:
 5210              	.LVL519:
 5211              	.LVL520:
 5212 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5213              	.L449:
 5214 0092 C046     		.align	2
 5215              	.L448:
 5216 0094 00010000 		.word	.LANCHOR2
 5217 0098 00000000 		.word	.LANCHOR0
 5218              		.cfi_endproc
 5219              	.LFE93:
 5220              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 5221              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5222              		.align	2
 5223              		.global	xTaskNotifyStateClear
 5224              		.code	16
 5225              		.thumb_func
 5226              		.type	xTaskNotifyStateClear, %function
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 194


 5227              	xTaskNotifyStateClear:
 5228              	.LFB94:
4894:Source\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
 5229              		.loc 1 4894 0
 5230              		.cfi_startproc
 5231              		@ args = 0, pretend = 0, frame = 0
 5232              		@ frame_needed = 0, uses_anonymous_args = 0
 5233              	.LVL521:
 5234 0000 10B5     		push	{r4, lr}
 5235              		.cfi_def_cfa_offset 8
 5236              		.cfi_offset 4, -8
 5237              		.cfi_offset 14, -4
 5238 0002 041E     		subs	r4, r0, #0
4900:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 5239              		.loc 1 4900 0
 5240 0004 01D1     		bne	.L451
4900:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 5241              		.loc 1 4900 0 is_stmt 0 discriminator 1
 5242 0006 094B     		ldr	r3, .L454
 5243 0008 1C68     		ldr	r4, [r3]
 5244              	.LVL522:
 5245              	.L451:
4902:Source\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 5246              		.loc 1 4902 0 is_stmt 1 discriminator 4
 5247 000a FFF7FEFF 		bl	vPortEnterCritical
 5248              	.LVL523:
4904:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 5249              		.loc 1 4904 0 discriminator 4
 5250 000e 6423     		movs	r3, #100
 5251 0010 E35C     		ldrb	r3, [r4, r3]
 5252 0012 022B     		cmp	r3, #2
 5253 0014 04D1     		bne	.L453
4906:Source\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdPASS;
 5254              		.loc 1 4906 0
 5255 0016 0022     		movs	r2, #0
 5256 0018 6233     		adds	r3, r3, #98
 5257 001a E254     		strb	r2, [r4, r3]
 5258              	.LVL524:
4907:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 5259              		.loc 1 4907 0
 5260 001c 0124     		movs	r4, #1
 5261              	.LVL525:
 5262 001e 00E0     		b	.L452
 5263              	.LVL526:
 5264              	.L453:
4911:Source\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 5265              		.loc 1 4911 0
 5266 0020 0024     		movs	r4, #0
 5267              	.LVL527:
 5268              	.L452:
4914:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 5269              		.loc 1 4914 0
 5270 0022 FFF7FEFF 		bl	vPortExitCritical
 5271              	.LVL528:
4917:Source\FreeRTOS\10.0.1\Source/tasks.c **** 
 5272              		.loc 1 4917 0
 5273 0026 2000     		movs	r0, r4
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 195


 5274              		@ sp needed
 5275              	.LVL529:
 5276 0028 10BD     		pop	{r4, pc}
 5277              	.L455:
 5278 002a C046     		.align	2
 5279              	.L454:
 5280 002c 00010000 		.word	.LANCHOR2
 5281              		.cfi_endproc
 5282              	.LFE94:
 5283              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 5284              		.global	pxCurrentTCB
 5285              		.section	.rodata.str1.4,"aMS",%progbits,1
 5286              		.align	2
 5287              	.LC37:
 5288 0000 49444C45 		.ascii	"IDLE\000"
 5288      00
 5289 0005 000000   		.space	3
 5290              	.LC90:
 5291 0008 09256309 		.ascii	"\011%c\011%u\011%u\011%u\015\012\000"
 5291      25750925 
 5291      75092575 
 5291      0D0A00
 5292              		.bss
 5293              		.align	2
 5294              		.set	.LANCHOR0,. + 0
 5295              		.set	.LANCHOR1,. + 128
 5296              		.set	.LANCHOR2,. + 256
 5297              		.type	xSuspendedTaskList, %object
 5298              		.size	xSuspendedTaskList, 20
 5299              	xSuspendedTaskList:
 5300 0000 00000000 		.space	20
 5300      00000000 
 5300      00000000 
 5300      00000000 
 5300      00000000 
 5301              		.type	xPendingReadyList, %object
 5302              		.size	xPendingReadyList, 20
 5303              	xPendingReadyList:
 5304 0014 00000000 		.space	20
 5304      00000000 
 5304      00000000 
 5304      00000000 
 5304      00000000 
 5305              		.type	pxDelayedTaskList, %object
 5306              		.size	pxDelayedTaskList, 4
 5307              	pxDelayedTaskList:
 5308 0028 00000000 		.space	4
 5309              		.type	xNextTaskUnblockTime, %object
 5310              		.size	xNextTaskUnblockTime, 4
 5311              	xNextTaskUnblockTime:
 5312 002c 00000000 		.space	4
 5313              		.type	pxReadyTasksLists, %object
 5314              		.size	pxReadyTasksLists, 140
 5315              	pxReadyTasksLists:
 5316 0030 00000000 		.space	140
 5316      00000000 
 5316      00000000 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 196


 5316      00000000 
 5316      00000000 
 5317              		.type	xDelayedTaskList1, %object
 5318              		.size	xDelayedTaskList1, 20
 5319              	xDelayedTaskList1:
 5320 00bc 00000000 		.space	20
 5320      00000000 
 5320      00000000 
 5320      00000000 
 5320      00000000 
 5321              		.type	xDelayedTaskList2, %object
 5322              		.size	xDelayedTaskList2, 20
 5323              	xDelayedTaskList2:
 5324 00d0 00000000 		.space	20
 5324      00000000 
 5324      00000000 
 5324      00000000 
 5324      00000000 
 5325              		.type	xTasksWaitingTermination, %object
 5326              		.size	xTasksWaitingTermination, 20
 5327              	xTasksWaitingTermination:
 5328 00e4 00000000 		.space	20
 5328      00000000 
 5328      00000000 
 5328      00000000 
 5328      00000000 
 5329              		.type	pxOverflowDelayedTaskList, %object
 5330              		.size	pxOverflowDelayedTaskList, 4
 5331              	pxOverflowDelayedTaskList:
 5332 00f8 00000000 		.space	4
 5333              		.type	uxCurrentNumberOfTasks, %object
 5334              		.size	uxCurrentNumberOfTasks, 4
 5335              	uxCurrentNumberOfTasks:
 5336 00fc 00000000 		.space	4
 5337              		.type	pxCurrentTCB, %object
 5338              		.size	pxCurrentTCB, 4
 5339              	pxCurrentTCB:
 5340 0100 00000000 		.space	4
 5341              		.type	xSchedulerRunning, %object
 5342              		.size	xSchedulerRunning, 4
 5343              	xSchedulerRunning:
 5344 0104 00000000 		.space	4
 5345              		.type	uxTaskNumber, %object
 5346              		.size	uxTaskNumber, 4
 5347              	uxTaskNumber:
 5348 0108 00000000 		.space	4
 5349              		.type	uxTopReadyPriority, %object
 5350              		.size	uxTopReadyPriority, 4
 5351              	uxTopReadyPriority:
 5352 010c 00000000 		.space	4
 5353              		.type	uxDeletedTasksWaitingCleanUp, %object
 5354              		.size	uxDeletedTasksWaitingCleanUp, 4
 5355              	uxDeletedTasksWaitingCleanUp:
 5356 0110 00000000 		.space	4
 5357              		.type	xTickCount, %object
 5358              		.size	xTickCount, 4
 5359              	xTickCount:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 197


 5360 0114 00000000 		.space	4
 5361              		.type	uxSchedulerSuspended, %object
 5362              		.size	uxSchedulerSuspended, 4
 5363              	uxSchedulerSuspended:
 5364 0118 00000000 		.space	4
 5365              		.type	xIdleTaskHandle, %object
 5366              		.size	xIdleTaskHandle, 4
 5367              	xIdleTaskHandle:
 5368 011c 00000000 		.space	4
 5369              		.type	xNumOfOverflows, %object
 5370              		.size	xNumOfOverflows, 4
 5371              	xNumOfOverflows:
 5372 0120 00000000 		.space	4
 5373              		.type	uxPendedTicks, %object
 5374              		.size	uxPendedTicks, 4
 5375              	uxPendedTicks:
 5376 0124 00000000 		.space	4
 5377              		.type	xYieldPending, %object
 5378              		.size	xYieldPending, 4
 5379              	xYieldPending:
 5380 0128 00000000 		.space	4
 5381              		.text
 5382              	.Letext0:
 5383              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 5384              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 5385              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 5386              		.file 5 ".\\Source\\FreeRTOS\\10.0.1\\Source\\include/projdefs.h"
 5387              		.file 6 ".\\Source\\FreeRTOS\\10.0.1\\Source\\portable\\GCC\\CM0/portmacro.h"
 5388              		.file 7 ".\\Source\\FreeRTOS\\10.0.1\\Source\\include/list.h"
 5389              		.file 8 ".\\Source\\FreeRTOS\\10.0.1\\Source\\include/task.h"
 5390              		.file 9 ".\\Source\\FreeRTOS\\10.0.1\\Source\\include/portable.h"
 5391              		.file 10 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4
 5392              		.file 11 ".\\Source\\FreeRTOS\\10.0.1\\Source\\include/timers.h"
 5393              		.file 12 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4
 5394              		.section	.debug_info,"",%progbits
 5395              	.Ldebug_info0:
 5396 0000 10240000 		.4byte	0x2410
 5397 0004 0400     		.2byte	0x4
 5398 0006 00000000 		.4byte	.Ldebug_abbrev0
 5399 000a 04       		.byte	0x4
 5400 000b 01       		.uleb128 0x1
 5401 000c BF030000 		.4byte	.LASF266
 5402 0010 0C       		.byte	0xc
 5403 0011 060A0000 		.4byte	.LASF267
 5404 0015 B9050000 		.4byte	.LASF268
 5405 0019 38000000 		.4byte	.Ldebug_ranges0+0x38
 5406 001d 00000000 		.4byte	0
 5407 0021 00000000 		.4byte	.Ldebug_line0
 5408 0025 02       		.uleb128 0x2
 5409 0026 8E060000 		.4byte	.LASF4
 5410 002a 02       		.byte	0x2
 5411 002b D8       		.byte	0xd8
 5412 002c 30000000 		.4byte	0x30
 5413 0030 03       		.uleb128 0x3
 5414 0031 04       		.byte	0x4
 5415 0032 07       		.byte	0x7
 5416 0033 44010000 		.4byte	.LASF0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 198


 5417 0037 04       		.uleb128 0x4
 5418 0038 04       		.byte	0x4
 5419 0039 05       		.byte	0x5
 5420 003a 696E7400 		.ascii	"int\000"
 5421 003e 03       		.uleb128 0x3
 5422 003f 08       		.byte	0x8
 5423 0040 05       		.byte	0x5
 5424 0041 3C090000 		.4byte	.LASF1
 5425 0045 03       		.uleb128 0x3
 5426 0046 08       		.byte	0x8
 5427 0047 04       		.byte	0x4
 5428 0048 280B0000 		.4byte	.LASF2
 5429 004c 03       		.uleb128 0x3
 5430 004d 01       		.byte	0x1
 5431 004e 06       		.byte	0x6
 5432 004f 35100000 		.4byte	.LASF3
 5433 0053 02       		.uleb128 0x2
 5434 0054 290D0000 		.4byte	.LASF5
 5435 0058 03       		.byte	0x3
 5436 0059 1D       		.byte	0x1d
 5437 005a 5E000000 		.4byte	0x5e
 5438 005e 03       		.uleb128 0x3
 5439 005f 01       		.byte	0x1
 5440 0060 08       		.byte	0x8
 5441 0061 900B0000 		.4byte	.LASF6
 5442 0065 03       		.uleb128 0x3
 5443 0066 02       		.byte	0x2
 5444 0067 05       		.byte	0x5
 5445 0068 C00B0000 		.4byte	.LASF7
 5446 006c 02       		.uleb128 0x2
 5447 006d 1D050000 		.4byte	.LASF8
 5448 0071 03       		.byte	0x3
 5449 0072 2B       		.byte	0x2b
 5450 0073 77000000 		.4byte	0x77
 5451 0077 03       		.uleb128 0x3
 5452 0078 02       		.byte	0x2
 5453 0079 07       		.byte	0x7
 5454 007a 4B100000 		.4byte	.LASF9
 5455 007e 03       		.uleb128 0x3
 5456 007f 04       		.byte	0x4
 5457 0080 05       		.byte	0x5
 5458 0081 040C0000 		.4byte	.LASF10
 5459 0085 02       		.uleb128 0x2
 5460 0086 8E0E0000 		.4byte	.LASF11
 5461 008a 03       		.byte	0x3
 5462 008b 41       		.byte	0x41
 5463 008c 90000000 		.4byte	0x90
 5464 0090 03       		.uleb128 0x3
 5465 0091 04       		.byte	0x4
 5466 0092 07       		.byte	0x7
 5467 0093 A10D0000 		.4byte	.LASF12
 5468 0097 03       		.uleb128 0x3
 5469 0098 08       		.byte	0x8
 5470 0099 07       		.byte	0x7
 5471 009a 90040000 		.4byte	.LASF13
 5472 009e 03       		.uleb128 0x3
 5473 009f 04       		.byte	0x4
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 199


 5474 00a0 07       		.byte	0x7
 5475 00a1 790D0000 		.4byte	.LASF14
 5476 00a5 05       		.uleb128 0x5
 5477 00a6 04       		.byte	0x4
 5478 00a7 06       		.uleb128 0x6
 5479 00a8 04       		.byte	0x4
 5480 00a9 AD000000 		.4byte	0xad
 5481 00ad 03       		.uleb128 0x3
 5482 00ae 01       		.byte	0x1
 5483 00af 08       		.byte	0x8
 5484 00b0 4B000000 		.4byte	.LASF15
 5485 00b4 06       		.uleb128 0x6
 5486 00b5 04       		.byte	0x4
 5487 00b6 BA000000 		.4byte	0xba
 5488 00ba 07       		.uleb128 0x7
 5489 00bb AD000000 		.4byte	0xad
 5490 00bf 02       		.uleb128 0x2
 5491 00c0 62070000 		.4byte	.LASF16
 5492 00c4 04       		.byte	0x4
 5493 00c5 18       		.byte	0x18
 5494 00c6 53000000 		.4byte	0x53
 5495 00ca 02       		.uleb128 0x2
 5496 00cb 3C0B0000 		.4byte	.LASF17
 5497 00cf 04       		.byte	0x4
 5498 00d0 24       		.byte	0x24
 5499 00d1 6C000000 		.4byte	0x6c
 5500 00d5 02       		.uleb128 0x2
 5501 00d6 4B030000 		.4byte	.LASF18
 5502 00da 04       		.byte	0x4
 5503 00db 30       		.byte	0x30
 5504 00dc 85000000 		.4byte	0x85
 5505 00e0 08       		.uleb128 0x8
 5506 00e1 D5000000 		.4byte	0xd5
 5507 00e5 08       		.uleb128 0x8
 5508 00e6 BF000000 		.4byte	0xbf
 5509 00ea 03       		.uleb128 0x3
 5510 00eb 04       		.byte	0x4
 5511 00ec 04       		.byte	0x4
 5512 00ed AA030000 		.4byte	.LASF19
 5513 00f1 03       		.uleb128 0x3
 5514 00f2 08       		.byte	0x8
 5515 00f3 04       		.byte	0x4
 5516 00f4 89100000 		.4byte	.LASF20
 5517 00f8 02       		.uleb128 0x2
 5518 00f9 32070000 		.4byte	.LASF21
 5519 00fd 05       		.byte	0x5
 5520 00fe 23       		.byte	0x23
 5521 00ff 03010000 		.4byte	0x103
 5522 0103 06       		.uleb128 0x6
 5523 0104 04       		.byte	0x4
 5524 0105 09010000 		.4byte	0x109
 5525 0109 09       		.uleb128 0x9
 5526 010a 14010000 		.4byte	0x114
 5527 010e 0A       		.uleb128 0xa
 5528 010f A5000000 		.4byte	0xa5
 5529 0113 00       		.byte	0
 5530 0114 02       		.uleb128 0x2
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 200


 5531 0115 77010000 		.4byte	.LASF22
 5532 0119 06       		.byte	0x6
 5533 011a 37       		.byte	0x37
 5534 011b D5000000 		.4byte	0xd5
 5535 011f 02       		.uleb128 0x2
 5536 0120 90090000 		.4byte	.LASF23
 5537 0124 06       		.byte	0x6
 5538 0125 38       		.byte	0x38
 5539 0126 7E000000 		.4byte	0x7e
 5540 012a 02       		.uleb128 0x2
 5541 012b 25080000 		.4byte	.LASF24
 5542 012f 06       		.byte	0x6
 5543 0130 39       		.byte	0x39
 5544 0131 90000000 		.4byte	0x90
 5545 0135 02       		.uleb128 0x2
 5546 0136 FC0A0000 		.4byte	.LASF25
 5547 013a 06       		.byte	0x6
 5548 013b 3F       		.byte	0x3f
 5549 013c D5000000 		.4byte	0xd5
 5550 0140 06       		.uleb128 0x6
 5551 0141 04       		.byte	0x4
 5552 0142 BF000000 		.4byte	0xbf
 5553 0146 0B       		.uleb128 0xb
 5554 0147 A5000000 		.4byte	0xa5
 5555 014b 56010000 		.4byte	0x156
 5556 014f 0C       		.uleb128 0xc
 5557 0150 9E000000 		.4byte	0x9e
 5558 0154 04       		.byte	0x4
 5559 0155 00       		.byte	0
 5560 0156 0D       		.uleb128 0xd
 5561 0157 AA010000 		.4byte	.LASF32
 5562 015b 14       		.byte	0x14
 5563 015c 07       		.byte	0x7
 5564 015d 8B       		.byte	0x8b
 5565 015e 9F010000 		.4byte	0x19f
 5566 0162 0E       		.uleb128 0xe
 5567 0163 F90B0000 		.4byte	.LASF26
 5568 0167 07       		.byte	0x7
 5569 0168 8E       		.byte	0x8e
 5570 0169 35010000 		.4byte	0x135
 5571 016d 00       		.byte	0
 5572 016e 0E       		.uleb128 0xe
 5573 016f CD090000 		.4byte	.LASF27
 5574 0173 07       		.byte	0x7
 5575 0174 8F       		.byte	0x8f
 5576 0175 9F010000 		.4byte	0x19f
 5577 0179 04       		.byte	0x4
 5578 017a 0E       		.uleb128 0xe
 5579 017b FD040000 		.4byte	.LASF28
 5580 017f 07       		.byte	0x7
 5581 0180 90       		.byte	0x90
 5582 0181 9F010000 		.4byte	0x19f
 5583 0185 08       		.byte	0x8
 5584 0186 0E       		.uleb128 0xe
 5585 0187 180F0000 		.4byte	.LASF29
 5586 018b 07       		.byte	0x7
 5587 018c 91       		.byte	0x91
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 201


 5588 018d A5000000 		.4byte	0xa5
 5589 0191 0C       		.byte	0xc
 5590 0192 0E       		.uleb128 0xe
 5591 0193 740B0000 		.4byte	.LASF30
 5592 0197 07       		.byte	0x7
 5593 0198 92       		.byte	0x92
 5594 0199 A5000000 		.4byte	0xa5
 5595 019d 10       		.byte	0x10
 5596 019e 00       		.byte	0
 5597 019f 06       		.uleb128 0x6
 5598 01a0 04       		.byte	0x4
 5599 01a1 56010000 		.4byte	0x156
 5600 01a5 02       		.uleb128 0x2
 5601 01a6 E3070000 		.4byte	.LASF31
 5602 01aa 07       		.byte	0x7
 5603 01ab 95       		.byte	0x95
 5604 01ac 56010000 		.4byte	0x156
 5605 01b0 0D       		.uleb128 0xd
 5606 01b1 A3060000 		.4byte	.LASF33
 5607 01b5 0C       		.byte	0xc
 5608 01b6 07       		.byte	0x7
 5609 01b7 97       		.byte	0x97
 5610 01b8 E1010000 		.4byte	0x1e1
 5611 01bc 0E       		.uleb128 0xe
 5612 01bd F90B0000 		.4byte	.LASF26
 5613 01c1 07       		.byte	0x7
 5614 01c2 9A       		.byte	0x9a
 5615 01c3 35010000 		.4byte	0x135
 5616 01c7 00       		.byte	0
 5617 01c8 0E       		.uleb128 0xe
 5618 01c9 CD090000 		.4byte	.LASF27
 5619 01cd 07       		.byte	0x7
 5620 01ce 9B       		.byte	0x9b
 5621 01cf 9F010000 		.4byte	0x19f
 5622 01d3 04       		.byte	0x4
 5623 01d4 0E       		.uleb128 0xe
 5624 01d5 FD040000 		.4byte	.LASF28
 5625 01d9 07       		.byte	0x7
 5626 01da 9C       		.byte	0x9c
 5627 01db 9F010000 		.4byte	0x19f
 5628 01df 08       		.byte	0x8
 5629 01e0 00       		.byte	0
 5630 01e1 02       		.uleb128 0x2
 5631 01e2 81080000 		.4byte	.LASF34
 5632 01e6 07       		.byte	0x7
 5633 01e7 9E       		.byte	0x9e
 5634 01e8 B0010000 		.4byte	0x1b0
 5635 01ec 0D       		.uleb128 0xd
 5636 01ed F5010000 		.4byte	.LASF35
 5637 01f1 14       		.byte	0x14
 5638 01f2 07       		.byte	0x7
 5639 01f3 A3       		.byte	0xa3
 5640 01f4 1D020000 		.4byte	0x21d
 5641 01f8 0E       		.uleb128 0xe
 5642 01f9 0C000000 		.4byte	.LASF36
 5643 01fd 07       		.byte	0x7
 5644 01fe A6       		.byte	0xa6
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 202


 5645 01ff 1D020000 		.4byte	0x21d
 5646 0203 00       		.byte	0
 5647 0204 0E       		.uleb128 0xe
 5648 0205 6F010000 		.4byte	.LASF37
 5649 0209 07       		.byte	0x7
 5650 020a A7       		.byte	0xa7
 5651 020b 22020000 		.4byte	0x222
 5652 020f 04       		.byte	0x4
 5653 0210 0E       		.uleb128 0xe
 5654 0211 47080000 		.4byte	.LASF38
 5655 0215 07       		.byte	0x7
 5656 0216 A8       		.byte	0xa8
 5657 0217 E1010000 		.4byte	0x1e1
 5658 021b 08       		.byte	0x8
 5659 021c 00       		.byte	0
 5660 021d 08       		.uleb128 0x8
 5661 021e 2A010000 		.4byte	0x12a
 5662 0222 06       		.uleb128 0x6
 5663 0223 04       		.byte	0x4
 5664 0224 A5010000 		.4byte	0x1a5
 5665 0228 02       		.uleb128 0x2
 5666 0229 E80A0000 		.4byte	.LASF39
 5667 022d 07       		.byte	0x7
 5668 022e AA       		.byte	0xaa
 5669 022f EC010000 		.4byte	0x1ec
 5670 0233 02       		.uleb128 0x2
 5671 0234 6D0A0000 		.4byte	.LASF40
 5672 0238 08       		.byte	0x8
 5673 0239 3D       		.byte	0x3d
 5674 023a A5000000 		.4byte	0xa5
 5675 023e 0F       		.uleb128 0xf
 5676 023f 01       		.byte	0x1
 5677 0240 5E000000 		.4byte	0x5e
 5678 0244 08       		.byte	0x8
 5679 0245 47       		.byte	0x47
 5680 0246 6F020000 		.4byte	0x26f
 5681 024a 10       		.uleb128 0x10
 5682 024b 250E0000 		.4byte	.LASF41
 5683 024f 00       		.byte	0
 5684 0250 10       		.uleb128 0x10
 5685 0251 D1080000 		.4byte	.LASF42
 5686 0255 01       		.byte	0x1
 5687 0256 10       		.uleb128 0x10
 5688 0257 2D0F0000 		.4byte	.LASF43
 5689 025b 02       		.byte	0x2
 5690 025c 10       		.uleb128 0x10
 5691 025d 8E000000 		.4byte	.LASF44
 5692 0261 03       		.byte	0x3
 5693 0262 10       		.uleb128 0x10
 5694 0263 21030000 		.4byte	.LASF45
 5695 0267 04       		.byte	0x4
 5696 0268 10       		.uleb128 0x10
 5697 0269 A90E0000 		.4byte	.LASF46
 5698 026d 05       		.byte	0x5
 5699 026e 00       		.byte	0
 5700 026f 02       		.uleb128 0x2
 5701 0270 DD0A0000 		.4byte	.LASF47
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 203


 5702 0274 08       		.byte	0x8
 5703 0275 4E       		.byte	0x4e
 5704 0276 3E020000 		.4byte	0x23e
 5705 027a 0F       		.uleb128 0xf
 5706 027b 01       		.byte	0x1
 5707 027c 5E000000 		.4byte	0x5e
 5708 0280 08       		.byte	0x8
 5709 0281 52       		.byte	0x52
 5710 0282 A5020000 		.4byte	0x2a5
 5711 0286 10       		.uleb128 0x10
 5712 0287 2C010000 		.4byte	.LASF48
 5713 028b 00       		.byte	0
 5714 028c 10       		.uleb128 0x10
 5715 028d 3E080000 		.4byte	.LASF49
 5716 0291 01       		.byte	0x1
 5717 0292 10       		.uleb128 0x10
 5718 0293 C7000000 		.4byte	.LASF50
 5719 0297 02       		.byte	0x2
 5720 0298 10       		.uleb128 0x10
 5721 0299 120D0000 		.4byte	.LASF51
 5722 029d 03       		.byte	0x3
 5723 029e 10       		.uleb128 0x10
 5724 029f FB070000 		.4byte	.LASF52
 5725 02a3 04       		.byte	0x4
 5726 02a4 00       		.byte	0
 5727 02a5 02       		.uleb128 0x2
 5728 02a6 36010000 		.4byte	.LASF53
 5729 02aa 08       		.byte	0x8
 5730 02ab 58       		.byte	0x58
 5731 02ac 7A020000 		.4byte	0x27a
 5732 02b0 0D       		.uleb128 0xd
 5733 02b1 83010000 		.4byte	.LASF54
 5734 02b5 08       		.byte	0x8
 5735 02b6 08       		.byte	0x8
 5736 02b7 5D       		.byte	0x5d
 5737 02b8 D5020000 		.4byte	0x2d5
 5738 02bc 0E       		.uleb128 0xe
 5739 02bd 8F020000 		.4byte	.LASF55
 5740 02c1 08       		.byte	0x8
 5741 02c2 5F       		.byte	0x5f
 5742 02c3 1F010000 		.4byte	0x11f
 5743 02c7 00       		.byte	0
 5744 02c8 0E       		.uleb128 0xe
 5745 02c9 A8090000 		.4byte	.LASF56
 5746 02cd 08       		.byte	0x8
 5747 02ce 60       		.byte	0x60
 5748 02cf 35010000 		.4byte	0x135
 5749 02d3 04       		.byte	0x4
 5750 02d4 00       		.byte	0
 5751 02d5 02       		.uleb128 0x2
 5752 02d6 390A0000 		.4byte	.LASF57
 5753 02da 08       		.byte	0x8
 5754 02db 61       		.byte	0x61
 5755 02dc B0020000 		.4byte	0x2b0
 5756 02e0 0D       		.uleb128 0xd
 5757 02e1 CE0A0000 		.4byte	.LASF58
 5758 02e5 0C       		.byte	0xc
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 204


 5759 02e6 08       		.byte	0x8
 5760 02e7 66       		.byte	0x66
 5761 02e8 11030000 		.4byte	0x311
 5762 02ec 0E       		.uleb128 0xe
 5763 02ed 480E0000 		.4byte	.LASF59
 5764 02f1 08       		.byte	0x8
 5765 02f2 68       		.byte	0x68
 5766 02f3 A5000000 		.4byte	0xa5
 5767 02f7 00       		.byte	0
 5768 02f8 0E       		.uleb128 0xe
 5769 02f9 7F020000 		.4byte	.LASF60
 5770 02fd 08       		.byte	0x8
 5771 02fe 69       		.byte	0x69
 5772 02ff D5000000 		.4byte	0xd5
 5773 0303 04       		.byte	0x4
 5774 0304 0E       		.uleb128 0xe
 5775 0305 C9020000 		.4byte	.LASF61
 5776 0309 08       		.byte	0x8
 5777 030a 6A       		.byte	0x6a
 5778 030b D5000000 		.4byte	0xd5
 5779 030f 08       		.byte	0x8
 5780 0310 00       		.byte	0
 5781 0311 02       		.uleb128 0x2
 5782 0312 02090000 		.4byte	.LASF62
 5783 0316 08       		.byte	0x8
 5784 0317 6B       		.byte	0x6b
 5785 0318 E0020000 		.4byte	0x2e0
 5786 031c 07       		.uleb128 0x7
 5787 031d B4000000 		.4byte	0xb4
 5788 0321 06       		.uleb128 0x6
 5789 0322 04       		.byte	0x4
 5790 0323 14010000 		.4byte	0x114
 5791 0327 0D       		.uleb128 0xd
 5792 0328 0D0C0000 		.4byte	.LASF63
 5793 032c 24       		.byte	0x24
 5794 032d 08       		.byte	0x8
 5795 032e 80       		.byte	0x80
 5796 032f A0030000 		.4byte	0x3a0
 5797 0333 0E       		.uleb128 0xe
 5798 0334 DB070000 		.4byte	.LASF64
 5799 0338 08       		.byte	0x8
 5800 0339 82       		.byte	0x82
 5801 033a 33020000 		.4byte	0x233
 5802 033e 00       		.byte	0
 5803 033f 0E       		.uleb128 0xe
 5804 0340 640E0000 		.4byte	.LASF65
 5805 0344 08       		.byte	0x8
 5806 0345 83       		.byte	0x83
 5807 0346 B4000000 		.4byte	0xb4
 5808 034a 04       		.byte	0x4
 5809 034b 0E       		.uleb128 0xe
 5810 034c B1020000 		.4byte	.LASF66
 5811 0350 08       		.byte	0x8
 5812 0351 84       		.byte	0x84
 5813 0352 2A010000 		.4byte	0x12a
 5814 0356 08       		.byte	0x8
 5815 0357 0E       		.uleb128 0xe
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 205


 5816 0358 CA0B0000 		.4byte	.LASF67
 5817 035c 08       		.byte	0x8
 5818 035d 85       		.byte	0x85
 5819 035e 6F020000 		.4byte	0x26f
 5820 0362 0C       		.byte	0xc
 5821 0363 0E       		.uleb128 0xe
 5822 0364 3B020000 		.4byte	.LASF68
 5823 0368 08       		.byte	0x8
 5824 0369 86       		.byte	0x86
 5825 036a 2A010000 		.4byte	0x12a
 5826 036e 10       		.byte	0x10
 5827 036f 0E       		.uleb128 0xe
 5828 0370 4A090000 		.4byte	.LASF69
 5829 0374 08       		.byte	0x8
 5830 0375 87       		.byte	0x87
 5831 0376 2A010000 		.4byte	0x12a
 5832 037a 14       		.byte	0x14
 5833 037b 0E       		.uleb128 0xe
 5834 037c 370E0000 		.4byte	.LASF70
 5835 0380 08       		.byte	0x8
 5836 0381 88       		.byte	0x88
 5837 0382 D5000000 		.4byte	0xd5
 5838 0386 18       		.byte	0x18
 5839 0387 0E       		.uleb128 0xe
 5840 0388 B40B0000 		.4byte	.LASF71
 5841 038c 08       		.byte	0x8
 5842 038d 89       		.byte	0x89
 5843 038e 21030000 		.4byte	0x321
 5844 0392 1C       		.byte	0x1c
 5845 0393 0E       		.uleb128 0xe
 5846 0394 D80F0000 		.4byte	.LASF72
 5847 0398 08       		.byte	0x8
 5848 0399 8A       		.byte	0x8a
 5849 039a CA000000 		.4byte	0xca
 5850 039e 20       		.byte	0x20
 5851 039f 00       		.byte	0
 5852 03a0 02       		.uleb128 0x2
 5853 03a1 6A070000 		.4byte	.LASF73
 5854 03a5 08       		.byte	0x8
 5855 03a6 8B       		.byte	0x8b
 5856 03a7 27030000 		.4byte	0x327
 5857 03ab 11       		.uleb128 0x11
 5858 03ac A4000000 		.4byte	.LASF74
 5859 03b0 68       		.byte	0x68
 5860 03b1 01       		.byte	0x1
 5861 03b2 0D01     		.2byte	0x10d
 5862 03b4 48040000 		.4byte	0x448
 5863 03b8 12       		.uleb128 0x12
 5864 03b9 A5100000 		.4byte	.LASF75
 5865 03bd 01       		.byte	0x1
 5866 03be 0F01     		.2byte	0x10f
 5867 03c0 48040000 		.4byte	0x448
 5868 03c4 00       		.byte	0
 5869 03c5 12       		.uleb128 0x12
 5870 03c6 6A100000 		.4byte	.LASF76
 5871 03ca 01       		.byte	0x1
 5872 03cb 1501     		.2byte	0x115
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 206


 5873 03cd A5010000 		.4byte	0x1a5
 5874 03d1 04       		.byte	0x4
 5875 03d2 12       		.uleb128 0x12
 5876 03d3 3A0D0000 		.4byte	.LASF77
 5877 03d7 01       		.byte	0x1
 5878 03d8 1601     		.2byte	0x116
 5879 03da A5010000 		.4byte	0x1a5
 5880 03de 18       		.byte	0x18
 5881 03df 12       		.uleb128 0x12
 5882 03e0 6B000000 		.4byte	.LASF78
 5883 03e4 01       		.byte	0x1
 5884 03e5 1701     		.2byte	0x117
 5885 03e7 2A010000 		.4byte	0x12a
 5886 03eb 2C       		.byte	0x2c
 5887 03ec 12       		.uleb128 0x12
 5888 03ed 8E0C0000 		.4byte	.LASF79
 5889 03f1 01       		.byte	0x1
 5890 03f2 1801     		.2byte	0x118
 5891 03f4 21030000 		.4byte	0x321
 5892 03f8 30       		.byte	0x30
 5893 03f9 12       		.uleb128 0x12
 5894 03fa 640E0000 		.4byte	.LASF65
 5895 03fe 01       		.byte	0x1
 5896 03ff 1901     		.2byte	0x119
 5897 0401 53040000 		.4byte	0x453
 5898 0405 34       		.byte	0x34
 5899 0406 12       		.uleb128 0x12
 5900 0407 BD020000 		.4byte	.LASF80
 5901 040b 01       		.byte	0x1
 5902 040c 2401     		.2byte	0x124
 5903 040e 2A010000 		.4byte	0x12a
 5904 0412 44       		.byte	0x44
 5905 0413 12       		.uleb128 0x12
 5906 0414 600A0000 		.4byte	.LASF81
 5907 0418 01       		.byte	0x1
 5908 0419 2501     		.2byte	0x125
 5909 041b 2A010000 		.4byte	0x12a
 5910 041f 48       		.byte	0x48
 5911 0420 12       		.uleb128 0x12
 5912 0421 9C050000 		.4byte	.LASF82
 5913 0425 01       		.byte	0x1
 5914 0426 3201     		.2byte	0x132
 5915 0428 46010000 		.4byte	0x146
 5916 042c 4C       		.byte	0x4c
 5917 042d 12       		.uleb128 0x12
 5918 042e 77070000 		.4byte	.LASF83
 5919 0432 01       		.byte	0x1
 5920 0433 4501     		.2byte	0x145
 5921 0435 E0000000 		.4byte	0xe0
 5922 0439 60       		.byte	0x60
 5923 043a 12       		.uleb128 0x12
 5924 043b 5B030000 		.4byte	.LASF84
 5925 043f 01       		.byte	0x1
 5926 0440 4601     		.2byte	0x146
 5927 0442 E5000000 		.4byte	0xe5
 5928 0446 64       		.byte	0x64
 5929 0447 00       		.byte	0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 207


 5930 0448 06       		.uleb128 0x6
 5931 0449 04       		.byte	0x4
 5932 044a 4E040000 		.4byte	0x44e
 5933 044e 08       		.uleb128 0x8
 5934 044f 14010000 		.4byte	0x114
 5935 0453 0B       		.uleb128 0xb
 5936 0454 AD000000 		.4byte	0xad
 5937 0458 63040000 		.4byte	0x463
 5938 045c 0C       		.uleb128 0xc
 5939 045d 9E000000 		.4byte	0x9e
 5940 0461 0F       		.byte	0xf
 5941 0462 00       		.byte	0
 5942 0463 13       		.uleb128 0x13
 5943 0464 2A030000 		.4byte	.LASF85
 5944 0468 01       		.byte	0x1
 5945 0469 5301     		.2byte	0x153
 5946 046b AB030000 		.4byte	0x3ab
 5947 046f 13       		.uleb128 0x13
 5948 0470 050F0000 		.4byte	.LASF86
 5949 0474 01       		.byte	0x1
 5950 0475 5701     		.2byte	0x157
 5951 0477 63040000 		.4byte	0x463
 5952 047b 14       		.uleb128 0x14
 5953 047c 640C0000 		.4byte	.LASF89
 5954 0480 01       		.byte	0x1
 5955 0481 C306     		.2byte	0x6c3
 5956 0483 1F010000 		.4byte	0x11f
 5957 0487 00000000 		.4byte	.LFB48
 5958 048b 44000000 		.4byte	.LFE48-.LFB48
 5959 048f 01       		.uleb128 0x1
 5960 0490 9C       		.byte	0x9c
 5961 0491 C6040000 		.4byte	0x4c6
 5962 0495 15       		.uleb128 0x15
 5963 0496 150B0000 		.4byte	.LASF91
 5964 049a 01       		.byte	0x1
 5965 049b C306     		.2byte	0x6c3
 5966 049d C6040000 		.4byte	0x4c6
 5967 04a1 00000000 		.4byte	.LLST0
 5968 04a5 16       		.uleb128 0x16
 5969 04a6 710D0000 		.4byte	.LASF87
 5970 04aa 01       		.byte	0x1
 5971 04ab C506     		.2byte	0x6c5
 5972 04ad 1F010000 		.4byte	0x11f
 5973 04b1 6C000000 		.4byte	.LLST1
 5974 04b5 16       		.uleb128 0x16
 5975 04b6 79100000 		.4byte	.LASF88
 5976 04ba 01       		.byte	0x1
 5977 04bb C606     		.2byte	0x6c6
 5978 04bd D6040000 		.4byte	0x4d6
 5979 04c1 8B000000 		.4byte	.LLST2
 5980 04c5 00       		.byte	0
 5981 04c6 07       		.uleb128 0x7
 5982 04c7 33020000 		.4byte	0x233
 5983 04cb 06       		.uleb128 0x6
 5984 04cc 04       		.byte	0x4
 5985 04cd D1040000 		.4byte	0x4d1
 5986 04d1 07       		.uleb128 0x7
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 208


 5987 04d2 6F040000 		.4byte	0x46f
 5988 04d6 07       		.uleb128 0x7
 5989 04d7 CB040000 		.4byte	0x4cb
 5990 04db 14       		.uleb128 0x14
 5991 04dc 930F0000 		.4byte	.LASF90
 5992 04e0 01       		.byte	0x1
 5993 04e1 370E     		.2byte	0xe37
 5994 04e3 CA000000 		.4byte	0xca
 5995 04e7 00000000 		.4byte	.LFB80
 5996 04eb 14000000 		.4byte	.LFE80-.LFB80
 5997 04ef 01       		.uleb128 0x1
 5998 04f0 9C       		.byte	0x9c
 5999 04f1 16050000 		.4byte	0x516
 6000 04f5 15       		.uleb128 0x15
 6001 04f6 2C0A0000 		.4byte	.LASF92
 6002 04fa 01       		.byte	0x1
 6003 04fb 370E     		.2byte	0xe37
 6004 04fd 16050000 		.4byte	0x516
 6005 0501 F7000000 		.4byte	.LLST3
 6006 0505 16       		.uleb128 0x16
 6007 0506 FE090000 		.4byte	.LASF93
 6008 050a 01       		.byte	0x1
 6009 050b 390E     		.2byte	0xe39
 6010 050d D5000000 		.4byte	0xd5
 6011 0511 15010000 		.4byte	.LLST4
 6012 0515 00       		.byte	0
 6013 0516 06       		.uleb128 0x6
 6014 0517 04       		.byte	0x4
 6015 0518 1C050000 		.4byte	0x51c
 6016 051c 07       		.uleb128 0x7
 6017 051d BF000000 		.4byte	0xbf
 6018 0521 17       		.uleb128 0x17
 6019 0522 B5080000 		.4byte	.LASF94
 6020 0526 01       		.byte	0x1
 6021 0527 9D0E     		.2byte	0xe9d
 6022 0529 00000000 		.4byte	.LFB83
 6023 052d 30000000 		.4byte	.LFE83-.LFB83
 6024 0531 01       		.uleb128 0x1
 6025 0532 9C       		.byte	0x9c
 6026 0533 48050000 		.4byte	0x548
 6027 0537 16       		.uleb128 0x16
 6028 0538 79100000 		.4byte	.LASF88
 6029 053c 01       		.byte	0x1
 6030 053d 9F0E     		.2byte	0xe9f
 6031 053f 48050000 		.4byte	0x548
 6032 0543 34010000 		.4byte	.LLST5
 6033 0547 00       		.byte	0
 6034 0548 06       		.uleb128 0x6
 6035 0549 04       		.byte	0x4
 6036 054a 6F040000 		.4byte	0x46f
 6037 054e 17       		.uleb128 0x17
 6038 054f 200F0000 		.4byte	.LASF95
 6039 0553 01       		.byte	0x1
 6040 0554 670E     		.2byte	0xe67
 6041 0556 00000000 		.4byte	.LFB82
 6042 055a 12000000 		.4byte	.LFE82-.LFB82
 6043 055e 01       		.uleb128 0x1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 209


 6044 055f 9C       		.byte	0x9c
 6045 0560 8E050000 		.4byte	0x58e
 6046 0564 15       		.uleb128 0x15
 6047 0565 79100000 		.4byte	.LASF88
 6048 0569 01       		.byte	0x1
 6049 056a 670E     		.2byte	0xe67
 6050 056c 48050000 		.4byte	0x548
 6051 0570 47010000 		.4byte	.LLST6
 6052 0574 18       		.uleb128 0x18
 6053 0575 0A000000 		.4byte	.LVL18
 6054 0579 25230000 		.4byte	0x2325
 6055 057d 19       		.uleb128 0x19
 6056 057e 10000000 		.4byte	.LVL19
 6057 0582 25230000 		.4byte	0x2325
 6058 0586 1A       		.uleb128 0x1a
 6059 0587 01       		.uleb128 0x1
 6060 0588 50       		.byte	0x50
 6061 0589 02       		.uleb128 0x2
 6062 058a 74       		.byte	0x74
 6063 058b 00       		.sleb128 0
 6064 058c 00       		.byte	0
 6065 058d 00       		.byte	0
 6066 058e 17       		.uleb128 0x17
 6067 058f E6000000 		.4byte	.LASF96
 6068 0593 01       		.byte	0x1
 6069 0594 3703     		.2byte	0x337
 6070 0596 00000000 		.4byte	.LFB38
 6071 059a A8000000 		.4byte	.LFE38-.LFB38
 6072 059e 01       		.uleb128 0x1
 6073 059f 9C       		.byte	0x9c
 6074 05a0 A2060000 		.4byte	0x6a2
 6075 05a4 15       		.uleb128 0x15
 6076 05a5 F7080000 		.4byte	.LASF97
 6077 05a9 01       		.byte	0x1
 6078 05aa 3703     		.2byte	0x337
 6079 05ac F8000000 		.4byte	0xf8
 6080 05b0 73010000 		.4byte	.LLST7
 6081 05b4 15       		.uleb128 0x15
 6082 05b5 C6090000 		.4byte	.LASF98
 6083 05b9 01       		.byte	0x1
 6084 05ba 3803     		.2byte	0x338
 6085 05bc 1C030000 		.4byte	0x31c
 6086 05c0 9E010000 		.4byte	.LLST8
 6087 05c4 15       		.uleb128 0x15
 6088 05c5 31080000 		.4byte	.LASF99
 6089 05c9 01       		.byte	0x1
 6090 05ca 3903     		.2byte	0x339
 6091 05cc A2060000 		.4byte	0x6a2
 6092 05d0 CA010000 		.4byte	.LLST9
 6093 05d4 15       		.uleb128 0x15
 6094 05d5 EC0B0000 		.4byte	.LASF100
 6095 05d9 01       		.byte	0x1
 6096 05da 3A03     		.2byte	0x33a
 6097 05dc A7060000 		.4byte	0x6a7
 6098 05e0 F6010000 		.4byte	.LLST10
 6099 05e4 15       		.uleb128 0x15
 6100 05e5 6B000000 		.4byte	.LASF78
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 210


 6101 05e9 01       		.byte	0x1
 6102 05ea 3B03     		.2byte	0x33b
 6103 05ec 2A010000 		.4byte	0x12a
 6104 05f0 15020000 		.4byte	.LLST11
 6105 05f4 1B       		.uleb128 0x1b
 6106 05f5 09110000 		.4byte	.LASF101
 6107 05f9 01       		.byte	0x1
 6108 05fa 3C03     		.2byte	0x33c
 6109 05fc B2060000 		.4byte	0x6b2
 6110 0600 02       		.uleb128 0x2
 6111 0601 91       		.byte	0x91
 6112 0602 04       		.sleb128 4
 6113 0603 1B       		.uleb128 0x1b
 6114 0604 E6080000 		.4byte	.LASF102
 6115 0608 01       		.byte	0x1
 6116 0609 3D03     		.2byte	0x33d
 6117 060b 48050000 		.4byte	0x548
 6118 060f 02       		.uleb128 0x2
 6119 0610 91       		.byte	0x91
 6120 0611 08       		.sleb128 8
 6121 0612 1B       		.uleb128 0x1b
 6122 0613 C20F0000 		.4byte	.LASF103
 6123 0617 01       		.byte	0x1
 6124 0618 3E03     		.2byte	0x33e
 6125 061a C2060000 		.4byte	0x6c2
 6126 061e 02       		.uleb128 0x2
 6127 061f 91       		.byte	0x91
 6128 0620 0C       		.sleb128 12
 6129 0621 16       		.uleb128 0x16
 6130 0622 A5100000 		.4byte	.LASF75
 6131 0626 01       		.byte	0x1
 6132 0627 4003     		.2byte	0x340
 6133 0629 21030000 		.4byte	0x321
 6134 062d 34020000 		.4byte	.LLST12
 6135 0631 1C       		.uleb128 0x1c
 6136 0632 7800     		.ascii	"x\000"
 6137 0634 01       		.byte	0x1
 6138 0635 4103     		.2byte	0x341
 6139 0637 2A010000 		.4byte	0x12a
 6140 063b 73020000 		.4byte	.LLST13
 6141 063f 1D       		.uleb128 0x1d
 6142 0640 1A000000 		.4byte	.LVL25
 6143 0644 30230000 		.4byte	0x2330
 6144 0648 5B060000 		.4byte	0x65b
 6145 064c 1A       		.uleb128 0x1a
 6146 064d 01       		.uleb128 0x1
 6147 064e 51       		.byte	0x51
 6148 064f 02       		.uleb128 0x2
 6149 0650 08       		.byte	0x8
 6150 0651 A5       		.byte	0xa5
 6151 0652 1A       		.uleb128 0x1a
 6152 0653 01       		.uleb128 0x1
 6153 0654 52       		.byte	0x52
 6154 0655 04       		.uleb128 0x4
 6155 0656 77       		.byte	0x77
 6156 0657 00       		.sleb128 0
 6157 0658 32       		.byte	0x32
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 211


 6158 0659 24       		.byte	0x24
 6159 065a 00       		.byte	0
 6160 065b 1D       		.uleb128 0x1d
 6161 065c 5A000000 		.4byte	.LVL34
 6162 0660 3B230000 		.4byte	0x233b
 6163 0664 6F060000 		.4byte	0x66f
 6164 0668 1A       		.uleb128 0x1a
 6165 0669 01       		.uleb128 0x1
 6166 066a 50       		.byte	0x50
 6167 066b 02       		.uleb128 0x2
 6168 066c 76       		.byte	0x76
 6169 066d 04       		.sleb128 4
 6170 066e 00       		.byte	0
 6171 066f 1D       		.uleb128 0x1d
 6172 0670 62000000 		.4byte	.LVL35
 6173 0674 3B230000 		.4byte	0x233b
 6174 0678 83060000 		.4byte	0x683
 6175 067c 1A       		.uleb128 0x1a
 6176 067d 01       		.uleb128 0x1
 6177 067e 50       		.byte	0x50
 6178 067f 02       		.uleb128 0x2
 6179 0680 76       		.byte	0x76
 6180 0681 18       		.sleb128 24
 6181 0682 00       		.byte	0
 6182 0683 19       		.uleb128 0x19
 6183 0684 94000000 		.4byte	.LVL41
 6184 0688 47230000 		.4byte	0x2347
 6185 068c 1A       		.uleb128 0x1a
 6186 068d 01       		.uleb128 0x1
 6187 068e 50       		.byte	0x50
 6188 068f 02       		.uleb128 0x2
 6189 0690 77       		.byte	0x77
 6190 0691 00       		.sleb128 0
 6191 0692 1A       		.uleb128 0x1a
 6192 0693 01       		.uleb128 0x1
 6193 0694 51       		.byte	0x51
 6194 0695 03       		.uleb128 0x3
 6195 0696 7D       		.byte	0x7d
 6196 0697 00       		.sleb128 0
 6197 0698 06       		.byte	0x6
 6198 0699 1A       		.uleb128 0x1a
 6199 069a 01       		.uleb128 0x1
 6200 069b 52       		.byte	0x52
 6201 069c 03       		.uleb128 0x3
 6202 069d 91       		.byte	0x91
 6203 069e 64       		.sleb128 -28
 6204 069f 06       		.byte	0x6
 6205 06a0 00       		.byte	0
 6206 06a1 00       		.byte	0
 6207 06a2 07       		.uleb128 0x7
 6208 06a3 D5000000 		.4byte	0xd5
 6209 06a7 07       		.uleb128 0x7
 6210 06a8 A5000000 		.4byte	0xa5
 6211 06ac 06       		.uleb128 0x6
 6212 06ad 04       		.byte	0x4
 6213 06ae 33020000 		.4byte	0x233
 6214 06b2 07       		.uleb128 0x7
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 212


 6215 06b3 AC060000 		.4byte	0x6ac
 6216 06b7 06       		.uleb128 0x6
 6217 06b8 04       		.byte	0x4
 6218 06b9 BD060000 		.4byte	0x6bd
 6219 06bd 07       		.uleb128 0x7
 6220 06be 11030000 		.4byte	0x311
 6221 06c2 07       		.uleb128 0x7
 6222 06c3 B7060000 		.4byte	0x6b7
 6223 06c7 17       		.uleb128 0x17
 6224 06c8 BE100000 		.4byte	.LASF104
 6225 06cc 01       		.byte	0x1
 6226 06cd 770D     		.2byte	0xd77
 6227 06cf 00000000 		.4byte	.LFB76
 6228 06d3 58000000 		.4byte	.LFE76-.LFB76
 6229 06d7 01       		.uleb128 0x1
 6230 06d8 9C       		.byte	0x9c
 6231 06d9 70070000 		.4byte	0x770
 6232 06dd 16       		.uleb128 0x16
 6233 06de 6B000000 		.4byte	.LASF78
 6234 06e2 01       		.byte	0x1
 6235 06e3 790D     		.2byte	0xd79
 6236 06e5 2A010000 		.4byte	0x12a
 6237 06e9 9D020000 		.4byte	.LLST14
 6238 06ed 1D       		.uleb128 0x1d
 6239 06ee 16000000 		.4byte	.LVL47
 6240 06f2 52230000 		.4byte	0x2352
 6241 06f6 0E070000 		.4byte	0x70e
 6242 06fa 1A       		.uleb128 0x1a
 6243 06fb 01       		.uleb128 0x1
 6244 06fc 50       		.byte	0x50
 6245 06fd 0F       		.uleb128 0xf
 6246 06fe 74       		.byte	0x74
 6247 06ff 00       		.sleb128 0
 6248 0700 32       		.byte	0x32
 6249 0701 24       		.byte	0x24
 6250 0702 74       		.byte	0x74
 6251 0703 00       		.sleb128 0
 6252 0704 22       		.byte	0x22
 6253 0705 32       		.byte	0x32
 6254 0706 24       		.byte	0x24
 6255 0707 03       		.byte	0x3
 6256 0708 30000000 		.4byte	.LANCHOR0+48
 6257 070c 22       		.byte	0x22
 6258 070d 00       		.byte	0
 6259 070e 1D       		.uleb128 0x1d
 6260 070f 28000000 		.4byte	.LVL50
 6261 0713 52230000 		.4byte	0x2352
 6262 0717 22070000 		.4byte	0x722
 6263 071b 1A       		.uleb128 0x1a
 6264 071c 01       		.uleb128 0x1
 6265 071d 50       		.byte	0x50
 6266 071e 02       		.uleb128 0x2
 6267 071f 77       		.byte	0x77
 6268 0720 00       		.sleb128 0
 6269 0721 00       		.byte	0
 6270 0722 1D       		.uleb128 0x1d
 6271 0723 32000000 		.4byte	.LVL51
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 213


 6272 0727 52230000 		.4byte	0x2352
 6273 072b 36070000 		.4byte	0x736
 6274 072f 1A       		.uleb128 0x1a
 6275 0730 01       		.uleb128 0x1
 6276 0731 50       		.byte	0x50
 6277 0732 02       		.uleb128 0x2
 6278 0733 76       		.byte	0x76
 6279 0734 00       		.sleb128 0
 6280 0735 00       		.byte	0
 6281 0736 1D       		.uleb128 0x1d
 6282 0737 3C000000 		.4byte	.LVL52
 6283 073b 52230000 		.4byte	0x2352
 6284 073f 4A070000 		.4byte	0x74a
 6285 0743 1A       		.uleb128 0x1a
 6286 0744 01       		.uleb128 0x1
 6287 0745 50       		.byte	0x50
 6288 0746 02       		.uleb128 0x2
 6289 0747 75       		.byte	0x75
 6290 0748 14       		.sleb128 20
 6291 0749 00       		.byte	0
 6292 074a 1D       		.uleb128 0x1d
 6293 074b 44000000 		.4byte	.LVL53
 6294 074f 52230000 		.4byte	0x2352
 6295 0753 5F070000 		.4byte	0x75f
 6296 0757 1A       		.uleb128 0x1a
 6297 0758 01       		.uleb128 0x1
 6298 0759 50       		.byte	0x50
 6299 075a 03       		.uleb128 0x3
 6300 075b 74       		.byte	0x74
 6301 075c E400     		.sleb128 100
 6302 075e 00       		.byte	0
 6303 075f 19       		.uleb128 0x19
 6304 0760 4A000000 		.4byte	.LVL54
 6305 0764 52230000 		.4byte	0x2352
 6306 0768 1A       		.uleb128 0x1a
 6307 0769 01       		.uleb128 0x1
 6308 076a 50       		.byte	0x50
 6309 076b 02       		.uleb128 0x2
 6310 076c 75       		.byte	0x75
 6311 076d 00       		.sleb128 0
 6312 076e 00       		.byte	0
 6313 076f 00       		.byte	0
 6314 0770 17       		.uleb128 0x17
 6315 0771 9C080000 		.4byte	.LASF105
 6316 0775 01       		.byte	0x1
 6317 0776 0304     		.2byte	0x403
 6318 0778 00000000 		.4byte	.LFB39
 6319 077c 94000000 		.4byte	.LFE39-.LFB39
 6320 0780 01       		.uleb128 0x1
 6321 0781 9C       		.byte	0x9c
 6322 0782 CF070000 		.4byte	0x7cf
 6323 0786 15       		.uleb128 0x15
 6324 0787 E6080000 		.4byte	.LASF102
 6325 078b 01       		.byte	0x1
 6326 078c 0304     		.2byte	0x403
 6327 078e 48050000 		.4byte	0x548
 6328 0792 BC020000 		.4byte	.LLST15
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 214


 6329 0796 18       		.uleb128 0x18
 6330 0797 08000000 		.4byte	.LVL56
 6331 079b 5E230000 		.4byte	0x235e
 6332 079f 18       		.uleb128 0x18
 6333 07a0 26000000 		.4byte	.LVL57
 6334 07a4 C7060000 		.4byte	0x6c7
 6335 07a8 1D       		.uleb128 0x1d
 6336 07a9 68000000 		.4byte	.LVL58
 6337 07ad 69230000 		.4byte	0x2369
 6338 07b1 BC070000 		.4byte	0x7bc
 6339 07b5 1A       		.uleb128 0x1a
 6340 07b6 01       		.uleb128 0x1
 6341 07b7 51       		.byte	0x51
 6342 07b8 02       		.uleb128 0x2
 6343 07b9 74       		.byte	0x74
 6344 07ba 04       		.sleb128 4
 6345 07bb 00       		.byte	0
 6346 07bc 18       		.uleb128 0x18
 6347 07bd 6C000000 		.4byte	.LVL59
 6348 07c1 75230000 		.4byte	0x2375
 6349 07c5 18       		.uleb128 0x18
 6350 07c6 84000000 		.4byte	.LVL60
 6351 07ca 80230000 		.4byte	0x2380
 6352 07ce 00       		.byte	0
 6353 07cf 17       		.uleb128 0x17
 6354 07d0 17110000 		.4byte	.LASF106
 6355 07d4 01       		.byte	0x1
 6356 07d5 970D     		.2byte	0xd97
 6357 07d7 00000000 		.4byte	.LFB77
 6358 07db 40000000 		.4byte	.LFE77-.LFB77
 6359 07df 01       		.uleb128 0x1
 6360 07e0 9C       		.byte	0x9c
 6361 07e1 36080000 		.4byte	0x836
 6362 07e5 1E       		.uleb128 0x1e
 6363 07e6 02000000 		.4byte	.LBB2
 6364 07ea 32000000 		.4byte	.LBE2-.LBB2
 6365 07ee 16       		.uleb128 0x16
 6366 07ef 79100000 		.4byte	.LASF88
 6367 07f3 01       		.byte	0x1
 6368 07f4 9E0D     		.2byte	0xd9e
 6369 07f6 48050000 		.4byte	0x548
 6370 07fa E8020000 		.4byte	.LLST16
 6371 07fe 18       		.uleb128 0x18
 6372 07ff 08000000 		.4byte	.LVL62
 6373 0803 5E230000 		.4byte	0x235e
 6374 0807 1D       		.uleb128 0x1d
 6375 0808 14000000 		.4byte	.LVL64
 6376 080c 8B230000 		.4byte	0x238b
 6377 0810 1B080000 		.4byte	0x81b
 6378 0814 1A       		.uleb128 0x1a
 6379 0815 01       		.uleb128 0x1
 6380 0816 50       		.byte	0x50
 6381 0817 02       		.uleb128 0x2
 6382 0818 75       		.byte	0x75
 6383 0819 04       		.sleb128 4
 6384 081a 00       		.byte	0
 6385 081b 18       		.uleb128 0x18
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 215


 6386 081c 26000000 		.4byte	.LVL65
 6387 0820 75230000 		.4byte	0x2375
 6388 0824 19       		.uleb128 0x19
 6389 0825 2C000000 		.4byte	.LVL66
 6390 0829 4E050000 		.4byte	0x54e
 6391 082d 1A       		.uleb128 0x1a
 6392 082e 01       		.uleb128 0x1
 6393 082f 50       		.byte	0x50
 6394 0830 02       		.uleb128 0x2
 6395 0831 75       		.byte	0x75
 6396 0832 00       		.sleb128 0
 6397 0833 00       		.byte	0
 6398 0834 00       		.byte	0
 6399 0835 00       		.byte	0
 6400 0836 1F       		.uleb128 0x1f
 6401 0837 D0060000 		.4byte	.LASF107
 6402 083b 01       		.byte	0x1
 6403 083c A30C     		.2byte	0xca3
 6404 083e 00000000 		.4byte	.LFB73
 6405 0842 18000000 		.4byte	.LFE73-.LFB73
 6406 0846 01       		.uleb128 0x1
 6407 0847 9C       		.byte	0x9c
 6408 0848 6F080000 		.4byte	0x86f
 6409 084c 15       		.uleb128 0x15
 6410 084d EC0B0000 		.4byte	.LASF100
 6411 0851 01       		.byte	0x1
 6412 0852 A30C     		.2byte	0xca3
 6413 0854 A5000000 		.4byte	0xa5
 6414 0858 FB020000 		.4byte	.LLST17
 6415 085c 18       		.uleb128 0x18
 6416 085d 06000000 		.4byte	.LVL69
 6417 0861 CF070000 		.4byte	0x7cf
 6418 0865 18       		.uleb128 0x18
 6419 0866 12000000 		.4byte	.LVL70
 6420 086a 80230000 		.4byte	0x2380
 6421 086e 00       		.byte	0
 6422 086f 17       		.uleb128 0x17
 6423 0870 D00E0000 		.4byte	.LASF108
 6424 0874 01       		.byte	0x1
 6425 0875 3B13     		.2byte	0x133b
 6426 0877 00000000 		.4byte	.LFB95
 6427 087b 6C000000 		.4byte	.LFE95-.LFB95
 6428 087f 01       		.uleb128 0x1
 6429 0880 9C       		.byte	0x9c
 6430 0881 F8080000 		.4byte	0x8f8
 6431 0885 15       		.uleb128 0x15
 6432 0886 0B0F0000 		.4byte	.LASF109
 6433 088a 01       		.byte	0x1
 6434 088b 3B13     		.2byte	0x133b
 6435 088d 35010000 		.4byte	0x135
 6436 0891 1C030000 		.4byte	.LLST18
 6437 0895 15       		.uleb128 0x15
 6438 0896 0F0E0000 		.4byte	.LASF110
 6439 089a 01       		.byte	0x1
 6440 089b 3B13     		.2byte	0x133b
 6441 089d F8080000 		.4byte	0x8f8
 6442 08a1 48030000 		.4byte	.LLST19
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 216


 6443 08a5 16       		.uleb128 0x16
 6444 08a6 5E100000 		.4byte	.LASF111
 6445 08aa 01       		.byte	0x1
 6446 08ab 3D13     		.2byte	0x133d
 6447 08ad 35010000 		.4byte	0x135
 6448 08b1 74030000 		.4byte	.LLST20
 6449 08b5 16       		.uleb128 0x16
 6450 08b6 FD060000 		.4byte	.LASF112
 6451 08ba 01       		.byte	0x1
 6452 08bb 3E13     		.2byte	0x133e
 6453 08bd FD080000 		.4byte	0x8fd
 6454 08c1 87030000 		.4byte	.LLST21
 6455 08c5 18       		.uleb128 0x18
 6456 08c6 12000000 		.4byte	.LVL74
 6457 08ca 8B230000 		.4byte	0x238b
 6458 08ce 1D       		.uleb128 0x1d
 6459 08cf 26000000 		.4byte	.LVL75
 6460 08d3 69230000 		.4byte	0x2369
 6461 08d7 E5080000 		.4byte	0x8e5
 6462 08db 1A       		.uleb128 0x1a
 6463 08dc 01       		.uleb128 0x1
 6464 08dd 50       		.byte	0x50
 6465 08de 05       		.uleb128 0x5
 6466 08df 03       		.byte	0x3
 6467 08e0 00000000 		.4byte	.LANCHOR0
 6468 08e4 00       		.byte	0
 6469 08e5 18       		.uleb128 0x18
 6470 08e6 42000000 		.4byte	.LVL77
 6471 08ea 97230000 		.4byte	0x2397
 6472 08ee 18       		.uleb128 0x18
 6473 08ef 52000000 		.4byte	.LVL79
 6474 08f3 97230000 		.4byte	0x2397
 6475 08f7 00       		.byte	0
 6476 08f8 07       		.uleb128 0x7
 6477 08f9 1F010000 		.4byte	0x11f
 6478 08fd 07       		.uleb128 0x7
 6479 08fe 35010000 		.4byte	0x135
 6480 0902 14       		.uleb128 0x14
 6481 0903 F4100000 		.4byte	.LASF113
 6482 0907 01       		.byte	0x1
 6483 0908 3010     		.2byte	0x1030
 6484 090a A7000000 		.4byte	0xa7
 6485 090e 00000000 		.4byte	.LFB86
 6486 0912 22000000 		.4byte	.LFE86-.LFB86
 6487 0916 01       		.uleb128 0x1
 6488 0917 9C       		.byte	0x9c
 6489 0918 76090000 		.4byte	0x976
 6490 091c 15       		.uleb128 0x15
 6491 091d 77090000 		.4byte	.LASF114
 6492 0921 01       		.byte	0x1
 6493 0922 3010     		.2byte	0x1030
 6494 0924 A7000000 		.4byte	0xa7
 6495 0928 9A030000 		.4byte	.LLST22
 6496 092c 15       		.uleb128 0x15
 6497 092d 640E0000 		.4byte	.LASF65
 6498 0931 01       		.byte	0x1
 6499 0932 3010     		.2byte	0x1030
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 217


 6500 0934 B4000000 		.4byte	0xb4
 6501 0938 C6030000 		.4byte	.LLST23
 6502 093c 1C       		.uleb128 0x1c
 6503 093d 7800     		.ascii	"x\000"
 6504 093f 01       		.byte	0x1
 6505 0940 3210     		.2byte	0x1032
 6506 0942 25000000 		.4byte	0x25
 6507 0946 E7030000 		.4byte	.LLST24
 6508 094a 1D       		.uleb128 0x1d
 6509 094b 08000000 		.4byte	.LVL83
 6510 094f A3230000 		.4byte	0x23a3
 6511 0953 65090000 		.4byte	0x965
 6512 0957 1A       		.uleb128 0x1a
 6513 0958 01       		.uleb128 0x1
 6514 0959 50       		.byte	0x50
 6515 095a 02       		.uleb128 0x2
 6516 095b 74       		.byte	0x74
 6517 095c 00       		.sleb128 0
 6518 095d 1A       		.uleb128 0x1a
 6519 095e 01       		.uleb128 0x1
 6520 095f 51       		.byte	0x51
 6521 0960 03       		.uleb128 0x3
 6522 0961 F3       		.byte	0xf3
 6523 0962 01       		.uleb128 0x1
 6524 0963 51       		.byte	0x51
 6525 0964 00       		.byte	0
 6526 0965 19       		.uleb128 0x19
 6527 0966 0E000000 		.4byte	.LVL84
 6528 096a AE230000 		.4byte	0x23ae
 6529 096e 1A       		.uleb128 0x1a
 6530 096f 01       		.uleb128 0x1
 6531 0970 50       		.byte	0x50
 6532 0971 02       		.uleb128 0x2
 6533 0972 74       		.byte	0x74
 6534 0973 00       		.sleb128 0
 6535 0974 00       		.byte	0
 6536 0975 00       		.byte	0
 6537 0976 20       		.uleb128 0x20
 6538 0977 90080000 		.4byte	.LASF117
 6539 097b 01       		.byte	0x1
 6540 097c DC02     		.2byte	0x2dc
 6541 097e 1F010000 		.4byte	0x11f
 6542 0982 00000000 		.4byte	.LFB37
 6543 0986 5E000000 		.4byte	.LFE37-.LFB37
 6544 098a 01       		.uleb128 0x1
 6545 098b 9C       		.byte	0x9c
 6546 098c BC0A0000 		.4byte	0xabc
 6547 0990 15       		.uleb128 0x15
 6548 0991 F7080000 		.4byte	.LASF97
 6549 0995 01       		.byte	0x1
 6550 0996 DC02     		.2byte	0x2dc
 6551 0998 F8000000 		.4byte	0xf8
 6552 099c FA030000 		.4byte	.LLST25
 6553 09a0 15       		.uleb128 0x15
 6554 09a1 C6090000 		.4byte	.LASF98
 6555 09a5 01       		.byte	0x1
 6556 09a6 DD02     		.2byte	0x2dd
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 218


 6557 09a8 1C030000 		.4byte	0x31c
 6558 09ac 19040000 		.4byte	.LLST26
 6559 09b0 15       		.uleb128 0x15
 6560 09b1 51040000 		.4byte	.LASF115
 6561 09b5 01       		.byte	0x1
 6562 09b6 DE02     		.2byte	0x2de
 6563 09b8 BC0A0000 		.4byte	0xabc
 6564 09bc 38040000 		.4byte	.LLST27
 6565 09c0 15       		.uleb128 0x15
 6566 09c1 EC0B0000 		.4byte	.LASF100
 6567 09c5 01       		.byte	0x1
 6568 09c6 DF02     		.2byte	0x2df
 6569 09c8 A7060000 		.4byte	0x6a7
 6570 09cc 59040000 		.4byte	.LLST28
 6571 09d0 1B       		.uleb128 0x1b
 6572 09d1 6B000000 		.4byte	.LASF78
 6573 09d5 01       		.byte	0x1
 6574 09d6 E002     		.2byte	0x2e0
 6575 09d8 2A010000 		.4byte	0x12a
 6576 09dc 02       		.uleb128 0x2
 6577 09dd 91       		.byte	0x91
 6578 09de 00       		.sleb128 0
 6579 09df 1B       		.uleb128 0x1b
 6580 09e0 09110000 		.4byte	.LASF101
 6581 09e4 01       		.byte	0x1
 6582 09e5 E102     		.2byte	0x2e1
 6583 09e7 B2060000 		.4byte	0x6b2
 6584 09eb 02       		.uleb128 0x2
 6585 09ec 91       		.byte	0x91
 6586 09ed 04       		.sleb128 4
 6587 09ee 16       		.uleb128 0x16
 6588 09ef E6080000 		.4byte	.LASF102
 6589 09f3 01       		.byte	0x1
 6590 09f4 E302     		.2byte	0x2e3
 6591 09f6 48050000 		.4byte	0x548
 6592 09fa 85040000 		.4byte	.LLST29
 6593 09fe 16       		.uleb128 0x16
 6594 09ff 710D0000 		.4byte	.LASF87
 6595 0a03 01       		.byte	0x1
 6596 0a04 E402     		.2byte	0x2e4
 6597 0a06 1F010000 		.4byte	0x11f
 6598 0a0a AE040000 		.4byte	.LLST30
 6599 0a0e 21       		.uleb128 0x21
 6600 0a0f 0C000000 		.4byte	.LBB3
 6601 0a13 22000000 		.4byte	.LBE3-.LBB3
 6602 0a17 660A0000 		.4byte	0xa66
 6603 0a1b 16       		.uleb128 0x16
 6604 0a1c 8E0C0000 		.4byte	.LASF79
 6605 0a20 01       		.byte	0x1
 6606 0a21 0103     		.2byte	0x301
 6607 0a23 21030000 		.4byte	0x321
 6608 0a27 CD040000 		.4byte	.LLST31
 6609 0a2b 1D       		.uleb128 0x1d
 6610 0a2c 12000000 		.4byte	.LVL90
 6611 0a30 B9230000 		.4byte	0x23b9
 6612 0a34 410A0000 		.4byte	0xa41
 6613 0a38 1A       		.uleb128 0x1a
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 219


 6614 0a39 01       		.uleb128 0x1
 6615 0a3a 50       		.byte	0x50
 6616 0a3b 04       		.uleb128 0x4
 6617 0a3c 74       		.byte	0x74
 6618 0a3d 00       		.sleb128 0
 6619 0a3e 32       		.byte	0x32
 6620 0a3f 24       		.byte	0x24
 6621 0a40 00       		.byte	0
 6622 0a41 1D       		.uleb128 0x1d
 6623 0a42 1C000000 		.4byte	.LVL93
 6624 0a46 B9230000 		.4byte	0x23b9
 6625 0a4a 550A0000 		.4byte	0xa55
 6626 0a4e 1A       		.uleb128 0x1a
 6627 0a4f 01       		.uleb128 0x1
 6628 0a50 50       		.byte	0x50
 6629 0a51 02       		.uleb128 0x2
 6630 0a52 08       		.byte	0x8
 6631 0a53 68       		.byte	0x68
 6632 0a54 00       		.byte	0
 6633 0a55 19       		.uleb128 0x19
 6634 0a56 2A000000 		.4byte	.LVL96
 6635 0a5a 25230000 		.4byte	0x2325
 6636 0a5e 1A       		.uleb128 0x1a
 6637 0a5f 01       		.uleb128 0x1
 6638 0a60 50       		.byte	0x50
 6639 0a61 02       		.uleb128 0x2
 6640 0a62 76       		.byte	0x76
 6641 0a63 00       		.sleb128 0
 6642 0a64 00       		.byte	0
 6643 0a65 00       		.byte	0
 6644 0a66 1D       		.uleb128 0x1d
 6645 0a67 4C000000 		.4byte	.LVL99
 6646 0a6b 8E050000 		.4byte	0x58e
 6647 0a6f AB0A0000 		.4byte	0xaab
 6648 0a73 1A       		.uleb128 0x1a
 6649 0a74 01       		.uleb128 0x1
 6650 0a75 50       		.byte	0x50
 6651 0a76 03       		.uleb128 0x3
 6652 0a77 91       		.byte	0x91
 6653 0a78 60       		.sleb128 -32
 6654 0a79 06       		.byte	0x6
 6655 0a7a 1A       		.uleb128 0x1a
 6656 0a7b 01       		.uleb128 0x1
 6657 0a7c 51       		.byte	0x51
 6658 0a7d 03       		.uleb128 0x3
 6659 0a7e 91       		.byte	0x91
 6660 0a7f 64       		.sleb128 -28
 6661 0a80 06       		.byte	0x6
 6662 0a81 1A       		.uleb128 0x1a
 6663 0a82 01       		.uleb128 0x1
 6664 0a83 52       		.byte	0x52
 6665 0a84 02       		.uleb128 0x2
 6666 0a85 74       		.byte	0x74
 6667 0a86 00       		.sleb128 0
 6668 0a87 1A       		.uleb128 0x1a
 6669 0a88 01       		.uleb128 0x1
 6670 0a89 53       		.byte	0x53
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 220


 6671 0a8a 02       		.uleb128 0x2
 6672 0a8b 77       		.byte	0x77
 6673 0a8c 00       		.sleb128 0
 6674 0a8d 1A       		.uleb128 0x1a
 6675 0a8e 02       		.uleb128 0x2
 6676 0a8f 7D       		.byte	0x7d
 6677 0a90 00       		.sleb128 0
 6678 0a91 03       		.uleb128 0x3
 6679 0a92 91       		.byte	0x91
 6680 0a93 00       		.sleb128 0
 6681 0a94 06       		.byte	0x6
 6682 0a95 1A       		.uleb128 0x1a
 6683 0a96 02       		.uleb128 0x2
 6684 0a97 7D       		.byte	0x7d
 6685 0a98 04       		.sleb128 4
 6686 0a99 03       		.uleb128 0x3
 6687 0a9a 91       		.byte	0x91
 6688 0a9b 04       		.sleb128 4
 6689 0a9c 06       		.byte	0x6
 6690 0a9d 1A       		.uleb128 0x1a
 6691 0a9e 02       		.uleb128 0x2
 6692 0a9f 7D       		.byte	0x7d
 6693 0aa0 08       		.sleb128 8
 6694 0aa1 02       		.uleb128 0x2
 6695 0aa2 75       		.byte	0x75
 6696 0aa3 00       		.sleb128 0
 6697 0aa4 1A       		.uleb128 0x1a
 6698 0aa5 02       		.uleb128 0x2
 6699 0aa6 7D       		.byte	0x7d
 6700 0aa7 0C       		.sleb128 12
 6701 0aa8 01       		.uleb128 0x1
 6702 0aa9 30       		.byte	0x30
 6703 0aaa 00       		.byte	0
 6704 0aab 19       		.uleb128 0x19
 6705 0aac 52000000 		.4byte	.LVL100
 6706 0ab0 70070000 		.4byte	0x770
 6707 0ab4 1A       		.uleb128 0x1a
 6708 0ab5 01       		.uleb128 0x1
 6709 0ab6 50       		.byte	0x50
 6710 0ab7 02       		.uleb128 0x2
 6711 0ab8 75       		.byte	0x75
 6712 0ab9 00       		.sleb128 0
 6713 0aba 00       		.byte	0
 6714 0abb 00       		.byte	0
 6715 0abc 07       		.uleb128 0x7
 6716 0abd CA000000 		.4byte	0xca
 6717 0ac1 22       		.uleb128 0x22
 6718 0ac2 450B0000 		.4byte	.LASF125
 6719 0ac6 01       		.byte	0x1
 6720 0ac7 5804     		.2byte	0x458
 6721 0ac9 00000000 		.4byte	.LFB40
 6722 0acd 88000000 		.4byte	.LFE40-.LFB40
 6723 0ad1 01       		.uleb128 0x1
 6724 0ad2 9C       		.byte	0x9c
 6725 0ad3 750B0000 		.4byte	0xb75
 6726 0ad7 15       		.uleb128 0x15
 6727 0ad8 960C0000 		.4byte	.LASF116
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 221


 6728 0adc 01       		.byte	0x1
 6729 0add 5804     		.2byte	0x458
 6730 0adf 33020000 		.4byte	0x233
 6731 0ae3 01050000 		.4byte	.LLST32
 6732 0ae7 16       		.uleb128 0x16
 6733 0ae8 79100000 		.4byte	.LASF88
 6734 0aec 01       		.byte	0x1
 6735 0aed 5A04     		.2byte	0x45a
 6736 0aef 48050000 		.4byte	0x548
 6737 0af3 1F050000 		.4byte	.LLST33
 6738 0af7 18       		.uleb128 0x18
 6739 0af8 08000000 		.4byte	.LVL107
 6740 0afc 5E230000 		.4byte	0x235e
 6741 0b00 1D       		.uleb128 0x1d
 6742 0b01 18000000 		.4byte	.LVL109
 6743 0b05 8B230000 		.4byte	0x238b
 6744 0b09 140B0000 		.4byte	0xb14
 6745 0b0d 1A       		.uleb128 0x1a
 6746 0b0e 01       		.uleb128 0x1
 6747 0b0f 50       		.byte	0x50
 6748 0b10 02       		.uleb128 0x2
 6749 0b11 75       		.byte	0x75
 6750 0b12 00       		.sleb128 0
 6751 0b13 00       		.byte	0
 6752 0b14 1D       		.uleb128 0x1d
 6753 0b15 26000000 		.4byte	.LVL110
 6754 0b19 8B230000 		.4byte	0x238b
 6755 0b1d 280B0000 		.4byte	0xb28
 6756 0b21 1A       		.uleb128 0x1a
 6757 0b22 01       		.uleb128 0x1
 6758 0b23 50       		.byte	0x50
 6759 0b24 02       		.uleb128 0x2
 6760 0b25 74       		.byte	0x74
 6761 0b26 18       		.sleb128 24
 6762 0b27 00       		.byte	0
 6763 0b28 1D       		.uleb128 0x1d
 6764 0b29 3E000000 		.4byte	.LVL111
 6765 0b2d 69230000 		.4byte	0x2369
 6766 0b31 450B0000 		.4byte	0xb45
 6767 0b35 1A       		.uleb128 0x1a
 6768 0b36 01       		.uleb128 0x1
 6769 0b37 50       		.byte	0x50
 6770 0b38 05       		.uleb128 0x5
 6771 0b39 03       		.byte	0x3
 6772 0b3a E4000000 		.4byte	.LANCHOR1+100
 6773 0b3e 1A       		.uleb128 0x1a
 6774 0b3f 01       		.uleb128 0x1
 6775 0b40 51       		.byte	0x51
 6776 0b41 02       		.uleb128 0x2
 6777 0b42 75       		.byte	0x75
 6778 0b43 00       		.sleb128 0
 6779 0b44 00       		.byte	0
 6780 0b45 1D       		.uleb128 0x1d
 6781 0b46 56000000 		.4byte	.LVL112
 6782 0b4a 4E050000 		.4byte	0x54e
 6783 0b4e 590B0000 		.4byte	0xb59
 6784 0b52 1A       		.uleb128 0x1a
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 222


 6785 0b53 01       		.uleb128 0x1
 6786 0b54 50       		.byte	0x50
 6787 0b55 02       		.uleb128 0x2
 6788 0b56 74       		.byte	0x74
 6789 0b57 00       		.sleb128 0
 6790 0b58 00       		.byte	0
 6791 0b59 18       		.uleb128 0x18
 6792 0b5a 5A000000 		.4byte	.LVL113
 6793 0b5e 21050000 		.4byte	0x521
 6794 0b62 18       		.uleb128 0x18
 6795 0b63 5E000000 		.4byte	.LVL114
 6796 0b67 75230000 		.4byte	0x2375
 6797 0b6b 18       		.uleb128 0x18
 6798 0b6c 7E000000 		.4byte	.LVL115
 6799 0b70 80230000 		.4byte	0x2380
 6800 0b74 00       		.byte	0
 6801 0b75 20       		.uleb128 0x20
 6802 0b76 D8080000 		.4byte	.LASF118
 6803 0b7a 01       		.byte	0x1
 6804 0b7b 3505     		.2byte	0x535
 6805 0b7d 6F020000 		.4byte	0x26f
 6806 0b81 00000000 		.4byte	.LFB43
 6807 0b85 70000000 		.4byte	.LFE43-.LFB43
 6808 0b89 01       		.uleb128 0x1
 6809 0b8a 9C       		.byte	0x9c
 6810 0b8b E00B0000 		.4byte	0xbe0
 6811 0b8f 15       		.uleb128 0x15
 6812 0b90 150B0000 		.4byte	.LASF91
 6813 0b94 01       		.byte	0x1
 6814 0b95 3505     		.2byte	0x535
 6815 0b97 33020000 		.4byte	0x233
 6816 0b9b 3F050000 		.4byte	.LLST34
 6817 0b9f 23       		.uleb128 0x23
 6818 0ba0 D6020000 		.4byte	.LASF119
 6819 0ba4 01       		.byte	0x1
 6820 0ba5 3705     		.2byte	0x537
 6821 0ba7 6F020000 		.4byte	0x26f
 6822 0bab 01       		.uleb128 0x1
 6823 0bac 50       		.byte	0x50
 6824 0bad 16       		.uleb128 0x16
 6825 0bae 82000000 		.4byte	.LASF120
 6826 0bb2 01       		.byte	0x1
 6827 0bb3 3805     		.2byte	0x538
 6828 0bb5 E00B0000 		.4byte	0xbe0
 6829 0bb9 81050000 		.4byte	.LLST35
 6830 0bbd 16       		.uleb128 0x16
 6831 0bbe 79100000 		.4byte	.LASF88
 6832 0bc2 01       		.byte	0x1
 6833 0bc3 3905     		.2byte	0x539
 6834 0bc5 D6040000 		.4byte	0x4d6
 6835 0bc9 9F050000 		.4byte	.LLST36
 6836 0bcd 18       		.uleb128 0x18
 6837 0bce 16000000 		.4byte	.LVL120
 6838 0bd2 5E230000 		.4byte	0x235e
 6839 0bd6 18       		.uleb128 0x18
 6840 0bd7 1C000000 		.4byte	.LVL122
 6841 0bdb 75230000 		.4byte	0x2375
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 223


 6842 0bdf 00       		.byte	0
 6843 0be0 06       		.uleb128 0x6
 6844 0be1 04       		.byte	0x4
 6845 0be2 28020000 		.4byte	0x228
 6846 0be6 20       		.uleb128 0x20
 6847 0be7 85030000 		.4byte	.LASF121
 6848 0beb 01       		.byte	0x1
 6849 0bec 7C05     		.2byte	0x57c
 6850 0bee 2A010000 		.4byte	0x12a
 6851 0bf2 00000000 		.4byte	.LFB44
 6852 0bf6 20000000 		.4byte	.LFE44-.LFB44
 6853 0bfa 01       		.uleb128 0x1
 6854 0bfb 9C       		.byte	0x9c
 6855 0bfc 430C0000 		.4byte	0xc43
 6856 0c00 15       		.uleb128 0x15
 6857 0c01 150B0000 		.4byte	.LASF91
 6858 0c05 01       		.byte	0x1
 6859 0c06 7C05     		.2byte	0x57c
 6860 0c08 33020000 		.4byte	0x233
 6861 0c0c E1050000 		.4byte	.LLST37
 6862 0c10 16       		.uleb128 0x16
 6863 0c11 79100000 		.4byte	.LASF88
 6864 0c15 01       		.byte	0x1
 6865 0c16 7E05     		.2byte	0x57e
 6866 0c18 48050000 		.4byte	0x548
 6867 0c1c FF050000 		.4byte	.LLST38
 6868 0c20 16       		.uleb128 0x16
 6869 0c21 EB020000 		.4byte	.LASF122
 6870 0c25 01       		.byte	0x1
 6871 0c26 7F05     		.2byte	0x57f
 6872 0c28 2A010000 		.4byte	0x12a
 6873 0c2c 12060000 		.4byte	.LLST39
 6874 0c30 18       		.uleb128 0x18
 6875 0c31 08000000 		.4byte	.LVL129
 6876 0c35 5E230000 		.4byte	0x235e
 6877 0c39 18       		.uleb128 0x18
 6878 0c3a 16000000 		.4byte	.LVL132
 6879 0c3e 75230000 		.4byte	0x2375
 6880 0c42 00       		.byte	0
 6881 0c43 20       		.uleb128 0x20
 6882 0c44 E5090000 		.4byte	.LASF123
 6883 0c48 01       		.byte	0x1
 6884 0c49 9205     		.2byte	0x592
 6885 0c4b 2A010000 		.4byte	0x12a
 6886 0c4f 00000000 		.4byte	.LFB45
 6887 0c53 20000000 		.4byte	.LFE45-.LFB45
 6888 0c57 01       		.uleb128 0x1
 6889 0c58 9C       		.byte	0x9c
 6890 0c59 B00C0000 		.4byte	0xcb0
 6891 0c5d 15       		.uleb128 0x15
 6892 0c5e 150B0000 		.4byte	.LASF91
 6893 0c62 01       		.byte	0x1
 6894 0c63 9205     		.2byte	0x592
 6895 0c65 33020000 		.4byte	0x233
 6896 0c69 30060000 		.4byte	.LLST40
 6897 0c6d 16       		.uleb128 0x16
 6898 0c6e 79100000 		.4byte	.LASF88
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 224


 6899 0c72 01       		.byte	0x1
 6900 0c73 9405     		.2byte	0x594
 6901 0c75 48050000 		.4byte	0x548
 6902 0c79 4E060000 		.4byte	.LLST41
 6903 0c7d 16       		.uleb128 0x16
 6904 0c7e EB020000 		.4byte	.LASF122
 6905 0c82 01       		.byte	0x1
 6906 0c83 9505     		.2byte	0x595
 6907 0c85 2A010000 		.4byte	0x12a
 6908 0c89 61060000 		.4byte	.LLST42
 6909 0c8d 16       		.uleb128 0x16
 6910 0c8e C0040000 		.4byte	.LASF124
 6911 0c92 01       		.byte	0x1
 6912 0c93 9505     		.2byte	0x595
 6913 0c95 2A010000 		.4byte	0x12a
 6914 0c99 7F060000 		.4byte	.LLST43
 6915 0c9d 18       		.uleb128 0x18
 6916 0c9e 08000000 		.4byte	.LVL135
 6917 0ca2 C4230000 		.4byte	0x23c4
 6918 0ca6 18       		.uleb128 0x18
 6919 0ca7 16000000 		.4byte	.LVL138
 6920 0cab CF230000 		.4byte	0x23cf
 6921 0caf 00       		.byte	0
 6922 0cb0 22       		.uleb128 0x22
 6923 0cb1 A30A0000 		.4byte	.LASF126
 6924 0cb5 01       		.byte	0x1
 6925 0cb6 BA05     		.2byte	0x5ba
 6926 0cb8 00000000 		.4byte	.LFB46
 6927 0cbc BC000000 		.4byte	.LFE46-.LFB46
 6928 0cc0 01       		.uleb128 0x1
 6929 0cc1 9C       		.byte	0x9c
 6930 0cc2 6A0D0000 		.4byte	0xd6a
 6931 0cc6 15       		.uleb128 0x15
 6932 0cc7 150B0000 		.4byte	.LASF91
 6933 0ccb 01       		.byte	0x1
 6934 0ccc BA05     		.2byte	0x5ba
 6935 0cce 33020000 		.4byte	0x233
 6936 0cd2 92060000 		.4byte	.LLST44
 6937 0cd6 15       		.uleb128 0x15
 6938 0cd7 B8090000 		.4byte	.LASF127
 6939 0cdb 01       		.byte	0x1
 6940 0cdc BA05     		.2byte	0x5ba
 6941 0cde 2A010000 		.4byte	0x12a
 6942 0ce2 B0060000 		.4byte	.LLST45
 6943 0ce6 16       		.uleb128 0x16
 6944 0ce7 79100000 		.4byte	.LASF88
 6945 0ceb 01       		.byte	0x1
 6946 0cec BC05     		.2byte	0x5bc
 6947 0cee 48050000 		.4byte	0x548
 6948 0cf2 DA060000 		.4byte	.LLST46
 6949 0cf6 16       		.uleb128 0x16
 6950 0cf7 4E110000 		.4byte	.LASF128
 6951 0cfb 01       		.byte	0x1
 6952 0cfc BD05     		.2byte	0x5bd
 6953 0cfe 2A010000 		.4byte	0x12a
 6954 0d02 ED060000 		.4byte	.LLST47
 6955 0d06 16       		.uleb128 0x16
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 225


 6956 0d07 EF0E0000 		.4byte	.LASF129
 6957 0d0b 01       		.byte	0x1
 6958 0d0c BD05     		.2byte	0x5bd
 6959 0d0e 2A010000 		.4byte	0x12a
 6960 0d12 00070000 		.4byte	.LLST48
 6961 0d16 16       		.uleb128 0x16
 6962 0d17 76030000 		.4byte	.LASF130
 6963 0d1b 01       		.byte	0x1
 6964 0d1c BE05     		.2byte	0x5be
 6965 0d1e 1F010000 		.4byte	0x11f
 6966 0d22 13070000 		.4byte	.LLST49
 6967 0d26 18       		.uleb128 0x18
 6968 0d27 18000000 		.4byte	.LVL143
 6969 0d2b 5E230000 		.4byte	0x235e
 6970 0d2f 1D       		.uleb128 0x1d
 6971 0d30 86000000 		.4byte	.LVL149
 6972 0d34 8B230000 		.4byte	0x238b
 6973 0d38 430D0000 		.4byte	0xd43
 6974 0d3c 1A       		.uleb128 0x1a
 6975 0d3d 01       		.uleb128 0x1
 6976 0d3e 50       		.byte	0x50
 6977 0d3f 02       		.uleb128 0x2
 6978 0d40 75       		.byte	0x75
 6979 0d41 00       		.sleb128 0
 6980 0d42 00       		.byte	0
 6981 0d43 1D       		.uleb128 0x1d
 6982 0d44 A6000000 		.4byte	.LVL150
 6983 0d48 69230000 		.4byte	0x2369
 6984 0d4c 570D0000 		.4byte	0xd57
 6985 0d50 1A       		.uleb128 0x1a
 6986 0d51 01       		.uleb128 0x1
 6987 0d52 51       		.byte	0x51
 6988 0d53 02       		.uleb128 0x2
 6989 0d54 75       		.byte	0x75
 6990 0d55 00       		.sleb128 0
 6991 0d56 00       		.byte	0
 6992 0d57 18       		.uleb128 0x18
 6993 0d58 AE000000 		.4byte	.LVL151
 6994 0d5c 80230000 		.4byte	0x2380
 6995 0d60 18       		.uleb128 0x18
 6996 0d61 B2000000 		.4byte	.LVL152
 6997 0d65 75230000 		.4byte	0x2375
 6998 0d69 00       		.byte	0
 6999 0d6a 22       		.uleb128 0x22
 7000 0d6b B2100000 		.4byte	.LASF131
 7001 0d6f 01       		.byte	0x1
 7002 0d70 F106     		.2byte	0x6f1
 7003 0d72 00000000 		.4byte	.LFB49
 7004 0d76 6C000000 		.4byte	.LFE49-.LFB49
 7005 0d7a 01       		.uleb128 0x1
 7006 0d7b 9C       		.byte	0x9c
 7007 0d7c F80D0000 		.4byte	0xdf8
 7008 0d80 15       		.uleb128 0x15
 7009 0d81 40110000 		.4byte	.LASF132
 7010 0d85 01       		.byte	0x1
 7011 0d86 F106     		.2byte	0x6f1
 7012 0d88 33020000 		.4byte	0x233
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 226


 7013 0d8c 32070000 		.4byte	.LLST50
 7014 0d90 16       		.uleb128 0x16
 7015 0d91 79100000 		.4byte	.LASF88
 7016 0d95 01       		.byte	0x1
 7017 0d96 F306     		.2byte	0x6f3
 7018 0d98 F80D0000 		.4byte	0xdf8
 7019 0d9c 5E070000 		.4byte	.LLST51
 7020 0da0 18       		.uleb128 0x18
 7021 0da1 1A000000 		.4byte	.LVL156
 7022 0da5 5E230000 		.4byte	0x235e
 7023 0da9 1D       		.uleb128 0x1d
 7024 0daa 20000000 		.4byte	.LVL157
 7025 0dae 7B040000 		.4byte	0x47b
 7026 0db2 BD0D0000 		.4byte	0xdbd
 7027 0db6 1A       		.uleb128 0x1a
 7028 0db7 01       		.uleb128 0x1
 7029 0db8 50       		.byte	0x50
 7030 0db9 02       		.uleb128 0x2
 7031 0dba 74       		.byte	0x74
 7032 0dbb 00       		.sleb128 0
 7033 0dbc 00       		.byte	0
 7034 0dbd 1D       		.uleb128 0x1d
 7035 0dbe 2C000000 		.4byte	.LVL158
 7036 0dc2 8B230000 		.4byte	0x238b
 7037 0dc6 D10D0000 		.4byte	0xdd1
 7038 0dca 1A       		.uleb128 0x1a
 7039 0dcb 01       		.uleb128 0x1
 7040 0dcc 50       		.byte	0x50
 7041 0dcd 02       		.uleb128 0x2
 7042 0dce 75       		.byte	0x75
 7043 0dcf 00       		.sleb128 0
 7044 0dd0 00       		.byte	0
 7045 0dd1 1D       		.uleb128 0x1d
 7046 0dd2 4C000000 		.4byte	.LVL159
 7047 0dd6 69230000 		.4byte	0x2369
 7048 0dda E50D0000 		.4byte	0xde5
 7049 0dde 1A       		.uleb128 0x1a
 7050 0ddf 01       		.uleb128 0x1
 7051 0de0 51       		.byte	0x51
 7052 0de1 02       		.uleb128 0x2
 7053 0de2 75       		.byte	0x75
 7054 0de3 00       		.sleb128 0
 7055 0de4 00       		.byte	0
 7056 0de5 18       		.uleb128 0x18
 7057 0de6 5C000000 		.4byte	.LVL160
 7058 0dea 80230000 		.4byte	0x2380
 7059 0dee 18       		.uleb128 0x18
 7060 0def 60000000 		.4byte	.LVL161
 7061 0df3 75230000 		.4byte	0x2375
 7062 0df7 00       		.byte	0
 7063 0df8 07       		.uleb128 0x7
 7064 0df9 48050000 		.4byte	0x548
 7065 0dfd 20       		.uleb128 0x20
 7066 0dfe 490D0000 		.4byte	.LASF133
 7067 0e02 01       		.byte	0x1
 7068 0e03 2707     		.2byte	0x727
 7069 0e05 1F010000 		.4byte	0x11f
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 227


 7070 0e09 00000000 		.4byte	.LFB50
 7071 0e0d 84000000 		.4byte	.LFE50-.LFB50
 7072 0e11 01       		.uleb128 0x1
 7073 0e12 9C       		.byte	0x9c
 7074 0e13 CA0E0000 		.4byte	0xeca
 7075 0e17 15       		.uleb128 0x15
 7076 0e18 40110000 		.4byte	.LASF132
 7077 0e1c 01       		.byte	0x1
 7078 0e1d 2707     		.2byte	0x727
 7079 0e1f 33020000 		.4byte	0x233
 7080 0e23 8A070000 		.4byte	.LLST52
 7081 0e27 16       		.uleb128 0x16
 7082 0e28 76030000 		.4byte	.LASF130
 7083 0e2c 01       		.byte	0x1
 7084 0e2d 2907     		.2byte	0x729
 7085 0e2f 1F010000 		.4byte	0x11f
 7086 0e33 B6070000 		.4byte	.LLST53
 7087 0e37 16       		.uleb128 0x16
 7088 0e38 79100000 		.4byte	.LASF88
 7089 0e3c 01       		.byte	0x1
 7090 0e3d 2A07     		.2byte	0x72a
 7091 0e3f F80D0000 		.4byte	0xdf8
 7092 0e43 F7070000 		.4byte	.LLST54
 7093 0e47 16       		.uleb128 0x16
 7094 0e48 11020000 		.4byte	.LASF134
 7095 0e4c 01       		.byte	0x1
 7096 0e4d 2B07     		.2byte	0x72b
 7097 0e4f 2A010000 		.4byte	0x12a
 7098 0e53 23080000 		.4byte	.LLST55
 7099 0e57 18       		.uleb128 0x18
 7100 0e58 0E000000 		.4byte	.LVL165
 7101 0e5c C4230000 		.4byte	0x23c4
 7102 0e60 1D       		.uleb128 0x1d
 7103 0e61 16000000 		.4byte	.LVL168
 7104 0e65 7B040000 		.4byte	0x47b
 7105 0e69 740E0000 		.4byte	0xe74
 7106 0e6d 1A       		.uleb128 0x1a
 7107 0e6e 01       		.uleb128 0x1
 7108 0e6f 50       		.byte	0x50
 7109 0e70 02       		.uleb128 0x2
 7110 0e71 74       		.byte	0x74
 7111 0e72 00       		.sleb128 0
 7112 0e73 00       		.byte	0
 7113 0e74 1D       		.uleb128 0x1d
 7114 0e75 3C000000 		.4byte	.LVL170
 7115 0e79 8B230000 		.4byte	0x238b
 7116 0e7d 880E0000 		.4byte	0xe88
 7117 0e81 1A       		.uleb128 0x1a
 7118 0e82 01       		.uleb128 0x1
 7119 0e83 50       		.byte	0x50
 7120 0e84 02       		.uleb128 0x2
 7121 0e85 76       		.byte	0x76
 7122 0e86 00       		.sleb128 0
 7123 0e87 00       		.byte	0
 7124 0e88 1D       		.uleb128 0x1d
 7125 0e89 5C000000 		.4byte	.LVL171
 7126 0e8d 69230000 		.4byte	0x2369
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 228


 7127 0e91 9C0E0000 		.4byte	0xe9c
 7128 0e95 1A       		.uleb128 0x1a
 7129 0e96 01       		.uleb128 0x1
 7130 0e97 51       		.byte	0x51
 7131 0e98 02       		.uleb128 0x2
 7132 0e99 76       		.byte	0x76
 7133 0e9a 00       		.sleb128 0
 7134 0e9b 00       		.byte	0
 7135 0e9c 1D       		.uleb128 0x1d
 7136 0e9d 6A000000 		.4byte	.LVL173
 7137 0ea1 69230000 		.4byte	0x2369
 7138 0ea5 B90E0000 		.4byte	0xeb9
 7139 0ea9 1A       		.uleb128 0x1a
 7140 0eaa 01       		.uleb128 0x1
 7141 0eab 50       		.byte	0x50
 7142 0eac 05       		.uleb128 0x5
 7143 0ead 03       		.byte	0x3
 7144 0eae 14000000 		.4byte	.LANCHOR0+20
 7145 0eb2 1A       		.uleb128 0x1a
 7146 0eb3 01       		.uleb128 0x1
 7147 0eb4 51       		.byte	0x51
 7148 0eb5 02       		.uleb128 0x2
 7149 0eb6 74       		.byte	0x74
 7150 0eb7 18       		.sleb128 24
 7151 0eb8 00       		.byte	0
 7152 0eb9 19       		.uleb128 0x19
 7153 0eba 76000000 		.4byte	.LVL175
 7154 0ebe CF230000 		.4byte	0x23cf
 7155 0ec2 1A       		.uleb128 0x1a
 7156 0ec3 01       		.uleb128 0x1
 7157 0ec4 50       		.byte	0x50
 7158 0ec5 02       		.uleb128 0x2
 7159 0ec6 75       		.byte	0x75
 7160 0ec7 00       		.sleb128 0
 7161 0ec8 00       		.byte	0
 7162 0ec9 00       		.byte	0
 7163 0eca 22       		.uleb128 0x22
 7164 0ecb EF0D0000 		.4byte	.LASF135
 7165 0ecf 01       		.byte	0x1
 7166 0ed0 6D07     		.2byte	0x76d
 7167 0ed2 00000000 		.4byte	.LFB51
 7168 0ed6 5C000000 		.4byte	.LFE51-.LFB51
 7169 0eda 01       		.uleb128 0x1
 7170 0edb 9C       		.byte	0x9c
 7171 0edc 3E0F0000 		.4byte	0xf3e
 7172 0ee0 16       		.uleb128 0x16
 7173 0ee1 710D0000 		.4byte	.LASF87
 7174 0ee5 01       		.byte	0x1
 7175 0ee6 6F07     		.2byte	0x76f
 7176 0ee8 1F010000 		.4byte	0x11f
 7177 0eec 41080000 		.4byte	.LLST56
 7178 0ef0 1D       		.uleb128 0x1d
 7179 0ef1 18000000 		.4byte	.LVL179
 7180 0ef5 76090000 		.4byte	0x976
 7181 0ef9 2B0F0000 		.4byte	0xf2b
 7182 0efd 1A       		.uleb128 0x1a
 7183 0efe 01       		.uleb128 0x1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 229


 7184 0eff 50       		.byte	0x50
 7185 0f00 05       		.uleb128 0x5
 7186 0f01 03       		.byte	0x3
 7187 0f02 00000000 		.4byte	prvIdleTask
 7188 0f06 1A       		.uleb128 0x1a
 7189 0f07 01       		.uleb128 0x1
 7190 0f08 51       		.byte	0x51
 7191 0f09 05       		.uleb128 0x5
 7192 0f0a 03       		.byte	0x3
 7193 0f0b 00000000 		.4byte	.LC37
 7194 0f0f 1A       		.uleb128 0x1a
 7195 0f10 01       		.uleb128 0x1
 7196 0f11 52       		.byte	0x52
 7197 0f12 02       		.uleb128 0x2
 7198 0f13 08       		.byte	0x8
 7199 0f14 80       		.byte	0x80
 7200 0f15 1A       		.uleb128 0x1a
 7201 0f16 01       		.uleb128 0x1
 7202 0f17 53       		.byte	0x53
 7203 0f18 01       		.uleb128 0x1
 7204 0f19 30       		.byte	0x30
 7205 0f1a 1A       		.uleb128 0x1a
 7206 0f1b 02       		.uleb128 0x2
 7207 0f1c 7D       		.byte	0x7d
 7208 0f1d 00       		.sleb128 0
 7209 0f1e 01       		.uleb128 0x1
 7210 0f1f 30       		.byte	0x30
 7211 0f20 1A       		.uleb128 0x1a
 7212 0f21 02       		.uleb128 0x2
 7213 0f22 7D       		.byte	0x7d
 7214 0f23 04       		.sleb128 4
 7215 0f24 05       		.uleb128 0x5
 7216 0f25 03       		.byte	0x3
 7217 0f26 1C010000 		.4byte	.LANCHOR2+28
 7218 0f2a 00       		.byte	0
 7219 0f2b 18       		.uleb128 0x18
 7220 0f2c 20000000 		.4byte	.LVL180
 7221 0f30 DA230000 		.4byte	0x23da
 7222 0f34 18       		.uleb128 0x18
 7223 0f35 3C000000 		.4byte	.LVL181
 7224 0f39 E6230000 		.4byte	0x23e6
 7225 0f3d 00       		.byte	0
 7226 0f3e 22       		.uleb128 0x22
 7227 0f3f DC060000 		.4byte	.LASF136
 7228 0f43 01       		.byte	0x1
 7229 0f44 E507     		.2byte	0x7e5
 7230 0f46 00000000 		.4byte	.LFB52
 7231 0f4a 14000000 		.4byte	.LFE52-.LFB52
 7232 0f4e 01       		.uleb128 0x1
 7233 0f4f 9C       		.byte	0x9c
 7234 0f50 5E0F0000 		.4byte	0xf5e
 7235 0f54 18       		.uleb128 0x18
 7236 0f55 0E000000 		.4byte	.LVL184
 7237 0f59 F1230000 		.4byte	0x23f1
 7238 0f5d 00       		.byte	0
 7239 0f5e 24       		.uleb128 0x24
 7240 0f5f 68050000 		.4byte	.LASF176
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 230


 7241 0f63 01       		.byte	0x1
 7242 0f64 F007     		.2byte	0x7f0
 7243 0f66 00000000 		.4byte	.LFB53
 7244 0f6a 10000000 		.4byte	.LFE53-.LFB53
 7245 0f6e 01       		.uleb128 0x1
 7246 0f6f 9C       		.byte	0x9c
 7247 0f70 20       		.uleb128 0x20
 7248 0f71 520C0000 		.4byte	.LASF137
 7249 0f75 01       		.byte	0x1
 7250 0f76 A708     		.2byte	0x8a7
 7251 0f78 35010000 		.4byte	0x135
 7252 0f7c 00000000 		.4byte	.LFB55
 7253 0f80 0C000000 		.4byte	.LFE55-.LFB55
 7254 0f84 01       		.uleb128 0x1
 7255 0f85 9C       		.byte	0x9c
 7256 0f86 990F0000 		.4byte	0xf99
 7257 0f8a 23       		.uleb128 0x23
 7258 0f8b E80D0000 		.4byte	.LASF138
 7259 0f8f 01       		.byte	0x1
 7260 0f90 A908     		.2byte	0x8a9
 7261 0f92 35010000 		.4byte	0x135
 7262 0f96 01       		.uleb128 0x1
 7263 0f97 50       		.byte	0x50
 7264 0f98 00       		.byte	0
 7265 0f99 20       		.uleb128 0x20
 7266 0f9a A7040000 		.4byte	.LASF139
 7267 0f9e 01       		.byte	0x1
 7268 0f9f B608     		.2byte	0x8b6
 7269 0fa1 35010000 		.4byte	0x135
 7270 0fa5 00000000 		.4byte	.LFB56
 7271 0fa9 0C000000 		.4byte	.LFE56-.LFB56
 7272 0fad 01       		.uleb128 0x1
 7273 0fae 9C       		.byte	0x9c
 7274 0faf CF0F0000 		.4byte	0xfcf
 7275 0fb3 23       		.uleb128 0x23
 7276 0fb4 710D0000 		.4byte	.LASF87
 7277 0fb8 01       		.byte	0x1
 7278 0fb9 B808     		.2byte	0x8b8
 7279 0fbb 35010000 		.4byte	0x135
 7280 0fbf 01       		.uleb128 0x1
 7281 0fc0 50       		.byte	0x50
 7282 0fc1 25       		.uleb128 0x25
 7283 0fc2 11020000 		.4byte	.LASF134
 7284 0fc6 01       		.byte	0x1
 7285 0fc7 B908     		.2byte	0x8b9
 7286 0fc9 2A010000 		.4byte	0x12a
 7287 0fcd 00       		.byte	0
 7288 0fce 00       		.byte	0
 7289 0fcf 26       		.uleb128 0x26
 7290 0fd0 F4020000 		.4byte	.LASF269
 7291 0fd4 01       		.byte	0x1
 7292 0fd5 D508     		.2byte	0x8d5
 7293 0fd7 2A010000 		.4byte	0x12a
 7294 0fdb 00000000 		.4byte	.LFB57
 7295 0fdf 0C000000 		.4byte	.LFE57-.LFB57
 7296 0fe3 01       		.uleb128 0x1
 7297 0fe4 9C       		.byte	0x9c
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 231


 7298 0fe5 20       		.uleb128 0x20
 7299 0fe6 DA0D0000 		.4byte	.LASF140
 7300 0fea 01       		.byte	0x1
 7301 0feb DD08     		.2byte	0x8dd
 7302 0fed A7000000 		.4byte	0xa7
 7303 0ff1 00000000 		.4byte	.LFB58
 7304 0ff5 18000000 		.4byte	.LFE58-.LFB58
 7305 0ff9 01       		.uleb128 0x1
 7306 0ffa 9C       		.byte	0x9c
 7307 0ffb 20100000 		.4byte	0x1020
 7308 0fff 15       		.uleb128 0x15
 7309 1000 EF0A0000 		.4byte	.LASF141
 7310 1004 01       		.byte	0x1
 7311 1005 DD08     		.2byte	0x8dd
 7312 1007 33020000 		.4byte	0x233
 7313 100b 6A080000 		.4byte	.LLST57
 7314 100f 16       		.uleb128 0x16
 7315 1010 79100000 		.4byte	.LASF88
 7316 1014 01       		.byte	0x1
 7317 1015 DF08     		.2byte	0x8df
 7318 1017 48050000 		.4byte	0x548
 7319 101b 7D080000 		.4byte	.LLST58
 7320 101f 00       		.byte	0
 7321 1020 20       		.uleb128 0x20
 7322 1021 28020000 		.4byte	.LASF142
 7323 1025 01       		.byte	0x1
 7324 1026 1D0A     		.2byte	0xa1d
 7325 1028 1F010000 		.4byte	0x11f
 7326 102c 00000000 		.4byte	.LFB60
 7327 1030 E8000000 		.4byte	.LFE60-.LFB60
 7328 1034 01       		.uleb128 0x1
 7329 1035 9C       		.byte	0x9c
 7330 1036 E0100000 		.4byte	0x10e0
 7331 103a 16       		.uleb128 0x16
 7332 103b 79100000 		.4byte	.LASF88
 7333 103f 01       		.byte	0x1
 7334 1040 1F0A     		.2byte	0xa1f
 7335 1042 48050000 		.4byte	0x548
 7336 1046 9D080000 		.4byte	.LLST59
 7337 104a 16       		.uleb128 0x16
 7338 104b F90B0000 		.4byte	.LASF26
 7339 104f 01       		.byte	0x1
 7340 1050 200A     		.2byte	0xa20
 7341 1052 35010000 		.4byte	0x135
 7342 1056 BB080000 		.4byte	.LLST60
 7343 105a 16       		.uleb128 0x16
 7344 105b 80090000 		.4byte	.LASF143
 7345 105f 01       		.byte	0x1
 7346 1060 210A     		.2byte	0xa21
 7347 1062 1F010000 		.4byte	0x11f
 7348 1066 CE080000 		.4byte	.LLST61
 7349 106a 27       		.uleb128 0x27
 7350 106b 00000000 		.4byte	.Ldebug_ranges0+0
 7351 106f 16       		.uleb128 0x16
 7352 1070 FD060000 		.4byte	.LASF112
 7353 1074 01       		.byte	0x1
 7354 1075 2B0A     		.2byte	0xa2b
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 232


 7355 1077 FD080000 		.4byte	0x8fd
 7356 107b 26090000 		.4byte	.LLST62
 7357 107f 21       		.uleb128 0x21
 7358 1080 16000000 		.4byte	.LBB5
 7359 1084 26000000 		.4byte	.LBE5-.LBB5
 7360 1088 A6100000 		.4byte	0x10a6
 7361 108c 16       		.uleb128 0x16
 7362 108d 54050000 		.4byte	.LASF144
 7363 1091 01       		.byte	0x1
 7364 1092 330A     		.2byte	0xa33
 7365 1094 E00B0000 		.4byte	0xbe0
 7366 1098 39090000 		.4byte	.LLST63
 7367 109c 18       		.uleb128 0x18
 7368 109d 3C000000 		.4byte	.LVL194
 7369 10a1 21050000 		.4byte	0x521
 7370 10a5 00       		.byte	0
 7371 10a6 1D       		.uleb128 0x1d
 7372 10a7 88000000 		.4byte	.LVL201
 7373 10ab 8B230000 		.4byte	0x238b
 7374 10af BA100000 		.4byte	0x10ba
 7375 10b3 1A       		.uleb128 0x1a
 7376 10b4 01       		.uleb128 0x1
 7377 10b5 50       		.byte	0x50
 7378 10b6 02       		.uleb128 0x2
 7379 10b7 75       		.byte	0x75
 7380 10b8 00       		.sleb128 0
 7381 10b9 00       		.byte	0
 7382 10ba 1D       		.uleb128 0x1d
 7383 10bb 96000000 		.4byte	.LVL202
 7384 10bf 8B230000 		.4byte	0x238b
 7385 10c3 CE100000 		.4byte	0x10ce
 7386 10c7 1A       		.uleb128 0x1a
 7387 10c8 01       		.uleb128 0x1
 7388 10c9 50       		.byte	0x50
 7389 10ca 02       		.uleb128 0x2
 7390 10cb 76       		.byte	0x76
 7391 10cc 18       		.sleb128 24
 7392 10cd 00       		.byte	0
 7393 10ce 19       		.uleb128 0x19
 7394 10cf B6000000 		.4byte	.LVL203
 7395 10d3 69230000 		.4byte	0x2369
 7396 10d7 1A       		.uleb128 0x1a
 7397 10d8 01       		.uleb128 0x1
 7398 10d9 51       		.byte	0x51
 7399 10da 02       		.uleb128 0x2
 7400 10db 75       		.byte	0x75
 7401 10dc 00       		.sleb128 0
 7402 10dd 00       		.byte	0
 7403 10de 00       		.byte	0
 7404 10df 00       		.byte	0
 7405 10e0 20       		.uleb128 0x20
 7406 10e1 1A0C0000 		.4byte	.LASF145
 7407 10e5 01       		.byte	0x1
 7408 10e6 3908     		.2byte	0x839
 7409 10e8 1F010000 		.4byte	0x11f
 7410 10ec 00000000 		.4byte	.LFB54
 7411 10f0 D4000000 		.4byte	.LFE54-.LFB54
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 233


 7412 10f4 01       		.uleb128 0x1
 7413 10f5 9C       		.byte	0x9c
 7414 10f6 A2110000 		.4byte	0x11a2
 7415 10fa 16       		.uleb128 0x16
 7416 10fb 79100000 		.4byte	.LASF88
 7417 10ff 01       		.byte	0x1
 7418 1100 3B08     		.2byte	0x83b
 7419 1102 48050000 		.4byte	0x548
 7420 1106 4C090000 		.4byte	.LLST64
 7421 110a 16       		.uleb128 0x16
 7422 110b 5E0F0000 		.4byte	.LASF146
 7423 110f 01       		.byte	0x1
 7424 1110 3C08     		.2byte	0x83c
 7425 1112 1F010000 		.4byte	0x11f
 7426 1116 8E090000 		.4byte	.LLST65
 7427 111a 21       		.uleb128 0x21
 7428 111b 88000000 		.4byte	.LBB7
 7429 111f 22000000 		.4byte	.LBE7-.LBB7
 7430 1123 41110000 		.4byte	0x1141
 7431 1127 16       		.uleb128 0x16
 7432 1128 B8000000 		.4byte	.LASF147
 7433 112c 01       		.byte	0x1
 7434 112d 7408     		.2byte	0x874
 7435 112f 2A010000 		.4byte	0x12a
 7436 1133 D0090000 		.4byte	.LLST66
 7437 1137 18       		.uleb128 0x18
 7438 1138 94000000 		.4byte	.LVL219
 7439 113c 20100000 		.4byte	0x1020
 7440 1140 00       		.byte	0
 7441 1141 18       		.uleb128 0x18
 7442 1142 12000000 		.4byte	.LVL209
 7443 1146 5E230000 		.4byte	0x235e
 7444 114a 1D       		.uleb128 0x1d
 7445 114b 3A000000 		.4byte	.LVL212
 7446 114f 8B230000 		.4byte	0x238b
 7447 1153 5E110000 		.4byte	0x115e
 7448 1157 1A       		.uleb128 0x1a
 7449 1158 01       		.uleb128 0x1
 7450 1159 50       		.byte	0x50
 7451 115a 02       		.uleb128 0x2
 7452 115b 74       		.byte	0x74
 7453 115c 18       		.sleb128 24
 7454 115d 00       		.byte	0
 7455 115e 1D       		.uleb128 0x1d
 7456 115f 42000000 		.4byte	.LVL213
 7457 1163 8B230000 		.4byte	0x238b
 7458 1167 72110000 		.4byte	0x1172
 7459 116b 1A       		.uleb128 0x1a
 7460 116c 01       		.uleb128 0x1
 7461 116d 50       		.byte	0x50
 7462 116e 02       		.uleb128 0x2
 7463 116f 75       		.byte	0x75
 7464 1170 00       		.sleb128 0
 7465 1171 00       		.byte	0
 7466 1172 1D       		.uleb128 0x1d
 7467 1173 62000000 		.4byte	.LVL214
 7468 1177 69230000 		.4byte	0x2369
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 234


 7469 117b 86110000 		.4byte	0x1186
 7470 117f 1A       		.uleb128 0x1a
 7471 1180 01       		.uleb128 0x1
 7472 1181 51       		.byte	0x51
 7473 1182 02       		.uleb128 0x2
 7474 1183 75       		.byte	0x75
 7475 1184 00       		.sleb128 0
 7476 1185 00       		.byte	0
 7477 1186 18       		.uleb128 0x18
 7478 1187 88000000 		.4byte	.LVL217
 7479 118b 21050000 		.4byte	0x521
 7480 118f 18       		.uleb128 0x18
 7481 1190 B6000000 		.4byte	.LVL222
 7482 1194 80230000 		.4byte	0x2380
 7483 1198 18       		.uleb128 0x18
 7484 1199 C4000000 		.4byte	.LVL227
 7485 119d 75230000 		.4byte	0x2375
 7486 11a1 00       		.byte	0
 7487 11a2 22       		.uleb128 0x22
 7488 11a3 C00E0000 		.4byte	.LASF148
 7489 11a7 01       		.byte	0x1
 7490 11a8 B404     		.2byte	0x4b4
 7491 11aa 00000000 		.4byte	.LFB41
 7492 11ae 78000000 		.4byte	.LFE41-.LFB41
 7493 11b2 01       		.uleb128 0x1
 7494 11b3 9C       		.byte	0x9c
 7495 11b4 4D120000 		.4byte	0x124d
 7496 11b8 15       		.uleb128 0x15
 7497 11b9 FF0C0000 		.4byte	.LASF149
 7498 11bd 01       		.byte	0x1
 7499 11be B404     		.2byte	0x4b4
 7500 11c0 53120000 		.4byte	0x1253
 7501 11c4 EE090000 		.4byte	.LLST67
 7502 11c8 15       		.uleb128 0x15
 7503 11c9 26100000 		.4byte	.LASF150
 7504 11cd 01       		.byte	0x1
 7505 11ce B404     		.2byte	0x4b4
 7506 11d0 FD080000 		.4byte	0x8fd
 7507 11d4 1A0A0000 		.4byte	.LLST68
 7508 11d8 16       		.uleb128 0x16
 7509 11d9 5E100000 		.4byte	.LASF111
 7510 11dd 01       		.byte	0x1
 7511 11de B604     		.2byte	0x4b6
 7512 11e0 35010000 		.4byte	0x135
 7513 11e4 460A0000 		.4byte	.LLST69
 7514 11e8 16       		.uleb128 0x16
 7515 11e9 5E0F0000 		.4byte	.LASF146
 7516 11ed 01       		.byte	0x1
 7517 11ee B704     		.2byte	0x4b7
 7518 11f0 1F010000 		.4byte	0x11f
 7519 11f4 590A0000 		.4byte	.LLST70
 7520 11f8 16       		.uleb128 0x16
 7521 11f9 1B0B0000 		.4byte	.LASF151
 7522 11fd 01       		.byte	0x1
 7523 11fe B704     		.2byte	0x4b7
 7524 1200 1F010000 		.4byte	0x11f
 7525 1204 6C0A0000 		.4byte	.LLST71
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 235


 7526 1208 28       		.uleb128 0x28
 7527 1209 18000000 		.4byte	.Ldebug_ranges0+0x18
 7528 120d 31120000 		.4byte	0x1231
 7529 1211 16       		.uleb128 0x16
 7530 1212 FD060000 		.4byte	.LASF112
 7531 1216 01       		.byte	0x1
 7532 1217 C104     		.2byte	0x4c1
 7533 1219 FD080000 		.4byte	0x8fd
 7534 121d 8B0A0000 		.4byte	.LLST72
 7535 1221 19       		.uleb128 0x19
 7536 1222 66000000 		.4byte	.LVL236
 7537 1226 6F080000 		.4byte	0x86f
 7538 122a 1A       		.uleb128 0x1a
 7539 122b 01       		.uleb128 0x1
 7540 122c 51       		.byte	0x51
 7541 122d 01       		.uleb128 0x1
 7542 122e 30       		.byte	0x30
 7543 122f 00       		.byte	0
 7544 1230 00       		.byte	0
 7545 1231 18       		.uleb128 0x18
 7546 1232 26000000 		.4byte	.LVL231
 7547 1236 5E0F0000 		.4byte	0xf5e
 7548 123a 18       		.uleb128 0x18
 7549 123b 6A000000 		.4byte	.LVL237
 7550 123f E0100000 		.4byte	0x10e0
 7551 1243 18       		.uleb128 0x18
 7552 1244 72000000 		.4byte	.LVL238
 7553 1248 80230000 		.4byte	0x2380
 7554 124c 00       		.byte	0
 7555 124d 06       		.uleb128 0x6
 7556 124e 04       		.byte	0x4
 7557 124f 35010000 		.4byte	0x135
 7558 1253 07       		.uleb128 0x7
 7559 1254 4D120000 		.4byte	0x124d
 7560 1258 22       		.uleb128 0x22
 7561 1259 57070000 		.4byte	.LASF152
 7562 125d 01       		.byte	0x1
 7563 125e 0805     		.2byte	0x508
 7564 1260 00000000 		.4byte	.LFB42
 7565 1264 34000000 		.4byte	.LFE42-.LFB42
 7566 1268 01       		.uleb128 0x1
 7567 1269 9C       		.byte	0x9c
 7568 126a C3120000 		.4byte	0x12c3
 7569 126e 15       		.uleb128 0x15
 7570 126f 560E0000 		.4byte	.LASF153
 7571 1273 01       		.byte	0x1
 7572 1274 0805     		.2byte	0x508
 7573 1276 FD080000 		.4byte	0x8fd
 7574 127a 9E0A0000 		.4byte	.LLST73
 7575 127e 16       		.uleb128 0x16
 7576 127f 5E0F0000 		.4byte	.LASF146
 7577 1283 01       		.byte	0x1
 7578 1284 0A05     		.2byte	0x50a
 7579 1286 1F010000 		.4byte	0x11f
 7580 128a E00A0000 		.4byte	.LLST74
 7581 128e 18       		.uleb128 0x18
 7582 128f 16000000 		.4byte	.LVL243
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 236


 7583 1293 5E0F0000 		.4byte	0xf5e
 7584 1297 1D       		.uleb128 0x1d
 7585 1298 1E000000 		.4byte	.LVL244
 7586 129c 6F080000 		.4byte	0x86f
 7587 12a0 B0120000 		.4byte	0x12b0
 7588 12a4 1A       		.uleb128 0x1a
 7589 12a5 01       		.uleb128 0x1
 7590 12a6 50       		.byte	0x50
 7591 12a7 02       		.uleb128 0x2
 7592 12a8 74       		.byte	0x74
 7593 12a9 00       		.sleb128 0
 7594 12aa 1A       		.uleb128 0x1a
 7595 12ab 01       		.uleb128 0x1
 7596 12ac 51       		.byte	0x51
 7597 12ad 01       		.uleb128 0x1
 7598 12ae 30       		.byte	0x30
 7599 12af 00       		.byte	0
 7600 12b0 18       		.uleb128 0x18
 7601 12b1 22000000 		.4byte	.LVL245
 7602 12b5 E0100000 		.4byte	0x10e0
 7603 12b9 18       		.uleb128 0x18
 7604 12ba 2E000000 		.4byte	.LVL248
 7605 12be 80230000 		.4byte	0x2380
 7606 12c2 00       		.byte	0
 7607 12c3 22       		.uleb128 0x22
 7608 12c4 510B0000 		.4byte	.LASF154
 7609 12c8 01       		.byte	0x1
 7610 12c9 230B     		.2byte	0xb23
 7611 12cb 00000000 		.4byte	.LFB61
 7612 12cf B4000000 		.4byte	.LFE61-.LFB61
 7613 12d3 01       		.uleb128 0x1
 7614 12d4 9C       		.byte	0x9c
 7615 12d5 45130000 		.4byte	0x1345
 7616 12d9 21       		.uleb128 0x21
 7617 12da 18000000 		.4byte	.LBB11
 7618 12de 2C000000 		.4byte	.LBE11-.LBB11
 7619 12e2 10130000 		.4byte	0x1310
 7620 12e6 16       		.uleb128 0x16
 7621 12e7 2E0E0000 		.4byte	.LASF155
 7622 12eb 01       		.byte	0x1
 7623 12ec 4D0B     		.2byte	0xb4d
 7624 12ee 4B130000 		.4byte	0x134b
 7625 12f2 160B0000 		.4byte	.LLST75
 7626 12f6 16       		.uleb128 0x16
 7627 12f7 9B090000 		.4byte	.LASF156
 7628 12fb 01       		.byte	0x1
 7629 12fc 4E0B     		.2byte	0xb4e
 7630 12fe A2060000 		.4byte	0x6a2
 7631 1302 290B0000 		.4byte	.LLST76
 7632 1306 18       		.uleb128 0x18
 7633 1307 44000000 		.4byte	.LVL252
 7634 130b FC230000 		.4byte	0x23fc
 7635 130f 00       		.byte	0
 7636 1310 1E       		.uleb128 0x1e
 7637 1311 44000000 		.4byte	.LBB12
 7638 1315 62000000 		.4byte	.LBE12-.LBB12
 7639 1319 16       		.uleb128 0x16
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 237


 7640 131a B20E0000 		.4byte	.LASF157
 7641 131e 01       		.byte	0x1
 7642 131f 5B0B     		.2byte	0xb5b
 7643 1321 2A010000 		.4byte	0x12a
 7644 1325 410B0000 		.4byte	.LLST77
 7645 1329 1E       		.uleb128 0x1e
 7646 132a 64000000 		.4byte	.LBB13
 7647 132e 40000000 		.4byte	.LBE13-.LBB13
 7648 1332 16       		.uleb128 0x16
 7649 1333 76000000 		.4byte	.LASF158
 7650 1337 01       		.byte	0x1
 7651 1338 5B0B     		.2byte	0xb5b
 7652 133a 50130000 		.4byte	0x1350
 7653 133e 540B0000 		.4byte	.LLST78
 7654 1342 00       		.byte	0
 7655 1343 00       		.byte	0
 7656 1344 00       		.byte	0
 7657 1345 06       		.uleb128 0x6
 7658 1346 04       		.byte	0x4
 7659 1347 A2060000 		.4byte	0x6a2
 7660 134b 07       		.uleb128 0x7
 7661 134c 45130000 		.4byte	0x1345
 7662 1350 07       		.uleb128 0x7
 7663 1351 E00B0000 		.4byte	0xbe0
 7664 1355 22       		.uleb128 0x22
 7665 1356 360F0000 		.4byte	.LASF159
 7666 135a 01       		.byte	0x1
 7667 135b 5E06     		.2byte	0x65e
 7668 135d 00000000 		.4byte	.LFB47
 7669 1361 9C000000 		.4byte	.LFE47-.LFB47
 7670 1365 01       		.uleb128 0x1
 7671 1366 9C       		.byte	0x9c
 7672 1367 10140000 		.4byte	0x1410
 7673 136b 15       		.uleb128 0x15
 7674 136c AC0C0000 		.4byte	.LASF160
 7675 1370 01       		.byte	0x1
 7676 1371 5E06     		.2byte	0x65e
 7677 1373 33020000 		.4byte	0x233
 7678 1377 710B0000 		.4byte	.LLST79
 7679 137b 16       		.uleb128 0x16
 7680 137c 79100000 		.4byte	.LASF88
 7681 1380 01       		.byte	0x1
 7682 1381 6006     		.2byte	0x660
 7683 1383 48050000 		.4byte	0x548
 7684 1387 8F0B0000 		.4byte	.LLST80
 7685 138b 18       		.uleb128 0x18
 7686 138c 08000000 		.4byte	.LVL258
 7687 1390 5E230000 		.4byte	0x235e
 7688 1394 1D       		.uleb128 0x1d
 7689 1395 18000000 		.4byte	.LVL260
 7690 1399 8B230000 		.4byte	0x238b
 7691 139d A8130000 		.4byte	0x13a8
 7692 13a1 1A       		.uleb128 0x1a
 7693 13a2 01       		.uleb128 0x1
 7694 13a3 50       		.byte	0x50
 7695 13a4 02       		.uleb128 0x2
 7696 13a5 75       		.byte	0x75
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 238


 7697 13a6 00       		.sleb128 0
 7698 13a7 00       		.byte	0
 7699 13a8 1D       		.uleb128 0x1d
 7700 13a9 26000000 		.4byte	.LVL261
 7701 13ad 8B230000 		.4byte	0x238b
 7702 13b1 BC130000 		.4byte	0x13bc
 7703 13b5 1A       		.uleb128 0x1a
 7704 13b6 01       		.uleb128 0x1
 7705 13b7 50       		.byte	0x50
 7706 13b8 02       		.uleb128 0x2
 7707 13b9 74       		.byte	0x74
 7708 13ba 18       		.sleb128 24
 7709 13bb 00       		.byte	0
 7710 13bc 1D       		.uleb128 0x1d
 7711 13bd 2E000000 		.4byte	.LVL262
 7712 13c1 69230000 		.4byte	0x2369
 7713 13c5 D9130000 		.4byte	0x13d9
 7714 13c9 1A       		.uleb128 0x1a
 7715 13ca 01       		.uleb128 0x1
 7716 13cb 50       		.byte	0x50
 7717 13cc 05       		.uleb128 0x5
 7718 13cd 03       		.byte	0x3
 7719 13ce 00000000 		.4byte	.LANCHOR0
 7720 13d2 1A       		.uleb128 0x1a
 7721 13d3 01       		.uleb128 0x1
 7722 13d4 51       		.byte	0x51
 7723 13d5 02       		.uleb128 0x2
 7724 13d6 75       		.byte	0x75
 7725 13d7 00       		.sleb128 0
 7726 13d8 00       		.byte	0
 7727 13d9 18       		.uleb128 0x18
 7728 13da 40000000 		.4byte	.LVL263
 7729 13de 75230000 		.4byte	0x2375
 7730 13e2 18       		.uleb128 0x18
 7731 13e3 4C000000 		.4byte	.LVL264
 7732 13e7 5E230000 		.4byte	0x235e
 7733 13eb 18       		.uleb128 0x18
 7734 13ec 50000000 		.4byte	.LVL265
 7735 13f0 21050000 		.4byte	0x521
 7736 13f4 18       		.uleb128 0x18
 7737 13f5 54000000 		.4byte	.LVL266
 7738 13f9 75230000 		.4byte	0x2375
 7739 13fd 18       		.uleb128 0x18
 7740 13fe 74000000 		.4byte	.LVL267
 7741 1402 80230000 		.4byte	0x2380
 7742 1406 18       		.uleb128 0x18
 7743 1407 8E000000 		.4byte	.LVL268
 7744 140b C3120000 		.4byte	0x12c3
 7745 140f 00       		.byte	0
 7746 1410 22       		.uleb128 0x22
 7747 1411 9E0B0000 		.4byte	.LASF161
 7748 1415 01       		.byte	0x1
 7749 1416 690B     		.2byte	0xb69
 7750 1418 00000000 		.4byte	.LFB62
 7751 141c 24000000 		.4byte	.LFE62-.LFB62
 7752 1420 01       		.uleb128 0x1
 7753 1421 9C       		.byte	0x9c
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 239


 7754 1422 65140000 		.4byte	0x1465
 7755 1426 15       		.uleb128 0x15
 7756 1427 51010000 		.4byte	.LASF162
 7757 142b 01       		.byte	0x1
 7758 142c 690B     		.2byte	0xb69
 7759 142e 50130000 		.4byte	0x1350
 7760 1432 AF0B0000 		.4byte	.LLST81
 7761 1436 15       		.uleb128 0x15
 7762 1437 0B0F0000 		.4byte	.LASF109
 7763 143b 01       		.byte	0x1
 7764 143c 690B     		.2byte	0xb69
 7765 143e FD080000 		.4byte	0x8fd
 7766 1442 D00B0000 		.4byte	.LLST82
 7767 1446 18       		.uleb128 0x18
 7768 1447 16000000 		.4byte	.LVL273
 7769 144b 97230000 		.4byte	0x2397
 7770 144f 19       		.uleb128 0x19
 7771 1450 1E000000 		.4byte	.LVL274
 7772 1454 6F080000 		.4byte	0x86f
 7773 1458 1A       		.uleb128 0x1a
 7774 1459 01       		.uleb128 0x1
 7775 145a 50       		.byte	0x50
 7776 145b 02       		.uleb128 0x2
 7777 145c 74       		.byte	0x74
 7778 145d 00       		.sleb128 0
 7779 145e 1A       		.uleb128 0x1a
 7780 145f 01       		.uleb128 0x1
 7781 1460 51       		.byte	0x51
 7782 1461 01       		.uleb128 0x1
 7783 1462 31       		.byte	0x31
 7784 1463 00       		.byte	0
 7785 1464 00       		.byte	0
 7786 1465 22       		.uleb128 0x22
 7787 1466 6F0E0000 		.4byte	.LASF163
 7788 146a 01       		.byte	0x1
 7789 146b 7A0B     		.2byte	0xb7a
 7790 146d 00000000 		.4byte	.LFB63
 7791 1471 3C000000 		.4byte	.LFE63-.LFB63
 7792 1475 01       		.uleb128 0x1
 7793 1476 9C       		.byte	0x9c
 7794 1477 CA140000 		.4byte	0x14ca
 7795 147b 15       		.uleb128 0x15
 7796 147c 51010000 		.4byte	.LASF162
 7797 1480 01       		.byte	0x1
 7798 1481 7A0B     		.2byte	0xb7a
 7799 1483 E00B0000 		.4byte	0xbe0
 7800 1487 FC0B0000 		.4byte	.LLST83
 7801 148b 15       		.uleb128 0x15
 7802 148c F90B0000 		.4byte	.LASF26
 7803 1490 01       		.byte	0x1
 7804 1491 7A0B     		.2byte	0xb7a
 7805 1493 FD080000 		.4byte	0x8fd
 7806 1497 1D0C0000 		.4byte	.LLST84
 7807 149b 15       		.uleb128 0x15
 7808 149c 0B0F0000 		.4byte	.LASF109
 7809 14a0 01       		.byte	0x1
 7810 14a1 7A0B     		.2byte	0xb7a
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 240


 7811 14a3 FD080000 		.4byte	0x8fd
 7812 14a7 3E0C0000 		.4byte	.LLST85
 7813 14ab 18       		.uleb128 0x18
 7814 14ac 2C000000 		.4byte	.LVL279
 7815 14b0 69230000 		.4byte	0x2369
 7816 14b4 19       		.uleb128 0x19
 7817 14b5 34000000 		.4byte	.LVL280
 7818 14b9 6F080000 		.4byte	0x86f
 7819 14bd 1A       		.uleb128 0x1a
 7820 14be 01       		.uleb128 0x1
 7821 14bf 50       		.byte	0x50
 7822 14c0 02       		.uleb128 0x2
 7823 14c1 74       		.byte	0x74
 7824 14c2 00       		.sleb128 0
 7825 14c3 1A       		.uleb128 0x1a
 7826 14c4 01       		.uleb128 0x1
 7827 14c5 51       		.byte	0x51
 7828 14c6 01       		.uleb128 0x1
 7829 14c7 31       		.byte	0x31
 7830 14c8 00       		.byte	0
 7831 14c9 00       		.byte	0
 7832 14ca 22       		.uleb128 0x22
 7833 14cb 61080000 		.4byte	.LASF164
 7834 14cf 01       		.byte	0x1
 7835 14d0 940B     		.2byte	0xb94
 7836 14d2 00000000 		.4byte	.LFB64
 7837 14d6 30000000 		.4byte	.LFE64-.LFB64
 7838 14da 01       		.uleb128 0x1
 7839 14db 9C       		.byte	0x9c
 7840 14dc 30150000 		.4byte	0x1530
 7841 14e0 15       		.uleb128 0x15
 7842 14e1 51010000 		.4byte	.LASF162
 7843 14e5 01       		.byte	0x1
 7844 14e6 940B     		.2byte	0xb94
 7845 14e8 50130000 		.4byte	0x1350
 7846 14ec 6A0C0000 		.4byte	.LLST86
 7847 14f0 15       		.uleb128 0x15
 7848 14f1 0B0F0000 		.4byte	.LASF109
 7849 14f5 01       		.byte	0x1
 7850 14f6 940B     		.2byte	0xb94
 7851 14f8 35010000 		.4byte	0x135
 7852 14fc 8B0C0000 		.4byte	.LLST87
 7853 1500 15       		.uleb128 0x15
 7854 1501 B3060000 		.4byte	.LASF165
 7855 1505 01       		.byte	0x1
 7856 1506 940B     		.2byte	0xb94
 7857 1508 F8080000 		.4byte	0x8f8
 7858 150c C20C0000 		.4byte	.LLST88
 7859 1510 18       		.uleb128 0x18
 7860 1511 18000000 		.4byte	.LVL284
 7861 1515 69230000 		.4byte	0x2369
 7862 1519 19       		.uleb128 0x19
 7863 151a 28000000 		.4byte	.LVL287
 7864 151e 6F080000 		.4byte	0x86f
 7865 1522 1A       		.uleb128 0x1a
 7866 1523 01       		.uleb128 0x1
 7867 1524 50       		.byte	0x50
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 241


 7868 1525 02       		.uleb128 0x2
 7869 1526 74       		.byte	0x74
 7870 1527 00       		.sleb128 0
 7871 1528 1A       		.uleb128 0x1a
 7872 1529 01       		.uleb128 0x1
 7873 152a 51       		.byte	0x51
 7874 152b 02       		.uleb128 0x2
 7875 152c 75       		.byte	0x75
 7876 152d 00       		.sleb128 0
 7877 152e 00       		.byte	0
 7878 152f 00       		.byte	0
 7879 1530 20       		.uleb128 0x20
 7880 1531 C2070000 		.4byte	.LASF166
 7881 1535 01       		.byte	0x1
 7882 1536 B30B     		.2byte	0xbb3
 7883 1538 1F010000 		.4byte	0x11f
 7884 153c 00000000 		.4byte	.LFB65
 7885 1540 78000000 		.4byte	.LFE65-.LFB65
 7886 1544 01       		.uleb128 0x1
 7887 1545 9C       		.byte	0x9c
 7888 1546 D0150000 		.4byte	0x15d0
 7889 154a 15       		.uleb128 0x15
 7890 154b 51010000 		.4byte	.LASF162
 7891 154f 01       		.byte	0x1
 7892 1550 B30B     		.2byte	0xbb3
 7893 1552 DB150000 		.4byte	0x15db
 7894 1556 EE0C0000 		.4byte	.LLST89
 7895 155a 16       		.uleb128 0x16
 7896 155b B0030000 		.4byte	.LASF167
 7897 155f 01       		.byte	0x1
 7898 1560 B50B     		.2byte	0xbb5
 7899 1562 48050000 		.4byte	0x548
 7900 1566 0F0D0000 		.4byte	.LLST90
 7901 156a 16       		.uleb128 0x16
 7902 156b 710D0000 		.4byte	.LASF87
 7903 156f 01       		.byte	0x1
 7904 1570 B60B     		.2byte	0xbb6
 7905 1572 1F010000 		.4byte	0x11f
 7906 1576 220D0000 		.4byte	.LLST91
 7907 157a 1D       		.uleb128 0x1d
 7908 157b 18000000 		.4byte	.LVL293
 7909 157f 8B230000 		.4byte	0x238b
 7910 1583 8E150000 		.4byte	0x158e
 7911 1587 1A       		.uleb128 0x1a
 7912 1588 01       		.uleb128 0x1
 7913 1589 50       		.byte	0x50
 7914 158a 02       		.uleb128 0x2
 7915 158b 75       		.byte	0x75
 7916 158c 00       		.sleb128 0
 7917 158d 00       		.byte	0
 7918 158e 1D       		.uleb128 0x1d
 7919 158f 28000000 		.4byte	.LVL294
 7920 1593 8B230000 		.4byte	0x238b
 7921 1597 A2150000 		.4byte	0x15a2
 7922 159b 1A       		.uleb128 0x1a
 7923 159c 01       		.uleb128 0x1
 7924 159d 50       		.byte	0x50
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 242


 7925 159e 02       		.uleb128 0x2
 7926 159f 75       		.byte	0x75
 7927 15a0 00       		.sleb128 0
 7928 15a1 00       		.byte	0
 7929 15a2 1D       		.uleb128 0x1d
 7930 15a3 48000000 		.4byte	.LVL295
 7931 15a7 69230000 		.4byte	0x2369
 7932 15ab B6150000 		.4byte	0x15b6
 7933 15af 1A       		.uleb128 0x1a
 7934 15b0 01       		.uleb128 0x1
 7935 15b1 51       		.byte	0x51
 7936 15b2 02       		.uleb128 0x2
 7937 15b3 75       		.byte	0x75
 7938 15b4 00       		.sleb128 0
 7939 15b5 00       		.byte	0
 7940 15b6 19       		.uleb128 0x19
 7941 15b7 54000000 		.4byte	.LVL296
 7942 15bb 69230000 		.4byte	0x2369
 7943 15bf 1A       		.uleb128 0x1a
 7944 15c0 01       		.uleb128 0x1
 7945 15c1 50       		.byte	0x50
 7946 15c2 05       		.uleb128 0x5
 7947 15c3 03       		.byte	0x3
 7948 15c4 14000000 		.4byte	.LANCHOR0+20
 7949 15c8 1A       		.uleb128 0x1a
 7950 15c9 01       		.uleb128 0x1
 7951 15ca 51       		.byte	0x51
 7952 15cb 02       		.uleb128 0x2
 7953 15cc 75       		.byte	0x75
 7954 15cd 00       		.sleb128 0
 7955 15ce 00       		.byte	0
 7956 15cf 00       		.byte	0
 7957 15d0 06       		.uleb128 0x6
 7958 15d1 04       		.byte	0x4
 7959 15d2 D6150000 		.4byte	0x15d6
 7960 15d6 07       		.uleb128 0x7
 7961 15d7 28020000 		.4byte	0x228
 7962 15db 07       		.uleb128 0x7
 7963 15dc D0150000 		.4byte	0x15d0
 7964 15e0 22       		.uleb128 0x22
 7965 15e1 87070000 		.4byte	.LASF168
 7966 15e5 01       		.byte	0x1
 7967 15e6 F70B     		.2byte	0xbf7
 7968 15e8 00000000 		.4byte	.LFB66
 7969 15ec 68000000 		.4byte	.LFE66-.LFB66
 7970 15f0 01       		.uleb128 0x1
 7971 15f1 9C       		.byte	0x9c
 7972 15f2 54160000 		.4byte	0x1654
 7973 15f6 15       		.uleb128 0x15
 7974 15f7 DC100000 		.4byte	.LASF169
 7975 15fb 01       		.byte	0x1
 7976 15fc F70B     		.2byte	0xbf7
 7977 15fe 22020000 		.4byte	0x222
 7978 1602 410D0000 		.4byte	.LLST92
 7979 1606 15       		.uleb128 0x15
 7980 1607 F90B0000 		.4byte	.LASF26
 7981 160b 01       		.byte	0x1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 243


 7982 160c F70B     		.2byte	0xbf7
 7983 160e FD080000 		.4byte	0x8fd
 7984 1612 620D0000 		.4byte	.LLST93
 7985 1616 16       		.uleb128 0x16
 7986 1617 B0030000 		.4byte	.LASF167
 7987 161b 01       		.byte	0x1
 7988 161c F90B     		.2byte	0xbf9
 7989 161e 48050000 		.4byte	0x548
 7990 1622 830D0000 		.4byte	.LLST94
 7991 1626 18       		.uleb128 0x18
 7992 1627 24000000 		.4byte	.LVL304
 7993 162b 8B230000 		.4byte	0x238b
 7994 162f 1D       		.uleb128 0x1d
 7995 1630 2C000000 		.4byte	.LVL305
 7996 1634 8B230000 		.4byte	0x238b
 7997 1638 43160000 		.4byte	0x1643
 7998 163c 1A       		.uleb128 0x1a
 7999 163d 01       		.uleb128 0x1
 8000 163e 50       		.byte	0x50
 8001 163f 02       		.uleb128 0x2
 8002 1640 75       		.byte	0x75
 8003 1641 00       		.sleb128 0
 8004 1642 00       		.byte	0
 8005 1643 19       		.uleb128 0x19
 8006 1644 4C000000 		.4byte	.LVL306
 8007 1648 69230000 		.4byte	0x2369
 8008 164c 1A       		.uleb128 0x1a
 8009 164d 01       		.uleb128 0x1
 8010 164e 51       		.byte	0x51
 8011 164f 02       		.uleb128 0x2
 8012 1650 75       		.byte	0x75
 8013 1651 00       		.sleb128 0
 8014 1652 00       		.byte	0
 8015 1653 00       		.byte	0
 8016 1654 22       		.uleb128 0x22
 8017 1655 08050000 		.4byte	.LASF170
 8018 1659 01       		.byte	0x1
 8019 165a 190C     		.2byte	0xc19
 8020 165c 00000000 		.4byte	.LFB67
 8021 1660 24000000 		.4byte	.LFE67-.LFB67
 8022 1664 01       		.uleb128 0x1
 8023 1665 9C       		.byte	0x9c
 8024 1666 8D160000 		.4byte	0x168d
 8025 166a 15       		.uleb128 0x15
 8026 166b DB090000 		.4byte	.LASF171
 8027 166f 01       		.byte	0x1
 8028 1670 190C     		.2byte	0xc19
 8029 1672 93160000 		.4byte	0x1693
 8030 1676 A30D0000 		.4byte	.LLST95
 8031 167a 18       		.uleb128 0x18
 8032 167b 0E000000 		.4byte	.LVL310
 8033 167f 5E230000 		.4byte	0x235e
 8034 1683 18       		.uleb128 0x18
 8035 1684 1C000000 		.4byte	.LVL311
 8036 1688 75230000 		.4byte	0x2375
 8037 168c 00       		.byte	0
 8038 168d 06       		.uleb128 0x6
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 244


 8039 168e 04       		.byte	0x4
 8040 168f D5020000 		.4byte	0x2d5
 8041 1693 07       		.uleb128 0x7
 8042 1694 8D160000 		.4byte	0x168d
 8043 1698 22       		.uleb128 0x22
 8044 1699 430A0000 		.4byte	.LASF172
 8045 169d 01       		.byte	0x1
 8046 169e 250C     		.2byte	0xc25
 8047 16a0 00000000 		.4byte	.LFB68
 8048 16a4 10000000 		.4byte	.LFE68-.LFB68
 8049 16a8 01       		.uleb128 0x1
 8050 16a9 9C       		.byte	0x9c
 8051 16aa BD160000 		.4byte	0x16bd
 8052 16ae 1B       		.uleb128 0x1b
 8053 16af DB090000 		.4byte	.LASF171
 8054 16b3 01       		.byte	0x1
 8055 16b4 250C     		.2byte	0xc25
 8056 16b6 93160000 		.4byte	0x1693
 8057 16ba 01       		.uleb128 0x1
 8058 16bb 50       		.byte	0x50
 8059 16bc 00       		.byte	0
 8060 16bd 20       		.uleb128 0x20
 8061 16be BB0C0000 		.4byte	.LASF173
 8062 16c2 01       		.byte	0x1
 8063 16c3 2D0C     		.2byte	0xc2d
 8064 16c5 1F010000 		.4byte	0x11f
 8065 16c9 00000000 		.4byte	.LFB69
 8066 16cd 64000000 		.4byte	.LFE69-.LFB69
 8067 16d1 01       		.uleb128 0x1
 8068 16d2 9C       		.byte	0x9c
 8069 16d3 58170000 		.4byte	0x1758
 8070 16d7 15       		.uleb128 0x15
 8071 16d8 DB090000 		.4byte	.LASF171
 8072 16dc 01       		.byte	0x1
 8073 16dd 2D0C     		.2byte	0xc2d
 8074 16df 93160000 		.4byte	0x1693
 8075 16e3 CF0D0000 		.4byte	.LLST96
 8076 16e7 15       		.uleb128 0x15
 8077 16e8 95060000 		.4byte	.LASF174
 8078 16ec 01       		.byte	0x1
 8079 16ed 2D0C     		.2byte	0xc2d
 8080 16ef 53120000 		.4byte	0x1253
 8081 16f3 FB0D0000 		.4byte	.LLST97
 8082 16f7 16       		.uleb128 0x16
 8083 16f8 710D0000 		.4byte	.LASF87
 8084 16fc 01       		.byte	0x1
 8085 16fd 2F0C     		.2byte	0xc2f
 8086 16ff 1F010000 		.4byte	0x11f
 8087 1703 720E0000 		.4byte	.LLST98
 8088 1707 21       		.uleb128 0x21
 8089 1708 1A000000 		.4byte	.LBB14
 8090 170c 3C000000 		.4byte	.LBE14-.LBB14
 8091 1710 45170000 		.4byte	0x1745
 8092 1714 16       		.uleb128 0x16
 8093 1715 FD060000 		.4byte	.LASF112
 8094 1719 01       		.byte	0x1
 8095 171a 370C     		.2byte	0xc37
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 245


 8096 171c FD080000 		.4byte	0x8fd
 8097 1720 A80E0000 		.4byte	.LLST99
 8098 1724 16       		.uleb128 0x16
 8099 1725 70040000 		.4byte	.LASF175
 8100 1729 01       		.byte	0x1
 8101 172a 380C     		.2byte	0xc38
 8102 172c FD080000 		.4byte	0x8fd
 8103 1730 C60E0000 		.4byte	.LLST100
 8104 1734 19       		.uleb128 0x19
 8105 1735 44000000 		.4byte	.LVL319
 8106 1739 98160000 		.4byte	0x1698
 8107 173d 1A       		.uleb128 0x1a
 8108 173e 01       		.uleb128 0x1
 8109 173f 50       		.byte	0x50
 8110 1740 02       		.uleb128 0x2
 8111 1741 75       		.byte	0x75
 8112 1742 00       		.sleb128 0
 8113 1743 00       		.byte	0
 8114 1744 00       		.byte	0
 8115 1745 18       		.uleb128 0x18
 8116 1746 1A000000 		.4byte	.LVL315
 8117 174a 5E230000 		.4byte	0x235e
 8118 174e 18       		.uleb128 0x18
 8119 174f 5A000000 		.4byte	.LVL328
 8120 1753 75230000 		.4byte	0x2375
 8121 1757 00       		.byte	0
 8122 1758 24       		.uleb128 0x24
 8123 1759 820D0000 		.4byte	.LASF177
 8124 175d 01       		.byte	0x1
 8125 175e 6C0C     		.2byte	0xc6c
 8126 1760 00000000 		.4byte	.LFB70
 8127 1764 0C000000 		.4byte	.LFE70-.LFB70
 8128 1768 01       		.uleb128 0x1
 8129 1769 9C       		.byte	0x9c
 8130 176a 20       		.uleb128 0x20
 8131 176b AE0F0000 		.4byte	.LASF178
 8132 176f 01       		.byte	0x1
 8133 1770 740C     		.2byte	0xc74
 8134 1772 2A010000 		.4byte	0x12a
 8135 1776 00000000 		.4byte	.LFB71
 8136 177a 0C000000 		.4byte	.LFE71-.LFB71
 8137 177e 01       		.uleb128 0x1
 8138 177f 9C       		.byte	0x9c
 8139 1780 B5170000 		.4byte	0x17b5
 8140 1784 15       		.uleb128 0x15
 8141 1785 150B0000 		.4byte	.LASF91
 8142 1789 01       		.byte	0x1
 8143 178a 740C     		.2byte	0xc74
 8144 178c 33020000 		.4byte	0x233
 8145 1790 E40E0000 		.4byte	.LLST101
 8146 1794 16       		.uleb128 0x16
 8147 1795 EB020000 		.4byte	.LASF122
 8148 1799 01       		.byte	0x1
 8149 179a 760C     		.2byte	0xc76
 8150 179c 2A010000 		.4byte	0x12a
 8151 17a0 1E0F0000 		.4byte	.LLST102
 8152 17a4 16       		.uleb128 0x16
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 246


 8153 17a5 79100000 		.4byte	.LASF88
 8154 17a9 01       		.byte	0x1
 8155 17aa 770C     		.2byte	0xc77
 8156 17ac 48050000 		.4byte	0x548
 8157 17b0 3C0F0000 		.4byte	.LLST103
 8158 17b4 00       		.byte	0
 8159 17b5 22       		.uleb128 0x22
 8160 17b6 7B0C0000 		.4byte	.LASF179
 8161 17ba 01       		.byte	0x1
 8162 17bb 8B0C     		.2byte	0xc8b
 8163 17bd 00000000 		.4byte	.LFB72
 8164 17c1 08000000 		.4byte	.LFE72-.LFB72
 8165 17c5 01       		.uleb128 0x1
 8166 17c6 9C       		.byte	0x9c
 8167 17c7 F8170000 		.4byte	0x17f8
 8168 17cb 1B       		.uleb128 0x1b
 8169 17cc 150B0000 		.4byte	.LASF91
 8170 17d0 01       		.byte	0x1
 8171 17d1 8B0C     		.2byte	0xc8b
 8172 17d3 33020000 		.4byte	0x233
 8173 17d7 01       		.uleb128 0x1
 8174 17d8 50       		.byte	0x50
 8175 17d9 1B       		.uleb128 0x1b
 8176 17da 37110000 		.4byte	.LASF180
 8177 17de 01       		.byte	0x1
 8178 17df 8B0C     		.2byte	0xc8b
 8179 17e1 F8170000 		.4byte	0x17f8
 8180 17e5 01       		.uleb128 0x1
 8181 17e6 51       		.byte	0x51
 8182 17e7 16       		.uleb128 0x16
 8183 17e8 79100000 		.4byte	.LASF88
 8184 17ec 01       		.byte	0x1
 8185 17ed 8D0C     		.2byte	0xc8d
 8186 17ef 48050000 		.4byte	0x548
 8187 17f3 5D0F0000 		.4byte	.LLST104
 8188 17f7 00       		.byte	0
 8189 17f8 07       		.uleb128 0x7
 8190 17f9 2A010000 		.4byte	0x12a
 8191 17fd 22       		.uleb128 0x22
 8192 17fe ED0F0000 		.4byte	.LASF181
 8193 1802 01       		.byte	0x1
 8194 1803 420D     		.2byte	0xd42
 8195 1805 00000000 		.4byte	.LFB74
 8196 1809 1C000000 		.4byte	.LFE74-.LFB74
 8197 180d 01       		.uleb128 0x1
 8198 180e 9C       		.byte	0x9c
 8199 180f 52180000 		.4byte	0x1852
 8200 1813 15       		.uleb128 0x15
 8201 1814 0D070000 		.4byte	.LASF182
 8202 1818 01       		.byte	0x1
 8203 1819 420D     		.2byte	0xd42
 8204 181b 33020000 		.4byte	0x233
 8205 181f 700F0000 		.4byte	.LLST105
 8206 1823 15       		.uleb128 0x15
 8207 1824 330D0000 		.4byte	.LASF183
 8208 1828 01       		.byte	0x1
 8209 1829 420D     		.2byte	0xd42
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 247


 8210 182b 1F010000 		.4byte	0x11f
 8211 182f 830F0000 		.4byte	.LLST106
 8212 1833 1B       		.uleb128 0x1b
 8213 1834 EC100000 		.4byte	.LASF184
 8214 1838 01       		.byte	0x1
 8215 1839 420D     		.2byte	0xd42
 8216 183b A5000000 		.4byte	0xa5
 8217 183f 01       		.uleb128 0x1
 8218 1840 52       		.byte	0x52
 8219 1841 16       		.uleb128 0x16
 8220 1842 79100000 		.4byte	.LASF88
 8221 1846 01       		.byte	0x1
 8222 1847 440D     		.2byte	0xd44
 8223 1849 48050000 		.4byte	0x548
 8224 184d B10F0000 		.4byte	.LLST107
 8225 1851 00       		.byte	0
 8226 1852 20       		.uleb128 0x20
 8227 1853 28050000 		.4byte	.LASF185
 8228 1857 01       		.byte	0x1
 8229 1858 520D     		.2byte	0xd52
 8230 185a A5000000 		.4byte	0xa5
 8231 185e 00000000 		.4byte	.LFB75
 8232 1862 20000000 		.4byte	.LFE75-.LFB75
 8233 1866 01       		.uleb128 0x1
 8234 1867 9C       		.byte	0x9c
 8235 1868 AD180000 		.4byte	0x18ad
 8236 186c 15       		.uleb128 0x15
 8237 186d EF0A0000 		.4byte	.LASF141
 8238 1871 01       		.byte	0x1
 8239 1872 520D     		.2byte	0xd52
 8240 1874 33020000 		.4byte	0x233
 8241 1878 C40F0000 		.4byte	.LLST108
 8242 187c 15       		.uleb128 0x15
 8243 187d 330D0000 		.4byte	.LASF183
 8244 1881 01       		.byte	0x1
 8245 1882 520D     		.2byte	0xd52
 8246 1884 1F010000 		.4byte	0x11f
 8247 1888 E20F0000 		.4byte	.LLST109
 8248 188c 16       		.uleb128 0x16
 8249 188d 4B050000 		.4byte	.LASF186
 8250 1891 01       		.byte	0x1
 8251 1892 540D     		.2byte	0xd54
 8252 1894 A5000000 		.4byte	0xa5
 8253 1898 29100000 		.4byte	.LLST110
 8254 189c 16       		.uleb128 0x16
 8255 189d 79100000 		.4byte	.LASF88
 8256 18a1 01       		.byte	0x1
 8257 18a2 550D     		.2byte	0xd55
 8258 18a4 48050000 		.4byte	0x548
 8259 18a8 5F100000 		.4byte	.LLST111
 8260 18ac 00       		.byte	0
 8261 18ad 22       		.uleb128 0x22
 8262 18ae DE020000 		.4byte	.LASF187
 8263 18b2 01       		.byte	0x1
 8264 18b3 B60D     		.2byte	0xdb6
 8265 18b5 00000000 		.4byte	.LFB78
 8266 18b9 78000000 		.4byte	.LFE78-.LFB78
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 248


 8267 18bd 01       		.uleb128 0x1
 8268 18be 9C       		.byte	0x9c
 8269 18bf 43190000 		.4byte	0x1943
 8270 18c3 15       		.uleb128 0x15
 8271 18c4 150B0000 		.4byte	.LASF91
 8272 18c8 01       		.byte	0x1
 8273 18c9 B60D     		.2byte	0xdb6
 8274 18cb 33020000 		.4byte	0x233
 8275 18cf 72100000 		.4byte	.LLST112
 8276 18d3 15       		.uleb128 0x15
 8277 18d4 EE070000 		.4byte	.LASF188
 8278 18d8 01       		.byte	0x1
 8279 18d9 B60D     		.2byte	0xdb6
 8280 18db 43190000 		.4byte	0x1943
 8281 18df 85100000 		.4byte	.LLST113
 8282 18e3 15       		.uleb128 0x15
 8283 18e4 7B060000 		.4byte	.LASF189
 8284 18e8 01       		.byte	0x1
 8285 18e9 B60D     		.2byte	0xdb6
 8286 18eb 1F010000 		.4byte	0x11f
 8287 18ef C7100000 		.4byte	.LLST114
 8288 18f3 15       		.uleb128 0x15
 8289 18f4 B30D0000 		.4byte	.LASF190
 8290 18f8 01       		.byte	0x1
 8291 18f9 B60D     		.2byte	0xdb6
 8292 18fb 6F020000 		.4byte	0x26f
 8293 18ff F3100000 		.4byte	.LLST115
 8294 1903 16       		.uleb128 0x16
 8295 1904 79100000 		.4byte	.LASF88
 8296 1908 01       		.byte	0x1
 8297 1909 B80D     		.2byte	0xdb8
 8298 190b 48050000 		.4byte	0x548
 8299 190f 46110000 		.4byte	.LLST116
 8300 1913 18       		.uleb128 0x18
 8301 1914 46000000 		.4byte	.LVL357
 8302 1918 5E0F0000 		.4byte	0xf5e
 8303 191c 18       		.uleb128 0x18
 8304 191d 54000000 		.4byte	.LVL358
 8305 1921 E0100000 		.4byte	0x10e0
 8306 1925 1D       		.uleb128 0x1d
 8307 1926 5C000000 		.4byte	.LVL360
 8308 192a 750B0000 		.4byte	0xb75
 8309 192e 39190000 		.4byte	0x1939
 8310 1932 1A       		.uleb128 0x1a
 8311 1933 01       		.uleb128 0x1
 8312 1934 50       		.byte	0x50
 8313 1935 02       		.uleb128 0x2
 8314 1936 75       		.byte	0x75
 8315 1937 00       		.sleb128 0
 8316 1938 00       		.byte	0
 8317 1939 18       		.uleb128 0x18
 8318 193a 68000000 		.4byte	.LVL361
 8319 193e DB040000 		.4byte	0x4db
 8320 1942 00       		.byte	0
 8321 1943 06       		.uleb128 0x6
 8322 1944 04       		.byte	0x4
 8323 1945 A0030000 		.4byte	0x3a0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 249


 8324 1949 14       		.uleb128 0x14
 8325 194a 2E000000 		.4byte	.LASF191
 8326 194e 01       		.byte	0x1
 8327 194f 160E     		.2byte	0xe16
 8328 1951 2A010000 		.4byte	0x12a
 8329 1955 00000000 		.4byte	.LFB79
 8330 1959 6A000000 		.4byte	.LFE79-.LFB79
 8331 195d 01       		.uleb128 0x1
 8332 195e 9C       		.byte	0x9c
 8333 195f 2D1A0000 		.4byte	0x1a2d
 8334 1963 15       		.uleb128 0x15
 8335 1964 BA0D0000 		.4byte	.LASF192
 8336 1968 01       		.byte	0x1
 8337 1969 160E     		.2byte	0xe16
 8338 196b 43190000 		.4byte	0x1943
 8339 196f 59110000 		.4byte	.LLST117
 8340 1973 15       		.uleb128 0x15
 8341 1974 D5100000 		.4byte	.LASF193
 8342 1978 01       		.byte	0x1
 8343 1979 160E     		.2byte	0xe16
 8344 197b E00B0000 		.4byte	0xbe0
 8345 197f 9B110000 		.4byte	.LLST118
 8346 1983 15       		.uleb128 0x15
 8347 1984 B30D0000 		.4byte	.LASF190
 8348 1988 01       		.byte	0x1
 8349 1989 160E     		.2byte	0xe16
 8350 198b 6F020000 		.4byte	0x26f
 8351 198f DD110000 		.4byte	.LLST119
 8352 1993 16       		.uleb128 0x16
 8353 1994 41100000 		.4byte	.LASF194
 8354 1998 01       		.byte	0x1
 8355 1999 180E     		.2byte	0xe18
 8356 199b 48050000 		.4byte	0x548
 8357 199f 17120000 		.4byte	.LLST120
 8358 19a3 16       		.uleb128 0x16
 8359 19a4 880F0000 		.4byte	.LASF195
 8360 19a8 01       		.byte	0x1
 8361 19a9 180E     		.2byte	0xe18
 8362 19ab 48050000 		.4byte	0x548
 8363 19af 2A120000 		.4byte	.LLST121
 8364 19b3 16       		.uleb128 0x16
 8365 19b4 820A0000 		.4byte	.LASF196
 8366 19b8 01       		.byte	0x1
 8367 19b9 190E     		.2byte	0xe19
 8368 19bb 2A010000 		.4byte	0x12a
 8369 19bf 3D120000 		.4byte	.LLST122
 8370 19c3 21       		.uleb128 0x21
 8371 19c4 16000000 		.4byte	.LBB15
 8372 19c8 18000000 		.4byte	.LBE15-.LBB15
 8373 19cc E1190000 		.4byte	0x19e1
 8374 19d0 16       		.uleb128 0x16
 8375 19d1 76000000 		.4byte	.LASF158
 8376 19d5 01       		.byte	0x1
 8377 19d6 1D0E     		.2byte	0xe1d
 8378 19d8 50130000 		.4byte	0x1350
 8379 19dc 7E120000 		.4byte	.LLST123
 8380 19e0 00       		.byte	0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 250


 8381 19e1 21       		.uleb128 0x21
 8382 19e2 30000000 		.4byte	.LBB16
 8383 19e6 12000000 		.4byte	.LBE16-.LBB16
 8384 19ea FF190000 		.4byte	0x19ff
 8385 19ee 16       		.uleb128 0x16
 8386 19ef 76000000 		.4byte	.LASF158
 8387 19f3 01       		.byte	0x1
 8388 19f4 250E     		.2byte	0xe25
 8389 19f6 50130000 		.4byte	0x1350
 8390 19fa 9C120000 		.4byte	.LLST124
 8391 19fe 00       		.byte	0
 8392 19ff 19       		.uleb128 0x19
 8393 1a00 54000000 		.4byte	.LVL372
 8394 1a04 AD180000 		.4byte	0x18ad
 8395 1a08 1A       		.uleb128 0x1a
 8396 1a09 01       		.uleb128 0x1
 8397 1a0a 50       		.byte	0x50
 8398 1a0b 02       		.uleb128 0x2
 8399 1a0c 77       		.byte	0x77
 8400 1a0d 00       		.sleb128 0
 8401 1a0e 1A       		.uleb128 0x1a
 8402 1a0f 01       		.uleb128 0x1
 8403 1a10 51       		.byte	0x51
 8404 1a11 0C       		.uleb128 0xc
 8405 1a12 74       		.byte	0x74
 8406 1a13 00       		.sleb128 0
 8407 1a14 33       		.byte	0x33
 8408 1a15 24       		.byte	0x24
 8409 1a16 74       		.byte	0x74
 8410 1a17 00       		.sleb128 0
 8411 1a18 22       		.byte	0x22
 8412 1a19 32       		.byte	0x32
 8413 1a1a 24       		.byte	0x24
 8414 1a1b 79       		.byte	0x79
 8415 1a1c 00       		.sleb128 0
 8416 1a1d 22       		.byte	0x22
 8417 1a1e 1A       		.uleb128 0x1a
 8418 1a1f 01       		.uleb128 0x1
 8419 1a20 52       		.byte	0x52
 8420 1a21 01       		.uleb128 0x1
 8421 1a22 31       		.byte	0x31
 8422 1a23 1A       		.uleb128 0x1a
 8423 1a24 01       		.uleb128 0x1
 8424 1a25 53       		.byte	0x53
 8425 1a26 04       		.uleb128 0x4
 8426 1a27 91       		.byte	0x91
 8427 1a28 5C       		.sleb128 -36
 8428 1a29 94       		.byte	0x94
 8429 1a2a 01       		.byte	0x1
 8430 1a2b 00       		.byte	0
 8431 1a2c 00       		.byte	0
 8432 1a2d 20       		.uleb128 0x20
 8433 1a2e 62090000 		.4byte	.LASF197
 8434 1a32 01       		.byte	0x1
 8435 1a33 6909     		.2byte	0x969
 8436 1a35 2A010000 		.4byte	0x12a
 8437 1a39 00000000 		.4byte	.LFB59
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 251


 8438 1a3d B0000000 		.4byte	.LFE59-.LFB59
 8439 1a41 01       		.uleb128 0x1
 8440 1a42 9C       		.byte	0x9c
 8441 1a43 791B0000 		.4byte	0x1b79
 8442 1a47 15       		.uleb128 0x15
 8443 1a48 BA0D0000 		.4byte	.LASF192
 8444 1a4c 01       		.byte	0x1
 8445 1a4d 6909     		.2byte	0x969
 8446 1a4f 791B0000 		.4byte	0x1b79
 8447 1a53 AF120000 		.4byte	.LLST125
 8448 1a57 15       		.uleb128 0x15
 8449 1a58 030E0000 		.4byte	.LASF198
 8450 1a5c 01       		.byte	0x1
 8451 1a5d 6909     		.2byte	0x969
 8452 1a5f F8170000 		.4byte	0x17f8
 8453 1a63 DB120000 		.4byte	.LLST126
 8454 1a67 15       		.uleb128 0x15
 8455 1a68 C7010000 		.4byte	.LASF199
 8456 1a6c 01       		.byte	0x1
 8457 1a6d 6909     		.2byte	0x969
 8458 1a6f 841B0000 		.4byte	0x1b84
 8459 1a73 20130000 		.4byte	.LLST127
 8460 1a77 16       		.uleb128 0x16
 8461 1a78 820A0000 		.4byte	.LASF196
 8462 1a7c 01       		.byte	0x1
 8463 1a7d 6B09     		.2byte	0x96b
 8464 1a7f 2A010000 		.4byte	0x12a
 8465 1a83 4C130000 		.4byte	.LLST128
 8466 1a87 16       		.uleb128 0x16
 8467 1a88 EF080000 		.4byte	.LASF200
 8468 1a8c 01       		.byte	0x1
 8469 1a8d 6B09     		.2byte	0x96b
 8470 1a8f 2A010000 		.4byte	0x12a
 8471 1a93 8D130000 		.4byte	.LLST129
 8472 1a97 18       		.uleb128 0x18
 8473 1a98 10000000 		.4byte	.LVL381
 8474 1a9c 5E0F0000 		.4byte	0xf5e
 8475 1aa0 1D       		.uleb128 0x1d
 8476 1aa1 38000000 		.4byte	.LVL385
 8477 1aa5 49190000 		.4byte	0x1949
 8478 1aa9 D61A0000 		.4byte	0x1ad6
 8479 1aad 1A       		.uleb128 0x1a
 8480 1aae 01       		.uleb128 0x1
 8481 1aaf 50       		.byte	0x50
 8482 1ab0 0C       		.uleb128 0xc
 8483 1ab1 75       		.byte	0x75
 8484 1ab2 00       		.sleb128 0
 8485 1ab3 33       		.byte	0x33
 8486 1ab4 24       		.byte	0x24
 8487 1ab5 75       		.byte	0x75
 8488 1ab6 00       		.sleb128 0
 8489 1ab7 22       		.byte	0x22
 8490 1ab8 32       		.byte	0x32
 8491 1ab9 24       		.byte	0x24
 8492 1aba 76       		.byte	0x76
 8493 1abb 00       		.sleb128 0
 8494 1abc 22       		.byte	0x22
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 252


 8495 1abd 1A       		.uleb128 0x1a
 8496 1abe 01       		.uleb128 0x1
 8497 1abf 51       		.byte	0x51
 8498 1ac0 0F       		.uleb128 0xf
 8499 1ac1 74       		.byte	0x74
 8500 1ac2 00       		.sleb128 0
 8501 1ac3 32       		.byte	0x32
 8502 1ac4 24       		.byte	0x24
 8503 1ac5 74       		.byte	0x74
 8504 1ac6 00       		.sleb128 0
 8505 1ac7 22       		.byte	0x22
 8506 1ac8 32       		.byte	0x32
 8507 1ac9 24       		.byte	0x24
 8508 1aca 03       		.byte	0x3
 8509 1acb 30000000 		.4byte	.LANCHOR0+48
 8510 1acf 22       		.byte	0x22
 8511 1ad0 1A       		.uleb128 0x1a
 8512 1ad1 01       		.uleb128 0x1
 8513 1ad2 52       		.byte	0x52
 8514 1ad3 01       		.uleb128 0x1
 8515 1ad4 31       		.byte	0x31
 8516 1ad5 00       		.byte	0
 8517 1ad6 1D       		.uleb128 0x1d
 8518 1ad7 50000000 		.4byte	.LVL388
 8519 1adb 49190000 		.4byte	0x1949
 8520 1adf F91A0000 		.4byte	0x1af9
 8521 1ae3 1A       		.uleb128 0x1a
 8522 1ae4 01       		.uleb128 0x1
 8523 1ae5 50       		.byte	0x50
 8524 1ae6 0C       		.uleb128 0xc
 8525 1ae7 75       		.byte	0x75
 8526 1ae8 00       		.sleb128 0
 8527 1ae9 33       		.byte	0x33
 8528 1aea 24       		.byte	0x24
 8529 1aeb 75       		.byte	0x75
 8530 1aec 00       		.sleb128 0
 8531 1aed 22       		.byte	0x22
 8532 1aee 32       		.byte	0x32
 8533 1aef 24       		.byte	0x24
 8534 1af0 76       		.byte	0x76
 8535 1af1 00       		.sleb128 0
 8536 1af2 22       		.byte	0x22
 8537 1af3 1A       		.uleb128 0x1a
 8538 1af4 01       		.uleb128 0x1
 8539 1af5 52       		.byte	0x52
 8540 1af6 01       		.uleb128 0x1
 8541 1af7 32       		.byte	0x32
 8542 1af8 00       		.byte	0
 8543 1af9 1D       		.uleb128 0x1d
 8544 1afa 66000000 		.4byte	.LVL390
 8545 1afe 49190000 		.4byte	0x1949
 8546 1b02 1C1B0000 		.4byte	0x1b1c
 8547 1b06 1A       		.uleb128 0x1a
 8548 1b07 01       		.uleb128 0x1
 8549 1b08 50       		.byte	0x50
 8550 1b09 0C       		.uleb128 0xc
 8551 1b0a 75       		.byte	0x75
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 253


 8552 1b0b 00       		.sleb128 0
 8553 1b0c 33       		.byte	0x33
 8554 1b0d 24       		.byte	0x24
 8555 1b0e 75       		.byte	0x75
 8556 1b0f 00       		.sleb128 0
 8557 1b10 22       		.byte	0x22
 8558 1b11 32       		.byte	0x32
 8559 1b12 24       		.byte	0x24
 8560 1b13 76       		.byte	0x76
 8561 1b14 00       		.sleb128 0
 8562 1b15 22       		.byte	0x22
 8563 1b16 1A       		.uleb128 0x1a
 8564 1b17 01       		.uleb128 0x1
 8565 1b18 52       		.byte	0x52
 8566 1b19 01       		.uleb128 0x1
 8567 1b1a 32       		.byte	0x32
 8568 1b1b 00       		.byte	0
 8569 1b1c 1D       		.uleb128 0x1d
 8570 1b1d 7A000000 		.4byte	.LVL392
 8571 1b21 49190000 		.4byte	0x1949
 8572 1b25 461B0000 		.4byte	0x1b46
 8573 1b29 1A       		.uleb128 0x1a
 8574 1b2a 01       		.uleb128 0x1
 8575 1b2b 50       		.byte	0x50
 8576 1b2c 0C       		.uleb128 0xc
 8577 1b2d 75       		.byte	0x75
 8578 1b2e 00       		.sleb128 0
 8579 1b2f 33       		.byte	0x33
 8580 1b30 24       		.byte	0x24
 8581 1b31 75       		.byte	0x75
 8582 1b32 00       		.sleb128 0
 8583 1b33 22       		.byte	0x22
 8584 1b34 32       		.byte	0x32
 8585 1b35 24       		.byte	0x24
 8586 1b36 76       		.byte	0x76
 8587 1b37 00       		.sleb128 0
 8588 1b38 22       		.byte	0x22
 8589 1b39 1A       		.uleb128 0x1a
 8590 1b3a 01       		.uleb128 0x1
 8591 1b3b 51       		.byte	0x51
 8592 1b3c 03       		.uleb128 0x3
 8593 1b3d 78       		.byte	0x78
 8594 1b3e E400     		.sleb128 100
 8595 1b40 1A       		.uleb128 0x1a
 8596 1b41 01       		.uleb128 0x1
 8597 1b42 52       		.byte	0x52
 8598 1b43 01       		.uleb128 0x1
 8599 1b44 34       		.byte	0x34
 8600 1b45 00       		.byte	0
 8601 1b46 1D       		.uleb128 0x1d
 8602 1b47 8C000000 		.4byte	.LVL394
 8603 1b4b 49190000 		.4byte	0x1949
 8604 1b4f 6F1B0000 		.4byte	0x1b6f
 8605 1b53 1A       		.uleb128 0x1a
 8606 1b54 01       		.uleb128 0x1
 8607 1b55 50       		.byte	0x50
 8608 1b56 0C       		.uleb128 0xc
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 254


 8609 1b57 75       		.byte	0x75
 8610 1b58 00       		.sleb128 0
 8611 1b59 33       		.byte	0x33
 8612 1b5a 24       		.byte	0x24
 8613 1b5b 75       		.byte	0x75
 8614 1b5c 00       		.sleb128 0
 8615 1b5d 22       		.byte	0x22
 8616 1b5e 32       		.byte	0x32
 8617 1b5f 24       		.byte	0x24
 8618 1b60 76       		.byte	0x76
 8619 1b61 00       		.sleb128 0
 8620 1b62 22       		.byte	0x22
 8621 1b63 1A       		.uleb128 0x1a
 8622 1b64 01       		.uleb128 0x1
 8623 1b65 51       		.byte	0x51
 8624 1b66 02       		.uleb128 0x2
 8625 1b67 74       		.byte	0x74
 8626 1b68 00       		.sleb128 0
 8627 1b69 1A       		.uleb128 0x1a
 8628 1b6a 01       		.uleb128 0x1
 8629 1b6b 52       		.byte	0x52
 8630 1b6c 01       		.uleb128 0x1
 8631 1b6d 33       		.byte	0x33
 8632 1b6e 00       		.byte	0
 8633 1b6f 18       		.uleb128 0x18
 8634 1b70 9E000000 		.4byte	.LVL398
 8635 1b74 E0100000 		.4byte	0x10e0
 8636 1b78 00       		.byte	0
 8637 1b79 07       		.uleb128 0x7
 8638 1b7a 43190000 		.4byte	0x1943
 8639 1b7e 06       		.uleb128 0x6
 8640 1b7f 04       		.byte	0x4
 8641 1b80 D5000000 		.4byte	0xd5
 8642 1b84 07       		.uleb128 0x7
 8643 1b85 7E1B0000 		.4byte	0x1b7e
 8644 1b89 20       		.uleb128 0x20
 8645 1b8a 80050000 		.4byte	.LASF201
 8646 1b8e 01       		.byte	0x1
 8647 1b8f 4B0E     		.2byte	0xe4b
 8648 1b91 2A010000 		.4byte	0x12a
 8649 1b95 00000000 		.4byte	.LFB81
 8650 1b99 18000000 		.4byte	.LFE81-.LFB81
 8651 1b9d 01       		.uleb128 0x1
 8652 1b9e 9C       		.byte	0x9c
 8653 1b9f EB1B0000 		.4byte	0x1beb
 8654 1ba3 15       		.uleb128 0x15
 8655 1ba4 150B0000 		.4byte	.LASF91
 8656 1ba8 01       		.byte	0x1
 8657 1ba9 4B0E     		.2byte	0xe4b
 8658 1bab 33020000 		.4byte	0x233
 8659 1baf B8130000 		.4byte	.LLST130
 8660 1bb3 16       		.uleb128 0x16
 8661 1bb4 79100000 		.4byte	.LASF88
 8662 1bb8 01       		.byte	0x1
 8663 1bb9 4D0E     		.2byte	0xe4d
 8664 1bbb 48050000 		.4byte	0x548
 8665 1bbf CB130000 		.4byte	.LLST131
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 255


 8666 1bc3 16       		.uleb128 0x16
 8667 1bc4 CC0D0000 		.4byte	.LASF202
 8668 1bc8 01       		.byte	0x1
 8669 1bc9 4E0E     		.2byte	0xe4e
 8670 1bcb 40010000 		.4byte	0x140
 8671 1bcf EB130000 		.4byte	.LLST132
 8672 1bd3 23       		.uleb128 0x23
 8673 1bd4 EB020000 		.4byte	.LASF122
 8674 1bd8 01       		.byte	0x1
 8675 1bd9 4F0E     		.2byte	0xe4f
 8676 1bdb 2A010000 		.4byte	0x12a
 8677 1bdf 01       		.uleb128 0x1
 8678 1be0 50       		.byte	0x50
 8679 1be1 18       		.uleb128 0x18
 8680 1be2 10000000 		.4byte	.LVL405
 8681 1be6 DB040000 		.4byte	0x4db
 8682 1bea 00       		.byte	0
 8683 1beb 20       		.uleb128 0x20
 8684 1bec 6E0F0000 		.4byte	.LASF203
 8685 1bf0 01       		.byte	0x1
 8686 1bf1 B70E     		.2byte	0xeb7
 8687 1bf3 33020000 		.4byte	0x233
 8688 1bf7 00000000 		.4byte	.LFB84
 8689 1bfb 0C000000 		.4byte	.LFE84-.LFB84
 8690 1bff 01       		.uleb128 0x1
 8691 1c00 9C       		.byte	0x9c
 8692 1c01 141C0000 		.4byte	0x1c14
 8693 1c05 23       		.uleb128 0x23
 8694 1c06 710D0000 		.4byte	.LASF87
 8695 1c0a 01       		.byte	0x1
 8696 1c0b B90E     		.2byte	0xeb9
 8697 1c0d 33020000 		.4byte	0x233
 8698 1c11 01       		.uleb128 0x1
 8699 1c12 50       		.byte	0x50
 8700 1c13 00       		.byte	0
 8701 1c14 20       		.uleb128 0x20
 8702 1c15 FB000000 		.4byte	.LASF204
 8703 1c19 01       		.byte	0x1
 8704 1c1a C80E     		.2byte	0xec8
 8705 1c1c 1F010000 		.4byte	0x11f
 8706 1c20 00000000 		.4byte	.LFB85
 8707 1c24 20000000 		.4byte	.LFE85-.LFB85
 8708 1c28 01       		.uleb128 0x1
 8709 1c29 9C       		.byte	0x9c
 8710 1c2a 3D1C0000 		.4byte	0x1c3d
 8711 1c2e 23       		.uleb128 0x23
 8712 1c2f 710D0000 		.4byte	.LASF87
 8713 1c33 01       		.byte	0x1
 8714 1c34 CA0E     		.2byte	0xeca
 8715 1c36 1F010000 		.4byte	0x11f
 8716 1c3a 01       		.uleb128 0x1
 8717 1c3b 50       		.byte	0x50
 8718 1c3c 00       		.byte	0
 8719 1c3d 22       		.uleb128 0x22
 8720 1c3e 7F100000 		.4byte	.LASF205
 8721 1c42 01       		.byte	0x1
 8722 1c43 4A10     		.2byte	0x104a
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 256


 8723 1c45 00000000 		.4byte	.LFB87
 8724 1c49 D0000000 		.4byte	.LFE87-.LFB87
 8725 1c4d 01       		.uleb128 0x1
 8726 1c4e 9C       		.byte	0x9c
 8727 1c4f 1D1D0000 		.4byte	0x1d1d
 8728 1c53 15       		.uleb128 0x15
 8729 1c54 4D020000 		.4byte	.LASF206
 8730 1c58 01       		.byte	0x1
 8731 1c59 4A10     		.2byte	0x104a
 8732 1c5b A7000000 		.4byte	0xa7
 8733 1c5f FE130000 		.4byte	.LLST133
 8734 1c63 16       		.uleb128 0x16
 8735 1c64 BA0D0000 		.4byte	.LASF192
 8736 1c68 01       		.byte	0x1
 8737 1c69 4C10     		.2byte	0x104c
 8738 1c6b 43190000 		.4byte	0x1943
 8739 1c6f 32140000 		.4byte	.LLST134
 8740 1c73 23       		.uleb128 0x23
 8741 1c74 030E0000 		.4byte	.LASF198
 8742 1c78 01       		.byte	0x1
 8743 1c79 4D10     		.2byte	0x104d
 8744 1c7b 1D020000 		.4byte	0x21d
 8745 1c7f 02       		.uleb128 0x2
 8746 1c80 91       		.byte	0x91
 8747 1c81 6C       		.sleb128 -20
 8748 1c82 29       		.uleb128 0x29
 8749 1c83 7800     		.ascii	"x\000"
 8750 1c85 01       		.byte	0x1
 8751 1c86 4D10     		.2byte	0x104d
 8752 1c88 1D020000 		.4byte	0x21d
 8753 1c8c 02       		.uleb128 0x2
 8754 1c8d 91       		.byte	0x91
 8755 1c8e 68       		.sleb128 -24
 8756 1c8f 16       		.uleb128 0x16
 8757 1c90 78050000 		.4byte	.LASF207
 8758 1c94 01       		.byte	0x1
 8759 1c95 4E10     		.2byte	0x104e
 8760 1c97 AD000000 		.4byte	0xad
 8761 1c9b 50140000 		.4byte	.LLST135
 8762 1c9f 18       		.uleb128 0x18
 8763 1ca0 1C000000 		.4byte	.LVL410
 8764 1ca4 B9230000 		.4byte	0x23b9
 8765 1ca8 1D       		.uleb128 0x1d
 8766 1ca9 28000000 		.4byte	.LVL412
 8767 1cad 2D1A0000 		.4byte	0x1a2d
 8768 1cb1 C11C0000 		.4byte	0x1cc1
 8769 1cb5 1A       		.uleb128 0x1a
 8770 1cb6 01       		.uleb128 0x1
 8771 1cb7 50       		.byte	0x50
 8772 1cb8 02       		.uleb128 0x2
 8773 1cb9 76       		.byte	0x76
 8774 1cba 00       		.sleb128 0
 8775 1cbb 1A       		.uleb128 0x1a
 8776 1cbc 01       		.uleb128 0x1
 8777 1cbd 52       		.byte	0x52
 8778 1cbe 01       		.uleb128 0x1
 8779 1cbf 30       		.byte	0x30
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 257


 8780 1cc0 00       		.byte	0
 8781 1cc1 1D       		.uleb128 0x1d
 8782 1cc2 70000000 		.4byte	.LVL419
 8783 1cc6 02090000 		.4byte	0x902
 8784 1cca D51C0000 		.4byte	0x1cd5
 8785 1cce 1A       		.uleb128 0x1a
 8786 1ccf 01       		.uleb128 0x1
 8787 1cd0 50       		.byte	0x50
 8788 1cd1 02       		.uleb128 0x2
 8789 1cd2 74       		.byte	0x74
 8790 1cd3 00       		.sleb128 0
 8791 1cd4 00       		.byte	0
 8792 1cd5 1D       		.uleb128 0x1d
 8793 1cd6 A4000000 		.4byte	.LVL422
 8794 1cda 08240000 		.4byte	0x2408
 8795 1cde F81C0000 		.4byte	0x1cf8
 8796 1ce2 1A       		.uleb128 0x1a
 8797 1ce3 01       		.uleb128 0x1
 8798 1ce4 50       		.byte	0x50
 8799 1ce5 02       		.uleb128 0x2
 8800 1ce6 74       		.byte	0x74
 8801 1ce7 00       		.sleb128 0
 8802 1ce8 1A       		.uleb128 0x1a
 8803 1ce9 01       		.uleb128 0x1
 8804 1cea 51       		.byte	0x51
 8805 1ceb 05       		.uleb128 0x5
 8806 1cec 03       		.byte	0x3
 8807 1ced 08000000 		.4byte	.LC90
 8808 1cf1 1A       		.uleb128 0x1a
 8809 1cf2 01       		.uleb128 0x1
 8810 1cf3 52       		.byte	0x52
 8811 1cf4 02       		.uleb128 0x2
 8812 1cf5 75       		.byte	0x75
 8813 1cf6 00       		.sleb128 0
 8814 1cf7 00       		.byte	0
 8815 1cf8 1D       		.uleb128 0x1d
 8816 1cf9 AA000000 		.4byte	.LVL423
 8817 1cfd AE230000 		.4byte	0x23ae
 8818 1d01 0C1D0000 		.4byte	0x1d0c
 8819 1d05 1A       		.uleb128 0x1a
 8820 1d06 01       		.uleb128 0x1
 8821 1d07 50       		.byte	0x50
 8822 1d08 02       		.uleb128 0x2
 8823 1d09 74       		.byte	0x74
 8824 1d0a 00       		.sleb128 0
 8825 1d0b 00       		.byte	0
 8826 1d0c 19       		.uleb128 0x19
 8827 1d0d C0000000 		.4byte	.LVL426
 8828 1d11 25230000 		.4byte	0x2325
 8829 1d15 1A       		.uleb128 0x1a
 8830 1d16 01       		.uleb128 0x1
 8831 1d17 50       		.byte	0x50
 8832 1d18 02       		.uleb128 0x2
 8833 1d19 76       		.byte	0x76
 8834 1d1a 00       		.sleb128 0
 8835 1d1b 00       		.byte	0
 8836 1d1c 00       		.byte	0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 258


 8837 1d1d 20       		.uleb128 0x20
 8838 1d1e 890A0000 		.4byte	.LASF208
 8839 1d22 01       		.byte	0x1
 8840 1d23 2911     		.2byte	0x1129
 8841 1d25 35010000 		.4byte	0x135
 8842 1d29 00000000 		.4byte	.LFB88
 8843 1d2d 18000000 		.4byte	.LFE88-.LFB88
 8844 1d31 01       		.uleb128 0x1
 8845 1d32 9C       		.byte	0x9c
 8846 1d33 461D0000 		.4byte	0x1d46
 8847 1d37 23       		.uleb128 0x23
 8848 1d38 EB020000 		.4byte	.LASF122
 8849 1d3c 01       		.byte	0x1
 8850 1d3d 2B11     		.2byte	0x112b
 8851 1d3f 35010000 		.4byte	0x135
 8852 1d43 01       		.uleb128 0x1
 8853 1d44 50       		.byte	0x50
 8854 1d45 00       		.byte	0
 8855 1d46 20       		.uleb128 0x20
 8856 1d47 50080000 		.4byte	.LASF209
 8857 1d4b 01       		.byte	0x1
 8858 1d4c 4A11     		.2byte	0x114a
 8859 1d4e D5000000 		.4byte	0xd5
 8860 1d52 00000000 		.4byte	.LFB89
 8861 1d56 6C000000 		.4byte	.LFE89-.LFB89
 8862 1d5a 01       		.uleb128 0x1
 8863 1d5b 9C       		.byte	0x9c
 8864 1d5c D71D0000 		.4byte	0x1dd7
 8865 1d60 15       		.uleb128 0x15
 8866 1d61 5E040000 		.4byte	.LASF210
 8867 1d65 01       		.byte	0x1
 8868 1d66 4A11     		.2byte	0x114a
 8869 1d68 1F010000 		.4byte	0x11f
 8870 1d6c 96140000 		.4byte	.LLST136
 8871 1d70 15       		.uleb128 0x15
 8872 1d71 0B0F0000 		.4byte	.LASF109
 8873 1d75 01       		.byte	0x1
 8874 1d76 4A11     		.2byte	0x114a
 8875 1d78 35010000 		.4byte	0x135
 8876 1d7c C2140000 		.4byte	.LLST137
 8877 1d80 16       		.uleb128 0x16
 8878 1d81 59090000 		.4byte	.LASF211
 8879 1d85 01       		.byte	0x1
 8880 1d86 4C11     		.2byte	0x114c
 8881 1d88 D5000000 		.4byte	0xd5
 8882 1d8c EE140000 		.4byte	.LLST138
 8883 1d90 18       		.uleb128 0x18
 8884 1d91 0A000000 		.4byte	.LVL431
 8885 1d95 5E230000 		.4byte	0x235e
 8886 1d99 1D       		.uleb128 0x1d
 8887 1d9a 28000000 		.4byte	.LVL432
 8888 1d9e 6F080000 		.4byte	0x86f
 8889 1da2 B21D0000 		.4byte	0x1db2
 8890 1da6 1A       		.uleb128 0x1a
 8891 1da7 01       		.uleb128 0x1
 8892 1da8 50       		.byte	0x50
 8893 1da9 02       		.uleb128 0x2
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 259


 8894 1daa 74       		.byte	0x74
 8895 1dab 00       		.sleb128 0
 8896 1dac 1A       		.uleb128 0x1a
 8897 1dad 01       		.uleb128 0x1
 8898 1dae 51       		.byte	0x51
 8899 1daf 01       		.uleb128 0x1
 8900 1db0 31       		.byte	0x31
 8901 1db1 00       		.byte	0
 8902 1db2 18       		.uleb128 0x18
 8903 1db3 2C000000 		.4byte	.LVL433
 8904 1db7 80230000 		.4byte	0x2380
 8905 1dbb 18       		.uleb128 0x18
 8906 1dbc 30000000 		.4byte	.LVL434
 8907 1dc0 75230000 		.4byte	0x2375
 8908 1dc4 18       		.uleb128 0x18
 8909 1dc5 34000000 		.4byte	.LVL435
 8910 1dc9 5E230000 		.4byte	0x235e
 8911 1dcd 18       		.uleb128 0x18
 8912 1dce 62000000 		.4byte	.LVL437
 8913 1dd2 75230000 		.4byte	0x2375
 8914 1dd6 00       		.byte	0
 8915 1dd7 20       		.uleb128 0x20
 8916 1dd8 15080000 		.4byte	.LASF212
 8917 1ddc 01       		.byte	0x1
 8918 1ddd 8E11     		.2byte	0x118e
 8919 1ddf 1F010000 		.4byte	0x11f
 8920 1de3 00000000 		.4byte	.LFB90
 8921 1de7 80000000 		.4byte	.LFE90-.LFB90
 8922 1deb 01       		.uleb128 0x1
 8923 1dec 9C       		.byte	0x9c
 8924 1ded 881E0000 		.4byte	0x1e88
 8925 1df1 15       		.uleb128 0x15
 8926 1df2 D6040000 		.4byte	.LASF213
 8927 1df6 01       		.byte	0x1
 8928 1df7 8E11     		.2byte	0x118e
 8929 1df9 D5000000 		.4byte	0xd5
 8930 1dfd 0C150000 		.4byte	.LLST139
 8931 1e01 15       		.uleb128 0x15
 8932 1e02 D2000000 		.4byte	.LASF214
 8933 1e06 01       		.byte	0x1
 8934 1e07 8E11     		.2byte	0x118e
 8935 1e09 D5000000 		.4byte	0xd5
 8936 1e0d 38150000 		.4byte	.LLST140
 8937 1e11 15       		.uleb128 0x15
 8938 1e12 5C0D0000 		.4byte	.LASF215
 8939 1e16 01       		.byte	0x1
 8940 1e17 8E11     		.2byte	0x118e
 8941 1e19 7E1B0000 		.4byte	0x1b7e
 8942 1e1d 64150000 		.4byte	.LLST141
 8943 1e21 15       		.uleb128 0x15
 8944 1e22 0B0F0000 		.4byte	.LASF109
 8945 1e26 01       		.byte	0x1
 8946 1e27 8E11     		.2byte	0x118e
 8947 1e29 35010000 		.4byte	0x135
 8948 1e2d 90150000 		.4byte	.LLST142
 8949 1e31 16       		.uleb128 0x16
 8950 1e32 710D0000 		.4byte	.LASF87
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 260


 8951 1e36 01       		.byte	0x1
 8952 1e37 9011     		.2byte	0x1190
 8953 1e39 1F010000 		.4byte	0x11f
 8954 1e3d D5150000 		.4byte	.LLST143
 8955 1e41 18       		.uleb128 0x18
 8956 1e42 0E000000 		.4byte	.LVL441
 8957 1e46 5E230000 		.4byte	0x235e
 8958 1e4a 1D       		.uleb128 0x1d
 8959 1e4b 36000000 		.4byte	.LVL442
 8960 1e4f 6F080000 		.4byte	0x86f
 8961 1e53 631E0000 		.4byte	0x1e63
 8962 1e57 1A       		.uleb128 0x1a
 8963 1e58 01       		.uleb128 0x1
 8964 1e59 50       		.byte	0x50
 8965 1e5a 02       		.uleb128 0x2
 8966 1e5b 74       		.byte	0x74
 8967 1e5c 00       		.sleb128 0
 8968 1e5d 1A       		.uleb128 0x1a
 8969 1e5e 01       		.uleb128 0x1
 8970 1e5f 51       		.byte	0x51
 8971 1e60 01       		.uleb128 0x1
 8972 1e61 31       		.byte	0x31
 8973 1e62 00       		.byte	0
 8974 1e63 18       		.uleb128 0x18
 8975 1e64 3A000000 		.4byte	.LVL443
 8976 1e68 80230000 		.4byte	0x2380
 8977 1e6c 18       		.uleb128 0x18
 8978 1e6d 3E000000 		.4byte	.LVL444
 8979 1e71 75230000 		.4byte	0x2375
 8980 1e75 18       		.uleb128 0x18
 8981 1e76 42000000 		.4byte	.LVL445
 8982 1e7a 5E230000 		.4byte	0x235e
 8983 1e7e 18       		.uleb128 0x18
 8984 1e7f 78000000 		.4byte	.LVL450
 8985 1e83 75230000 		.4byte	0x2375
 8986 1e87 00       		.byte	0
 8987 1e88 20       		.uleb128 0x20
 8988 1e89 97030000 		.4byte	.LASF216
 8989 1e8d 01       		.byte	0x1
 8990 1e8e DE11     		.2byte	0x11de
 8991 1e90 1F010000 		.4byte	0x11f
 8992 1e94 00000000 		.4byte	.LFB91
 8993 1e98 C0000000 		.4byte	.LFE91-.LFB91
 8994 1e9c 01       		.uleb128 0x1
 8995 1e9d 9C       		.byte	0x9c
 8996 1e9e 561F0000 		.4byte	0x1f56
 8997 1ea2 15       		.uleb128 0x15
 8998 1ea3 070B0000 		.4byte	.LASF217
 8999 1ea7 01       		.byte	0x1
 9000 1ea8 DE11     		.2byte	0x11de
 9001 1eaa 33020000 		.4byte	0x233
 9002 1eae FF150000 		.4byte	.LLST144
 9003 1eb2 15       		.uleb128 0x15
 9004 1eb3 A40C0000 		.4byte	.LASF218
 9005 1eb7 01       		.byte	0x1
 9006 1eb8 DE11     		.2byte	0x11de
 9007 1eba D5000000 		.4byte	0xd5
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 261


 9008 1ebe 2B160000 		.4byte	.LLST145
 9009 1ec2 15       		.uleb128 0x15
 9010 1ec3 7A0A0000 		.4byte	.LASF219
 9011 1ec7 01       		.byte	0x1
 9012 1ec8 DE11     		.2byte	0x11de
 9013 1eca A5020000 		.4byte	0x2a5
 9014 1ece D2160000 		.4byte	.LLST146
 9015 1ed2 15       		.uleb128 0x15
 9016 1ed3 5E060000 		.4byte	.LASF220
 9017 1ed7 01       		.byte	0x1
 9018 1ed8 DE11     		.2byte	0x11de
 9019 1eda 7E1B0000 		.4byte	0x1b7e
 9020 1ede F3160000 		.4byte	.LLST147
 9021 1ee2 16       		.uleb128 0x16
 9022 1ee3 79100000 		.4byte	.LASF88
 9023 1ee7 01       		.byte	0x1
 9024 1ee8 E011     		.2byte	0x11e0
 9025 1eea 48050000 		.4byte	0x548
 9026 1eee 1F170000 		.4byte	.LLST148
 9027 1ef2 16       		.uleb128 0x16
 9028 1ef3 710D0000 		.4byte	.LASF87
 9029 1ef7 01       		.byte	0x1
 9030 1ef8 E111     		.2byte	0x11e1
 9031 1efa 1F010000 		.4byte	0x11f
 9032 1efe 4B170000 		.4byte	.LLST149
 9033 1f02 16       		.uleb128 0x16
 9034 1f03 FB010000 		.4byte	.LASF221
 9035 1f07 01       		.byte	0x1
 9036 1f08 E211     		.2byte	0x11e2
 9037 1f0a BF000000 		.4byte	0xbf
 9038 1f0e 75170000 		.4byte	.LLST150
 9039 1f12 18       		.uleb128 0x18
 9040 1f13 16000000 		.4byte	.LVL458
 9041 1f17 5E230000 		.4byte	0x235e
 9042 1f1b 1D       		.uleb128 0x1d
 9043 1f1c 74000000 		.4byte	.LVL471
 9044 1f20 8B230000 		.4byte	0x238b
 9045 1f24 2F1F0000 		.4byte	0x1f2f
 9046 1f28 1A       		.uleb128 0x1a
 9047 1f29 01       		.uleb128 0x1
 9048 1f2a 50       		.byte	0x50
 9049 1f2b 02       		.uleb128 0x2
 9050 1f2c 75       		.byte	0x75
 9051 1f2d 00       		.sleb128 0
 9052 1f2e 00       		.byte	0
 9053 1f2f 1D       		.uleb128 0x1d
 9054 1f30 94000000 		.4byte	.LVL472
 9055 1f34 69230000 		.4byte	0x2369
 9056 1f38 431F0000 		.4byte	0x1f43
 9057 1f3c 1A       		.uleb128 0x1a
 9058 1f3d 01       		.uleb128 0x1
 9059 1f3e 51       		.byte	0x51
 9060 1f3f 02       		.uleb128 0x2
 9061 1f40 75       		.byte	0x75
 9062 1f41 00       		.sleb128 0
 9063 1f42 00       		.byte	0
 9064 1f43 18       		.uleb128 0x18
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 262


 9065 1f44 AE000000 		.4byte	.LVL473
 9066 1f48 80230000 		.4byte	0x2380
 9067 1f4c 18       		.uleb128 0x18
 9068 1f4d B2000000 		.4byte	.LVL474
 9069 1f51 75230000 		.4byte	0x2375
 9070 1f55 00       		.byte	0
 9071 1f56 20       		.uleb128 0x20
 9072 1f57 31030000 		.4byte	.LASF222
 9073 1f5b 01       		.byte	0x1
 9074 1f5c 4812     		.2byte	0x1248
 9075 1f5e 1F010000 		.4byte	0x11f
 9076 1f62 00000000 		.4byte	.LFB92
 9077 1f66 EC000000 		.4byte	.LFE92-.LFB92
 9078 1f6a 01       		.uleb128 0x1
 9079 1f6b 9C       		.byte	0x9c
 9080 1f6c 5F200000 		.4byte	0x205f
 9081 1f70 15       		.uleb128 0x15
 9082 1f71 070B0000 		.4byte	.LASF217
 9083 1f75 01       		.byte	0x1
 9084 1f76 4812     		.2byte	0x1248
 9085 1f78 33020000 		.4byte	0x233
 9086 1f7c 88170000 		.4byte	.LLST151
 9087 1f80 15       		.uleb128 0x15
 9088 1f81 A40C0000 		.4byte	.LASF218
 9089 1f85 01       		.byte	0x1
 9090 1f86 4812     		.2byte	0x1248
 9091 1f88 D5000000 		.4byte	0xd5
 9092 1f8c B4170000 		.4byte	.LLST152
 9093 1f90 15       		.uleb128 0x15
 9094 1f91 7A0A0000 		.4byte	.LASF219
 9095 1f95 01       		.byte	0x1
 9096 1f96 4812     		.2byte	0x1248
 9097 1f98 A5020000 		.4byte	0x2a5
 9098 1f9c 5B180000 		.4byte	.LLST153
 9099 1fa0 15       		.uleb128 0x15
 9100 1fa1 5E060000 		.4byte	.LASF220
 9101 1fa5 01       		.byte	0x1
 9102 1fa6 4812     		.2byte	0x1248
 9103 1fa8 7E1B0000 		.4byte	0x1b7e
 9104 1fac 7C180000 		.4byte	.LLST154
 9105 1fb0 1B       		.uleb128 0x1b
 9106 1fb1 12010000 		.4byte	.LASF223
 9107 1fb5 01       		.byte	0x1
 9108 1fb6 4812     		.2byte	0x1248
 9109 1fb8 5F200000 		.4byte	0x205f
 9110 1fbc 02       		.uleb128 0x2
 9111 1fbd 91       		.byte	0x91
 9112 1fbe 00       		.sleb128 0
 9113 1fbf 16       		.uleb128 0x16
 9114 1fc0 79100000 		.4byte	.LASF88
 9115 1fc4 01       		.byte	0x1
 9116 1fc5 4A12     		.2byte	0x124a
 9117 1fc7 48050000 		.4byte	0x548
 9118 1fcb A8180000 		.4byte	.LLST155
 9119 1fcf 16       		.uleb128 0x16
 9120 1fd0 FB010000 		.4byte	.LASF221
 9121 1fd4 01       		.byte	0x1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 263


 9122 1fd5 4B12     		.2byte	0x124b
 9123 1fd7 BF000000 		.4byte	0xbf
 9124 1fdb D4180000 		.4byte	.LLST156
 9125 1fdf 16       		.uleb128 0x16
 9126 1fe0 710D0000 		.4byte	.LASF87
 9127 1fe4 01       		.byte	0x1
 9128 1fe5 4C12     		.2byte	0x124c
 9129 1fe7 1F010000 		.4byte	0x11f
 9130 1feb E7180000 		.4byte	.LLST157
 9131 1fef 16       		.uleb128 0x16
 9132 1ff0 11020000 		.4byte	.LASF134
 9133 1ff4 01       		.byte	0x1
 9134 1ff5 4D12     		.2byte	0x124d
 9135 1ff7 2A010000 		.4byte	0x12a
 9136 1ffb 11190000 		.4byte	.LLST158
 9137 1fff 18       		.uleb128 0x18
 9138 2000 18000000 		.4byte	.LVL481
 9139 2004 C4230000 		.4byte	0x23c4
 9140 2008 1D       		.uleb128 0x1d
 9141 2009 8A000000 		.4byte	.LVL497
 9142 200d 8B230000 		.4byte	0x238b
 9143 2011 1C200000 		.4byte	0x201c
 9144 2015 1A       		.uleb128 0x1a
 9145 2016 01       		.uleb128 0x1
 9146 2017 50       		.byte	0x50
 9147 2018 02       		.uleb128 0x2
 9148 2019 76       		.byte	0x76
 9149 201a 00       		.sleb128 0
 9150 201b 00       		.byte	0
 9151 201c 1D       		.uleb128 0x1d
 9152 201d AA000000 		.4byte	.LVL498
 9153 2021 69230000 		.4byte	0x2369
 9154 2025 30200000 		.4byte	0x2030
 9155 2029 1A       		.uleb128 0x1a
 9156 202a 01       		.uleb128 0x1
 9157 202b 51       		.byte	0x51
 9158 202c 02       		.uleb128 0x2
 9159 202d 76       		.byte	0x76
 9160 202e 00       		.sleb128 0
 9161 202f 00       		.byte	0
 9162 2030 1D       		.uleb128 0x1d
 9163 2031 B8000000 		.4byte	.LVL501
 9164 2035 69230000 		.4byte	0x2369
 9165 2039 4D200000 		.4byte	0x204d
 9166 203d 1A       		.uleb128 0x1a
 9167 203e 01       		.uleb128 0x1
 9168 203f 50       		.byte	0x50
 9169 2040 05       		.uleb128 0x5
 9170 2041 03       		.byte	0x3
 9171 2042 14000000 		.4byte	.LANCHOR0+20
 9172 2046 1A       		.uleb128 0x1a
 9173 2047 01       		.uleb128 0x1
 9174 2048 51       		.byte	0x51
 9175 2049 02       		.uleb128 0x2
 9176 204a 74       		.byte	0x74
 9177 204b 18       		.sleb128 24
 9178 204c 00       		.byte	0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 264


 9179 204d 19       		.uleb128 0x19
 9180 204e DE000000 		.4byte	.LVL502
 9181 2052 CF230000 		.4byte	0x23cf
 9182 2056 1A       		.uleb128 0x1a
 9183 2057 01       		.uleb128 0x1
 9184 2058 50       		.byte	0x50
 9185 2059 03       		.uleb128 0x3
 9186 205a 91       		.byte	0x91
 9187 205b 64       		.sleb128 -28
 9188 205c 06       		.byte	0x6
 9189 205d 00       		.byte	0
 9190 205e 00       		.byte	0
 9191 205f 06       		.uleb128 0x6
 9192 2060 04       		.byte	0x4
 9193 2061 1F010000 		.4byte	0x11f
 9194 2065 22       		.uleb128 0x22
 9195 2066 290C0000 		.4byte	.LASF224
 9196 206a 01       		.byte	0x1
 9197 206b C412     		.2byte	0x12c4
 9198 206d 00000000 		.4byte	.LFB93
 9199 2071 9C000000 		.4byte	.LFE93-.LFB93
 9200 2075 01       		.uleb128 0x1
 9201 2076 9C       		.byte	0x9c
 9202 2077 2A210000 		.4byte	0x212a
 9203 207b 15       		.uleb128 0x15
 9204 207c 070B0000 		.4byte	.LASF217
 9205 2080 01       		.byte	0x1
 9206 2081 C412     		.2byte	0x12c4
 9207 2083 33020000 		.4byte	0x233
 9208 2087 47190000 		.4byte	.LLST159
 9209 208b 15       		.uleb128 0x15
 9210 208c 12010000 		.4byte	.LASF223
 9211 2090 01       		.byte	0x1
 9212 2091 C412     		.2byte	0x12c4
 9213 2093 5F200000 		.4byte	0x205f
 9214 2097 73190000 		.4byte	.LLST160
 9215 209b 16       		.uleb128 0x16
 9216 209c 79100000 		.4byte	.LASF88
 9217 20a0 01       		.byte	0x1
 9218 20a1 C612     		.2byte	0x12c6
 9219 20a3 48050000 		.4byte	0x548
 9220 20a7 9F190000 		.4byte	.LLST161
 9221 20ab 16       		.uleb128 0x16
 9222 20ac FB010000 		.4byte	.LASF221
 9223 20b0 01       		.byte	0x1
 9224 20b1 C712     		.2byte	0x12c7
 9225 20b3 BF000000 		.4byte	0xbf
 9226 20b7 CB190000 		.4byte	.LLST162
 9227 20bb 16       		.uleb128 0x16
 9228 20bc 11020000 		.4byte	.LASF134
 9229 20c0 01       		.byte	0x1
 9230 20c1 C812     		.2byte	0x12c8
 9231 20c3 2A010000 		.4byte	0x12a
 9232 20c7 E9190000 		.4byte	.LLST163
 9233 20cb 18       		.uleb128 0x18
 9234 20cc 12000000 		.4byte	.LVL508
 9235 20d0 C4230000 		.4byte	0x23c4
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 265


 9236 20d4 1D       		.uleb128 0x1d
 9237 20d5 40000000 		.4byte	.LVL512
 9238 20d9 8B230000 		.4byte	0x238b
 9239 20dd E8200000 		.4byte	0x20e8
 9240 20e1 1A       		.uleb128 0x1a
 9241 20e2 01       		.uleb128 0x1
 9242 20e3 50       		.byte	0x50
 9243 20e4 02       		.uleb128 0x2
 9244 20e5 75       		.byte	0x75
 9245 20e6 00       		.sleb128 0
 9246 20e7 00       		.byte	0
 9247 20e8 1D       		.uleb128 0x1d
 9248 20e9 60000000 		.4byte	.LVL513
 9249 20ed 69230000 		.4byte	0x2369
 9250 20f1 FC200000 		.4byte	0x20fc
 9251 20f5 1A       		.uleb128 0x1a
 9252 20f6 01       		.uleb128 0x1
 9253 20f7 51       		.byte	0x51
 9254 20f8 02       		.uleb128 0x2
 9255 20f9 75       		.byte	0x75
 9256 20fa 00       		.sleb128 0
 9257 20fb 00       		.byte	0
 9258 20fc 1D       		.uleb128 0x1d
 9259 20fd 6E000000 		.4byte	.LVL516
 9260 2101 69230000 		.4byte	0x2369
 9261 2105 19210000 		.4byte	0x2119
 9262 2109 1A       		.uleb128 0x1a
 9263 210a 01       		.uleb128 0x1
 9264 210b 50       		.byte	0x50
 9265 210c 05       		.uleb128 0x5
 9266 210d 03       		.byte	0x3
 9267 210e 14000000 		.4byte	.LANCHOR0+20
 9268 2112 1A       		.uleb128 0x1a
 9269 2113 01       		.uleb128 0x1
 9270 2114 51       		.byte	0x51
 9271 2115 02       		.uleb128 0x2
 9272 2116 74       		.byte	0x74
 9273 2117 18       		.sleb128 24
 9274 2118 00       		.byte	0
 9275 2119 19       		.uleb128 0x19
 9276 211a 90000000 		.4byte	.LVL517
 9277 211e CF230000 		.4byte	0x23cf
 9278 2122 1A       		.uleb128 0x1a
 9279 2123 01       		.uleb128 0x1
 9280 2124 50       		.byte	0x50
 9281 2125 02       		.uleb128 0x2
 9282 2126 76       		.byte	0x76
 9283 2127 00       		.sleb128 0
 9284 2128 00       		.byte	0
 9285 2129 00       		.byte	0
 9286 212a 20       		.uleb128 0x20
 9287 212b 41070000 		.4byte	.LASF225
 9288 212f 01       		.byte	0x1
 9289 2130 1D13     		.2byte	0x131d
 9290 2132 1F010000 		.4byte	0x11f
 9291 2136 00000000 		.4byte	.LFB94
 9292 213a 30000000 		.4byte	.LFE94-.LFB94
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 266


 9293 213e 01       		.uleb128 0x1
 9294 213f 9C       		.byte	0x9c
 9295 2140 87210000 		.4byte	0x2187
 9296 2144 15       		.uleb128 0x15
 9297 2145 150B0000 		.4byte	.LASF91
 9298 2149 01       		.byte	0x1
 9299 214a 1D13     		.2byte	0x131d
 9300 214c 33020000 		.4byte	0x233
 9301 2150 1D1A0000 		.4byte	.LLST164
 9302 2154 16       		.uleb128 0x16
 9303 2155 79100000 		.4byte	.LASF88
 9304 2159 01       		.byte	0x1
 9305 215a 1F13     		.2byte	0x131f
 9306 215c 48050000 		.4byte	0x548
 9307 2160 301A0000 		.4byte	.LLST165
 9308 2164 16       		.uleb128 0x16
 9309 2165 710D0000 		.4byte	.LASF87
 9310 2169 01       		.byte	0x1
 9311 216a 2013     		.2byte	0x1320
 9312 216c 1F010000 		.4byte	0x11f
 9313 2170 4E1A0000 		.4byte	.LLST166
 9314 2174 18       		.uleb128 0x18
 9315 2175 0E000000 		.4byte	.LVL523
 9316 2179 5E230000 		.4byte	0x235e
 9317 217d 18       		.uleb128 0x18
 9318 217e 26000000 		.4byte	.LVL528
 9319 2182 75230000 		.4byte	0x2375
 9320 2186 00       		.byte	0
 9321 2187 0B       		.uleb128 0xb
 9322 2188 28020000 		.4byte	0x228
 9323 218c 97210000 		.4byte	0x2197
 9324 2190 0C       		.uleb128 0xc
 9325 2191 9E000000 		.4byte	0x9e
 9326 2195 06       		.byte	0x6
 9327 2196 00       		.byte	0
 9328 2197 23       		.uleb128 0x23
 9329 2198 B5010000 		.4byte	.LASF226
 9330 219c 01       		.byte	0x1
 9331 219d 5F01     		.2byte	0x15f
 9332 219f 87210000 		.4byte	0x2187
 9333 21a3 05       		.uleb128 0x5
 9334 21a4 03       		.byte	0x3
 9335 21a5 30000000 		.4byte	pxReadyTasksLists
 9336 21a9 23       		.uleb128 0x23
 9337 21aa 5B020000 		.4byte	.LASF227
 9338 21ae 01       		.byte	0x1
 9339 21af 6001     		.2byte	0x160
 9340 21b1 28020000 		.4byte	0x228
 9341 21b5 05       		.uleb128 0x5
 9342 21b6 03       		.byte	0x3
 9343 21b7 BC000000 		.4byte	xDelayedTaskList1
 9344 21bb 23       		.uleb128 0x23
 9345 21bc 6D020000 		.4byte	.LASF228
 9346 21c0 01       		.byte	0x1
 9347 21c1 6101     		.2byte	0x161
 9348 21c3 28020000 		.4byte	0x228
 9349 21c7 05       		.uleb128 0x5
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 267


 9350 21c8 03       		.byte	0x3
 9351 21c9 D0000000 		.4byte	xDelayedTaskList2
 9352 21cd 23       		.uleb128 0x23
 9353 21ce 400C0000 		.4byte	.LASF229
 9354 21d2 01       		.byte	0x1
 9355 21d3 6201     		.2byte	0x162
 9356 21d5 DF210000 		.4byte	0x21df
 9357 21d9 05       		.uleb128 0x5
 9358 21da 03       		.byte	0x3
 9359 21db 28000000 		.4byte	pxDelayedTaskList
 9360 21df 08       		.uleb128 0x8
 9361 21e0 E00B0000 		.4byte	0xbe0
 9362 21e4 23       		.uleb128 0x23
 9363 21e5 18070000 		.4byte	.LASF230
 9364 21e9 01       		.byte	0x1
 9365 21ea 6301     		.2byte	0x163
 9366 21ec DF210000 		.4byte	0x21df
 9367 21f0 05       		.uleb128 0x5
 9368 21f1 03       		.byte	0x3
 9369 21f2 F8000000 		.4byte	pxOverflowDelayedTaskList
 9370 21f6 23       		.uleb128 0x23
 9371 21f7 EB040000 		.4byte	.LASF231
 9372 21fb 01       		.byte	0x1
 9373 21fc 6401     		.2byte	0x164
 9374 21fe 28020000 		.4byte	0x228
 9375 2202 05       		.uleb128 0x5
 9376 2203 03       		.byte	0x3
 9377 2204 14000000 		.4byte	xPendingReadyList
 9378 2208 23       		.uleb128 0x23
 9379 2209 A9070000 		.4byte	.LASF232
 9380 220d 01       		.byte	0x1
 9381 220e 6801     		.2byte	0x168
 9382 2210 28020000 		.4byte	0x228
 9383 2214 05       		.uleb128 0x5
 9384 2215 03       		.byte	0x3
 9385 2216 E4000000 		.4byte	xTasksWaitingTermination
 9386 221a 23       		.uleb128 0x23
 9387 221b 8D010000 		.4byte	.LASF233
 9388 221f 01       		.byte	0x1
 9389 2220 6901     		.2byte	0x169
 9390 2222 1D020000 		.4byte	0x21d
 9391 2226 05       		.uleb128 0x5
 9392 2227 03       		.byte	0x3
 9393 2228 10010000 		.4byte	uxDeletedTasksWaitingCleanUp
 9394 222c 23       		.uleb128 0x23
 9395 222d 7D040000 		.4byte	.LASF234
 9396 2231 01       		.byte	0x1
 9397 2232 6F01     		.2byte	0x16f
 9398 2234 28020000 		.4byte	0x228
 9399 2238 05       		.uleb128 0x5
 9400 2239 03       		.byte	0x3
 9401 223a 00000000 		.4byte	xSuspendedTaskList
 9402 223e 23       		.uleb128 0x23
 9403 223f 0F100000 		.4byte	.LASF235
 9404 2243 01       		.byte	0x1
 9405 2244 7401     		.2byte	0x174
 9406 2246 1D020000 		.4byte	0x21d
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 268


 9407 224a 05       		.uleb128 0x5
 9408 224b 03       		.byte	0x3
 9409 224c FC000000 		.4byte	uxCurrentNumberOfTasks
 9410 2250 23       		.uleb128 0x23
 9411 2251 C5060000 		.4byte	.LASF236
 9412 2255 01       		.byte	0x1
 9413 2256 7501     		.2byte	0x175
 9414 2258 62220000 		.4byte	0x2262
 9415 225c 05       		.uleb128 0x5
 9416 225d 03       		.byte	0x3
 9417 225e 14010000 		.4byte	xTickCount
 9418 2262 08       		.uleb128 0x8
 9419 2263 35010000 		.4byte	0x135
 9420 2267 23       		.uleb128 0x23
 9421 2268 EC0C0000 		.4byte	.LASF237
 9422 226c 01       		.byte	0x1
 9423 226d 7601     		.2byte	0x176
 9424 226f 1D020000 		.4byte	0x21d
 9425 2273 05       		.uleb128 0x5
 9426 2274 03       		.byte	0x3
 9427 2275 0C010000 		.4byte	uxTopReadyPriority
 9428 2279 23       		.uleb128 0x23
 9429 227a 5D010000 		.4byte	.LASF238
 9430 227e 01       		.byte	0x1
 9431 227f 7701     		.2byte	0x177
 9432 2281 8B220000 		.4byte	0x228b
 9433 2285 05       		.uleb128 0x5
 9434 2286 03       		.byte	0x3
 9435 2287 04010000 		.4byte	xSchedulerRunning
 9436 228b 08       		.uleb128 0x8
 9437 228c 1F010000 		.4byte	0x11f
 9438 2290 23       		.uleb128 0x23
 9439 2291 930D0000 		.4byte	.LASF239
 9440 2295 01       		.byte	0x1
 9441 2296 7801     		.2byte	0x178
 9442 2298 1D020000 		.4byte	0x21d
 9443 229c 05       		.uleb128 0x5
 9444 229d 03       		.byte	0x3
 9445 229e 24010000 		.4byte	uxPendedTicks
 9446 22a2 23       		.uleb128 0x23
 9447 22a3 64110000 		.4byte	.LASF240
 9448 22a7 01       		.byte	0x1
 9449 22a8 7901     		.2byte	0x179
 9450 22aa 8B220000 		.4byte	0x228b
 9451 22ae 05       		.uleb128 0x5
 9452 22af 03       		.byte	0x3
 9453 22b0 28010000 		.4byte	xYieldPending
 9454 22b4 23       		.uleb128 0x23
 9455 22b5 640B0000 		.4byte	.LASF241
 9456 22b9 01       		.byte	0x1
 9457 22ba 7A01     		.2byte	0x17a
 9458 22bc 8B220000 		.4byte	0x228b
 9459 22c0 05       		.uleb128 0x5
 9460 22c1 03       		.byte	0x3
 9461 22c2 20010000 		.4byte	xNumOfOverflows
 9462 22c6 23       		.uleb128 0x23
 9463 22c7 600A0000 		.4byte	.LASF81
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 269


 9464 22cb 01       		.byte	0x1
 9465 22cc 7B01     		.2byte	0x17b
 9466 22ce 2A010000 		.4byte	0x12a
 9467 22d2 05       		.uleb128 0x5
 9468 22d3 03       		.byte	0x3
 9469 22d4 08010000 		.4byte	uxTaskNumber
 9470 22d8 23       		.uleb128 0x23
 9471 22d9 11090000 		.4byte	.LASF242
 9472 22dd 01       		.byte	0x1
 9473 22de 7C01     		.2byte	0x17c
 9474 22e0 62220000 		.4byte	0x2262
 9475 22e4 05       		.uleb128 0x5
 9476 22e5 03       		.byte	0x3
 9477 22e6 2C000000 		.4byte	xNextTaskUnblockTime
 9478 22ea 23       		.uleb128 0x23
 9479 22eb 800B0000 		.4byte	.LASF243
 9480 22ef 01       		.byte	0x1
 9481 22f0 7D01     		.2byte	0x17d
 9482 22f2 33020000 		.4byte	0x233
 9483 22f6 05       		.uleb128 0x5
 9484 22f7 03       		.byte	0x3
 9485 22f8 1C010000 		.4byte	xIdleTaskHandle
 9486 22fc 23       		.uleb128 0x23
 9487 22fd 90100000 		.4byte	.LASF244
 9488 2301 01       		.byte	0x1
 9489 2302 8701     		.2byte	0x187
 9490 2304 1D020000 		.4byte	0x21d
 9491 2308 05       		.uleb128 0x5
 9492 2309 03       		.byte	0x3
 9493 230a 18010000 		.4byte	uxSchedulerSuspended
 9494 230e 2A       		.uleb128 0x2a
 9495 230f CB0F0000 		.4byte	.LASF270
 9496 2313 01       		.byte	0x1
 9497 2314 5C01     		.2byte	0x15c
 9498 2316 20230000 		.4byte	0x2320
 9499 231a 05       		.uleb128 0x5
 9500 231b 03       		.byte	0x3
 9501 231c 00000000 		.4byte	pxCurrentTCB
 9502 2320 08       		.uleb128 0x8
 9503 2321 48050000 		.4byte	0x548
 9504 2325 2B       		.uleb128 0x2b
 9505 2326 E20C0000 		.4byte	.LASF245
 9506 232a E20C0000 		.4byte	.LASF245
 9507 232e 09       		.byte	0x9
 9508 232f 82       		.byte	0x82
 9509 2330 2B       		.uleb128 0x2b
 9510 2331 D4090000 		.4byte	.LASF246
 9511 2335 D4090000 		.4byte	.LASF246
 9512 2339 0A       		.byte	0xa
 9513 233a 19       		.byte	0x19
 9514 233b 2C       		.uleb128 0x2c
 9515 233c D80B0000 		.4byte	.LASF247
 9516 2340 D80B0000 		.4byte	.LASF247
 9517 2344 07       		.byte	0x7
 9518 2345 6301     		.2byte	0x163
 9519 2347 2B       		.uleb128 0x2b
 9520 2348 26090000 		.4byte	.LASF248
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 270


 9521 234c 26090000 		.4byte	.LASF248
 9522 2350 09       		.byte	0x9
 9523 2351 66       		.byte	0x66
 9524 2352 2C       		.uleb128 0x2c
 9525 2353 990E0000 		.4byte	.LASF249
 9526 2357 990E0000 		.4byte	.LASF249
 9527 235b 07       		.byte	0x7
 9528 235c 5801     		.2byte	0x158
 9529 235e 2B       		.uleb128 0x2b
 9530 235f 9E020000 		.4byte	.LASF250
 9531 2363 9E020000 		.4byte	.LASF250
 9532 2367 06       		.byte	0x6
 9533 2368 5A       		.byte	0x5a
 9534 2369 2C       		.uleb128 0x2c
 9535 236a EE060000 		.4byte	.LASF251
 9536 236e EE060000 		.4byte	.LASF251
 9537 2372 07       		.byte	0x7
 9538 2373 8501     		.2byte	0x185
 9539 2375 2B       		.uleb128 0x2b
 9540 2376 1C000000 		.4byte	.LASF252
 9541 237a 1C000000 		.4byte	.LASF252
 9542 237e 06       		.byte	0x6
 9543 237f 5B       		.byte	0x5b
 9544 2380 2B       		.uleb128 0x2b
 9545 2381 99000000 		.4byte	.LASF253
 9546 2385 99000000 		.4byte	.LASF253
 9547 2389 06       		.byte	0x6
 9548 238a 50       		.byte	0x50
 9549 238b 2C       		.uleb128 0x2c
 9550 238c 69030000 		.4byte	.LASF254
 9551 2390 69030000 		.4byte	.LASF254
 9552 2394 07       		.byte	0x7
 9553 2395 9401     		.2byte	0x194
 9554 2397 2C       		.uleb128 0x2c
 9555 2398 00000000 		.4byte	.LASF255
 9556 239c 00000000 		.4byte	.LASF255
 9557 23a0 07       		.byte	0x7
 9558 23a1 7001     		.2byte	0x170
 9559 23a3 2B       		.uleb128 0x2b
 9560 23a4 54030000 		.4byte	.LASF256
 9561 23a8 54030000 		.4byte	.LASF256
 9562 23ac 0A       		.byte	0xa
 9563 23ad 1E       		.byte	0x1e
 9564 23ae 2B       		.uleb128 0x2b
 9565 23af 50000000 		.4byte	.LASF257
 9566 23b3 50000000 		.4byte	.LASF257
 9567 23b7 0A       		.byte	0xa
 9568 23b8 21       		.byte	0x21
 9569 23b9 2B       		.uleb128 0x2b
 9570 23ba 5B050000 		.4byte	.LASF258
 9571 23be 5B050000 		.4byte	.LASF258
 9572 23c2 09       		.byte	0x9
 9573 23c3 81       		.byte	0x81
 9574 23c4 2B       		.uleb128 0x2b
 9575 23c5 B40A0000 		.4byte	.LASF259
 9576 23c9 B40A0000 		.4byte	.LASF259
 9577 23cd 06       		.byte	0x6
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 271


 9578 23ce 5C       		.byte	0x5c
 9579 23cf 2B       		.uleb128 0x2b
 9580 23d0 430F0000 		.4byte	.LASF260
 9581 23d4 430F0000 		.4byte	.LASF260
 9582 23d8 06       		.byte	0x6
 9583 23d9 5D       		.byte	0x5d
 9584 23da 2C       		.uleb128 0x2c
 9585 23db 0B030000 		.4byte	.LASF261
 9586 23df 0B030000 		.4byte	.LASF261
 9587 23e3 0B       		.byte	0xb
 9588 23e4 EF04     		.2byte	0x4ef
 9589 23e6 2B       		.uleb128 0x2b
 9590 23e7 57000000 		.4byte	.LASF262
 9591 23eb 57000000 		.4byte	.LASF262
 9592 23ef 09       		.byte	0x9
 9593 23f0 8B       		.byte	0x8b
 9594 23f1 2B       		.uleb128 0x2b
 9595 23f2 D00C0000 		.4byte	.LASF263
 9596 23f6 D00C0000 		.4byte	.LASF263
 9597 23fa 09       		.byte	0x9
 9598 23fb 92       		.byte	0x92
 9599 23fc 2C       		.uleb128 0x2c
 9600 23fd D7010000 		.4byte	.LASF264
 9601 2401 D7010000 		.4byte	.LASF264
 9602 2405 01       		.byte	0x1
 9603 2406 9701     		.2byte	0x197
 9604 2408 2B       		.uleb128 0x2b
 9605 2409 340B0000 		.4byte	.LASF265
 9606 240d 340B0000 		.4byte	.LASF265
 9607 2411 0C       		.byte	0xc
 9608 2412 E7       		.byte	0xe7
 9609 2413 00       		.byte	0
 9610              		.section	.debug_abbrev,"",%progbits
 9611              	.Ldebug_abbrev0:
 9612 0000 01       		.uleb128 0x1
 9613 0001 11       		.uleb128 0x11
 9614 0002 01       		.byte	0x1
 9615 0003 25       		.uleb128 0x25
 9616 0004 0E       		.uleb128 0xe
 9617 0005 13       		.uleb128 0x13
 9618 0006 0B       		.uleb128 0xb
 9619 0007 03       		.uleb128 0x3
 9620 0008 0E       		.uleb128 0xe
 9621 0009 1B       		.uleb128 0x1b
 9622 000a 0E       		.uleb128 0xe
 9623 000b 55       		.uleb128 0x55
 9624 000c 17       		.uleb128 0x17
 9625 000d 11       		.uleb128 0x11
 9626 000e 01       		.uleb128 0x1
 9627 000f 10       		.uleb128 0x10
 9628 0010 17       		.uleb128 0x17
 9629 0011 00       		.byte	0
 9630 0012 00       		.byte	0
 9631 0013 02       		.uleb128 0x2
 9632 0014 16       		.uleb128 0x16
 9633 0015 00       		.byte	0
 9634 0016 03       		.uleb128 0x3
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 272


 9635 0017 0E       		.uleb128 0xe
 9636 0018 3A       		.uleb128 0x3a
 9637 0019 0B       		.uleb128 0xb
 9638 001a 3B       		.uleb128 0x3b
 9639 001b 0B       		.uleb128 0xb
 9640 001c 49       		.uleb128 0x49
 9641 001d 13       		.uleb128 0x13
 9642 001e 00       		.byte	0
 9643 001f 00       		.byte	0
 9644 0020 03       		.uleb128 0x3
 9645 0021 24       		.uleb128 0x24
 9646 0022 00       		.byte	0
 9647 0023 0B       		.uleb128 0xb
 9648 0024 0B       		.uleb128 0xb
 9649 0025 3E       		.uleb128 0x3e
 9650 0026 0B       		.uleb128 0xb
 9651 0027 03       		.uleb128 0x3
 9652 0028 0E       		.uleb128 0xe
 9653 0029 00       		.byte	0
 9654 002a 00       		.byte	0
 9655 002b 04       		.uleb128 0x4
 9656 002c 24       		.uleb128 0x24
 9657 002d 00       		.byte	0
 9658 002e 0B       		.uleb128 0xb
 9659 002f 0B       		.uleb128 0xb
 9660 0030 3E       		.uleb128 0x3e
 9661 0031 0B       		.uleb128 0xb
 9662 0032 03       		.uleb128 0x3
 9663 0033 08       		.uleb128 0x8
 9664 0034 00       		.byte	0
 9665 0035 00       		.byte	0
 9666 0036 05       		.uleb128 0x5
 9667 0037 0F       		.uleb128 0xf
 9668 0038 00       		.byte	0
 9669 0039 0B       		.uleb128 0xb
 9670 003a 0B       		.uleb128 0xb
 9671 003b 00       		.byte	0
 9672 003c 00       		.byte	0
 9673 003d 06       		.uleb128 0x6
 9674 003e 0F       		.uleb128 0xf
 9675 003f 00       		.byte	0
 9676 0040 0B       		.uleb128 0xb
 9677 0041 0B       		.uleb128 0xb
 9678 0042 49       		.uleb128 0x49
 9679 0043 13       		.uleb128 0x13
 9680 0044 00       		.byte	0
 9681 0045 00       		.byte	0
 9682 0046 07       		.uleb128 0x7
 9683 0047 26       		.uleb128 0x26
 9684 0048 00       		.byte	0
 9685 0049 49       		.uleb128 0x49
 9686 004a 13       		.uleb128 0x13
 9687 004b 00       		.byte	0
 9688 004c 00       		.byte	0
 9689 004d 08       		.uleb128 0x8
 9690 004e 35       		.uleb128 0x35
 9691 004f 00       		.byte	0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 273


 9692 0050 49       		.uleb128 0x49
 9693 0051 13       		.uleb128 0x13
 9694 0052 00       		.byte	0
 9695 0053 00       		.byte	0
 9696 0054 09       		.uleb128 0x9
 9697 0055 15       		.uleb128 0x15
 9698 0056 01       		.byte	0x1
 9699 0057 27       		.uleb128 0x27
 9700 0058 19       		.uleb128 0x19
 9701 0059 01       		.uleb128 0x1
 9702 005a 13       		.uleb128 0x13
 9703 005b 00       		.byte	0
 9704 005c 00       		.byte	0
 9705 005d 0A       		.uleb128 0xa
 9706 005e 05       		.uleb128 0x5
 9707 005f 00       		.byte	0
 9708 0060 49       		.uleb128 0x49
 9709 0061 13       		.uleb128 0x13
 9710 0062 00       		.byte	0
 9711 0063 00       		.byte	0
 9712 0064 0B       		.uleb128 0xb
 9713 0065 01       		.uleb128 0x1
 9714 0066 01       		.byte	0x1
 9715 0067 49       		.uleb128 0x49
 9716 0068 13       		.uleb128 0x13
 9717 0069 01       		.uleb128 0x1
 9718 006a 13       		.uleb128 0x13
 9719 006b 00       		.byte	0
 9720 006c 00       		.byte	0
 9721 006d 0C       		.uleb128 0xc
 9722 006e 21       		.uleb128 0x21
 9723 006f 00       		.byte	0
 9724 0070 49       		.uleb128 0x49
 9725 0071 13       		.uleb128 0x13
 9726 0072 2F       		.uleb128 0x2f
 9727 0073 0B       		.uleb128 0xb
 9728 0074 00       		.byte	0
 9729 0075 00       		.byte	0
 9730 0076 0D       		.uleb128 0xd
 9731 0077 13       		.uleb128 0x13
 9732 0078 01       		.byte	0x1
 9733 0079 03       		.uleb128 0x3
 9734 007a 0E       		.uleb128 0xe
 9735 007b 0B       		.uleb128 0xb
 9736 007c 0B       		.uleb128 0xb
 9737 007d 3A       		.uleb128 0x3a
 9738 007e 0B       		.uleb128 0xb
 9739 007f 3B       		.uleb128 0x3b
 9740 0080 0B       		.uleb128 0xb
 9741 0081 01       		.uleb128 0x1
 9742 0082 13       		.uleb128 0x13
 9743 0083 00       		.byte	0
 9744 0084 00       		.byte	0
 9745 0085 0E       		.uleb128 0xe
 9746 0086 0D       		.uleb128 0xd
 9747 0087 00       		.byte	0
 9748 0088 03       		.uleb128 0x3
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 274


 9749 0089 0E       		.uleb128 0xe
 9750 008a 3A       		.uleb128 0x3a
 9751 008b 0B       		.uleb128 0xb
 9752 008c 3B       		.uleb128 0x3b
 9753 008d 0B       		.uleb128 0xb
 9754 008e 49       		.uleb128 0x49
 9755 008f 13       		.uleb128 0x13
 9756 0090 38       		.uleb128 0x38
 9757 0091 0B       		.uleb128 0xb
 9758 0092 00       		.byte	0
 9759 0093 00       		.byte	0
 9760 0094 0F       		.uleb128 0xf
 9761 0095 04       		.uleb128 0x4
 9762 0096 01       		.byte	0x1
 9763 0097 0B       		.uleb128 0xb
 9764 0098 0B       		.uleb128 0xb
 9765 0099 49       		.uleb128 0x49
 9766 009a 13       		.uleb128 0x13
 9767 009b 3A       		.uleb128 0x3a
 9768 009c 0B       		.uleb128 0xb
 9769 009d 3B       		.uleb128 0x3b
 9770 009e 0B       		.uleb128 0xb
 9771 009f 01       		.uleb128 0x1
 9772 00a0 13       		.uleb128 0x13
 9773 00a1 00       		.byte	0
 9774 00a2 00       		.byte	0
 9775 00a3 10       		.uleb128 0x10
 9776 00a4 28       		.uleb128 0x28
 9777 00a5 00       		.byte	0
 9778 00a6 03       		.uleb128 0x3
 9779 00a7 0E       		.uleb128 0xe
 9780 00a8 1C       		.uleb128 0x1c
 9781 00a9 0B       		.uleb128 0xb
 9782 00aa 00       		.byte	0
 9783 00ab 00       		.byte	0
 9784 00ac 11       		.uleb128 0x11
 9785 00ad 13       		.uleb128 0x13
 9786 00ae 01       		.byte	0x1
 9787 00af 03       		.uleb128 0x3
 9788 00b0 0E       		.uleb128 0xe
 9789 00b1 0B       		.uleb128 0xb
 9790 00b2 0B       		.uleb128 0xb
 9791 00b3 3A       		.uleb128 0x3a
 9792 00b4 0B       		.uleb128 0xb
 9793 00b5 3B       		.uleb128 0x3b
 9794 00b6 05       		.uleb128 0x5
 9795 00b7 01       		.uleb128 0x1
 9796 00b8 13       		.uleb128 0x13
 9797 00b9 00       		.byte	0
 9798 00ba 00       		.byte	0
 9799 00bb 12       		.uleb128 0x12
 9800 00bc 0D       		.uleb128 0xd
 9801 00bd 00       		.byte	0
 9802 00be 03       		.uleb128 0x3
 9803 00bf 0E       		.uleb128 0xe
 9804 00c0 3A       		.uleb128 0x3a
 9805 00c1 0B       		.uleb128 0xb
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 275


 9806 00c2 3B       		.uleb128 0x3b
 9807 00c3 05       		.uleb128 0x5
 9808 00c4 49       		.uleb128 0x49
 9809 00c5 13       		.uleb128 0x13
 9810 00c6 38       		.uleb128 0x38
 9811 00c7 0B       		.uleb128 0xb
 9812 00c8 00       		.byte	0
 9813 00c9 00       		.byte	0
 9814 00ca 13       		.uleb128 0x13
 9815 00cb 16       		.uleb128 0x16
 9816 00cc 00       		.byte	0
 9817 00cd 03       		.uleb128 0x3
 9818 00ce 0E       		.uleb128 0xe
 9819 00cf 3A       		.uleb128 0x3a
 9820 00d0 0B       		.uleb128 0xb
 9821 00d1 3B       		.uleb128 0x3b
 9822 00d2 05       		.uleb128 0x5
 9823 00d3 49       		.uleb128 0x49
 9824 00d4 13       		.uleb128 0x13
 9825 00d5 00       		.byte	0
 9826 00d6 00       		.byte	0
 9827 00d7 14       		.uleb128 0x14
 9828 00d8 2E       		.uleb128 0x2e
 9829 00d9 01       		.byte	0x1
 9830 00da 03       		.uleb128 0x3
 9831 00db 0E       		.uleb128 0xe
 9832 00dc 3A       		.uleb128 0x3a
 9833 00dd 0B       		.uleb128 0xb
 9834 00de 3B       		.uleb128 0x3b
 9835 00df 05       		.uleb128 0x5
 9836 00e0 27       		.uleb128 0x27
 9837 00e1 19       		.uleb128 0x19
 9838 00e2 49       		.uleb128 0x49
 9839 00e3 13       		.uleb128 0x13
 9840 00e4 11       		.uleb128 0x11
 9841 00e5 01       		.uleb128 0x1
 9842 00e6 12       		.uleb128 0x12
 9843 00e7 06       		.uleb128 0x6
 9844 00e8 40       		.uleb128 0x40
 9845 00e9 18       		.uleb128 0x18
 9846 00ea 9742     		.uleb128 0x2117
 9847 00ec 19       		.uleb128 0x19
 9848 00ed 01       		.uleb128 0x1
 9849 00ee 13       		.uleb128 0x13
 9850 00ef 00       		.byte	0
 9851 00f0 00       		.byte	0
 9852 00f1 15       		.uleb128 0x15
 9853 00f2 05       		.uleb128 0x5
 9854 00f3 00       		.byte	0
 9855 00f4 03       		.uleb128 0x3
 9856 00f5 0E       		.uleb128 0xe
 9857 00f6 3A       		.uleb128 0x3a
 9858 00f7 0B       		.uleb128 0xb
 9859 00f8 3B       		.uleb128 0x3b
 9860 00f9 05       		.uleb128 0x5
 9861 00fa 49       		.uleb128 0x49
 9862 00fb 13       		.uleb128 0x13
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 276


 9863 00fc 02       		.uleb128 0x2
 9864 00fd 17       		.uleb128 0x17
 9865 00fe 00       		.byte	0
 9866 00ff 00       		.byte	0
 9867 0100 16       		.uleb128 0x16
 9868 0101 34       		.uleb128 0x34
 9869 0102 00       		.byte	0
 9870 0103 03       		.uleb128 0x3
 9871 0104 0E       		.uleb128 0xe
 9872 0105 3A       		.uleb128 0x3a
 9873 0106 0B       		.uleb128 0xb
 9874 0107 3B       		.uleb128 0x3b
 9875 0108 05       		.uleb128 0x5
 9876 0109 49       		.uleb128 0x49
 9877 010a 13       		.uleb128 0x13
 9878 010b 02       		.uleb128 0x2
 9879 010c 17       		.uleb128 0x17
 9880 010d 00       		.byte	0
 9881 010e 00       		.byte	0
 9882 010f 17       		.uleb128 0x17
 9883 0110 2E       		.uleb128 0x2e
 9884 0111 01       		.byte	0x1
 9885 0112 03       		.uleb128 0x3
 9886 0113 0E       		.uleb128 0xe
 9887 0114 3A       		.uleb128 0x3a
 9888 0115 0B       		.uleb128 0xb
 9889 0116 3B       		.uleb128 0x3b
 9890 0117 05       		.uleb128 0x5
 9891 0118 27       		.uleb128 0x27
 9892 0119 19       		.uleb128 0x19
 9893 011a 11       		.uleb128 0x11
 9894 011b 01       		.uleb128 0x1
 9895 011c 12       		.uleb128 0x12
 9896 011d 06       		.uleb128 0x6
 9897 011e 40       		.uleb128 0x40
 9898 011f 18       		.uleb128 0x18
 9899 0120 9742     		.uleb128 0x2117
 9900 0122 19       		.uleb128 0x19
 9901 0123 01       		.uleb128 0x1
 9902 0124 13       		.uleb128 0x13
 9903 0125 00       		.byte	0
 9904 0126 00       		.byte	0
 9905 0127 18       		.uleb128 0x18
 9906 0128 898201   		.uleb128 0x4109
 9907 012b 00       		.byte	0
 9908 012c 11       		.uleb128 0x11
 9909 012d 01       		.uleb128 0x1
 9910 012e 31       		.uleb128 0x31
 9911 012f 13       		.uleb128 0x13
 9912 0130 00       		.byte	0
 9913 0131 00       		.byte	0
 9914 0132 19       		.uleb128 0x19
 9915 0133 898201   		.uleb128 0x4109
 9916 0136 01       		.byte	0x1
 9917 0137 11       		.uleb128 0x11
 9918 0138 01       		.uleb128 0x1
 9919 0139 31       		.uleb128 0x31
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 277


 9920 013a 13       		.uleb128 0x13
 9921 013b 00       		.byte	0
 9922 013c 00       		.byte	0
 9923 013d 1A       		.uleb128 0x1a
 9924 013e 8A8201   		.uleb128 0x410a
 9925 0141 00       		.byte	0
 9926 0142 02       		.uleb128 0x2
 9927 0143 18       		.uleb128 0x18
 9928 0144 9142     		.uleb128 0x2111
 9929 0146 18       		.uleb128 0x18
 9930 0147 00       		.byte	0
 9931 0148 00       		.byte	0
 9932 0149 1B       		.uleb128 0x1b
 9933 014a 05       		.uleb128 0x5
 9934 014b 00       		.byte	0
 9935 014c 03       		.uleb128 0x3
 9936 014d 0E       		.uleb128 0xe
 9937 014e 3A       		.uleb128 0x3a
 9938 014f 0B       		.uleb128 0xb
 9939 0150 3B       		.uleb128 0x3b
 9940 0151 05       		.uleb128 0x5
 9941 0152 49       		.uleb128 0x49
 9942 0153 13       		.uleb128 0x13
 9943 0154 02       		.uleb128 0x2
 9944 0155 18       		.uleb128 0x18
 9945 0156 00       		.byte	0
 9946 0157 00       		.byte	0
 9947 0158 1C       		.uleb128 0x1c
 9948 0159 34       		.uleb128 0x34
 9949 015a 00       		.byte	0
 9950 015b 03       		.uleb128 0x3
 9951 015c 08       		.uleb128 0x8
 9952 015d 3A       		.uleb128 0x3a
 9953 015e 0B       		.uleb128 0xb
 9954 015f 3B       		.uleb128 0x3b
 9955 0160 05       		.uleb128 0x5
 9956 0161 49       		.uleb128 0x49
 9957 0162 13       		.uleb128 0x13
 9958 0163 02       		.uleb128 0x2
 9959 0164 17       		.uleb128 0x17
 9960 0165 00       		.byte	0
 9961 0166 00       		.byte	0
 9962 0167 1D       		.uleb128 0x1d
 9963 0168 898201   		.uleb128 0x4109
 9964 016b 01       		.byte	0x1
 9965 016c 11       		.uleb128 0x11
 9966 016d 01       		.uleb128 0x1
 9967 016e 31       		.uleb128 0x31
 9968 016f 13       		.uleb128 0x13
 9969 0170 01       		.uleb128 0x1
 9970 0171 13       		.uleb128 0x13
 9971 0172 00       		.byte	0
 9972 0173 00       		.byte	0
 9973 0174 1E       		.uleb128 0x1e
 9974 0175 0B       		.uleb128 0xb
 9975 0176 01       		.byte	0x1
 9976 0177 11       		.uleb128 0x11
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 278


 9977 0178 01       		.uleb128 0x1
 9978 0179 12       		.uleb128 0x12
 9979 017a 06       		.uleb128 0x6
 9980 017b 00       		.byte	0
 9981 017c 00       		.byte	0
 9982 017d 1F       		.uleb128 0x1f
 9983 017e 2E       		.uleb128 0x2e
 9984 017f 01       		.byte	0x1
 9985 0180 03       		.uleb128 0x3
 9986 0181 0E       		.uleb128 0xe
 9987 0182 3A       		.uleb128 0x3a
 9988 0183 0B       		.uleb128 0xb
 9989 0184 3B       		.uleb128 0x3b
 9990 0185 05       		.uleb128 0x5
 9991 0186 27       		.uleb128 0x27
 9992 0187 19       		.uleb128 0x19
 9993 0188 8701     		.uleb128 0x87
 9994 018a 19       		.uleb128 0x19
 9995 018b 11       		.uleb128 0x11
 9996 018c 01       		.uleb128 0x1
 9997 018d 12       		.uleb128 0x12
 9998 018e 06       		.uleb128 0x6
 9999 018f 40       		.uleb128 0x40
 10000 0190 18       		.uleb128 0x18
 10001 0191 9742     		.uleb128 0x2117
 10002 0193 19       		.uleb128 0x19
 10003 0194 01       		.uleb128 0x1
 10004 0195 13       		.uleb128 0x13
 10005 0196 00       		.byte	0
 10006 0197 00       		.byte	0
 10007 0198 20       		.uleb128 0x20
 10008 0199 2E       		.uleb128 0x2e
 10009 019a 01       		.byte	0x1
 10010 019b 3F       		.uleb128 0x3f
 10011 019c 19       		.uleb128 0x19
 10012 019d 03       		.uleb128 0x3
 10013 019e 0E       		.uleb128 0xe
 10014 019f 3A       		.uleb128 0x3a
 10015 01a0 0B       		.uleb128 0xb
 10016 01a1 3B       		.uleb128 0x3b
 10017 01a2 05       		.uleb128 0x5
 10018 01a3 27       		.uleb128 0x27
 10019 01a4 19       		.uleb128 0x19
 10020 01a5 49       		.uleb128 0x49
 10021 01a6 13       		.uleb128 0x13
 10022 01a7 11       		.uleb128 0x11
 10023 01a8 01       		.uleb128 0x1
 10024 01a9 12       		.uleb128 0x12
 10025 01aa 06       		.uleb128 0x6
 10026 01ab 40       		.uleb128 0x40
 10027 01ac 18       		.uleb128 0x18
 10028 01ad 9742     		.uleb128 0x2117
 10029 01af 19       		.uleb128 0x19
 10030 01b0 01       		.uleb128 0x1
 10031 01b1 13       		.uleb128 0x13
 10032 01b2 00       		.byte	0
 10033 01b3 00       		.byte	0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 279


 10034 01b4 21       		.uleb128 0x21
 10035 01b5 0B       		.uleb128 0xb
 10036 01b6 01       		.byte	0x1
 10037 01b7 11       		.uleb128 0x11
 10038 01b8 01       		.uleb128 0x1
 10039 01b9 12       		.uleb128 0x12
 10040 01ba 06       		.uleb128 0x6
 10041 01bb 01       		.uleb128 0x1
 10042 01bc 13       		.uleb128 0x13
 10043 01bd 00       		.byte	0
 10044 01be 00       		.byte	0
 10045 01bf 22       		.uleb128 0x22
 10046 01c0 2E       		.uleb128 0x2e
 10047 01c1 01       		.byte	0x1
 10048 01c2 3F       		.uleb128 0x3f
 10049 01c3 19       		.uleb128 0x19
 10050 01c4 03       		.uleb128 0x3
 10051 01c5 0E       		.uleb128 0xe
 10052 01c6 3A       		.uleb128 0x3a
 10053 01c7 0B       		.uleb128 0xb
 10054 01c8 3B       		.uleb128 0x3b
 10055 01c9 05       		.uleb128 0x5
 10056 01ca 27       		.uleb128 0x27
 10057 01cb 19       		.uleb128 0x19
 10058 01cc 11       		.uleb128 0x11
 10059 01cd 01       		.uleb128 0x1
 10060 01ce 12       		.uleb128 0x12
 10061 01cf 06       		.uleb128 0x6
 10062 01d0 40       		.uleb128 0x40
 10063 01d1 18       		.uleb128 0x18
 10064 01d2 9742     		.uleb128 0x2117
 10065 01d4 19       		.uleb128 0x19
 10066 01d5 01       		.uleb128 0x1
 10067 01d6 13       		.uleb128 0x13
 10068 01d7 00       		.byte	0
 10069 01d8 00       		.byte	0
 10070 01d9 23       		.uleb128 0x23
 10071 01da 34       		.uleb128 0x34
 10072 01db 00       		.byte	0
 10073 01dc 03       		.uleb128 0x3
 10074 01dd 0E       		.uleb128 0xe
 10075 01de 3A       		.uleb128 0x3a
 10076 01df 0B       		.uleb128 0xb
 10077 01e0 3B       		.uleb128 0x3b
 10078 01e1 05       		.uleb128 0x5
 10079 01e2 49       		.uleb128 0x49
 10080 01e3 13       		.uleb128 0x13
 10081 01e4 02       		.uleb128 0x2
 10082 01e5 18       		.uleb128 0x18
 10083 01e6 00       		.byte	0
 10084 01e7 00       		.byte	0
 10085 01e8 24       		.uleb128 0x24
 10086 01e9 2E       		.uleb128 0x2e
 10087 01ea 00       		.byte	0
 10088 01eb 3F       		.uleb128 0x3f
 10089 01ec 19       		.uleb128 0x19
 10090 01ed 03       		.uleb128 0x3
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 280


 10091 01ee 0E       		.uleb128 0xe
 10092 01ef 3A       		.uleb128 0x3a
 10093 01f0 0B       		.uleb128 0xb
 10094 01f1 3B       		.uleb128 0x3b
 10095 01f2 05       		.uleb128 0x5
 10096 01f3 27       		.uleb128 0x27
 10097 01f4 19       		.uleb128 0x19
 10098 01f5 11       		.uleb128 0x11
 10099 01f6 01       		.uleb128 0x1
 10100 01f7 12       		.uleb128 0x12
 10101 01f8 06       		.uleb128 0x6
 10102 01f9 40       		.uleb128 0x40
 10103 01fa 18       		.uleb128 0x18
 10104 01fb 9742     		.uleb128 0x2117
 10105 01fd 19       		.uleb128 0x19
 10106 01fe 00       		.byte	0
 10107 01ff 00       		.byte	0
 10108 0200 25       		.uleb128 0x25
 10109 0201 34       		.uleb128 0x34
 10110 0202 00       		.byte	0
 10111 0203 03       		.uleb128 0x3
 10112 0204 0E       		.uleb128 0xe
 10113 0205 3A       		.uleb128 0x3a
 10114 0206 0B       		.uleb128 0xb
 10115 0207 3B       		.uleb128 0x3b
 10116 0208 05       		.uleb128 0x5
 10117 0209 49       		.uleb128 0x49
 10118 020a 13       		.uleb128 0x13
 10119 020b 1C       		.uleb128 0x1c
 10120 020c 0B       		.uleb128 0xb
 10121 020d 00       		.byte	0
 10122 020e 00       		.byte	0
 10123 020f 26       		.uleb128 0x26
 10124 0210 2E       		.uleb128 0x2e
 10125 0211 00       		.byte	0
 10126 0212 3F       		.uleb128 0x3f
 10127 0213 19       		.uleb128 0x19
 10128 0214 03       		.uleb128 0x3
 10129 0215 0E       		.uleb128 0xe
 10130 0216 3A       		.uleb128 0x3a
 10131 0217 0B       		.uleb128 0xb
 10132 0218 3B       		.uleb128 0x3b
 10133 0219 05       		.uleb128 0x5
 10134 021a 27       		.uleb128 0x27
 10135 021b 19       		.uleb128 0x19
 10136 021c 49       		.uleb128 0x49
 10137 021d 13       		.uleb128 0x13
 10138 021e 11       		.uleb128 0x11
 10139 021f 01       		.uleb128 0x1
 10140 0220 12       		.uleb128 0x12
 10141 0221 06       		.uleb128 0x6
 10142 0222 40       		.uleb128 0x40
 10143 0223 18       		.uleb128 0x18
 10144 0224 9742     		.uleb128 0x2117
 10145 0226 19       		.uleb128 0x19
 10146 0227 00       		.byte	0
 10147 0228 00       		.byte	0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 281


 10148 0229 27       		.uleb128 0x27
 10149 022a 0B       		.uleb128 0xb
 10150 022b 01       		.byte	0x1
 10151 022c 55       		.uleb128 0x55
 10152 022d 17       		.uleb128 0x17
 10153 022e 00       		.byte	0
 10154 022f 00       		.byte	0
 10155 0230 28       		.uleb128 0x28
 10156 0231 0B       		.uleb128 0xb
 10157 0232 01       		.byte	0x1
 10158 0233 55       		.uleb128 0x55
 10159 0234 17       		.uleb128 0x17
 10160 0235 01       		.uleb128 0x1
 10161 0236 13       		.uleb128 0x13
 10162 0237 00       		.byte	0
 10163 0238 00       		.byte	0
 10164 0239 29       		.uleb128 0x29
 10165 023a 34       		.uleb128 0x34
 10166 023b 00       		.byte	0
 10167 023c 03       		.uleb128 0x3
 10168 023d 08       		.uleb128 0x8
 10169 023e 3A       		.uleb128 0x3a
 10170 023f 0B       		.uleb128 0xb
 10171 0240 3B       		.uleb128 0x3b
 10172 0241 05       		.uleb128 0x5
 10173 0242 49       		.uleb128 0x49
 10174 0243 13       		.uleb128 0x13
 10175 0244 02       		.uleb128 0x2
 10176 0245 18       		.uleb128 0x18
 10177 0246 00       		.byte	0
 10178 0247 00       		.byte	0
 10179 0248 2A       		.uleb128 0x2a
 10180 0249 34       		.uleb128 0x34
 10181 024a 00       		.byte	0
 10182 024b 03       		.uleb128 0x3
 10183 024c 0E       		.uleb128 0xe
 10184 024d 3A       		.uleb128 0x3a
 10185 024e 0B       		.uleb128 0xb
 10186 024f 3B       		.uleb128 0x3b
 10187 0250 05       		.uleb128 0x5
 10188 0251 49       		.uleb128 0x49
 10189 0252 13       		.uleb128 0x13
 10190 0253 3F       		.uleb128 0x3f
 10191 0254 19       		.uleb128 0x19
 10192 0255 02       		.uleb128 0x2
 10193 0256 18       		.uleb128 0x18
 10194 0257 00       		.byte	0
 10195 0258 00       		.byte	0
 10196 0259 2B       		.uleb128 0x2b
 10197 025a 2E       		.uleb128 0x2e
 10198 025b 00       		.byte	0
 10199 025c 3F       		.uleb128 0x3f
 10200 025d 19       		.uleb128 0x19
 10201 025e 3C       		.uleb128 0x3c
 10202 025f 19       		.uleb128 0x19
 10203 0260 6E       		.uleb128 0x6e
 10204 0261 0E       		.uleb128 0xe
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 282


 10205 0262 03       		.uleb128 0x3
 10206 0263 0E       		.uleb128 0xe
 10207 0264 3A       		.uleb128 0x3a
 10208 0265 0B       		.uleb128 0xb
 10209 0266 3B       		.uleb128 0x3b
 10210 0267 0B       		.uleb128 0xb
 10211 0268 00       		.byte	0
 10212 0269 00       		.byte	0
 10213 026a 2C       		.uleb128 0x2c
 10214 026b 2E       		.uleb128 0x2e
 10215 026c 00       		.byte	0
 10216 026d 3F       		.uleb128 0x3f
 10217 026e 19       		.uleb128 0x19
 10218 026f 3C       		.uleb128 0x3c
 10219 0270 19       		.uleb128 0x19
 10220 0271 6E       		.uleb128 0x6e
 10221 0272 0E       		.uleb128 0xe
 10222 0273 03       		.uleb128 0x3
 10223 0274 0E       		.uleb128 0xe
 10224 0275 3A       		.uleb128 0x3a
 10225 0276 0B       		.uleb128 0xb
 10226 0277 3B       		.uleb128 0x3b
 10227 0278 05       		.uleb128 0x5
 10228 0279 00       		.byte	0
 10229 027a 00       		.byte	0
 10230 027b 00       		.byte	0
 10231              		.section	.debug_loc,"",%progbits
 10232              	.Ldebug_loc0:
 10233              	.LLST0:
 10234 0000 00000000 		.4byte	.LVL0
 10235 0004 30000000 		.4byte	.LVL1
 10236 0008 0100     		.2byte	0x1
 10237 000a 50       		.byte	0x50
 10238 000b 30000000 		.4byte	.LVL1
 10239 000f 32000000 		.4byte	.LVL2
 10240 0013 0400     		.2byte	0x4
 10241 0015 F3       		.byte	0xf3
 10242 0016 01       		.uleb128 0x1
 10243 0017 50       		.byte	0x50
 10244 0018 9F       		.byte	0x9f
 10245 0019 32000000 		.4byte	.LVL2
 10246 001d 34000000 		.4byte	.LVL3
 10247 0021 0100     		.2byte	0x1
 10248 0023 50       		.byte	0x50
 10249 0024 34000000 		.4byte	.LVL3
 10250 0028 36000000 		.4byte	.LVL4
 10251 002c 0400     		.2byte	0x4
 10252 002e F3       		.byte	0xf3
 10253 002f 01       		.uleb128 0x1
 10254 0030 50       		.byte	0x50
 10255 0031 9F       		.byte	0x9f
 10256 0032 36000000 		.4byte	.LVL4
 10257 0036 38000000 		.4byte	.LVL5
 10258 003a 0100     		.2byte	0x1
 10259 003c 50       		.byte	0x50
 10260 003d 38000000 		.4byte	.LVL5
 10261 0041 3A000000 		.4byte	.LVL6
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 283


 10262 0045 0400     		.2byte	0x4
 10263 0047 F3       		.byte	0xf3
 10264 0048 01       		.uleb128 0x1
 10265 0049 50       		.byte	0x50
 10266 004a 9F       		.byte	0x9f
 10267 004b 3A000000 		.4byte	.LVL6
 10268 004f 3C000000 		.4byte	.LVL7
 10269 0053 0100     		.2byte	0x1
 10270 0055 50       		.byte	0x50
 10271 0056 3C000000 		.4byte	.LVL7
 10272 005a 44000000 		.4byte	.LFE48
 10273 005e 0400     		.2byte	0x4
 10274 0060 F3       		.byte	0xf3
 10275 0061 01       		.uleb128 0x1
 10276 0062 50       		.byte	0x50
 10277 0063 9F       		.byte	0x9f
 10278 0064 00000000 		.4byte	0
 10279 0068 00000000 		.4byte	0
 10280              	.LLST1:
 10281 006c 00000000 		.4byte	.LVL0
 10282 0070 3C000000 		.4byte	.LVL7
 10283 0074 0200     		.2byte	0x2
 10284 0076 30       		.byte	0x30
 10285 0077 9F       		.byte	0x9f
 10286 0078 3C000000 		.4byte	.LVL7
 10287 007c 44000000 		.4byte	.LFE48
 10288 0080 0100     		.2byte	0x1
 10289 0082 50       		.byte	0x50
 10290 0083 00000000 		.4byte	0
 10291 0087 00000000 		.4byte	0
 10292              	.LLST2:
 10293 008b 00000000 		.4byte	.LVL0
 10294 008f 30000000 		.4byte	.LVL1
 10295 0093 0100     		.2byte	0x1
 10296 0095 50       		.byte	0x50
 10297 0096 30000000 		.4byte	.LVL1
 10298 009a 32000000 		.4byte	.LVL2
 10299 009e 0400     		.2byte	0x4
 10300 00a0 F3       		.byte	0xf3
 10301 00a1 01       		.uleb128 0x1
 10302 00a2 50       		.byte	0x50
 10303 00a3 9F       		.byte	0x9f
 10304 00a4 32000000 		.4byte	.LVL2
 10305 00a8 34000000 		.4byte	.LVL3
 10306 00ac 0100     		.2byte	0x1
 10307 00ae 50       		.byte	0x50
 10308 00af 34000000 		.4byte	.LVL3
 10309 00b3 36000000 		.4byte	.LVL4
 10310 00b7 0400     		.2byte	0x4
 10311 00b9 F3       		.byte	0xf3
 10312 00ba 01       		.uleb128 0x1
 10313 00bb 50       		.byte	0x50
 10314 00bc 9F       		.byte	0x9f
 10315 00bd 36000000 		.4byte	.LVL4
 10316 00c1 38000000 		.4byte	.LVL5
 10317 00c5 0100     		.2byte	0x1
 10318 00c7 50       		.byte	0x50
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 284


 10319 00c8 38000000 		.4byte	.LVL5
 10320 00cc 3A000000 		.4byte	.LVL6
 10321 00d0 0400     		.2byte	0x4
 10322 00d2 F3       		.byte	0xf3
 10323 00d3 01       		.uleb128 0x1
 10324 00d4 50       		.byte	0x50
 10325 00d5 9F       		.byte	0x9f
 10326 00d6 3A000000 		.4byte	.LVL6
 10327 00da 3C000000 		.4byte	.LVL7
 10328 00de 0100     		.2byte	0x1
 10329 00e0 50       		.byte	0x50
 10330 00e1 3C000000 		.4byte	.LVL7
 10331 00e5 44000000 		.4byte	.LFE48
 10332 00e9 0400     		.2byte	0x4
 10333 00eb F3       		.byte	0xf3
 10334 00ec 01       		.uleb128 0x1
 10335 00ed 50       		.byte	0x50
 10336 00ee 9F       		.byte	0x9f
 10337 00ef 00000000 		.4byte	0
 10338 00f3 00000000 		.4byte	0
 10339              	.LLST3:
 10340 00f7 00000000 		.4byte	.LVL8
 10341 00fb 06000000 		.4byte	.LVL10
 10342 00ff 0100     		.2byte	0x1
 10343 0101 50       		.byte	0x50
 10344 0102 06000000 		.4byte	.LVL10
 10345 0106 12000000 		.4byte	.LVL13
 10346 010a 0100     		.2byte	0x1
 10347 010c 50       		.byte	0x50
 10348 010d 00000000 		.4byte	0
 10349 0111 00000000 		.4byte	0
 10350              	.LLST4:
 10351 0115 00000000 		.4byte	.LVL8
 10352 0119 04000000 		.4byte	.LVL9
 10353 011d 0200     		.2byte	0x2
 10354 011f 30       		.byte	0x30
 10355 0120 9F       		.byte	0x9f
 10356 0121 04000000 		.4byte	.LVL9
 10357 0125 14000000 		.4byte	.LFE80
 10358 0129 0100     		.2byte	0x1
 10359 012b 53       		.byte	0x53
 10360 012c 00000000 		.4byte	0
 10361 0130 00000000 		.4byte	0
 10362              	.LLST5:
 10363 0134 26000000 		.4byte	.LVL14
 10364 0138 28000000 		.4byte	.LVL15
 10365 013c 0100     		.2byte	0x1
 10366 013e 52       		.byte	0x52
 10367 013f 00000000 		.4byte	0
 10368 0143 00000000 		.4byte	0
 10369              	.LLST6:
 10370 0147 00000000 		.4byte	.LVL16
 10371 014b 06000000 		.4byte	.LVL17
 10372 014f 0100     		.2byte	0x1
 10373 0151 50       		.byte	0x50
 10374 0152 06000000 		.4byte	.LVL17
 10375 0156 10000000 		.4byte	.LVL20
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 285


 10376 015a 0100     		.2byte	0x1
 10377 015c 54       		.byte	0x54
 10378 015d 10000000 		.4byte	.LVL20
 10379 0161 12000000 		.4byte	.LFE82
 10380 0165 0400     		.2byte	0x4
 10381 0167 F3       		.byte	0xf3
 10382 0168 01       		.uleb128 0x1
 10383 0169 50       		.byte	0x50
 10384 016a 9F       		.byte	0x9f
 10385 016b 00000000 		.4byte	0
 10386 016f 00000000 		.4byte	0
 10387              	.LLST7:
 10388 0173 00000000 		.4byte	.LVL21
 10389 0177 16000000 		.4byte	.LVL24
 10390 017b 0100     		.2byte	0x1
 10391 017d 50       		.byte	0x50
 10392 017e 16000000 		.4byte	.LVL24
 10393 0182 A0000000 		.4byte	.LVL42
 10394 0186 0200     		.2byte	0x2
 10395 0188 7D       		.byte	0x7d
 10396 0189 00       		.sleb128 0
 10397 018a A0000000 		.4byte	.LVL42
 10398 018e A8000000 		.4byte	.LFE38
 10399 0192 0200     		.2byte	0x2
 10400 0194 91       		.byte	0x91
 10401 0195 60       		.sleb128 -32
 10402 0196 00000000 		.4byte	0
 10403 019a 00000000 		.4byte	0
 10404              	.LLST8:
 10405 019e 00000000 		.4byte	.LVL21
 10406 01a2 14000000 		.4byte	.LVL23
 10407 01a6 0100     		.2byte	0x1
 10408 01a8 51       		.byte	0x51
 10409 01a9 14000000 		.4byte	.LVL23
 10410 01ad A0000000 		.4byte	.LVL43
 10411 01b1 0100     		.2byte	0x1
 10412 01b3 55       		.byte	0x55
 10413 01b4 A0000000 		.4byte	.LVL43
 10414 01b8 A8000000 		.4byte	.LFE38
 10415 01bc 0400     		.2byte	0x4
 10416 01be F3       		.byte	0xf3
 10417 01bf 01       		.uleb128 0x1
 10418 01c0 51       		.byte	0x51
 10419 01c1 9F       		.byte	0x9f
 10420 01c2 00000000 		.4byte	0
 10421 01c6 00000000 		.4byte	0
 10422              	.LLST9:
 10423 01ca 00000000 		.4byte	.LVL21
 10424 01ce 12000000 		.4byte	.LVL22
 10425 01d2 0100     		.2byte	0x1
 10426 01d4 52       		.byte	0x52
 10427 01d5 12000000 		.4byte	.LVL22
 10428 01d9 2C000000 		.4byte	.LVL28
 10429 01dd 0100     		.2byte	0x1
 10430 01df 57       		.byte	0x57
 10431 01e0 2C000000 		.4byte	.LVL28
 10432 01e4 A8000000 		.4byte	.LFE38
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 286


 10433 01e8 0400     		.2byte	0x4
 10434 01ea F3       		.byte	0xf3
 10435 01eb 01       		.uleb128 0x1
 10436 01ec 52       		.byte	0x52
 10437 01ed 9F       		.byte	0x9f
 10438 01ee 00000000 		.4byte	0
 10439 01f2 00000000 		.4byte	0
 10440              	.LLST10:
 10441 01f6 00000000 		.4byte	.LVL21
 10442 01fa 19000000 		.4byte	.LVL25-1
 10443 01fe 0100     		.2byte	0x1
 10444 0200 53       		.byte	0x53
 10445 0201 19000000 		.4byte	.LVL25-1
 10446 0205 A8000000 		.4byte	.LFE38
 10447 0209 0200     		.2byte	0x2
 10448 020b 91       		.byte	0x91
 10449 020c 64       		.sleb128 -28
 10450 020d 00000000 		.4byte	0
 10451 0211 00000000 		.4byte	0
 10452              	.LLST11:
 10453 0215 00000000 		.4byte	.LVL21
 10454 0219 52000000 		.4byte	.LVL33
 10455 021d 0200     		.2byte	0x2
 10456 021f 91       		.byte	0x91
 10457 0220 00       		.sleb128 0
 10458 0221 52000000 		.4byte	.LVL33
 10459 0225 68000000 		.4byte	.LVL36
 10460 0229 0100     		.2byte	0x1
 10461 022b 54       		.byte	0x54
 10462 022c 00000000 		.4byte	0
 10463 0230 00000000 		.4byte	0
 10464              	.LLST12:
 10465 0234 26000000 		.4byte	.LVL26
 10466 0238 2A000000 		.4byte	.LVL27
 10467 023c 0100     		.2byte	0x1
 10468 023e 53       		.byte	0x53
 10469 023f 2A000000 		.4byte	.LVL27
 10470 0243 2C000000 		.4byte	.LVL28
 10471 0247 0C00     		.2byte	0xc
 10472 0249 77       		.byte	0x77
 10473 024a FFFFFFFF 		.sleb128 1073741823
 10473      03
 10474 024f 32       		.byte	0x32
 10475 0250 24       		.byte	0x24
 10476 0251 7C       		.byte	0x7c
 10477 0252 00       		.sleb128 0
 10478 0253 22       		.byte	0x22
 10479 0254 9F       		.byte	0x9f
 10480 0255 2C000000 		.4byte	.LVL28
 10481 0259 2E000000 		.4byte	.LVL29
 10482 025d 0100     		.2byte	0x1
 10483 025f 53       		.byte	0x53
 10484 0260 2E000000 		.4byte	.LVL29
 10485 0264 A0000000 		.4byte	.LVL44
 10486 0268 0100     		.2byte	0x1
 10487 026a 57       		.byte	0x57
 10488 026b 00000000 		.4byte	0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 287


 10489 026f 00000000 		.4byte	0
 10490              	.LLST13:
 10491 0273 30000000 		.4byte	.LVL30
 10492 0277 4A000000 		.4byte	.LVL32
 10493 027b 0100     		.2byte	0x1
 10494 027d 53       		.byte	0x53
 10495 027e 6C000000 		.4byte	.LVL37
 10496 0282 70000000 		.4byte	.LVL38
 10497 0286 0200     		.2byte	0x2
 10498 0288 30       		.byte	0x30
 10499 0289 9F       		.byte	0x9f
 10500 028a 70000000 		.4byte	.LVL38
 10501 028e 88000000 		.4byte	.LVL40
 10502 0292 0100     		.2byte	0x1
 10503 0294 52       		.byte	0x52
 10504 0295 00000000 		.4byte	0
 10505 0299 00000000 		.4byte	0
 10506              	.LLST14:
 10507 029d 02000000 		.4byte	.LVL45
 10508 02a1 06000000 		.4byte	.LVL46
 10509 02a5 0200     		.2byte	0x2
 10510 02a7 30       		.byte	0x30
 10511 02a8 9F       		.byte	0x9f
 10512 02a9 06000000 		.4byte	.LVL46
 10513 02ad 1E000000 		.4byte	.LVL49
 10514 02b1 0100     		.2byte	0x1
 10515 02b3 54       		.byte	0x54
 10516 02b4 00000000 		.4byte	0
 10517 02b8 00000000 		.4byte	0
 10518              	.LLST15:
 10519 02bc 00000000 		.4byte	.LVL55
 10520 02c0 07000000 		.4byte	.LVL56-1
 10521 02c4 0100     		.2byte	0x1
 10522 02c6 50       		.byte	0x50
 10523 02c7 07000000 		.4byte	.LVL56-1
 10524 02cb 84000000 		.4byte	.LVL61
 10525 02cf 0100     		.2byte	0x1
 10526 02d1 54       		.byte	0x54
 10527 02d2 84000000 		.4byte	.LVL61
 10528 02d6 94000000 		.4byte	.LFE39
 10529 02da 0400     		.2byte	0x4
 10530 02dc F3       		.byte	0xf3
 10531 02dd 01       		.uleb128 0x1
 10532 02de 50       		.byte	0x50
 10533 02df 9F       		.byte	0x9f
 10534 02e0 00000000 		.4byte	0
 10535 02e4 00000000 		.4byte	0
 10536              	.LLST16:
 10537 02e8 0E000000 		.4byte	.LVL63
 10538 02ec 2C000000 		.4byte	.LVL66
 10539 02f0 0100     		.2byte	0x1
 10540 02f2 55       		.byte	0x55
 10541 02f3 00000000 		.4byte	0
 10542 02f7 00000000 		.4byte	0
 10543              	.LLST17:
 10544 02fb 00000000 		.4byte	.LVL67
 10545 02ff 02000000 		.4byte	.LVL68
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 288


 10546 0303 0100     		.2byte	0x1
 10547 0305 50       		.byte	0x50
 10548 0306 02000000 		.4byte	.LVL68
 10549 030a 18000000 		.4byte	.LFE73
 10550 030e 0400     		.2byte	0x4
 10551 0310 F3       		.byte	0xf3
 10552 0311 01       		.uleb128 0x1
 10553 0312 50       		.byte	0x50
 10554 0313 9F       		.byte	0x9f
 10555 0314 00000000 		.4byte	0
 10556 0318 00000000 		.4byte	0
 10557              	.LLST18:
 10558 031c 00000000 		.4byte	.LVL71
 10559 0320 0C000000 		.4byte	.LVL73
 10560 0324 0100     		.2byte	0x1
 10561 0326 50       		.byte	0x50
 10562 0327 0C000000 		.4byte	.LVL73
 10563 032b 2A000000 		.4byte	.LVL76
 10564 032f 0100     		.2byte	0x1
 10565 0331 54       		.byte	0x54
 10566 0332 2A000000 		.4byte	.LVL76
 10567 0336 6C000000 		.4byte	.LFE95
 10568 033a 0400     		.2byte	0x4
 10569 033c F3       		.byte	0xf3
 10570 033d 01       		.uleb128 0x1
 10571 033e 50       		.byte	0x50
 10572 033f 9F       		.byte	0x9f
 10573 0340 00000000 		.4byte	0
 10574 0344 00000000 		.4byte	0
 10575              	.LLST19:
 10576 0348 00000000 		.4byte	.LVL71
 10577 034c 11000000 		.4byte	.LVL74-1
 10578 0350 0100     		.2byte	0x1
 10579 0352 51       		.byte	0x51
 10580 0353 11000000 		.4byte	.LVL74-1
 10581 0357 46000000 		.4byte	.LVL78
 10582 035b 0100     		.2byte	0x1
 10583 035d 55       		.byte	0x55
 10584 035e 46000000 		.4byte	.LVL78
 10585 0362 6C000000 		.4byte	.LFE95
 10586 0366 0400     		.2byte	0x4
 10587 0368 F3       		.byte	0xf3
 10588 0369 01       		.uleb128 0x1
 10589 036a 51       		.byte	0x51
 10590 036b 9F       		.byte	0x9f
 10591 036c 00000000 		.4byte	0
 10592 0370 00000000 		.4byte	0
 10593              	.LLST20:
 10594 0374 2A000000 		.4byte	.LVL76
 10595 0378 5C000000 		.4byte	.LVL80
 10596 037c 0100     		.2byte	0x1
 10597 037e 54       		.byte	0x54
 10598 037f 00000000 		.4byte	0
 10599 0383 00000000 		.4byte	0
 10600              	.LLST21:
 10601 0387 0A000000 		.4byte	.LVL72
 10602 038b 5C000000 		.4byte	.LVL81
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 289


 10603 038f 0100     		.2byte	0x1
 10604 0391 56       		.byte	0x56
 10605 0392 00000000 		.4byte	0
 10606 0396 00000000 		.4byte	0
 10607              	.LLST22:
 10608 039a 00000000 		.4byte	.LVL82
 10609 039e 07000000 		.4byte	.LVL83-1
 10610 03a2 0100     		.2byte	0x1
 10611 03a4 50       		.byte	0x50
 10612 03a5 07000000 		.4byte	.LVL83-1
 10613 03a9 20000000 		.4byte	.LVL87
 10614 03ad 0100     		.2byte	0x1
 10615 03af 54       		.byte	0x54
 10616 03b0 20000000 		.4byte	.LVL87
 10617 03b4 22000000 		.4byte	.LFE86
 10618 03b8 0400     		.2byte	0x4
 10619 03ba F3       		.byte	0xf3
 10620 03bb 01       		.uleb128 0x1
 10621 03bc 50       		.byte	0x50
 10622 03bd 9F       		.byte	0x9f
 10623 03be 00000000 		.4byte	0
 10624 03c2 00000000 		.4byte	0
 10625              	.LLST23:
 10626 03c6 00000000 		.4byte	.LVL82
 10627 03ca 07000000 		.4byte	.LVL83-1
 10628 03ce 0100     		.2byte	0x1
 10629 03d0 51       		.byte	0x51
 10630 03d1 07000000 		.4byte	.LVL83-1
 10631 03d5 22000000 		.4byte	.LFE86
 10632 03d9 0400     		.2byte	0x4
 10633 03db F3       		.byte	0xf3
 10634 03dc 01       		.uleb128 0x1
 10635 03dd 51       		.byte	0x51
 10636 03de 9F       		.byte	0x9f
 10637 03df 00000000 		.4byte	0
 10638 03e3 00000000 		.4byte	0
 10639              	.LLST24:
 10640 03e7 0E000000 		.4byte	.LVL84
 10641 03eb 1C000000 		.4byte	.LVL86
 10642 03ef 0100     		.2byte	0x1
 10643 03f1 50       		.byte	0x50
 10644 03f2 00000000 		.4byte	0
 10645 03f6 00000000 		.4byte	0
 10646              	.LLST25:
 10647 03fa 00000000 		.4byte	.LVL88
 10648 03fe 0E000000 		.4byte	.LVL89
 10649 0402 0100     		.2byte	0x1
 10650 0404 50       		.byte	0x50
 10651 0405 0E000000 		.4byte	.LVL89
 10652 0409 5E000000 		.4byte	.LFE37
 10653 040d 0200     		.2byte	0x2
 10654 040f 91       		.byte	0x91
 10655 0410 60       		.sleb128 -32
 10656 0411 00000000 		.4byte	0
 10657 0415 00000000 		.4byte	0
 10658              	.LLST26:
 10659 0419 00000000 		.4byte	.LVL88
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 290


 10660 041d 11000000 		.4byte	.LVL90-1
 10661 0421 0100     		.2byte	0x1
 10662 0423 51       		.byte	0x51
 10663 0424 11000000 		.4byte	.LVL90-1
 10664 0428 5E000000 		.4byte	.LFE37
 10665 042c 0200     		.2byte	0x2
 10666 042e 91       		.byte	0x91
 10667 042f 64       		.sleb128 -28
 10668 0430 00000000 		.4byte	0
 10669 0434 00000000 		.4byte	0
 10670              	.LLST27:
 10671 0438 00000000 		.4byte	.LVL88
 10672 043c 11000000 		.4byte	.LVL90-1
 10673 0440 0100     		.2byte	0x1
 10674 0442 52       		.byte	0x52
 10675 0443 11000000 		.4byte	.LVL90-1
 10676 0447 5E000000 		.4byte	.LFE37
 10677 044b 0400     		.2byte	0x4
 10678 044d F3       		.byte	0xf3
 10679 044e 01       		.uleb128 0x1
 10680 044f 52       		.byte	0x52
 10681 0450 9F       		.byte	0x9f
 10682 0451 00000000 		.4byte	0
 10683 0455 00000000 		.4byte	0
 10684              	.LLST28:
 10685 0459 00000000 		.4byte	.LVL88
 10686 045d 11000000 		.4byte	.LVL90-1
 10687 0461 0100     		.2byte	0x1
 10688 0463 53       		.byte	0x53
 10689 0464 11000000 		.4byte	.LVL90-1
 10690 0468 5C000000 		.4byte	.LVL105
 10691 046c 0100     		.2byte	0x1
 10692 046e 57       		.byte	0x57
 10693 046f 5C000000 		.4byte	.LVL105
 10694 0473 5E000000 		.4byte	.LFE37
 10695 0477 0400     		.2byte	0x4
 10696 0479 F3       		.byte	0xf3
 10697 047a 01       		.uleb128 0x1
 10698 047b 53       		.byte	0x53
 10699 047c 9F       		.byte	0x9f
 10700 047d 00000000 		.4byte	0
 10701 0481 00000000 		.4byte	0
 10702              	.LLST29:
 10703 0485 1E000000 		.4byte	.LVL94
 10704 0489 26000000 		.4byte	.LVL95
 10705 048d 0100     		.2byte	0x1
 10706 048f 50       		.byte	0x50
 10707 0490 26000000 		.4byte	.LVL95
 10708 0494 2C000000 		.4byte	.LVL97
 10709 0498 0100     		.2byte	0x1
 10710 049a 55       		.byte	0x55
 10711 049b 2E000000 		.4byte	.LVL98
 10712 049f 5C000000 		.4byte	.LVL103
 10713 04a3 0100     		.2byte	0x1
 10714 04a5 55       		.byte	0x55
 10715 04a6 00000000 		.4byte	0
 10716 04aa 00000000 		.4byte	0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 291


 10717              	.LLST30:
 10718 04ae 52000000 		.4byte	.LVL100
 10719 04b2 56000000 		.4byte	.LVL101
 10720 04b6 0200     		.2byte	0x2
 10721 04b8 31       		.byte	0x31
 10722 04b9 9F       		.byte	0x9f
 10723 04ba 5A000000 		.4byte	.LVL102
 10724 04be 5E000000 		.4byte	.LFE37
 10725 04c2 0100     		.2byte	0x1
 10726 04c4 50       		.byte	0x50
 10727 04c5 00000000 		.4byte	0
 10728 04c9 00000000 		.4byte	0
 10729              	.LLST31:
 10730 04cd 14000000 		.4byte	.LVL91
 10731 04d1 18000000 		.4byte	.LVL92
 10732 04d5 0100     		.2byte	0x1
 10733 04d7 50       		.byte	0x50
 10734 04d8 18000000 		.4byte	.LVL92
 10735 04dc 2C000000 		.4byte	.LVL97
 10736 04e0 0100     		.2byte	0x1
 10737 04e2 56       		.byte	0x56
 10738 04e3 2C000000 		.4byte	.LVL97
 10739 04e7 2E000000 		.4byte	.LVL98
 10740 04eb 0100     		.2byte	0x1
 10741 04ed 50       		.byte	0x50
 10742 04ee 2E000000 		.4byte	.LVL98
 10743 04f2 5C000000 		.4byte	.LVL104
 10744 04f6 0100     		.2byte	0x1
 10745 04f8 56       		.byte	0x56
 10746 04f9 00000000 		.4byte	0
 10747 04fd 00000000 		.4byte	0
 10748              	.LLST32:
 10749 0501 00000000 		.4byte	.LVL106
 10750 0505 07000000 		.4byte	.LVL107-1
 10751 0509 0100     		.2byte	0x1
 10752 050b 50       		.byte	0x50
 10753 050c 07000000 		.4byte	.LVL107-1
 10754 0510 10000000 		.4byte	.LVL108
 10755 0514 0100     		.2byte	0x1
 10756 0516 54       		.byte	0x54
 10757 0517 00000000 		.4byte	0
 10758 051b 00000000 		.4byte	0
 10759              	.LLST33:
 10760 051f 10000000 		.4byte	.LVL108
 10761 0523 7E000000 		.4byte	.LVL116
 10762 0527 0100     		.2byte	0x1
 10763 0529 54       		.byte	0x54
 10764 052a 7E000000 		.4byte	.LVL116
 10765 052e 7E000000 		.4byte	.LVL117
 10766 0532 0300     		.2byte	0x3
 10767 0534 75       		.byte	0x75
 10768 0535 7C       		.sleb128 -4
 10769 0536 9F       		.byte	0x9f
 10770 0537 00000000 		.4byte	0
 10771 053b 00000000 		.4byte	0
 10772              	.LLST34:
 10773 053f 00000000 		.4byte	.LVL118
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 292


 10774 0543 15000000 		.4byte	.LVL120-1
 10775 0547 0100     		.2byte	0x1
 10776 0549 50       		.byte	0x50
 10777 054a 15000000 		.4byte	.LVL120-1
 10778 054e 4C000000 		.4byte	.LVL123
 10779 0552 0100     		.2byte	0x1
 10780 0554 55       		.byte	0x55
 10781 0555 4C000000 		.4byte	.LVL123
 10782 0559 4E000000 		.4byte	.LVL124
 10783 055d 0100     		.2byte	0x1
 10784 055f 50       		.byte	0x50
 10785 0560 4E000000 		.4byte	.LVL124
 10786 0564 62000000 		.4byte	.LVL127
 10787 0568 0100     		.2byte	0x1
 10788 056a 55       		.byte	0x55
 10789 056b 62000000 		.4byte	.LVL127
 10790 056f 70000000 		.4byte	.LFE43
 10791 0573 0400     		.2byte	0x4
 10792 0575 F3       		.byte	0xf3
 10793 0576 01       		.uleb128 0x1
 10794 0577 50       		.byte	0x50
 10795 0578 9F       		.byte	0x9f
 10796 0579 00000000 		.4byte	0
 10797 057d 00000000 		.4byte	0
 10798              	.LLST35:
 10799 0581 18000000 		.4byte	.LVL121
 10800 0585 4C000000 		.4byte	.LVL123
 10801 0589 0100     		.2byte	0x1
 10802 058b 54       		.byte	0x54
 10803 058c 50000000 		.4byte	.LVL125
 10804 0590 62000000 		.4byte	.LVL126
 10805 0594 0100     		.2byte	0x1
 10806 0596 54       		.byte	0x54
 10807 0597 00000000 		.4byte	0
 10808 059b 00000000 		.4byte	0
 10809              	.LLST36:
 10810 059f 04000000 		.4byte	.LVL119
 10811 05a3 15000000 		.4byte	.LVL120-1
 10812 05a7 0100     		.2byte	0x1
 10813 05a9 50       		.byte	0x50
 10814 05aa 15000000 		.4byte	.LVL120-1
 10815 05ae 4C000000 		.4byte	.LVL123
 10816 05b2 0100     		.2byte	0x1
 10817 05b4 55       		.byte	0x55
 10818 05b5 4C000000 		.4byte	.LVL123
 10819 05b9 4E000000 		.4byte	.LVL124
 10820 05bd 0100     		.2byte	0x1
 10821 05bf 50       		.byte	0x50
 10822 05c0 4E000000 		.4byte	.LVL124
 10823 05c4 62000000 		.4byte	.LVL127
 10824 05c8 0100     		.2byte	0x1
 10825 05ca 55       		.byte	0x55
 10826 05cb 62000000 		.4byte	.LVL127
 10827 05cf 70000000 		.4byte	.LFE43
 10828 05d3 0400     		.2byte	0x4
 10829 05d5 F3       		.byte	0xf3
 10830 05d6 01       		.uleb128 0x1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 293


 10831 05d7 50       		.byte	0x50
 10832 05d8 9F       		.byte	0x9f
 10833 05d9 00000000 		.4byte	0
 10834 05dd 00000000 		.4byte	0
 10835              	.LLST37:
 10836 05e1 00000000 		.4byte	.LVL128
 10837 05e5 07000000 		.4byte	.LVL129-1
 10838 05e9 0100     		.2byte	0x1
 10839 05eb 50       		.byte	0x50
 10840 05ec 07000000 		.4byte	.LVL129-1
 10841 05f0 10000000 		.4byte	.LVL130
 10842 05f4 0100     		.2byte	0x1
 10843 05f6 54       		.byte	0x54
 10844 05f7 00000000 		.4byte	0
 10845 05fb 00000000 		.4byte	0
 10846              	.LLST38:
 10847 05ff 10000000 		.4byte	.LVL130
 10848 0603 12000000 		.4byte	.LVL131
 10849 0607 0100     		.2byte	0x1
 10850 0609 54       		.byte	0x54
 10851 060a 00000000 		.4byte	0
 10852 060e 00000000 		.4byte	0
 10853              	.LLST39:
 10854 0612 12000000 		.4byte	.LVL131
 10855 0616 18000000 		.4byte	.LVL133
 10856 061a 0100     		.2byte	0x1
 10857 061c 54       		.byte	0x54
 10858 061d 18000000 		.4byte	.LVL133
 10859 0621 20000000 		.4byte	.LFE44
 10860 0625 0100     		.2byte	0x1
 10861 0627 50       		.byte	0x50
 10862 0628 00000000 		.4byte	0
 10863 062c 00000000 		.4byte	0
 10864              	.LLST40:
 10865 0630 00000000 		.4byte	.LVL134
 10866 0634 07000000 		.4byte	.LVL135-1
 10867 0638 0100     		.2byte	0x1
 10868 063a 50       		.byte	0x50
 10869 063b 07000000 		.4byte	.LVL135-1
 10870 063f 10000000 		.4byte	.LVL136
 10871 0643 0100     		.2byte	0x1
 10872 0645 54       		.byte	0x54
 10873 0646 00000000 		.4byte	0
 10874 064a 00000000 		.4byte	0
 10875              	.LLST41:
 10876 064e 10000000 		.4byte	.LVL136
 10877 0652 12000000 		.4byte	.LVL137
 10878 0656 0100     		.2byte	0x1
 10879 0658 54       		.byte	0x54
 10880 0659 00000000 		.4byte	0
 10881 065d 00000000 		.4byte	0
 10882              	.LLST42:
 10883 0661 12000000 		.4byte	.LVL137
 10884 0665 18000000 		.4byte	.LVL139
 10885 0669 0100     		.2byte	0x1
 10886 066b 54       		.byte	0x54
 10887 066c 18000000 		.4byte	.LVL139
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 294


 10888 0670 20000000 		.4byte	.LFE45
 10889 0674 0100     		.2byte	0x1
 10890 0676 50       		.byte	0x50
 10891 0677 00000000 		.4byte	0
 10892 067b 00000000 		.4byte	0
 10893              	.LLST43:
 10894 067f 08000000 		.4byte	.LVL135
 10895 0683 15000000 		.4byte	.LVL138-1
 10896 0687 0100     		.2byte	0x1
 10897 0689 50       		.byte	0x50
 10898 068a 00000000 		.4byte	0
 10899 068e 00000000 		.4byte	0
 10900              	.LLST44:
 10901 0692 00000000 		.4byte	.LVL140
 10902 0696 17000000 		.4byte	.LVL143-1
 10903 069a 0100     		.2byte	0x1
 10904 069c 50       		.byte	0x50
 10905 069d 17000000 		.4byte	.LVL143-1
 10906 06a1 20000000 		.4byte	.LVL144
 10907 06a5 0100     		.2byte	0x1
 10908 06a7 54       		.byte	0x54
 10909 06a8 00000000 		.4byte	0
 10910 06ac 00000000 		.4byte	0
 10911              	.LLST45:
 10912 06b0 00000000 		.4byte	.LVL140
 10913 06b4 14000000 		.4byte	.LVL142
 10914 06b8 0100     		.2byte	0x1
 10915 06ba 51       		.byte	0x51
 10916 06bb 14000000 		.4byte	.LVL142
 10917 06bf 60000000 		.4byte	.LVL147
 10918 06c3 0100     		.2byte	0x1
 10919 06c5 55       		.byte	0x55
 10920 06c6 60000000 		.4byte	.LVL147
 10921 06ca 85000000 		.4byte	.LVL149-1
 10922 06ce 0200     		.2byte	0x2
 10923 06d0 74       		.byte	0x74
 10924 06d1 2C       		.sleb128 44
 10925 06d2 00000000 		.4byte	0
 10926 06d6 00000000 		.4byte	0
 10927              	.LLST46:
 10928 06da 20000000 		.4byte	.LVL144
 10929 06de B2000000 		.4byte	.LVL153
 10930 06e2 0100     		.2byte	0x1
 10931 06e4 54       		.byte	0x54
 10932 06e5 00000000 		.4byte	0
 10933 06e9 00000000 		.4byte	0
 10934              	.LLST47:
 10935 06ed 22000000 		.4byte	.LVL145
 10936 06f1 66000000 		.4byte	.LVL148
 10937 06f5 0100     		.2byte	0x1
 10938 06f7 53       		.byte	0x53
 10939 06f8 00000000 		.4byte	0
 10940 06fc 00000000 		.4byte	0
 10941              	.LLST48:
 10942 0700 54000000 		.4byte	.LVL146
 10943 0704 66000000 		.4byte	.LVL148
 10944 0708 0100     		.2byte	0x1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 295


 10945 070a 53       		.byte	0x53
 10946 070b 00000000 		.4byte	0
 10947 070f 00000000 		.4byte	0
 10948              	.LLST49:
 10949 0713 06000000 		.4byte	.LVL141
 10950 0717 54000000 		.4byte	.LVL146
 10951 071b 0200     		.2byte	0x2
 10952 071d 30       		.byte	0x30
 10953 071e 9F       		.byte	0x9f
 10954 071f 54000000 		.4byte	.LVL146
 10955 0723 AE000000 		.4byte	.LVL151
 10956 0727 0100     		.2byte	0x1
 10957 0729 56       		.byte	0x56
 10958 072a 00000000 		.4byte	0
 10959 072e 00000000 		.4byte	0
 10960              	.LLST50:
 10961 0732 00000000 		.4byte	.LVL154
 10962 0736 19000000 		.4byte	.LVL156-1
 10963 073a 0100     		.2byte	0x1
 10964 073c 50       		.byte	0x50
 10965 073d 19000000 		.4byte	.LVL156-1
 10966 0741 60000000 		.4byte	.LVL162
 10967 0745 0100     		.2byte	0x1
 10968 0747 54       		.byte	0x54
 10969 0748 60000000 		.4byte	.LVL162
 10970 074c 6C000000 		.4byte	.LFE49
 10971 0750 0400     		.2byte	0x4
 10972 0752 F3       		.byte	0xf3
 10973 0753 01       		.uleb128 0x1
 10974 0754 50       		.byte	0x50
 10975 0755 9F       		.byte	0x9f
 10976 0756 00000000 		.4byte	0
 10977 075a 00000000 		.4byte	0
 10978              	.LLST51:
 10979 075e 04000000 		.4byte	.LVL155
 10980 0762 19000000 		.4byte	.LVL156-1
 10981 0766 0100     		.2byte	0x1
 10982 0768 50       		.byte	0x50
 10983 0769 19000000 		.4byte	.LVL156-1
 10984 076d 60000000 		.4byte	.LVL162
 10985 0771 0100     		.2byte	0x1
 10986 0773 54       		.byte	0x54
 10987 0774 60000000 		.4byte	.LVL162
 10988 0778 6C000000 		.4byte	.LFE49
 10989 077c 0400     		.2byte	0x4
 10990 077e F3       		.byte	0xf3
 10991 077f 01       		.uleb128 0x1
 10992 0780 50       		.byte	0x50
 10993 0781 9F       		.byte	0x9f
 10994 0782 00000000 		.4byte	0
 10995 0786 00000000 		.4byte	0
 10996              	.LLST52:
 10997 078a 00000000 		.4byte	.LVL163
 10998 078e 0D000000 		.4byte	.LVL165-1
 10999 0792 0100     		.2byte	0x1
 11000 0794 50       		.byte	0x50
 11001 0795 0D000000 		.4byte	.LVL165-1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 296


 11002 0799 78000000 		.4byte	.LVL176
 11003 079d 0100     		.2byte	0x1
 11004 079f 54       		.byte	0x54
 11005 07a0 78000000 		.4byte	.LVL176
 11006 07a4 84000000 		.4byte	.LFE50
 11007 07a8 0400     		.2byte	0x4
 11008 07aa F3       		.byte	0xf3
 11009 07ab 01       		.uleb128 0x1
 11010 07ac 50       		.byte	0x50
 11011 07ad 9F       		.byte	0x9f
 11012 07ae 00000000 		.4byte	0
 11013 07b2 00000000 		.4byte	0
 11014              	.LLST53:
 11015 07b6 04000000 		.4byte	.LVL164
 11016 07ba 34000000 		.4byte	.LVL169
 11017 07be 0200     		.2byte	0x2
 11018 07c0 30       		.byte	0x30
 11019 07c1 9F       		.byte	0x9f
 11020 07c2 34000000 		.4byte	.LVL169
 11021 07c6 5E000000 		.4byte	.LVL172
 11022 07ca 0100     		.2byte	0x1
 11023 07cc 57       		.byte	0x57
 11024 07cd 5E000000 		.4byte	.LVL172
 11025 07d1 70000000 		.4byte	.LVL174
 11026 07d5 0200     		.2byte	0x2
 11027 07d7 30       		.byte	0x30
 11028 07d8 9F       		.byte	0x9f
 11029 07d9 70000000 		.4byte	.LVL174
 11030 07dd 78000000 		.4byte	.LVL178
 11031 07e1 0100     		.2byte	0x1
 11032 07e3 57       		.byte	0x57
 11033 07e4 78000000 		.4byte	.LVL178
 11034 07e8 84000000 		.4byte	.LFE50
 11035 07ec 0100     		.2byte	0x1
 11036 07ee 50       		.byte	0x50
 11037 07ef 00000000 		.4byte	0
 11038 07f3 00000000 		.4byte	0
 11039              	.LLST54:
 11040 07f7 04000000 		.4byte	.LVL164
 11041 07fb 0D000000 		.4byte	.LVL165-1
 11042 07ff 0100     		.2byte	0x1
 11043 0801 50       		.byte	0x50
 11044 0802 0D000000 		.4byte	.LVL165-1
 11045 0806 78000000 		.4byte	.LVL176
 11046 080a 0100     		.2byte	0x1
 11047 080c 54       		.byte	0x54
 11048 080d 78000000 		.4byte	.LVL176
 11049 0811 84000000 		.4byte	.LFE50
 11050 0815 0400     		.2byte	0x4
 11051 0817 F3       		.byte	0xf3
 11052 0818 01       		.uleb128 0x1
 11053 0819 50       		.byte	0x50
 11054 081a 9F       		.byte	0x9f
 11055 081b 00000000 		.4byte	0
 11056 081f 00000000 		.4byte	0
 11057              	.LLST55:
 11058 0823 10000000 		.4byte	.LVL166
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 297


 11059 0827 12000000 		.4byte	.LVL167
 11060 082b 0100     		.2byte	0x1
 11061 082d 50       		.byte	0x50
 11062 082e 12000000 		.4byte	.LVL167
 11063 0832 78000000 		.4byte	.LVL177
 11064 0836 0100     		.2byte	0x1
 11065 0838 55       		.byte	0x55
 11066 0839 00000000 		.4byte	0
 11067 083d 00000000 		.4byte	0
 11068              	.LLST56:
 11069 0841 18000000 		.4byte	.LVL179
 11070 0845 1F000000 		.4byte	.LVL180-1
 11071 0849 0100     		.2byte	0x1
 11072 084b 50       		.byte	0x50
 11073 084c 20000000 		.4byte	.LVL180
 11074 0850 3B000000 		.4byte	.LVL181-1
 11075 0854 0100     		.2byte	0x1
 11076 0856 50       		.byte	0x50
 11077 0857 3E000000 		.4byte	.LVL182
 11078 085b 46000000 		.4byte	.LVL183
 11079 085f 0100     		.2byte	0x1
 11080 0861 50       		.byte	0x50
 11081 0862 00000000 		.4byte	0
 11082 0866 00000000 		.4byte	0
 11083              	.LLST57:
 11084 086a 00000000 		.4byte	.LVL188
 11085 086e 08000000 		.4byte	.LVL189
 11086 0872 0100     		.2byte	0x1
 11087 0874 50       		.byte	0x50
 11088 0875 00000000 		.4byte	0
 11089 0879 00000000 		.4byte	0
 11090              	.LLST58:
 11091 087d 08000000 		.4byte	.LVL189
 11092 0881 12000000 		.4byte	.LVL190
 11093 0885 0100     		.2byte	0x1
 11094 0887 50       		.byte	0x50
 11095 0888 12000000 		.4byte	.LVL190
 11096 088c 18000000 		.4byte	.LFE58
 11097 0890 0300     		.2byte	0x3
 11098 0892 70       		.byte	0x70
 11099 0893 4C       		.sleb128 -52
 11100 0894 9F       		.byte	0x9f
 11101 0895 00000000 		.4byte	0
 11102 0899 00000000 		.4byte	0
 11103              	.LLST59:
 11104 089d 48000000 		.4byte	.LVL195
 11105 08a1 4C000000 		.4byte	.LVL197
 11106 08a5 0100     		.2byte	0x1
 11107 08a7 56       		.byte	0x56
 11108 08a8 74000000 		.4byte	.LVL199
 11109 08ac C4000000 		.4byte	.LVL204
 11110 08b0 0100     		.2byte	0x1
 11111 08b2 56       		.byte	0x56
 11112 08b3 00000000 		.4byte	0
 11113 08b7 00000000 		.4byte	0
 11114              	.LLST60:
 11115 08bb 76000000 		.4byte	.LVL200
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 298


 11116 08bf 87000000 		.4byte	.LVL201-1
 11117 08c3 0100     		.2byte	0x1
 11118 08c5 53       		.byte	0x53
 11119 08c6 00000000 		.4byte	0
 11120 08ca 00000000 		.4byte	0
 11121              	.LLST61:
 11122 08ce 02000000 		.4byte	.LVL191
 11123 08d2 48000000 		.4byte	.LVL195
 11124 08d6 0200     		.2byte	0x2
 11125 08d8 30       		.byte	0x30
 11126 08d9 9F       		.byte	0x9f
 11127 08da 48000000 		.4byte	.LVL195
 11128 08de 4A000000 		.4byte	.LVL196
 11129 08e2 0100     		.2byte	0x1
 11130 08e4 57       		.byte	0x57
 11131 08e5 4C000000 		.4byte	.LVL197
 11132 08e9 4E000000 		.4byte	.LVL198
 11133 08ed 0200     		.2byte	0x2
 11134 08ef 30       		.byte	0x30
 11135 08f0 9F       		.byte	0x9f
 11136 08f1 4E000000 		.4byte	.LVL198
 11137 08f5 C4000000 		.4byte	.LVL204
 11138 08f9 0100     		.2byte	0x1
 11139 08fb 57       		.byte	0x57
 11140 08fc C4000000 		.4byte	.LVL204
 11141 0900 CE000000 		.4byte	.LVL205
 11142 0904 0200     		.2byte	0x2
 11143 0906 30       		.byte	0x30
 11144 0907 9F       		.byte	0x9f
 11145 0908 CE000000 		.4byte	.LVL205
 11146 090c DA000000 		.4byte	.LVL207
 11147 0910 0100     		.2byte	0x1
 11148 0912 57       		.byte	0x57
 11149 0913 DA000000 		.4byte	.LVL207
 11150 0917 E8000000 		.4byte	.LFE60
 11151 091b 0100     		.2byte	0x1
 11152 091d 50       		.byte	0x50
 11153 091e 00000000 		.4byte	0
 11154 0922 00000000 		.4byte	0
 11155              	.LLST62:
 11156 0926 10000000 		.4byte	.LVL192
 11157 092a C4000000 		.4byte	.LVL204
 11158 092e 0100     		.2byte	0x1
 11159 0930 54       		.byte	0x54
 11160 0931 00000000 		.4byte	0
 11161 0935 00000000 		.4byte	0
 11162              	.LLST63:
 11163 0939 28000000 		.4byte	.LVL193
 11164 093d 3B000000 		.4byte	.LVL194-1
 11165 0941 0100     		.2byte	0x1
 11166 0943 51       		.byte	0x51
 11167 0944 00000000 		.4byte	0
 11168 0948 00000000 		.4byte	0
 11169              	.LLST64:
 11170 094c 02000000 		.4byte	.LVL208
 11171 0950 2C000000 		.4byte	.LVL210
 11172 0954 0200     		.2byte	0x2
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 299


 11173 0956 30       		.byte	0x30
 11174 0957 9F       		.byte	0x9f
 11175 0958 2C000000 		.4byte	.LVL210
 11176 095c 76000000 		.4byte	.LVL215
 11177 0960 0100     		.2byte	0x1
 11178 0962 54       		.byte	0x54
 11179 0963 76000000 		.4byte	.LVL215
 11180 0967 78000000 		.4byte	.LVL216
 11181 096b 0200     		.2byte	0x2
 11182 096d 30       		.byte	0x30
 11183 096e 9F       		.byte	0x9f
 11184 096f 78000000 		.4byte	.LVL216
 11185 0973 8C000000 		.4byte	.LVL218
 11186 0977 0100     		.2byte	0x1
 11187 0979 54       		.byte	0x54
 11188 097a BA000000 		.4byte	.LVL224
 11189 097e BE000000 		.4byte	.LVL225
 11190 0982 0200     		.2byte	0x2
 11191 0984 30       		.byte	0x30
 11192 0985 9F       		.byte	0x9f
 11193 0986 00000000 		.4byte	0
 11194 098a 00000000 		.4byte	0
 11195              	.LLST65:
 11196 098e 02000000 		.4byte	.LVL208
 11197 0992 B2000000 		.4byte	.LVL221
 11198 0996 0200     		.2byte	0x2
 11199 0998 30       		.byte	0x30
 11200 0999 9F       		.byte	0x9f
 11201 099a B2000000 		.4byte	.LVL221
 11202 099e BA000000 		.4byte	.LVL224
 11203 09a2 0200     		.2byte	0x2
 11204 09a4 31       		.byte	0x31
 11205 09a5 9F       		.byte	0x9f
 11206 09a6 BA000000 		.4byte	.LVL224
 11207 09aa C0000000 		.4byte	.LVL226
 11208 09ae 0200     		.2byte	0x2
 11209 09b0 30       		.byte	0x30
 11210 09b1 9F       		.byte	0x9f
 11211 09b2 C0000000 		.4byte	.LVL226
 11212 09b6 C6000000 		.4byte	.LVL228
 11213 09ba 0100     		.2byte	0x1
 11214 09bc 54       		.byte	0x54
 11215 09bd C6000000 		.4byte	.LVL228
 11216 09c1 D4000000 		.4byte	.LFE54
 11217 09c5 0100     		.2byte	0x1
 11218 09c7 50       		.byte	0x50
 11219 09c8 00000000 		.4byte	0
 11220 09cc 00000000 		.4byte	0
 11221              	.LLST66:
 11222 09d0 8C000000 		.4byte	.LVL218
 11223 09d4 B8000000 		.4byte	.LVL223
 11224 09d8 0100     		.2byte	0x1
 11225 09da 54       		.byte	0x54
 11226 09db BE000000 		.4byte	.LVL225
 11227 09df C0000000 		.4byte	.LVL226
 11228 09e3 0100     		.2byte	0x1
 11229 09e5 54       		.byte	0x54
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 300


 11230 09e6 00000000 		.4byte	0
 11231 09ea 00000000 		.4byte	0
 11232              	.LLST67:
 11233 09ee 00000000 		.4byte	.LVL229
 11234 09f2 25000000 		.4byte	.LVL231-1
 11235 09f6 0100     		.2byte	0x1
 11236 09f8 50       		.byte	0x50
 11237 09f9 25000000 		.4byte	.LVL231-1
 11238 09fd 72000000 		.4byte	.LVL240
 11239 0a01 0100     		.2byte	0x1
 11240 0a03 55       		.byte	0x55
 11241 0a04 72000000 		.4byte	.LVL240
 11242 0a08 78000000 		.4byte	.LFE41
 11243 0a0c 0400     		.2byte	0x4
 11244 0a0e F3       		.byte	0xf3
 11245 0a0f 01       		.uleb128 0x1
 11246 0a10 50       		.byte	0x50
 11247 0a11 9F       		.byte	0x9f
 11248 0a12 00000000 		.4byte	0
 11249 0a16 00000000 		.4byte	0
 11250              	.LLST68:
 11251 0a1a 00000000 		.4byte	.LVL229
 11252 0a1e 25000000 		.4byte	.LVL231-1
 11253 0a22 0100     		.2byte	0x1
 11254 0a24 51       		.byte	0x51
 11255 0a25 25000000 		.4byte	.LVL231-1
 11256 0a29 72000000 		.4byte	.LVL239
 11257 0a2d 0100     		.2byte	0x1
 11258 0a2f 54       		.byte	0x54
 11259 0a30 72000000 		.4byte	.LVL239
 11260 0a34 78000000 		.4byte	.LFE41
 11261 0a38 0400     		.2byte	0x4
 11262 0a3a F3       		.byte	0xf3
 11263 0a3b 01       		.uleb128 0x1
 11264 0a3c 51       		.byte	0x51
 11265 0a3d 9F       		.byte	0x9f
 11266 0a3e 00000000 		.4byte	0
 11267 0a42 00000000 		.4byte	0
 11268              	.LLST69:
 11269 0a46 2E000000 		.4byte	.LVL233
 11270 0a4a 65000000 		.4byte	.LVL236-1
 11271 0a4e 0100     		.2byte	0x1
 11272 0a50 53       		.byte	0x53
 11273 0a51 00000000 		.4byte	0
 11274 0a55 00000000 		.4byte	0
 11275              	.LLST70:
 11276 0a59 6A000000 		.4byte	.LVL237
 11277 0a5d 71000000 		.4byte	.LVL238-1
 11278 0a61 0100     		.2byte	0x1
 11279 0a63 50       		.byte	0x50
 11280 0a64 00000000 		.4byte	0
 11281 0a68 00000000 		.4byte	0
 11282              	.LLST71:
 11283 0a6c 06000000 		.4byte	.LVL230
 11284 0a70 58000000 		.4byte	.LVL234
 11285 0a74 0200     		.2byte	0x2
 11286 0a76 30       		.byte	0x30
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 301


 11287 0a77 9F       		.byte	0x9f
 11288 0a78 58000000 		.4byte	.LVL234
 11289 0a7c 65000000 		.4byte	.LVL236-1
 11290 0a80 0100     		.2byte	0x1
 11291 0a82 52       		.byte	0x52
 11292 0a83 00000000 		.4byte	0
 11293 0a87 00000000 		.4byte	0
 11294              	.LLST72:
 11295 0a8b 2A000000 		.4byte	.LVL232
 11296 0a8f 60000000 		.4byte	.LVL235
 11297 0a93 0100     		.2byte	0x1
 11298 0a95 50       		.byte	0x50
 11299 0a96 00000000 		.4byte	0
 11300 0a9a 00000000 		.4byte	0
 11301              	.LLST73:
 11302 0a9e 00000000 		.4byte	.LVL241
 11303 0aa2 15000000 		.4byte	.LVL243-1
 11304 0aa6 0100     		.2byte	0x1
 11305 0aa8 50       		.byte	0x50
 11306 0aa9 15000000 		.4byte	.LVL243-1
 11307 0aad 24000000 		.4byte	.LVL246
 11308 0ab1 0100     		.2byte	0x1
 11309 0ab3 54       		.byte	0x54
 11310 0ab4 24000000 		.4byte	.LVL246
 11311 0ab8 26000000 		.4byte	.LVL247
 11312 0abc 0100     		.2byte	0x1
 11313 0abe 50       		.byte	0x50
 11314 0abf 26000000 		.4byte	.LVL247
 11315 0ac3 2E000000 		.4byte	.LVL249
 11316 0ac7 0100     		.2byte	0x1
 11317 0ac9 54       		.byte	0x54
 11318 0aca 2E000000 		.4byte	.LVL249
 11319 0ace 34000000 		.4byte	.LFE42
 11320 0ad2 0400     		.2byte	0x4
 11321 0ad4 F3       		.byte	0xf3
 11322 0ad5 01       		.uleb128 0x1
 11323 0ad6 50       		.byte	0x50
 11324 0ad7 9F       		.byte	0x9f
 11325 0ad8 00000000 		.4byte	0
 11326 0adc 00000000 		.4byte	0
 11327              	.LLST74:
 11328 0ae0 04000000 		.4byte	.LVL242
 11329 0ae4 22000000 		.4byte	.LVL245
 11330 0ae8 0200     		.2byte	0x2
 11331 0aea 30       		.byte	0x30
 11332 0aeb 9F       		.byte	0x9f
 11333 0aec 22000000 		.4byte	.LVL245
 11334 0af0 24000000 		.4byte	.LVL246
 11335 0af4 0100     		.2byte	0x1
 11336 0af6 50       		.byte	0x50
 11337 0af7 24000000 		.4byte	.LVL246
 11338 0afb 26000000 		.4byte	.LVL247
 11339 0aff 0200     		.2byte	0x2
 11340 0b01 30       		.byte	0x30
 11341 0b02 9F       		.byte	0x9f
 11342 0b03 26000000 		.4byte	.LVL247
 11343 0b07 2D000000 		.4byte	.LVL248-1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 302


 11344 0b0b 0100     		.2byte	0x1
 11345 0b0d 50       		.byte	0x50
 11346 0b0e 00000000 		.4byte	0
 11347 0b12 00000000 		.4byte	0
 11348              	.LLST75:
 11349 0b16 1C000000 		.4byte	.LVL250
 11350 0b1a 34000000 		.4byte	.LVL251
 11351 0b1e 0100     		.2byte	0x1
 11352 0b20 53       		.byte	0x53
 11353 0b21 00000000 		.4byte	0
 11354 0b25 00000000 		.4byte	0
 11355              	.LLST76:
 11356 0b29 1C000000 		.4byte	.LVL250
 11357 0b2d A6000000 		.4byte	.LVL256
 11358 0b31 0600     		.2byte	0x6
 11359 0b33 9E       		.byte	0x9e
 11360 0b34 04       		.uleb128 0x4
 11361 0b35 A5A5A5A5 		.4byte	0xa5a5a5a5
 11362 0b39 00000000 		.4byte	0
 11363 0b3d 00000000 		.4byte	0
 11364              	.LLST77:
 11365 0b41 48000000 		.4byte	.LVL253
 11366 0b45 A6000000 		.4byte	.LVL256
 11367 0b49 0100     		.2byte	0x1
 11368 0b4b 53       		.byte	0x53
 11369 0b4c 00000000 		.4byte	0
 11370 0b50 00000000 		.4byte	0
 11371              	.LLST78:
 11372 0b54 64000000 		.4byte	.LVL255
 11373 0b58 A6000000 		.4byte	.LVL256
 11374 0b5c 0B00     		.2byte	0xb
 11375 0b5e 73       		.byte	0x73
 11376 0b5f 00       		.sleb128 0
 11377 0b60 44       		.byte	0x44
 11378 0b61 1E       		.byte	0x1e
 11379 0b62 03       		.byte	0x3
 11380 0b63 30000000 		.4byte	pxReadyTasksLists
 11381 0b67 22       		.byte	0x22
 11382 0b68 9F       		.byte	0x9f
 11383 0b69 00000000 		.4byte	0
 11384 0b6d 00000000 		.4byte	0
 11385              	.LLST79:
 11386 0b71 00000000 		.4byte	.LVL257
 11387 0b75 07000000 		.4byte	.LVL258-1
 11388 0b79 0100     		.2byte	0x1
 11389 0b7b 50       		.byte	0x50
 11390 0b7c 07000000 		.4byte	.LVL258-1
 11391 0b80 10000000 		.4byte	.LVL259
 11392 0b84 0100     		.2byte	0x1
 11393 0b86 54       		.byte	0x54
 11394 0b87 00000000 		.4byte	0
 11395 0b8b 00000000 		.4byte	0
 11396              	.LLST80:
 11397 0b8f 10000000 		.4byte	.LVL259
 11398 0b93 8E000000 		.4byte	.LVL269
 11399 0b97 0100     		.2byte	0x1
 11400 0b99 54       		.byte	0x54
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 303


 11401 0b9a 8E000000 		.4byte	.LVL269
 11402 0b9e 8E000000 		.4byte	.LVL270
 11403 0ba2 0300     		.2byte	0x3
 11404 0ba4 75       		.byte	0x75
 11405 0ba5 7C       		.sleb128 -4
 11406 0ba6 9F       		.byte	0x9f
 11407 0ba7 00000000 		.4byte	0
 11408 0bab 00000000 		.4byte	0
 11409              	.LLST81:
 11410 0baf 00000000 		.4byte	.LVL271
 11411 0bb3 15000000 		.4byte	.LVL273-1
 11412 0bb7 0100     		.2byte	0x1
 11413 0bb9 50       		.byte	0x50
 11414 0bba 15000000 		.4byte	.LVL273-1
 11415 0bbe 24000000 		.4byte	.LFE62
 11416 0bc2 0400     		.2byte	0x4
 11417 0bc4 F3       		.byte	0xf3
 11418 0bc5 01       		.uleb128 0x1
 11419 0bc6 50       		.byte	0x50
 11420 0bc7 9F       		.byte	0x9f
 11421 0bc8 00000000 		.4byte	0
 11422 0bcc 00000000 		.4byte	0
 11423              	.LLST82:
 11424 0bd0 00000000 		.4byte	.LVL271
 11425 0bd4 10000000 		.4byte	.LVL272
 11426 0bd8 0100     		.2byte	0x1
 11427 0bda 51       		.byte	0x51
 11428 0bdb 10000000 		.4byte	.LVL272
 11429 0bdf 1E000000 		.4byte	.LVL275
 11430 0be3 0100     		.2byte	0x1
 11431 0be5 54       		.byte	0x54
 11432 0be6 1E000000 		.4byte	.LVL275
 11433 0bea 24000000 		.4byte	.LFE62
 11434 0bee 0400     		.2byte	0x4
 11435 0bf0 F3       		.byte	0xf3
 11436 0bf1 01       		.uleb128 0x1
 11437 0bf2 51       		.byte	0x51
 11438 0bf3 9F       		.byte	0x9f
 11439 0bf4 00000000 		.4byte	0
 11440 0bf8 00000000 		.4byte	0
 11441              	.LLST83:
 11442 0bfc 00000000 		.4byte	.LVL276
 11443 0c00 2B000000 		.4byte	.LVL279-1
 11444 0c04 0100     		.2byte	0x1
 11445 0c06 50       		.byte	0x50
 11446 0c07 2B000000 		.4byte	.LVL279-1
 11447 0c0b 3C000000 		.4byte	.LFE63
 11448 0c0f 0400     		.2byte	0x4
 11449 0c11 F3       		.byte	0xf3
 11450 0c12 01       		.uleb128 0x1
 11451 0c13 50       		.byte	0x50
 11452 0c14 9F       		.byte	0x9f
 11453 0c15 00000000 		.4byte	0
 11454 0c19 00000000 		.4byte	0
 11455              	.LLST84:
 11456 0c1d 00000000 		.4byte	.LVL276
 11457 0c21 22000000 		.4byte	.LVL278
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 304


 11458 0c25 0100     		.2byte	0x1
 11459 0c27 51       		.byte	0x51
 11460 0c28 22000000 		.4byte	.LVL278
 11461 0c2c 3C000000 		.4byte	.LFE63
 11462 0c30 0400     		.2byte	0x4
 11463 0c32 F3       		.byte	0xf3
 11464 0c33 01       		.uleb128 0x1
 11465 0c34 51       		.byte	0x51
 11466 0c35 9F       		.byte	0x9f
 11467 0c36 00000000 		.4byte	0
 11468 0c3a 00000000 		.4byte	0
 11469              	.LLST85:
 11470 0c3e 00000000 		.4byte	.LVL276
 11471 0c42 1C000000 		.4byte	.LVL277
 11472 0c46 0100     		.2byte	0x1
 11473 0c48 52       		.byte	0x52
 11474 0c49 1C000000 		.4byte	.LVL277
 11475 0c4d 34000000 		.4byte	.LVL281
 11476 0c51 0100     		.2byte	0x1
 11477 0c53 54       		.byte	0x54
 11478 0c54 34000000 		.4byte	.LVL281
 11479 0c58 3C000000 		.4byte	.LFE63
 11480 0c5c 0400     		.2byte	0x4
 11481 0c5e F3       		.byte	0xf3
 11482 0c5f 01       		.uleb128 0x1
 11483 0c60 52       		.byte	0x52
 11484 0c61 9F       		.byte	0x9f
 11485 0c62 00000000 		.4byte	0
 11486 0c66 00000000 		.4byte	0
 11487              	.LLST86:
 11488 0c6a 00000000 		.4byte	.LVL282
 11489 0c6e 17000000 		.4byte	.LVL284-1
 11490 0c72 0100     		.2byte	0x1
 11491 0c74 50       		.byte	0x50
 11492 0c75 17000000 		.4byte	.LVL284-1
 11493 0c79 30000000 		.4byte	.LFE64
 11494 0c7d 0400     		.2byte	0x4
 11495 0c7f F3       		.byte	0xf3
 11496 0c80 01       		.uleb128 0x1
 11497 0c81 50       		.byte	0x50
 11498 0c82 9F       		.byte	0x9f
 11499 0c83 00000000 		.4byte	0
 11500 0c87 00000000 		.4byte	0
 11501              	.LLST87:
 11502 0c8b 00000000 		.4byte	.LVL282
 11503 0c8f 12000000 		.4byte	.LVL283
 11504 0c93 0100     		.2byte	0x1
 11505 0c95 51       		.byte	0x51
 11506 0c96 12000000 		.4byte	.LVL283
 11507 0c9a 1E000000 		.4byte	.LVL285
 11508 0c9e 0100     		.2byte	0x1
 11509 0ca0 54       		.byte	0x54
 11510 0ca1 1E000000 		.4byte	.LVL285
 11511 0ca5 20000000 		.4byte	.LVL286
 11512 0ca9 0400     		.2byte	0x4
 11513 0cab F3       		.byte	0xf3
 11514 0cac 01       		.uleb128 0x1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 305


 11515 0cad 51       		.byte	0x51
 11516 0cae 9F       		.byte	0x9f
 11517 0caf 20000000 		.4byte	.LVL286
 11518 0cb3 28000000 		.4byte	.LVL288
 11519 0cb7 0100     		.2byte	0x1
 11520 0cb9 54       		.byte	0x54
 11521 0cba 00000000 		.4byte	0
 11522 0cbe 00000000 		.4byte	0
 11523              	.LLST88:
 11524 0cc2 00000000 		.4byte	.LVL282
 11525 0cc6 17000000 		.4byte	.LVL284-1
 11526 0cca 0100     		.2byte	0x1
 11527 0ccc 52       		.byte	0x52
 11528 0ccd 17000000 		.4byte	.LVL284-1
 11529 0cd1 28000000 		.4byte	.LVL289
 11530 0cd5 0100     		.2byte	0x1
 11531 0cd7 55       		.byte	0x55
 11532 0cd8 28000000 		.4byte	.LVL289
 11533 0cdc 30000000 		.4byte	.LFE64
 11534 0ce0 0400     		.2byte	0x4
 11535 0ce2 F3       		.byte	0xf3
 11536 0ce3 01       		.uleb128 0x1
 11537 0ce4 52       		.byte	0x52
 11538 0ce5 9F       		.byte	0x9f
 11539 0ce6 00000000 		.4byte	0
 11540 0cea 00000000 		.4byte	0
 11541              	.LLST89:
 11542 0cee 00000000 		.4byte	.LVL290
 11543 0cf2 14000000 		.4byte	.LVL292
 11544 0cf6 0100     		.2byte	0x1
 11545 0cf8 50       		.byte	0x50
 11546 0cf9 14000000 		.4byte	.LVL292
 11547 0cfd 78000000 		.4byte	.LFE65
 11548 0d01 0400     		.2byte	0x4
 11549 0d03 F3       		.byte	0xf3
 11550 0d04 01       		.uleb128 0x1
 11551 0d05 50       		.byte	0x50
 11552 0d06 9F       		.byte	0x9f
 11553 0d07 00000000 		.4byte	0
 11554 0d0b 00000000 		.4byte	0
 11555              	.LLST90:
 11556 0d0f 06000000 		.4byte	.LVL291
 11557 0d13 6C000000 		.4byte	.LVL300
 11558 0d17 0100     		.2byte	0x1
 11559 0d19 54       		.byte	0x54
 11560 0d1a 00000000 		.4byte	0
 11561 0d1e 00000000 		.4byte	0
 11562              	.LLST91:
 11563 0d22 60000000 		.4byte	.LVL297
 11564 0d26 6A000000 		.4byte	.LVL298
 11565 0d2a 0200     		.2byte	0x2
 11566 0d2c 31       		.byte	0x31
 11567 0d2d 9F       		.byte	0x9f
 11568 0d2e 6C000000 		.4byte	.LVL299
 11569 0d32 78000000 		.4byte	.LFE65
 11570 0d36 0100     		.2byte	0x1
 11571 0d38 50       		.byte	0x50
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 306


 11572 0d39 00000000 		.4byte	0
 11573 0d3d 00000000 		.4byte	0
 11574              	.LLST92:
 11575 0d41 00000000 		.4byte	.LVL301
 11576 0d45 23000000 		.4byte	.LVL304-1
 11577 0d49 0100     		.2byte	0x1
 11578 0d4b 50       		.byte	0x50
 11579 0d4c 23000000 		.4byte	.LVL304-1
 11580 0d50 68000000 		.4byte	.LFE66
 11581 0d54 0400     		.2byte	0x4
 11582 0d56 F3       		.byte	0xf3
 11583 0d57 01       		.uleb128 0x1
 11584 0d58 50       		.byte	0x50
 11585 0d59 9F       		.byte	0x9f
 11586 0d5a 00000000 		.4byte	0
 11587 0d5e 00000000 		.4byte	0
 11588              	.LLST93:
 11589 0d62 00000000 		.4byte	.LVL301
 11590 0d66 14000000 		.4byte	.LVL302
 11591 0d6a 0100     		.2byte	0x1
 11592 0d6c 51       		.byte	0x51
 11593 0d6d 14000000 		.4byte	.LVL302
 11594 0d71 68000000 		.4byte	.LFE66
 11595 0d75 0400     		.2byte	0x4
 11596 0d77 F3       		.byte	0xf3
 11597 0d78 01       		.uleb128 0x1
 11598 0d79 51       		.byte	0x51
 11599 0d7a 9F       		.byte	0x9f
 11600 0d7b 00000000 		.4byte	0
 11601 0d7f 00000000 		.4byte	0
 11602              	.LLST94:
 11603 0d83 18000000 		.4byte	.LVL303
 11604 0d87 5E000000 		.4byte	.LVL307
 11605 0d8b 0100     		.2byte	0x1
 11606 0d8d 54       		.byte	0x54
 11607 0d8e 5E000000 		.4byte	.LVL307
 11608 0d92 5E000000 		.4byte	.LVL308
 11609 0d96 0300     		.2byte	0x3
 11610 0d98 75       		.byte	0x75
 11611 0d99 7C       		.sleb128 -4
 11612 0d9a 9F       		.byte	0x9f
 11613 0d9b 00000000 		.4byte	0
 11614 0d9f 00000000 		.4byte	0
 11615              	.LLST95:
 11616 0da3 00000000 		.4byte	.LVL309
 11617 0da7 0D000000 		.4byte	.LVL310-1
 11618 0dab 0100     		.2byte	0x1
 11619 0dad 50       		.byte	0x50
 11620 0dae 0D000000 		.4byte	.LVL310-1
 11621 0db2 1C000000 		.4byte	.LVL312
 11622 0db6 0100     		.2byte	0x1
 11623 0db8 54       		.byte	0x54
 11624 0db9 1C000000 		.4byte	.LVL312
 11625 0dbd 24000000 		.4byte	.LFE67
 11626 0dc1 0400     		.2byte	0x4
 11627 0dc3 F3       		.byte	0xf3
 11628 0dc4 01       		.uleb128 0x1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 307


 11629 0dc5 50       		.byte	0x50
 11630 0dc6 9F       		.byte	0x9f
 11631 0dc7 00000000 		.4byte	0
 11632 0dcb 00000000 		.4byte	0
 11633              	.LLST96:
 11634 0dcf 00000000 		.4byte	.LVL314
 11635 0dd3 19000000 		.4byte	.LVL315-1
 11636 0dd7 0100     		.2byte	0x1
 11637 0dd9 50       		.byte	0x50
 11638 0dda 19000000 		.4byte	.LVL315-1
 11639 0dde 5C000000 		.4byte	.LVL330
 11640 0de2 0100     		.2byte	0x1
 11641 0de4 55       		.byte	0x55
 11642 0de5 5C000000 		.4byte	.LVL330
 11643 0de9 64000000 		.4byte	.LFE69
 11644 0ded 0400     		.2byte	0x4
 11645 0def F3       		.byte	0xf3
 11646 0df0 01       		.uleb128 0x1
 11647 0df1 50       		.byte	0x50
 11648 0df2 9F       		.byte	0x9f
 11649 0df3 00000000 		.4byte	0
 11650 0df7 00000000 		.4byte	0
 11651              	.LLST97:
 11652 0dfb 00000000 		.4byte	.LVL314
 11653 0dff 19000000 		.4byte	.LVL315-1
 11654 0e03 0100     		.2byte	0x1
 11655 0e05 51       		.byte	0x51
 11656 0e06 19000000 		.4byte	.LVL315-1
 11657 0e0a 46000000 		.4byte	.LVL320
 11658 0e0e 0100     		.2byte	0x1
 11659 0e10 54       		.byte	0x54
 11660 0e11 46000000 		.4byte	.LVL320
 11661 0e15 48000000 		.4byte	.LVL321
 11662 0e19 0400     		.2byte	0x4
 11663 0e1b F3       		.byte	0xf3
 11664 0e1c 01       		.uleb128 0x1
 11665 0e1d 51       		.byte	0x51
 11666 0e1e 9F       		.byte	0x9f
 11667 0e1f 48000000 		.4byte	.LVL321
 11668 0e23 4E000000 		.4byte	.LVL323
 11669 0e27 0100     		.2byte	0x1
 11670 0e29 54       		.byte	0x54
 11671 0e2a 4E000000 		.4byte	.LVL323
 11672 0e2e 50000000 		.4byte	.LVL324
 11673 0e32 0400     		.2byte	0x4
 11674 0e34 F3       		.byte	0xf3
 11675 0e35 01       		.uleb128 0x1
 11676 0e36 51       		.byte	0x51
 11677 0e37 9F       		.byte	0x9f
 11678 0e38 50000000 		.4byte	.LVL324
 11679 0e3c 52000000 		.4byte	.LVL325
 11680 0e40 0100     		.2byte	0x1
 11681 0e42 54       		.byte	0x54
 11682 0e43 52000000 		.4byte	.LVL325
 11683 0e47 54000000 		.4byte	.LVL326
 11684 0e4b 0400     		.2byte	0x4
 11685 0e4d F3       		.byte	0xf3
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 308


 11686 0e4e 01       		.uleb128 0x1
 11687 0e4f 51       		.byte	0x51
 11688 0e50 9F       		.byte	0x9f
 11689 0e51 54000000 		.4byte	.LVL326
 11690 0e55 56000000 		.4byte	.LVL327
 11691 0e59 0100     		.2byte	0x1
 11692 0e5b 54       		.byte	0x54
 11693 0e5c 56000000 		.4byte	.LVL327
 11694 0e60 64000000 		.4byte	.LFE69
 11695 0e64 0400     		.2byte	0x4
 11696 0e66 F3       		.byte	0xf3
 11697 0e67 01       		.uleb128 0x1
 11698 0e68 51       		.byte	0x51
 11699 0e69 9F       		.byte	0x9f
 11700 0e6a 00000000 		.4byte	0
 11701 0e6e 00000000 		.4byte	0
 11702              	.LLST98:
 11703 0e72 44000000 		.4byte	.LVL319
 11704 0e76 48000000 		.4byte	.LVL321
 11705 0e7a 0200     		.2byte	0x2
 11706 0e7c 30       		.byte	0x30
 11707 0e7d 9F       		.byte	0x9f
 11708 0e7e 4C000000 		.4byte	.LVL322
 11709 0e82 50000000 		.4byte	.LVL324
 11710 0e86 0200     		.2byte	0x2
 11711 0e88 31       		.byte	0x31
 11712 0e89 9F       		.byte	0x9f
 11713 0e8a 56000000 		.4byte	.LVL327
 11714 0e8e 5C000000 		.4byte	.LVL329
 11715 0e92 0100     		.2byte	0x1
 11716 0e94 54       		.byte	0x54
 11717 0e95 5C000000 		.4byte	.LVL329
 11718 0e99 64000000 		.4byte	.LFE69
 11719 0e9d 0100     		.2byte	0x1
 11720 0e9f 50       		.byte	0x50
 11721 0ea0 00000000 		.4byte	0
 11722 0ea4 00000000 		.4byte	0
 11723              	.LLST99:
 11724 0ea8 1E000000 		.4byte	.LVL316
 11725 0eac 40000000 		.4byte	.LVL318
 11726 0eb0 0100     		.2byte	0x1
 11727 0eb2 50       		.byte	0x50
 11728 0eb3 48000000 		.4byte	.LVL321
 11729 0eb7 56000000 		.4byte	.LVL327
 11730 0ebb 0100     		.2byte	0x1
 11731 0ebd 50       		.byte	0x50
 11732 0ebe 00000000 		.4byte	0
 11733 0ec2 00000000 		.4byte	0
 11734              	.LLST100:
 11735 0ec6 22000000 		.4byte	.LVL317
 11736 0eca 43000000 		.4byte	.LVL319-1
 11737 0ece 0100     		.2byte	0x1
 11738 0ed0 52       		.byte	0x52
 11739 0ed1 48000000 		.4byte	.LVL321
 11740 0ed5 56000000 		.4byte	.LVL327
 11741 0ed9 0100     		.2byte	0x1
 11742 0edb 52       		.byte	0x52
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 309


 11743 0edc 00000000 		.4byte	0
 11744 0ee0 00000000 		.4byte	0
 11745              	.LLST101:
 11746 0ee4 00000000 		.4byte	.LVL331
 11747 0ee8 06000000 		.4byte	.LVL333
 11748 0eec 0100     		.2byte	0x1
 11749 0eee 50       		.byte	0x50
 11750 0eef 06000000 		.4byte	.LVL333
 11751 0ef3 08000000 		.4byte	.LVL334
 11752 0ef7 0400     		.2byte	0x4
 11753 0ef9 F3       		.byte	0xf3
 11754 0efa 01       		.uleb128 0x1
 11755 0efb 50       		.byte	0x50
 11756 0efc 9F       		.byte	0x9f
 11757 0efd 08000000 		.4byte	.LVL334
 11758 0f01 0A000000 		.4byte	.LVL335
 11759 0f05 0100     		.2byte	0x1
 11760 0f07 50       		.byte	0x50
 11761 0f08 0A000000 		.4byte	.LVL335
 11762 0f0c 0C000000 		.4byte	.LFE71
 11763 0f10 0400     		.2byte	0x4
 11764 0f12 F3       		.byte	0xf3
 11765 0f13 01       		.uleb128 0x1
 11766 0f14 50       		.byte	0x50
 11767 0f15 9F       		.byte	0x9f
 11768 0f16 00000000 		.4byte	0
 11769 0f1a 00000000 		.4byte	0
 11770              	.LLST102:
 11771 0f1e 06000000 		.4byte	.LVL333
 11772 0f22 08000000 		.4byte	.LVL334
 11773 0f26 0100     		.2byte	0x1
 11774 0f28 50       		.byte	0x50
 11775 0f29 0A000000 		.4byte	.LVL335
 11776 0f2d 0C000000 		.4byte	.LFE71
 11777 0f31 0100     		.2byte	0x1
 11778 0f33 50       		.byte	0x50
 11779 0f34 00000000 		.4byte	0
 11780 0f38 00000000 		.4byte	0
 11781              	.LLST103:
 11782 0f3c 04000000 		.4byte	.LVL332
 11783 0f40 06000000 		.4byte	.LVL333
 11784 0f44 0100     		.2byte	0x1
 11785 0f46 50       		.byte	0x50
 11786 0f47 06000000 		.4byte	.LVL333
 11787 0f4b 08000000 		.4byte	.LVL334
 11788 0f4f 0400     		.2byte	0x4
 11789 0f51 F3       		.byte	0xf3
 11790 0f52 01       		.uleb128 0x1
 11791 0f53 50       		.byte	0x50
 11792 0f54 9F       		.byte	0x9f
 11793 0f55 00000000 		.4byte	0
 11794 0f59 00000000 		.4byte	0
 11795              	.LLST104:
 11796 0f5d 04000000 		.4byte	.LVL337
 11797 0f61 06000000 		.4byte	.LVL338
 11798 0f65 0100     		.2byte	0x1
 11799 0f67 50       		.byte	0x50
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 310


 11800 0f68 00000000 		.4byte	0
 11801 0f6c 00000000 		.4byte	0
 11802              	.LLST105:
 11803 0f70 00000000 		.4byte	.LVL339
 11804 0f74 0C000000 		.4byte	.LVL340
 11805 0f78 0100     		.2byte	0x1
 11806 0f7a 50       		.byte	0x50
 11807 0f7b 00000000 		.4byte	0
 11808 0f7f 00000000 		.4byte	0
 11809              	.LLST106:
 11810 0f83 00000000 		.4byte	.LVL339
 11811 0f87 0E000000 		.4byte	.LVL341
 11812 0f8b 0100     		.2byte	0x1
 11813 0f8d 51       		.byte	0x51
 11814 0f8e 0E000000 		.4byte	.LVL341
 11815 0f92 10000000 		.4byte	.LVL342
 11816 0f96 0300     		.2byte	0x3
 11817 0f98 71       		.byte	0x71
 11818 0f99 6E       		.sleb128 -18
 11819 0f9a 9F       		.byte	0x9f
 11820 0f9b 10000000 		.4byte	.LVL342
 11821 0f9f 1C000000 		.4byte	.LFE74
 11822 0fa3 0400     		.2byte	0x4
 11823 0fa5 F3       		.byte	0xf3
 11824 0fa6 01       		.uleb128 0x1
 11825 0fa7 51       		.byte	0x51
 11826 0fa8 9F       		.byte	0x9f
 11827 0fa9 00000000 		.4byte	0
 11828 0fad 00000000 		.4byte	0
 11829              	.LLST107:
 11830 0fb1 0C000000 		.4byte	.LVL340
 11831 0fb5 12000000 		.4byte	.LVL343
 11832 0fb9 0100     		.2byte	0x1
 11833 0fbb 50       		.byte	0x50
 11834 0fbc 00000000 		.4byte	0
 11835 0fc0 00000000 		.4byte	0
 11836              	.LLST108:
 11837 0fc4 00000000 		.4byte	.LVL344
 11838 0fc8 0C000000 		.4byte	.LVL345
 11839 0fcc 0100     		.2byte	0x1
 11840 0fce 50       		.byte	0x50
 11841 0fcf 16000000 		.4byte	.LVL350
 11842 0fd3 18000000 		.4byte	.LVL351
 11843 0fd7 0100     		.2byte	0x1
 11844 0fd9 50       		.byte	0x50
 11845 0fda 00000000 		.4byte	0
 11846 0fde 00000000 		.4byte	0
 11847              	.LLST109:
 11848 0fe2 00000000 		.4byte	.LVL344
 11849 0fe6 0E000000 		.4byte	.LVL346
 11850 0fea 0100     		.2byte	0x1
 11851 0fec 51       		.byte	0x51
 11852 0fed 0E000000 		.4byte	.LVL346
 11853 0ff1 10000000 		.4byte	.LVL347
 11854 0ff5 0300     		.2byte	0x3
 11855 0ff7 71       		.byte	0x71
 11856 0ff8 6E       		.sleb128 -18
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 311


 11857 0ff9 9F       		.byte	0x9f
 11858 0ffa 10000000 		.4byte	.LVL347
 11859 0ffe 16000000 		.4byte	.LVL350
 11860 1002 0400     		.2byte	0x4
 11861 1004 F3       		.byte	0xf3
 11862 1005 01       		.uleb128 0x1
 11863 1006 51       		.byte	0x51
 11864 1007 9F       		.byte	0x9f
 11865 1008 16000000 		.4byte	.LVL350
 11866 100c 18000000 		.4byte	.LVL351
 11867 1010 0100     		.2byte	0x1
 11868 1012 51       		.byte	0x51
 11869 1013 18000000 		.4byte	.LVL351
 11870 1017 20000000 		.4byte	.LFE75
 11871 101b 0400     		.2byte	0x4
 11872 101d F3       		.byte	0xf3
 11873 101e 01       		.uleb128 0x1
 11874 101f 51       		.byte	0x51
 11875 1020 9F       		.byte	0x9f
 11876 1021 00000000 		.4byte	0
 11877 1025 00000000 		.4byte	0
 11878              	.LLST110:
 11879 1029 00000000 		.4byte	.LVL344
 11880 102d 14000000 		.4byte	.LVL349
 11881 1031 0200     		.2byte	0x2
 11882 1033 30       		.byte	0x30
 11883 1034 9F       		.byte	0x9f
 11884 1035 14000000 		.4byte	.LVL349
 11885 1039 16000000 		.4byte	.LVL350
 11886 103d 0100     		.2byte	0x1
 11887 103f 50       		.byte	0x50
 11888 1040 16000000 		.4byte	.LVL350
 11889 1044 18000000 		.4byte	.LVL351
 11890 1048 0200     		.2byte	0x2
 11891 104a 30       		.byte	0x30
 11892 104b 9F       		.byte	0x9f
 11893 104c 18000000 		.4byte	.LVL351
 11894 1050 20000000 		.4byte	.LFE75
 11895 1054 0100     		.2byte	0x1
 11896 1056 50       		.byte	0x50
 11897 1057 00000000 		.4byte	0
 11898 105b 00000000 		.4byte	0
 11899              	.LLST111:
 11900 105f 0C000000 		.4byte	.LVL345
 11901 1063 12000000 		.4byte	.LVL348
 11902 1067 0100     		.2byte	0x1
 11903 1069 50       		.byte	0x50
 11904 106a 00000000 		.4byte	0
 11905 106e 00000000 		.4byte	0
 11906              	.LLST112:
 11907 1072 00000000 		.4byte	.LVL352
 11908 1076 10000000 		.4byte	.LVL354
 11909 107a 0100     		.2byte	0x1
 11910 107c 50       		.byte	0x50
 11911 107d 00000000 		.4byte	0
 11912 1081 00000000 		.4byte	0
 11913              	.LLST113:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 312


 11914 1085 00000000 		.4byte	.LVL352
 11915 1089 45000000 		.4byte	.LVL357-1
 11916 108d 0100     		.2byte	0x1
 11917 108f 51       		.byte	0x51
 11918 1090 45000000 		.4byte	.LVL357-1
 11919 1094 56000000 		.4byte	.LVL359
 11920 1098 0100     		.2byte	0x1
 11921 109a 54       		.byte	0x54
 11922 109b 56000000 		.4byte	.LVL359
 11923 109f 5B000000 		.4byte	.LVL360-1
 11924 10a3 0100     		.2byte	0x1
 11925 10a5 51       		.byte	0x51
 11926 10a6 5B000000 		.4byte	.LVL360-1
 11927 10aa 70000000 		.4byte	.LVL362
 11928 10ae 0100     		.2byte	0x1
 11929 10b0 54       		.byte	0x54
 11930 10b1 70000000 		.4byte	.LVL362
 11931 10b5 78000000 		.4byte	.LFE78
 11932 10b9 0400     		.2byte	0x4
 11933 10bb F3       		.byte	0xf3
 11934 10bc 01       		.uleb128 0x1
 11935 10bd 51       		.byte	0x51
 11936 10be 9F       		.byte	0x9f
 11937 10bf 00000000 		.4byte	0
 11938 10c3 00000000 		.4byte	0
 11939              	.LLST114:
 11940 10c7 00000000 		.4byte	.LVL352
 11941 10cb 0E000000 		.4byte	.LVL353
 11942 10cf 0100     		.2byte	0x1
 11943 10d1 52       		.byte	0x52
 11944 10d2 0E000000 		.4byte	.LVL353
 11945 10d6 70000000 		.4byte	.LVL364
 11946 10da 0100     		.2byte	0x1
 11947 10dc 56       		.byte	0x56
 11948 10dd 70000000 		.4byte	.LVL364
 11949 10e1 78000000 		.4byte	.LFE78
 11950 10e5 0400     		.2byte	0x4
 11951 10e7 F3       		.byte	0xf3
 11952 10e8 01       		.uleb128 0x1
 11953 10e9 52       		.byte	0x52
 11954 10ea 9F       		.byte	0x9f
 11955 10eb 00000000 		.4byte	0
 11956 10ef 00000000 		.4byte	0
 11957              	.LLST115:
 11958 10f3 00000000 		.4byte	.LVL352
 11959 10f7 38000000 		.4byte	.LVL355
 11960 10fb 0100     		.2byte	0x1
 11961 10fd 53       		.byte	0x53
 11962 10fe 38000000 		.4byte	.LVL355
 11963 1102 3C000000 		.4byte	.LVL356
 11964 1106 0400     		.2byte	0x4
 11965 1108 F3       		.byte	0xf3
 11966 1109 01       		.uleb128 0x1
 11967 110a 53       		.byte	0x53
 11968 110b 9F       		.byte	0x9f
 11969 110c 3C000000 		.4byte	.LVL356
 11970 1110 45000000 		.4byte	.LVL357-1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 313


 11971 1114 0100     		.2byte	0x1
 11972 1116 53       		.byte	0x53
 11973 1117 45000000 		.4byte	.LVL357-1
 11974 111b 56000000 		.4byte	.LVL359
 11975 111f 0400     		.2byte	0x4
 11976 1121 F3       		.byte	0xf3
 11977 1122 01       		.uleb128 0x1
 11978 1123 53       		.byte	0x53
 11979 1124 9F       		.byte	0x9f
 11980 1125 56000000 		.4byte	.LVL359
 11981 1129 5B000000 		.4byte	.LVL360-1
 11982 112d 0100     		.2byte	0x1
 11983 112f 53       		.byte	0x53
 11984 1130 5B000000 		.4byte	.LVL360-1
 11985 1134 78000000 		.4byte	.LFE78
 11986 1138 0400     		.2byte	0x4
 11987 113a F3       		.byte	0xf3
 11988 113b 01       		.uleb128 0x1
 11989 113c 53       		.byte	0x53
 11990 113d 9F       		.byte	0x9f
 11991 113e 00000000 		.4byte	0
 11992 1142 00000000 		.4byte	0
 11993              	.LLST116:
 11994 1146 10000000 		.4byte	.LVL354
 11995 114a 70000000 		.4byte	.LVL363
 11996 114e 0100     		.2byte	0x1
 11997 1150 55       		.byte	0x55
 11998 1151 00000000 		.4byte	0
 11999 1155 00000000 		.4byte	0
 12000              	.LLST117:
 12001 1159 00000000 		.4byte	.LVL365
 12002 115d 30000000 		.4byte	.LVL370
 12003 1161 0100     		.2byte	0x1
 12004 1163 50       		.byte	0x50
 12005 1164 30000000 		.4byte	.LVL370
 12006 1168 5C000000 		.4byte	.LVL374
 12007 116c 0100     		.2byte	0x1
 12008 116e 59       		.byte	0x59
 12009 116f 5C000000 		.4byte	.LVL374
 12010 1173 5E000000 		.4byte	.LVL375
 12011 1177 0100     		.2byte	0x1
 12012 1179 50       		.byte	0x50
 12013 117a 5E000000 		.4byte	.LVL375
 12014 117e 62000000 		.4byte	.LVL378
 12015 1182 0100     		.2byte	0x1
 12016 1184 59       		.byte	0x59
 12017 1185 62000000 		.4byte	.LVL378
 12018 1189 6A000000 		.4byte	.LFE79
 12019 118d 0400     		.2byte	0x4
 12020 118f F3       		.byte	0xf3
 12021 1190 01       		.uleb128 0x1
 12022 1191 50       		.byte	0x50
 12023 1192 9F       		.byte	0x9f
 12024 1193 00000000 		.4byte	0
 12025 1197 00000000 		.4byte	0
 12026              	.LLST118:
 12027 119b 00000000 		.4byte	.LVL365
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 314


 12028 119f 30000000 		.4byte	.LVL370
 12029 11a3 0100     		.2byte	0x1
 12030 11a5 51       		.byte	0x51
 12031 11a6 30000000 		.4byte	.LVL370
 12032 11aa 5C000000 		.4byte	.LVL374
 12033 11ae 0100     		.2byte	0x1
 12034 11b0 55       		.byte	0x55
 12035 11b1 5C000000 		.4byte	.LVL374
 12036 11b5 5E000000 		.4byte	.LVL375
 12037 11b9 0100     		.2byte	0x1
 12038 11bb 51       		.byte	0x51
 12039 11bc 5E000000 		.4byte	.LVL375
 12040 11c0 62000000 		.4byte	.LVL377
 12041 11c4 0100     		.2byte	0x1
 12042 11c6 55       		.byte	0x55
 12043 11c7 62000000 		.4byte	.LVL377
 12044 11cb 6A000000 		.4byte	.LFE79
 12045 11cf 0400     		.2byte	0x4
 12046 11d1 F3       		.byte	0xf3
 12047 11d2 01       		.uleb128 0x1
 12048 11d3 51       		.byte	0x51
 12049 11d4 9F       		.byte	0x9f
 12050 11d5 00000000 		.4byte	0
 12051 11d9 00000000 		.4byte	0
 12052              	.LLST119:
 12053 11dd 00000000 		.4byte	.LVL365
 12054 11e1 1E000000 		.4byte	.LVL368
 12055 11e5 0100     		.2byte	0x1
 12056 11e7 52       		.byte	0x52
 12057 11e8 1E000000 		.4byte	.LVL368
 12058 11ec 5C000000 		.4byte	.LVL374
 12059 11f0 0400     		.2byte	0x4
 12060 11f2 F3       		.byte	0xf3
 12061 11f3 01       		.uleb128 0x1
 12062 11f4 52       		.byte	0x52
 12063 11f5 9F       		.byte	0x9f
 12064 11f6 5C000000 		.4byte	.LVL374
 12065 11fa 5E000000 		.4byte	.LVL375
 12066 11fe 0100     		.2byte	0x1
 12067 1200 52       		.byte	0x52
 12068 1201 5E000000 		.4byte	.LVL375
 12069 1205 6A000000 		.4byte	.LFE79
 12070 1209 0400     		.2byte	0x4
 12071 120b F3       		.byte	0xf3
 12072 120c 01       		.uleb128 0x1
 12073 120d 52       		.byte	0x52
 12074 120e 9F       		.byte	0x9f
 12075 120f 00000000 		.4byte	0
 12076 1213 00000000 		.4byte	0
 12077              	.LLST120:
 12078 1217 42000000 		.4byte	.LVL371
 12079 121b 5C000000 		.4byte	.LVL374
 12080 121f 0100     		.2byte	0x1
 12081 1221 57       		.byte	0x57
 12082 1222 00000000 		.4byte	0
 12083 1226 00000000 		.4byte	0
 12084              	.LLST121:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 315


 12085 122a 2E000000 		.4byte	.LVL369
 12086 122e 5C000000 		.4byte	.LVL374
 12087 1232 0100     		.2byte	0x1
 12088 1234 56       		.byte	0x56
 12089 1235 00000000 		.4byte	0
 12090 1239 00000000 		.4byte	0
 12091              	.LLST122:
 12092 123d 10000000 		.4byte	.LVL366
 12093 1241 30000000 		.4byte	.LVL370
 12094 1245 0200     		.2byte	0x2
 12095 1247 30       		.byte	0x30
 12096 1248 9F       		.byte	0x9f
 12097 1249 30000000 		.4byte	.LVL370
 12098 124d 5C000000 		.4byte	.LVL374
 12099 1251 0100     		.2byte	0x1
 12100 1253 54       		.byte	0x54
 12101 1254 5C000000 		.4byte	.LVL374
 12102 1258 5E000000 		.4byte	.LVL375
 12103 125c 0200     		.2byte	0x2
 12104 125e 30       		.byte	0x30
 12105 125f 9F       		.byte	0x9f
 12106 1260 5E000000 		.4byte	.LVL375
 12107 1264 62000000 		.4byte	.LVL376
 12108 1268 0100     		.2byte	0x1
 12109 126a 54       		.byte	0x54
 12110 126b 62000000 		.4byte	.LVL376
 12111 126f 6A000000 		.4byte	.LFE79
 12112 1273 0100     		.2byte	0x1
 12113 1275 50       		.byte	0x50
 12114 1276 00000000 		.4byte	0
 12115 127a 00000000 		.4byte	0
 12116              	.LLST123:
 12117 127e 16000000 		.4byte	.LVL367
 12118 1282 30000000 		.4byte	.LVL370
 12119 1286 0100     		.2byte	0x1
 12120 1288 51       		.byte	0x51
 12121 1289 30000000 		.4byte	.LVL370
 12122 128d 5C000000 		.4byte	.LVL374
 12123 1291 0100     		.2byte	0x1
 12124 1293 55       		.byte	0x55
 12125 1294 00000000 		.4byte	0
 12126 1298 00000000 		.4byte	0
 12127              	.LLST124:
 12128 129c 30000000 		.4byte	.LVL370
 12129 12a0 5C000000 		.4byte	.LVL374
 12130 12a4 0100     		.2byte	0x1
 12131 12a6 55       		.byte	0x55
 12132 12a7 00000000 		.4byte	0
 12133 12ab 00000000 		.4byte	0
 12134              	.LLST125:
 12135 12af 00000000 		.4byte	.LVL379
 12136 12b3 0F000000 		.4byte	.LVL381-1
 12137 12b7 0100     		.2byte	0x1
 12138 12b9 50       		.byte	0x50
 12139 12ba 0F000000 		.4byte	.LVL381-1
 12140 12be A0000000 		.4byte	.LVL400
 12141 12c2 0100     		.2byte	0x1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 316


 12142 12c4 56       		.byte	0x56
 12143 12c5 A0000000 		.4byte	.LVL400
 12144 12c9 B0000000 		.4byte	.LFE59
 12145 12cd 0400     		.2byte	0x4
 12146 12cf F3       		.byte	0xf3
 12147 12d0 01       		.uleb128 0x1
 12148 12d1 50       		.byte	0x50
 12149 12d2 9F       		.byte	0x9f
 12150 12d3 00000000 		.4byte	0
 12151 12d7 00000000 		.4byte	0
 12152              	.LLST126:
 12153 12db 00000000 		.4byte	.LVL379
 12154 12df 0F000000 		.4byte	.LVL381-1
 12155 12e3 0100     		.2byte	0x1
 12156 12e5 51       		.byte	0x51
 12157 12e6 0F000000 		.4byte	.LVL381-1
 12158 12ea 1A000000 		.4byte	.LVL382
 12159 12ee 0100     		.2byte	0x1
 12160 12f0 54       		.byte	0x54
 12161 12f1 1A000000 		.4byte	.LVL382
 12162 12f5 98000000 		.4byte	.LVL396
 12163 12f9 0400     		.2byte	0x4
 12164 12fb F3       		.byte	0xf3
 12165 12fc 01       		.uleb128 0x1
 12166 12fd 51       		.byte	0x51
 12167 12fe 9F       		.byte	0x9f
 12168 12ff 98000000 		.4byte	.LVL396
 12169 1303 9A000000 		.4byte	.LVL397
 12170 1307 0100     		.2byte	0x1
 12171 1309 54       		.byte	0x54
 12172 130a 9A000000 		.4byte	.LVL397
 12173 130e B0000000 		.4byte	.LFE59
 12174 1312 0400     		.2byte	0x4
 12175 1314 F3       		.byte	0xf3
 12176 1315 01       		.uleb128 0x1
 12177 1316 51       		.byte	0x51
 12178 1317 9F       		.byte	0x9f
 12179 1318 00000000 		.4byte	0
 12180 131c 00000000 		.4byte	0
 12181              	.LLST127:
 12182 1320 00000000 		.4byte	.LVL379
 12183 1324 0F000000 		.4byte	.LVL381-1
 12184 1328 0100     		.2byte	0x1
 12185 132a 52       		.byte	0x52
 12186 132b 0F000000 		.4byte	.LVL381-1
 12187 132f A0000000 		.4byte	.LVL401
 12188 1333 0100     		.2byte	0x1
 12189 1335 57       		.byte	0x57
 12190 1336 A0000000 		.4byte	.LVL401
 12191 133a B0000000 		.4byte	.LFE59
 12192 133e 0400     		.2byte	0x4
 12193 1340 F3       		.byte	0xf3
 12194 1341 01       		.uleb128 0x1
 12195 1342 52       		.byte	0x52
 12196 1343 9F       		.byte	0x9f
 12197 1344 00000000 		.4byte	0
 12198 1348 00000000 		.4byte	0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 317


 12199              	.LLST128:
 12200 134c 0C000000 		.4byte	.LVL380
 12201 1350 1C000000 		.4byte	.LVL383
 12202 1354 0200     		.2byte	0x2
 12203 1356 30       		.byte	0x30
 12204 1357 9F       		.byte	0x9f
 12205 1358 1C000000 		.4byte	.LVL383
 12206 135c 98000000 		.4byte	.LVL396
 12207 1360 0100     		.2byte	0x1
 12208 1362 55       		.byte	0x55
 12209 1363 98000000 		.4byte	.LVL396
 12210 1367 9A000000 		.4byte	.LVL397
 12211 136b 0200     		.2byte	0x2
 12212 136d 30       		.byte	0x30
 12213 136e 9F       		.byte	0x9f
 12214 136f 9A000000 		.4byte	.LVL397
 12215 1373 A0000000 		.4byte	.LVL399
 12216 1377 0100     		.2byte	0x1
 12217 1379 55       		.byte	0x55
 12218 137a A0000000 		.4byte	.LVL399
 12219 137e B0000000 		.4byte	.LFE59
 12220 1382 0100     		.2byte	0x1
 12221 1384 50       		.byte	0x50
 12222 1385 00000000 		.4byte	0
 12223 1389 00000000 		.4byte	0
 12224              	.LLST129:
 12225 138d 0C000000 		.4byte	.LVL380
 12226 1391 1C000000 		.4byte	.LVL383
 12227 1395 0200     		.2byte	0x2
 12228 1397 37       		.byte	0x37
 12229 1398 9F       		.byte	0x9f
 12230 1399 1C000000 		.4byte	.LVL383
 12231 139d 46000000 		.4byte	.LVL387
 12232 13a1 0100     		.2byte	0x1
 12233 13a3 54       		.byte	0x54
 12234 13a4 98000000 		.4byte	.LVL396
 12235 13a8 9A000000 		.4byte	.LVL397
 12236 13ac 0200     		.2byte	0x2
 12237 13ae 37       		.byte	0x37
 12238 13af 9F       		.byte	0x9f
 12239 13b0 00000000 		.4byte	0
 12240 13b4 00000000 		.4byte	0
 12241              	.LLST130:
 12242 13b8 00000000 		.4byte	.LVL402
 12243 13bc 0A000000 		.4byte	.LVL403
 12244 13c0 0100     		.2byte	0x1
 12245 13c2 50       		.byte	0x50
 12246 13c3 00000000 		.4byte	0
 12247 13c7 00000000 		.4byte	0
 12248              	.LLST131:
 12249 13cb 0A000000 		.4byte	.LVL403
 12250 13cf 0C000000 		.4byte	.LVL404
 12251 13d3 0100     		.2byte	0x1
 12252 13d5 50       		.byte	0x50
 12253 13d6 0C000000 		.4byte	.LVL404
 12254 13da 0F000000 		.4byte	.LVL405-1
 12255 13de 0300     		.2byte	0x3
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 318


 12256 13e0 70       		.byte	0x70
 12257 13e1 50       		.sleb128 -48
 12258 13e2 9F       		.byte	0x9f
 12259 13e3 00000000 		.4byte	0
 12260 13e7 00000000 		.4byte	0
 12261              	.LLST132:
 12262 13eb 0C000000 		.4byte	.LVL404
 12263 13ef 0F000000 		.4byte	.LVL405-1
 12264 13f3 0100     		.2byte	0x1
 12265 13f5 50       		.byte	0x50
 12266 13f6 00000000 		.4byte	0
 12267 13fa 00000000 		.4byte	0
 12268              	.LLST133:
 12269 13fe 00000000 		.4byte	.LVL408
 12270 1402 18000000 		.4byte	.LVL409
 12271 1406 0100     		.2byte	0x1
 12272 1408 50       		.byte	0x50
 12273 1409 18000000 		.4byte	.LVL409
 12274 140d 72000000 		.4byte	.LVL420
 12275 1411 0100     		.2byte	0x1
 12276 1413 54       		.byte	0x54
 12277 1414 72000000 		.4byte	.LVL420
 12278 1418 8A000000 		.4byte	.LVL421
 12279 141c 0100     		.2byte	0x1
 12280 141e 50       		.byte	0x50
 12281 141f 8A000000 		.4byte	.LVL421
 12282 1423 C2000000 		.4byte	.LVL427
 12283 1427 0100     		.2byte	0x1
 12284 1429 54       		.byte	0x54
 12285 142a 00000000 		.4byte	0
 12286 142e 00000000 		.4byte	0
 12287              	.LLST134:
 12288 1432 1E000000 		.4byte	.LVL411
 12289 1436 27000000 		.4byte	.LVL412-1
 12290 143a 0100     		.2byte	0x1
 12291 143c 50       		.byte	0x50
 12292 143d 27000000 		.4byte	.LVL412-1
 12293 1441 C2000000 		.4byte	.LVL428
 12294 1445 0100     		.2byte	0x1
 12295 1447 56       		.byte	0x56
 12296 1448 00000000 		.4byte	0
 12297 144c 00000000 		.4byte	0
 12298              	.LLST135:
 12299 1450 4C000000 		.4byte	.LVL413
 12300 1454 50000000 		.4byte	.LVL414
 12301 1458 0300     		.2byte	0x3
 12302 145a 08       		.byte	0x8
 12303 145b 42       		.byte	0x42
 12304 145c 9F       		.byte	0x9f
 12305 145d 50000000 		.4byte	.LVL414
 12306 1461 54000000 		.4byte	.LVL415
 12307 1465 0300     		.2byte	0x3
 12308 1467 08       		.byte	0x8
 12309 1468 53       		.byte	0x53
 12310 1469 9F       		.byte	0x9f
 12311 146a 54000000 		.4byte	.LVL415
 12312 146e 58000000 		.4byte	.LVL416
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 319


 12313 1472 0300     		.2byte	0x3
 12314 1474 08       		.byte	0x8
 12315 1475 44       		.byte	0x44
 12316 1476 9F       		.byte	0x9f
 12317 1477 58000000 		.4byte	.LVL416
 12318 147b 5C000000 		.4byte	.LVL417
 12319 147f 0200     		.2byte	0x2
 12320 1481 30       		.byte	0x30
 12321 1482 9F       		.byte	0x9f
 12322 1483 5E000000 		.4byte	.LVL418
 12323 1487 B2000000 		.4byte	.LVL425
 12324 148b 0100     		.2byte	0x1
 12325 148d 55       		.byte	0x55
 12326 148e 00000000 		.4byte	0
 12327 1492 00000000 		.4byte	0
 12328              	.LLST136:
 12329 1496 00000000 		.4byte	.LVL430
 12330 149a 09000000 		.4byte	.LVL431-1
 12331 149e 0100     		.2byte	0x1
 12332 14a0 50       		.byte	0x50
 12333 14a1 09000000 		.4byte	.LVL431-1
 12334 14a5 64000000 		.4byte	.LVL439
 12335 14a9 0100     		.2byte	0x1
 12336 14ab 55       		.byte	0x55
 12337 14ac 64000000 		.4byte	.LVL439
 12338 14b0 6C000000 		.4byte	.LFE89
 12339 14b4 0400     		.2byte	0x4
 12340 14b6 F3       		.byte	0xf3
 12341 14b7 01       		.uleb128 0x1
 12342 14b8 50       		.byte	0x50
 12343 14b9 9F       		.byte	0x9f
 12344 14ba 00000000 		.4byte	0
 12345 14be 00000000 		.4byte	0
 12346              	.LLST137:
 12347 14c2 00000000 		.4byte	.LVL430
 12348 14c6 09000000 		.4byte	.LVL431-1
 12349 14ca 0100     		.2byte	0x1
 12350 14cc 51       		.byte	0x51
 12351 14cd 09000000 		.4byte	.LVL431-1
 12352 14d1 3A000000 		.4byte	.LVL436
 12353 14d5 0100     		.2byte	0x1
 12354 14d7 54       		.byte	0x54
 12355 14d8 3A000000 		.4byte	.LVL436
 12356 14dc 6C000000 		.4byte	.LFE89
 12357 14e0 0400     		.2byte	0x4
 12358 14e2 F3       		.byte	0xf3
 12359 14e3 01       		.uleb128 0x1
 12360 14e4 51       		.byte	0x51
 12361 14e5 9F       		.byte	0x9f
 12362 14e6 00000000 		.4byte	0
 12363 14ea 00000000 		.4byte	0
 12364              	.LLST138:
 12365 14ee 3A000000 		.4byte	.LVL436
 12366 14f2 64000000 		.4byte	.LVL438
 12367 14f6 0100     		.2byte	0x1
 12368 14f8 54       		.byte	0x54
 12369 14f9 64000000 		.4byte	.LVL438
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 320


 12370 14fd 6C000000 		.4byte	.LFE89
 12371 1501 0100     		.2byte	0x1
 12372 1503 50       		.byte	0x50
 12373 1504 00000000 		.4byte	0
 12374 1508 00000000 		.4byte	0
 12375              	.LLST139:
 12376 150c 00000000 		.4byte	.LVL440
 12377 1510 0D000000 		.4byte	.LVL441-1
 12378 1514 0100     		.2byte	0x1
 12379 1516 50       		.byte	0x50
 12380 1517 0D000000 		.4byte	.LVL441-1
 12381 151b 7A000000 		.4byte	.LVL453
 12382 151f 0100     		.2byte	0x1
 12383 1521 56       		.byte	0x56
 12384 1522 7A000000 		.4byte	.LVL453
 12385 1526 80000000 		.4byte	.LFE90
 12386 152a 0400     		.2byte	0x4
 12387 152c F3       		.byte	0xf3
 12388 152d 01       		.uleb128 0x1
 12389 152e 50       		.byte	0x50
 12390 152f 9F       		.byte	0x9f
 12391 1530 00000000 		.4byte	0
 12392 1534 00000000 		.4byte	0
 12393              	.LLST140:
 12394 1538 00000000 		.4byte	.LVL440
 12395 153c 0D000000 		.4byte	.LVL441-1
 12396 1540 0100     		.2byte	0x1
 12397 1542 51       		.byte	0x51
 12398 1543 0D000000 		.4byte	.LVL441-1
 12399 1547 7A000000 		.4byte	.LVL452
 12400 154b 0100     		.2byte	0x1
 12401 154d 55       		.byte	0x55
 12402 154e 7A000000 		.4byte	.LVL452
 12403 1552 80000000 		.4byte	.LFE90
 12404 1556 0400     		.2byte	0x4
 12405 1558 F3       		.byte	0xf3
 12406 1559 01       		.uleb128 0x1
 12407 155a 51       		.byte	0x51
 12408 155b 9F       		.byte	0x9f
 12409 155c 00000000 		.4byte	0
 12410 1560 00000000 		.4byte	0
 12411              	.LLST141:
 12412 1564 00000000 		.4byte	.LVL440
 12413 1568 0D000000 		.4byte	.LVL441-1
 12414 156c 0100     		.2byte	0x1
 12415 156e 52       		.byte	0x52
 12416 156f 0D000000 		.4byte	.LVL441-1
 12417 1573 7A000000 		.4byte	.LVL454
 12418 1577 0100     		.2byte	0x1
 12419 1579 57       		.byte	0x57
 12420 157a 7A000000 		.4byte	.LVL454
 12421 157e 80000000 		.4byte	.LFE90
 12422 1582 0400     		.2byte	0x4
 12423 1584 F3       		.byte	0xf3
 12424 1585 01       		.uleb128 0x1
 12425 1586 52       		.byte	0x52
 12426 1587 9F       		.byte	0x9f
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 321


 12427 1588 00000000 		.4byte	0
 12428 158c 00000000 		.4byte	0
 12429              	.LLST142:
 12430 1590 00000000 		.4byte	.LVL440
 12431 1594 0D000000 		.4byte	.LVL441-1
 12432 1598 0100     		.2byte	0x1
 12433 159a 53       		.byte	0x53
 12434 159b 0D000000 		.4byte	.LVL441-1
 12435 159f 66000000 		.4byte	.LVL447
 12436 15a3 0100     		.2byte	0x1
 12437 15a5 54       		.byte	0x54
 12438 15a6 66000000 		.4byte	.LVL447
 12439 15aa 68000000 		.4byte	.LVL448
 12440 15ae 0400     		.2byte	0x4
 12441 15b0 F3       		.byte	0xf3
 12442 15b1 01       		.uleb128 0x1
 12443 15b2 53       		.byte	0x53
 12444 15b3 9F       		.byte	0x9f
 12445 15b4 68000000 		.4byte	.LVL448
 12446 15b8 6A000000 		.4byte	.LVL449
 12447 15bc 0100     		.2byte	0x1
 12448 15be 54       		.byte	0x54
 12449 15bf 6A000000 		.4byte	.LVL449
 12450 15c3 80000000 		.4byte	.LFE90
 12451 15c7 0400     		.2byte	0x4
 12452 15c9 F3       		.byte	0xf3
 12453 15ca 01       		.uleb128 0x1
 12454 15cb 53       		.byte	0x53
 12455 15cc 9F       		.byte	0x9f
 12456 15cd 00000000 		.4byte	0
 12457 15d1 00000000 		.4byte	0
 12458              	.LLST143:
 12459 15d5 64000000 		.4byte	.LVL446
 12460 15d9 68000000 		.4byte	.LVL448
 12461 15dd 0200     		.2byte	0x2
 12462 15df 31       		.byte	0x31
 12463 15e0 9F       		.byte	0x9f
 12464 15e1 6A000000 		.4byte	.LVL449
 12465 15e5 7A000000 		.4byte	.LVL451
 12466 15e9 0100     		.2byte	0x1
 12467 15eb 54       		.byte	0x54
 12468 15ec 7A000000 		.4byte	.LVL451
 12469 15f0 80000000 		.4byte	.LFE90
 12470 15f4 0100     		.2byte	0x1
 12471 15f6 50       		.byte	0x50
 12472 15f7 00000000 		.4byte	0
 12473 15fb 00000000 		.4byte	0
 12474              	.LLST144:
 12475 15ff 00000000 		.4byte	.LVL455
 12476 1603 15000000 		.4byte	.LVL458-1
 12477 1607 0100     		.2byte	0x1
 12478 1609 50       		.byte	0x50
 12479 160a 15000000 		.4byte	.LVL458-1
 12480 160e B4000000 		.4byte	.LVL475
 12481 1612 0100     		.2byte	0x1
 12482 1614 54       		.byte	0x54
 12483 1615 B4000000 		.4byte	.LVL475
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 322


 12484 1619 C0000000 		.4byte	.LFE91
 12485 161d 0400     		.2byte	0x4
 12486 161f F3       		.byte	0xf3
 12487 1620 01       		.uleb128 0x1
 12488 1621 50       		.byte	0x50
 12489 1622 9F       		.byte	0x9f
 12490 1623 00000000 		.4byte	0
 12491 1627 00000000 		.4byte	0
 12492              	.LLST145:
 12493 162b 00000000 		.4byte	.LVL455
 12494 162f 15000000 		.4byte	.LVL458-1
 12495 1633 0100     		.2byte	0x1
 12496 1635 51       		.byte	0x51
 12497 1636 15000000 		.4byte	.LVL458-1
 12498 163a 42000000 		.4byte	.LVL460
 12499 163e 0100     		.2byte	0x1
 12500 1640 56       		.byte	0x56
 12501 1641 42000000 		.4byte	.LVL460
 12502 1645 48000000 		.4byte	.LVL461
 12503 1649 0400     		.2byte	0x4
 12504 164b F3       		.byte	0xf3
 12505 164c 01       		.uleb128 0x1
 12506 164d 51       		.byte	0x51
 12507 164e 9F       		.byte	0x9f
 12508 164f 48000000 		.4byte	.LVL461
 12509 1653 50000000 		.4byte	.LVL462
 12510 1657 0100     		.2byte	0x1
 12511 1659 56       		.byte	0x56
 12512 165a 50000000 		.4byte	.LVL462
 12513 165e 52000000 		.4byte	.LVL463
 12514 1662 0400     		.2byte	0x4
 12515 1664 F3       		.byte	0xf3
 12516 1665 01       		.uleb128 0x1
 12517 1666 51       		.byte	0x51
 12518 1667 9F       		.byte	0x9f
 12519 1668 52000000 		.4byte	.LVL463
 12520 166c 56000000 		.4byte	.LVL464
 12521 1670 0100     		.2byte	0x1
 12522 1672 56       		.byte	0x56
 12523 1673 56000000 		.4byte	.LVL464
 12524 1677 58000000 		.4byte	.LVL465
 12525 167b 0300     		.2byte	0x3
 12526 167d 74       		.byte	0x74
 12527 167e E000     		.sleb128 96
 12528 1680 58000000 		.4byte	.LVL465
 12529 1684 60000000 		.4byte	.LVL466
 12530 1688 0100     		.2byte	0x1
 12531 168a 56       		.byte	0x56
 12532 168b 60000000 		.4byte	.LVL466
 12533 168f 62000000 		.4byte	.LVL467
 12534 1693 0300     		.2byte	0x3
 12535 1695 74       		.byte	0x74
 12536 1696 E000     		.sleb128 96
 12537 1698 62000000 		.4byte	.LVL467
 12538 169c 64000000 		.4byte	.LVL468
 12539 16a0 0100     		.2byte	0x1
 12540 16a2 56       		.byte	0x56
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 323


 12541 16a3 64000000 		.4byte	.LVL468
 12542 16a7 66000000 		.4byte	.LVL469
 12543 16ab 0400     		.2byte	0x4
 12544 16ad F3       		.byte	0xf3
 12545 16ae 01       		.uleb128 0x1
 12546 16af 51       		.byte	0x51
 12547 16b0 9F       		.byte	0x9f
 12548 16b1 66000000 		.4byte	.LVL469
 12549 16b5 68000000 		.4byte	.LVL470
 12550 16b9 0100     		.2byte	0x1
 12551 16bb 56       		.byte	0x56
 12552 16bc 68000000 		.4byte	.LVL470
 12553 16c0 C0000000 		.4byte	.LFE91
 12554 16c4 0400     		.2byte	0x4
 12555 16c6 F3       		.byte	0xf3
 12556 16c7 01       		.uleb128 0x1
 12557 16c8 51       		.byte	0x51
 12558 16c9 9F       		.byte	0x9f
 12559 16ca 00000000 		.4byte	0
 12560 16ce 00000000 		.4byte	0
 12561              	.LLST146:
 12562 16d2 00000000 		.4byte	.LVL455
 12563 16d6 15000000 		.4byte	.LVL458-1
 12564 16da 0100     		.2byte	0x1
 12565 16dc 52       		.byte	0x52
 12566 16dd 15000000 		.4byte	.LVL458-1
 12567 16e1 C0000000 		.4byte	.LFE91
 12568 16e5 0400     		.2byte	0x4
 12569 16e7 F3       		.byte	0xf3
 12570 16e8 01       		.uleb128 0x1
 12571 16e9 52       		.byte	0x52
 12572 16ea 9F       		.byte	0x9f
 12573 16eb 00000000 		.4byte	0
 12574 16ef 00000000 		.4byte	0
 12575              	.LLST147:
 12576 16f3 00000000 		.4byte	.LVL455
 12577 16f7 15000000 		.4byte	.LVL458-1
 12578 16fb 0100     		.2byte	0x1
 12579 16fd 53       		.byte	0x53
 12580 16fe 15000000 		.4byte	.LVL458-1
 12581 1702 B4000000 		.4byte	.LVL477
 12582 1706 0100     		.2byte	0x1
 12583 1708 57       		.byte	0x57
 12584 1709 B4000000 		.4byte	.LVL477
 12585 170d C0000000 		.4byte	.LFE91
 12586 1711 0400     		.2byte	0x4
 12587 1713 F3       		.byte	0xf3
 12588 1714 01       		.uleb128 0x1
 12589 1715 53       		.byte	0x53
 12590 1716 9F       		.byte	0x9f
 12591 1717 00000000 		.4byte	0
 12592 171b 00000000 		.4byte	0
 12593              	.LLST148:
 12594 171f 12000000 		.4byte	.LVL457
 12595 1723 15000000 		.4byte	.LVL458-1
 12596 1727 0100     		.2byte	0x1
 12597 1729 50       		.byte	0x50
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 324


 12598 172a 15000000 		.4byte	.LVL458-1
 12599 172e B4000000 		.4byte	.LVL475
 12600 1732 0100     		.2byte	0x1
 12601 1734 54       		.byte	0x54
 12602 1735 B4000000 		.4byte	.LVL475
 12603 1739 C0000000 		.4byte	.LFE91
 12604 173d 0400     		.2byte	0x4
 12605 173f F3       		.byte	0xf3
 12606 1740 01       		.uleb128 0x1
 12607 1741 50       		.byte	0x50
 12608 1742 9F       		.byte	0x9f
 12609 1743 00000000 		.4byte	0
 12610 1747 00000000 		.4byte	0
 12611              	.LLST149:
 12612 174b 0A000000 		.4byte	.LVL456
 12613 174f 68000000 		.4byte	.LVL470
 12614 1753 0200     		.2byte	0x2
 12615 1755 31       		.byte	0x31
 12616 1756 9F       		.byte	0x9f
 12617 1757 68000000 		.4byte	.LVL470
 12618 175b B4000000 		.4byte	.LVL476
 12619 175f 0100     		.2byte	0x1
 12620 1761 56       		.byte	0x56
 12621 1762 B4000000 		.4byte	.LVL476
 12622 1766 C0000000 		.4byte	.LFE91
 12623 176a 0100     		.2byte	0x1
 12624 176c 50       		.byte	0x50
 12625 176d 00000000 		.4byte	0
 12626 1771 00000000 		.4byte	0
 12627              	.LLST150:
 12628 1775 24000000 		.4byte	.LVL459
 12629 1779 73000000 		.4byte	.LVL471-1
 12630 177d 0100     		.2byte	0x1
 12631 177f 53       		.byte	0x53
 12632 1780 00000000 		.4byte	0
 12633 1784 00000000 		.4byte	0
 12634              	.LLST151:
 12635 1788 00000000 		.4byte	.LVL478
 12636 178c 17000000 		.4byte	.LVL481-1
 12637 1790 0100     		.2byte	0x1
 12638 1792 50       		.byte	0x50
 12639 1793 17000000 		.4byte	.LVL481-1
 12640 1797 E2000000 		.4byte	.LVL503
 12641 179b 0100     		.2byte	0x1
 12642 179d 54       		.byte	0x54
 12643 179e E2000000 		.4byte	.LVL503
 12644 17a2 EC000000 		.4byte	.LFE92
 12645 17a6 0400     		.2byte	0x4
 12646 17a8 F3       		.byte	0xf3
 12647 17a9 01       		.uleb128 0x1
 12648 17aa 50       		.byte	0x50
 12649 17ab 9F       		.byte	0x9f
 12650 17ac 00000000 		.4byte	0
 12651 17b0 00000000 		.4byte	0
 12652              	.LLST152:
 12653 17b4 00000000 		.4byte	.LVL478
 12654 17b8 17000000 		.4byte	.LVL481-1
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 325


 12655 17bc 0100     		.2byte	0x1
 12656 17be 51       		.byte	0x51
 12657 17bf 17000000 		.4byte	.LVL481-1
 12658 17c3 4A000000 		.4byte	.LVL484
 12659 17c7 0100     		.2byte	0x1
 12660 17c9 57       		.byte	0x57
 12661 17ca 4A000000 		.4byte	.LVL484
 12662 17ce 4C000000 		.4byte	.LVL485
 12663 17d2 0400     		.2byte	0x4
 12664 17d4 F3       		.byte	0xf3
 12665 17d5 01       		.uleb128 0x1
 12666 17d6 51       		.byte	0x51
 12667 17d7 9F       		.byte	0x9f
 12668 17d8 4C000000 		.4byte	.LVL485
 12669 17dc 54000000 		.4byte	.LVL486
 12670 17e0 0100     		.2byte	0x1
 12671 17e2 57       		.byte	0x57
 12672 17e3 54000000 		.4byte	.LVL486
 12673 17e7 56000000 		.4byte	.LVL487
 12674 17eb 0400     		.2byte	0x4
 12675 17ed F3       		.byte	0xf3
 12676 17ee 01       		.uleb128 0x1
 12677 17ef 51       		.byte	0x51
 12678 17f0 9F       		.byte	0x9f
 12679 17f1 56000000 		.4byte	.LVL487
 12680 17f5 5A000000 		.4byte	.LVL488
 12681 17f9 0100     		.2byte	0x1
 12682 17fb 57       		.byte	0x57
 12683 17fc 5A000000 		.4byte	.LVL488
 12684 1800 5C000000 		.4byte	.LVL489
 12685 1804 0300     		.2byte	0x3
 12686 1806 74       		.byte	0x74
 12687 1807 E000     		.sleb128 96
 12688 1809 5C000000 		.4byte	.LVL489
 12689 180d 64000000 		.4byte	.LVL490
 12690 1811 0100     		.2byte	0x1
 12691 1813 57       		.byte	0x57
 12692 1814 64000000 		.4byte	.LVL490
 12693 1818 66000000 		.4byte	.LVL491
 12694 181c 0300     		.2byte	0x3
 12695 181e 74       		.byte	0x74
 12696 181f E000     		.sleb128 96
 12697 1821 66000000 		.4byte	.LVL491
 12698 1825 68000000 		.4byte	.LVL492
 12699 1829 0100     		.2byte	0x1
 12700 182b 57       		.byte	0x57
 12701 182c 68000000 		.4byte	.LVL492
 12702 1830 6A000000 		.4byte	.LVL493
 12703 1834 0400     		.2byte	0x4
 12704 1836 F3       		.byte	0xf3
 12705 1837 01       		.uleb128 0x1
 12706 1838 51       		.byte	0x51
 12707 1839 9F       		.byte	0x9f
 12708 183a 6A000000 		.4byte	.LVL493
 12709 183e 6C000000 		.4byte	.LVL494
 12710 1842 0100     		.2byte	0x1
 12711 1844 57       		.byte	0x57
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 326


 12712 1845 6C000000 		.4byte	.LVL494
 12713 1849 EC000000 		.4byte	.LFE92
 12714 184d 0400     		.2byte	0x4
 12715 184f F3       		.byte	0xf3
 12716 1850 01       		.uleb128 0x1
 12717 1851 51       		.byte	0x51
 12718 1852 9F       		.byte	0x9f
 12719 1853 00000000 		.4byte	0
 12720 1857 00000000 		.4byte	0
 12721              	.LLST153:
 12722 185b 00000000 		.4byte	.LVL478
 12723 185f 17000000 		.4byte	.LVL481-1
 12724 1863 0100     		.2byte	0x1
 12725 1865 52       		.byte	0x52
 12726 1866 17000000 		.4byte	.LVL481-1
 12727 186a EC000000 		.4byte	.LFE92
 12728 186e 0400     		.2byte	0x4
 12729 1870 F3       		.byte	0xf3
 12730 1871 01       		.uleb128 0x1
 12731 1872 52       		.byte	0x52
 12732 1873 9F       		.byte	0x9f
 12733 1874 00000000 		.4byte	0
 12734 1878 00000000 		.4byte	0
 12735              	.LLST154:
 12736 187c 00000000 		.4byte	.LVL478
 12737 1880 17000000 		.4byte	.LVL481-1
 12738 1884 0100     		.2byte	0x1
 12739 1886 53       		.byte	0x53
 12740 1887 17000000 		.4byte	.LVL481-1
 12741 188b E2000000 		.4byte	.LVL504
 12742 188f 0100     		.2byte	0x1
 12743 1891 55       		.byte	0x55
 12744 1892 E2000000 		.4byte	.LVL504
 12745 1896 EC000000 		.4byte	.LFE92
 12746 189a 0400     		.2byte	0x4
 12747 189c F3       		.byte	0xf3
 12748 189d 01       		.uleb128 0x1
 12749 189e 53       		.byte	0x53
 12750 189f 9F       		.byte	0x9f
 12751 18a0 00000000 		.4byte	0
 12752 18a4 00000000 		.4byte	0
 12753              	.LLST155:
 12754 18a8 14000000 		.4byte	.LVL480
 12755 18ac 17000000 		.4byte	.LVL481-1
 12756 18b0 0100     		.2byte	0x1
 12757 18b2 50       		.byte	0x50
 12758 18b3 17000000 		.4byte	.LVL481-1
 12759 18b7 E2000000 		.4byte	.LVL503
 12760 18bb 0100     		.2byte	0x1
 12761 18bd 54       		.byte	0x54
 12762 18be E2000000 		.4byte	.LVL503
 12763 18c2 EC000000 		.4byte	.LFE92
 12764 18c6 0400     		.2byte	0x4
 12765 18c8 F3       		.byte	0xf3
 12766 18c9 01       		.uleb128 0x1
 12767 18ca 50       		.byte	0x50
 12768 18cb 9F       		.byte	0x9f
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 327


 12769 18cc 00000000 		.4byte	0
 12770 18d0 00000000 		.4byte	0
 12771              	.LLST156:
 12772 18d4 28000000 		.4byte	.LVL483
 12773 18d8 72000000 		.4byte	.LVL495
 12774 18dc 0100     		.2byte	0x1
 12775 18de 53       		.byte	0x53
 12776 18df 00000000 		.4byte	0
 12777 18e3 00000000 		.4byte	0
 12778              	.LLST157:
 12779 18e7 0C000000 		.4byte	.LVL479
 12780 18eb 6C000000 		.4byte	.LVL494
 12781 18ef 0200     		.2byte	0x2
 12782 18f1 31       		.byte	0x31
 12783 18f2 9F       		.byte	0x9f
 12784 18f3 6C000000 		.4byte	.LVL494
 12785 18f7 E2000000 		.4byte	.LVL505
 12786 18fb 0100     		.2byte	0x1
 12787 18fd 57       		.byte	0x57
 12788 18fe E2000000 		.4byte	.LVL505
 12789 1902 EC000000 		.4byte	.LFE92
 12790 1906 0100     		.2byte	0x1
 12791 1908 50       		.byte	0x50
 12792 1909 00000000 		.4byte	0
 12793 190d 00000000 		.4byte	0
 12794              	.LLST158:
 12795 1911 1A000000 		.4byte	.LVL482
 12796 1915 86000000 		.4byte	.LVL496
 12797 1919 0100     		.2byte	0x1
 12798 191b 50       		.byte	0x50
 12799 191c 86000000 		.4byte	.LVL496
 12800 1920 AC000000 		.4byte	.LVL499
 12801 1924 0200     		.2byte	0x2
 12802 1926 91       		.byte	0x91
 12803 1927 64       		.sleb128 -28
 12804 1928 AC000000 		.4byte	.LVL499
 12805 192c B2000000 		.4byte	.LVL500
 12806 1930 0100     		.2byte	0x1
 12807 1932 50       		.byte	0x50
 12808 1933 B2000000 		.4byte	.LVL500
 12809 1937 EC000000 		.4byte	.LFE92
 12810 193b 0200     		.2byte	0x2
 12811 193d 91       		.byte	0x91
 12812 193e 64       		.sleb128 -28
 12813 193f 00000000 		.4byte	0
 12814 1943 00000000 		.4byte	0
 12815              	.LLST159:
 12816 1947 00000000 		.4byte	.LVL506
 12817 194b 11000000 		.4byte	.LVL508-1
 12818 194f 0100     		.2byte	0x1
 12819 1951 50       		.byte	0x50
 12820 1952 11000000 		.4byte	.LVL508-1
 12821 1956 90000000 		.4byte	.LVL518
 12822 195a 0100     		.2byte	0x1
 12823 195c 54       		.byte	0x54
 12824 195d 90000000 		.4byte	.LVL518
 12825 1961 9C000000 		.4byte	.LFE93
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 328


 12826 1965 0400     		.2byte	0x4
 12827 1967 F3       		.byte	0xf3
 12828 1968 01       		.uleb128 0x1
 12829 1969 50       		.byte	0x50
 12830 196a 9F       		.byte	0x9f
 12831 196b 00000000 		.4byte	0
 12832 196f 00000000 		.4byte	0
 12833              	.LLST160:
 12834 1973 00000000 		.4byte	.LVL506
 12835 1977 11000000 		.4byte	.LVL508-1
 12836 197b 0100     		.2byte	0x1
 12837 197d 51       		.byte	0x51
 12838 197e 11000000 		.4byte	.LVL508-1
 12839 1982 90000000 		.4byte	.LVL520
 12840 1986 0100     		.2byte	0x1
 12841 1988 57       		.byte	0x57
 12842 1989 90000000 		.4byte	.LVL520
 12843 198d 9C000000 		.4byte	.LFE93
 12844 1991 0400     		.2byte	0x4
 12845 1993 F3       		.byte	0xf3
 12846 1994 01       		.uleb128 0x1
 12847 1995 51       		.byte	0x51
 12848 1996 9F       		.byte	0x9f
 12849 1997 00000000 		.4byte	0
 12850 199b 00000000 		.4byte	0
 12851              	.LLST161:
 12852 199f 0E000000 		.4byte	.LVL507
 12853 19a3 11000000 		.4byte	.LVL508-1
 12854 19a7 0100     		.2byte	0x1
 12855 19a9 50       		.byte	0x50
 12856 19aa 11000000 		.4byte	.LVL508-1
 12857 19ae 90000000 		.4byte	.LVL518
 12858 19b2 0100     		.2byte	0x1
 12859 19b4 54       		.byte	0x54
 12860 19b5 90000000 		.4byte	.LVL518
 12861 19b9 9C000000 		.4byte	.LFE93
 12862 19bd 0400     		.2byte	0x4
 12863 19bf F3       		.byte	0xf3
 12864 19c0 01       		.uleb128 0x1
 12865 19c1 50       		.byte	0x50
 12866 19c2 9F       		.byte	0x9f
 12867 19c3 00000000 		.4byte	0
 12868 19c7 00000000 		.4byte	0
 12869              	.LLST162:
 12870 19cb 18000000 		.4byte	.LVL510
 12871 19cf 3F000000 		.4byte	.LVL512-1
 12872 19d3 0100     		.2byte	0x1
 12873 19d5 52       		.byte	0x52
 12874 19d6 62000000 		.4byte	.LVL514
 12875 19da 6D000000 		.4byte	.LVL516-1
 12876 19de 0100     		.2byte	0x1
 12877 19e0 52       		.byte	0x52
 12878 19e1 00000000 		.4byte	0
 12879 19e5 00000000 		.4byte	0
 12880              	.LLST163:
 12881 19e9 14000000 		.4byte	.LVL509
 12882 19ed 3C000000 		.4byte	.LVL511
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 329


 12883 19f1 0100     		.2byte	0x1
 12884 19f3 50       		.byte	0x50
 12885 19f4 3C000000 		.4byte	.LVL511
 12886 19f8 62000000 		.4byte	.LVL514
 12887 19fc 0100     		.2byte	0x1
 12888 19fe 56       		.byte	0x56
 12889 19ff 62000000 		.4byte	.LVL514
 12890 1a03 68000000 		.4byte	.LVL515
 12891 1a07 0100     		.2byte	0x1
 12892 1a09 50       		.byte	0x50
 12893 1a0a 68000000 		.4byte	.LVL515
 12894 1a0e 90000000 		.4byte	.LVL519
 12895 1a12 0100     		.2byte	0x1
 12896 1a14 56       		.byte	0x56
 12897 1a15 00000000 		.4byte	0
 12898 1a19 00000000 		.4byte	0
 12899              	.LLST164:
 12900 1a1d 00000000 		.4byte	.LVL521
 12901 1a21 0A000000 		.4byte	.LVL522
 12902 1a25 0100     		.2byte	0x1
 12903 1a27 50       		.byte	0x50
 12904 1a28 00000000 		.4byte	0
 12905 1a2c 00000000 		.4byte	0
 12906              	.LLST165:
 12907 1a30 0A000000 		.4byte	.LVL522
 12908 1a34 1E000000 		.4byte	.LVL525
 12909 1a38 0100     		.2byte	0x1
 12910 1a3a 54       		.byte	0x54
 12911 1a3b 20000000 		.4byte	.LVL526
 12912 1a3f 22000000 		.4byte	.LVL527
 12913 1a43 0100     		.2byte	0x1
 12914 1a45 54       		.byte	0x54
 12915 1a46 00000000 		.4byte	0
 12916 1a4a 00000000 		.4byte	0
 12917              	.LLST166:
 12918 1a4e 1C000000 		.4byte	.LVL524
 12919 1a52 20000000 		.4byte	.LVL526
 12920 1a56 0200     		.2byte	0x2
 12921 1a58 31       		.byte	0x31
 12922 1a59 9F       		.byte	0x9f
 12923 1a5a 22000000 		.4byte	.LVL527
 12924 1a5e 28000000 		.4byte	.LVL529
 12925 1a62 0100     		.2byte	0x1
 12926 1a64 54       		.byte	0x54
 12927 1a65 28000000 		.4byte	.LVL529
 12928 1a69 30000000 		.4byte	.LFE94
 12929 1a6d 0100     		.2byte	0x1
 12930 1a6f 50       		.byte	0x50
 12931 1a70 00000000 		.4byte	0
 12932 1a74 00000000 		.4byte	0
 12933              		.section	.debug_aranges,"",%progbits
 12934 0000 EC010000 		.4byte	0x1ec
 12935 0004 0200     		.2byte	0x2
 12936 0006 00000000 		.4byte	.Ldebug_info0
 12937 000a 04       		.byte	0x4
 12938 000b 00       		.byte	0
 12939 000c 0000     		.2byte	0
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 330


 12940 000e 0000     		.2byte	0
 12941 0010 00000000 		.4byte	.LFB48
 12942 0014 44000000 		.4byte	.LFE48-.LFB48
 12943 0018 00000000 		.4byte	.LFB80
 12944 001c 14000000 		.4byte	.LFE80-.LFB80
 12945 0020 00000000 		.4byte	.LFB83
 12946 0024 30000000 		.4byte	.LFE83-.LFB83
 12947 0028 00000000 		.4byte	.LFB82
 12948 002c 12000000 		.4byte	.LFE82-.LFB82
 12949 0030 00000000 		.4byte	.LFB38
 12950 0034 A8000000 		.4byte	.LFE38-.LFB38
 12951 0038 00000000 		.4byte	.LFB76
 12952 003c 58000000 		.4byte	.LFE76-.LFB76
 12953 0040 00000000 		.4byte	.LFB39
 12954 0044 94000000 		.4byte	.LFE39-.LFB39
 12955 0048 00000000 		.4byte	.LFB77
 12956 004c 40000000 		.4byte	.LFE77-.LFB77
 12957 0050 00000000 		.4byte	.LFB73
 12958 0054 18000000 		.4byte	.LFE73-.LFB73
 12959 0058 00000000 		.4byte	.LFB95
 12960 005c 6C000000 		.4byte	.LFE95-.LFB95
 12961 0060 00000000 		.4byte	.LFB86
 12962 0064 22000000 		.4byte	.LFE86-.LFB86
 12963 0068 00000000 		.4byte	.LFB37
 12964 006c 5E000000 		.4byte	.LFE37-.LFB37
 12965 0070 00000000 		.4byte	.LFB40
 12966 0074 88000000 		.4byte	.LFE40-.LFB40
 12967 0078 00000000 		.4byte	.LFB43
 12968 007c 70000000 		.4byte	.LFE43-.LFB43
 12969 0080 00000000 		.4byte	.LFB44
 12970 0084 20000000 		.4byte	.LFE44-.LFB44
 12971 0088 00000000 		.4byte	.LFB45
 12972 008c 20000000 		.4byte	.LFE45-.LFB45
 12973 0090 00000000 		.4byte	.LFB46
 12974 0094 BC000000 		.4byte	.LFE46-.LFB46
 12975 0098 00000000 		.4byte	.LFB49
 12976 009c 6C000000 		.4byte	.LFE49-.LFB49
 12977 00a0 00000000 		.4byte	.LFB50
 12978 00a4 84000000 		.4byte	.LFE50-.LFB50
 12979 00a8 00000000 		.4byte	.LFB51
 12980 00ac 5C000000 		.4byte	.LFE51-.LFB51
 12981 00b0 00000000 		.4byte	.LFB52
 12982 00b4 14000000 		.4byte	.LFE52-.LFB52
 12983 00b8 00000000 		.4byte	.LFB53
 12984 00bc 10000000 		.4byte	.LFE53-.LFB53
 12985 00c0 00000000 		.4byte	.LFB55
 12986 00c4 0C000000 		.4byte	.LFE55-.LFB55
 12987 00c8 00000000 		.4byte	.LFB56
 12988 00cc 0C000000 		.4byte	.LFE56-.LFB56
 12989 00d0 00000000 		.4byte	.LFB57
 12990 00d4 0C000000 		.4byte	.LFE57-.LFB57
 12991 00d8 00000000 		.4byte	.LFB58
 12992 00dc 18000000 		.4byte	.LFE58-.LFB58
 12993 00e0 00000000 		.4byte	.LFB60
 12994 00e4 E8000000 		.4byte	.LFE60-.LFB60
 12995 00e8 00000000 		.4byte	.LFB54
 12996 00ec D4000000 		.4byte	.LFE54-.LFB54
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 331


 12997 00f0 00000000 		.4byte	.LFB41
 12998 00f4 78000000 		.4byte	.LFE41-.LFB41
 12999 00f8 00000000 		.4byte	.LFB42
 13000 00fc 34000000 		.4byte	.LFE42-.LFB42
 13001 0100 00000000 		.4byte	.LFB61
 13002 0104 B4000000 		.4byte	.LFE61-.LFB61
 13003 0108 00000000 		.4byte	.LFB47
 13004 010c 9C000000 		.4byte	.LFE47-.LFB47
 13005 0110 00000000 		.4byte	.LFB62
 13006 0114 24000000 		.4byte	.LFE62-.LFB62
 13007 0118 00000000 		.4byte	.LFB63
 13008 011c 3C000000 		.4byte	.LFE63-.LFB63
 13009 0120 00000000 		.4byte	.LFB64
 13010 0124 30000000 		.4byte	.LFE64-.LFB64
 13011 0128 00000000 		.4byte	.LFB65
 13012 012c 78000000 		.4byte	.LFE65-.LFB65
 13013 0130 00000000 		.4byte	.LFB66
 13014 0134 68000000 		.4byte	.LFE66-.LFB66
 13015 0138 00000000 		.4byte	.LFB67
 13016 013c 24000000 		.4byte	.LFE67-.LFB67
 13017 0140 00000000 		.4byte	.LFB68
 13018 0144 10000000 		.4byte	.LFE68-.LFB68
 13019 0148 00000000 		.4byte	.LFB69
 13020 014c 64000000 		.4byte	.LFE69-.LFB69
 13021 0150 00000000 		.4byte	.LFB70
 13022 0154 0C000000 		.4byte	.LFE70-.LFB70
 13023 0158 00000000 		.4byte	.LFB71
 13024 015c 0C000000 		.4byte	.LFE71-.LFB71
 13025 0160 00000000 		.4byte	.LFB72
 13026 0164 08000000 		.4byte	.LFE72-.LFB72
 13027 0168 00000000 		.4byte	.LFB74
 13028 016c 1C000000 		.4byte	.LFE74-.LFB74
 13029 0170 00000000 		.4byte	.LFB75
 13030 0174 20000000 		.4byte	.LFE75-.LFB75
 13031 0178 00000000 		.4byte	.LFB78
 13032 017c 78000000 		.4byte	.LFE78-.LFB78
 13033 0180 00000000 		.4byte	.LFB79
 13034 0184 6A000000 		.4byte	.LFE79-.LFB79
 13035 0188 00000000 		.4byte	.LFB59
 13036 018c B0000000 		.4byte	.LFE59-.LFB59
 13037 0190 00000000 		.4byte	.LFB81
 13038 0194 18000000 		.4byte	.LFE81-.LFB81
 13039 0198 00000000 		.4byte	.LFB84
 13040 019c 0C000000 		.4byte	.LFE84-.LFB84
 13041 01a0 00000000 		.4byte	.LFB85
 13042 01a4 20000000 		.4byte	.LFE85-.LFB85
 13043 01a8 00000000 		.4byte	.LFB87
 13044 01ac D0000000 		.4byte	.LFE87-.LFB87
 13045 01b0 00000000 		.4byte	.LFB88
 13046 01b4 18000000 		.4byte	.LFE88-.LFB88
 13047 01b8 00000000 		.4byte	.LFB89
 13048 01bc 6C000000 		.4byte	.LFE89-.LFB89
 13049 01c0 00000000 		.4byte	.LFB90
 13050 01c4 80000000 		.4byte	.LFE90-.LFB90
 13051 01c8 00000000 		.4byte	.LFB91
 13052 01cc C0000000 		.4byte	.LFE91-.LFB91
 13053 01d0 00000000 		.4byte	.LFB92
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 332


 13054 01d4 EC000000 		.4byte	.LFE92-.LFB92
 13055 01d8 00000000 		.4byte	.LFB93
 13056 01dc 9C000000 		.4byte	.LFE93-.LFB93
 13057 01e0 00000000 		.4byte	.LFB94
 13058 01e4 30000000 		.4byte	.LFE94-.LFB94
 13059 01e8 00000000 		.4byte	0
 13060 01ec 00000000 		.4byte	0
 13061              		.section	.debug_ranges,"",%progbits
 13062              	.Ldebug_ranges0:
 13063 0000 0A000000 		.4byte	.LBB4
 13064 0004 44000000 		.4byte	.LBE4
 13065 0008 48000000 		.4byte	.LBB6
 13066 000c C4000000 		.4byte	.LBE6
 13067 0010 00000000 		.4byte	0
 13068 0014 00000000 		.4byte	0
 13069 0018 26000000 		.4byte	.LBB8
 13070 001c 3A000000 		.4byte	.LBE8
 13071 0020 3E000000 		.4byte	.LBB9
 13072 0024 46000000 		.4byte	.LBE9
 13073 0028 4E000000 		.4byte	.LBB10
 13074 002c 66000000 		.4byte	.LBE10
 13075 0030 00000000 		.4byte	0
 13076 0034 00000000 		.4byte	0
 13077 0038 00000000 		.4byte	.LFB48
 13078 003c 44000000 		.4byte	.LFE48
 13079 0040 00000000 		.4byte	.LFB80
 13080 0044 14000000 		.4byte	.LFE80
 13081 0048 00000000 		.4byte	.LFB83
 13082 004c 30000000 		.4byte	.LFE83
 13083 0050 00000000 		.4byte	.LFB82
 13084 0054 12000000 		.4byte	.LFE82
 13085 0058 00000000 		.4byte	.LFB38
 13086 005c A8000000 		.4byte	.LFE38
 13087 0060 00000000 		.4byte	.LFB76
 13088 0064 58000000 		.4byte	.LFE76
 13089 0068 00000000 		.4byte	.LFB39
 13090 006c 94000000 		.4byte	.LFE39
 13091 0070 00000000 		.4byte	.LFB77
 13092 0074 40000000 		.4byte	.LFE77
 13093 0078 00000000 		.4byte	.LFB73
 13094 007c 18000000 		.4byte	.LFE73
 13095 0080 00000000 		.4byte	.LFB95
 13096 0084 6C000000 		.4byte	.LFE95
 13097 0088 00000000 		.4byte	.LFB86
 13098 008c 22000000 		.4byte	.LFE86
 13099 0090 00000000 		.4byte	.LFB37
 13100 0094 5E000000 		.4byte	.LFE37
 13101 0098 00000000 		.4byte	.LFB40
 13102 009c 88000000 		.4byte	.LFE40
 13103 00a0 00000000 		.4byte	.LFB43
 13104 00a4 70000000 		.4byte	.LFE43
 13105 00a8 00000000 		.4byte	.LFB44
 13106 00ac 20000000 		.4byte	.LFE44
 13107 00b0 00000000 		.4byte	.LFB45
 13108 00b4 20000000 		.4byte	.LFE45
 13109 00b8 00000000 		.4byte	.LFB46
 13110 00bc BC000000 		.4byte	.LFE46
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 333


 13111 00c0 00000000 		.4byte	.LFB49
 13112 00c4 6C000000 		.4byte	.LFE49
 13113 00c8 00000000 		.4byte	.LFB50
 13114 00cc 84000000 		.4byte	.LFE50
 13115 00d0 00000000 		.4byte	.LFB51
 13116 00d4 5C000000 		.4byte	.LFE51
 13117 00d8 00000000 		.4byte	.LFB52
 13118 00dc 14000000 		.4byte	.LFE52
 13119 00e0 00000000 		.4byte	.LFB53
 13120 00e4 10000000 		.4byte	.LFE53
 13121 00e8 00000000 		.4byte	.LFB55
 13122 00ec 0C000000 		.4byte	.LFE55
 13123 00f0 00000000 		.4byte	.LFB56
 13124 00f4 0C000000 		.4byte	.LFE56
 13125 00f8 00000000 		.4byte	.LFB57
 13126 00fc 0C000000 		.4byte	.LFE57
 13127 0100 00000000 		.4byte	.LFB58
 13128 0104 18000000 		.4byte	.LFE58
 13129 0108 00000000 		.4byte	.LFB60
 13130 010c E8000000 		.4byte	.LFE60
 13131 0110 00000000 		.4byte	.LFB54
 13132 0114 D4000000 		.4byte	.LFE54
 13133 0118 00000000 		.4byte	.LFB41
 13134 011c 78000000 		.4byte	.LFE41
 13135 0120 00000000 		.4byte	.LFB42
 13136 0124 34000000 		.4byte	.LFE42
 13137 0128 00000000 		.4byte	.LFB61
 13138 012c B4000000 		.4byte	.LFE61
 13139 0130 00000000 		.4byte	.LFB47
 13140 0134 9C000000 		.4byte	.LFE47
 13141 0138 00000000 		.4byte	.LFB62
 13142 013c 24000000 		.4byte	.LFE62
 13143 0140 00000000 		.4byte	.LFB63
 13144 0144 3C000000 		.4byte	.LFE63
 13145 0148 00000000 		.4byte	.LFB64
 13146 014c 30000000 		.4byte	.LFE64
 13147 0150 00000000 		.4byte	.LFB65
 13148 0154 78000000 		.4byte	.LFE65
 13149 0158 00000000 		.4byte	.LFB66
 13150 015c 68000000 		.4byte	.LFE66
 13151 0160 00000000 		.4byte	.LFB67
 13152 0164 24000000 		.4byte	.LFE67
 13153 0168 00000000 		.4byte	.LFB68
 13154 016c 10000000 		.4byte	.LFE68
 13155 0170 00000000 		.4byte	.LFB69
 13156 0174 64000000 		.4byte	.LFE69
 13157 0178 00000000 		.4byte	.LFB70
 13158 017c 0C000000 		.4byte	.LFE70
 13159 0180 00000000 		.4byte	.LFB71
 13160 0184 0C000000 		.4byte	.LFE71
 13161 0188 00000000 		.4byte	.LFB72
 13162 018c 08000000 		.4byte	.LFE72
 13163 0190 00000000 		.4byte	.LFB74
 13164 0194 1C000000 		.4byte	.LFE74
 13165 0198 00000000 		.4byte	.LFB75
 13166 019c 20000000 		.4byte	.LFE75
 13167 01a0 00000000 		.4byte	.LFB78
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 334


 13168 01a4 78000000 		.4byte	.LFE78
 13169 01a8 00000000 		.4byte	.LFB79
 13170 01ac 6A000000 		.4byte	.LFE79
 13171 01b0 00000000 		.4byte	.LFB59
 13172 01b4 B0000000 		.4byte	.LFE59
 13173 01b8 00000000 		.4byte	.LFB81
 13174 01bc 18000000 		.4byte	.LFE81
 13175 01c0 00000000 		.4byte	.LFB84
 13176 01c4 0C000000 		.4byte	.LFE84
 13177 01c8 00000000 		.4byte	.LFB85
 13178 01cc 20000000 		.4byte	.LFE85
 13179 01d0 00000000 		.4byte	.LFB87
 13180 01d4 D0000000 		.4byte	.LFE87
 13181 01d8 00000000 		.4byte	.LFB88
 13182 01dc 18000000 		.4byte	.LFE88
 13183 01e0 00000000 		.4byte	.LFB89
 13184 01e4 6C000000 		.4byte	.LFE89
 13185 01e8 00000000 		.4byte	.LFB90
 13186 01ec 80000000 		.4byte	.LFE90
 13187 01f0 00000000 		.4byte	.LFB91
 13188 01f4 C0000000 		.4byte	.LFE91
 13189 01f8 00000000 		.4byte	.LFB92
 13190 01fc EC000000 		.4byte	.LFE92
 13191 0200 00000000 		.4byte	.LFB93
 13192 0204 9C000000 		.4byte	.LFE93
 13193 0208 00000000 		.4byte	.LFB94
 13194 020c 30000000 		.4byte	.LFE94
 13195 0210 00000000 		.4byte	0
 13196 0214 00000000 		.4byte	0
 13197              		.section	.debug_line,"",%progbits
 13198              	.Ldebug_line0:
 13199 0000 730D0000 		.section	.debug_str,"MS",%progbits,1
 13199      0200DE02 
 13199      00000201 
 13199      FB0E0D00 
 13199      01010101 
 13200              	.LASF255:
 13201 0000 764C6973 		.ascii	"vListInsert\000"
 13201      74496E73 
 13201      65727400 
 13202              	.LASF36:
 13203 000c 75784E75 		.ascii	"uxNumberOfItems\000"
 13203      6D626572 
 13203      4F664974 
 13203      656D7300 
 13204              	.LASF252:
 13205 001c 76506F72 		.ascii	"vPortExitCritical\000"
 13205      74457869 
 13205      74437269 
 13205      74696361 
 13205      6C00
 13206              	.LASF191:
 13207 002e 7072764C 		.ascii	"prvListTasksWithinSingleList\000"
 13207      69737454 
 13207      61736B73 
 13207      57697468 
 13207      696E5369 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 335


 13208              	.LASF15:
 13209 004b 63686172 		.ascii	"char\000"
 13209      00
 13210              	.LASF257:
 13211 0050 7374726C 		.ascii	"strlen\000"
 13211      656E00
 13212              	.LASF262:
 13213 0057 78506F72 		.ascii	"xPortStartScheduler\000"
 13213      74537461 
 13213      72745363 
 13213      68656475 
 13213      6C657200 
 13214              	.LASF78:
 13215 006b 75785072 		.ascii	"uxPriority\000"
 13215      696F7269 
 13215      747900
 13216              	.LASF158:
 13217 0076 7078436F 		.ascii	"pxConstList\000"
 13217      6E73744C 
 13217      69737400 
 13218              	.LASF120:
 13219 0082 70785374 		.ascii	"pxStateList\000"
 13219      6174654C 
 13219      69737400 
 13220              	.LASF44:
 13221 008e 65537573 		.ascii	"eSuspended\000"
 13221      70656E64 
 13221      656400
 13222              	.LASF253:
 13223 0099 76506F72 		.ascii	"vPortYield\000"
 13223      74596965 
 13223      6C6400
 13224              	.LASF74:
 13225 00a4 74736B54 		.ascii	"tskTaskControlBlock\000"
 13225      61736B43 
 13225      6F6E7472 
 13225      6F6C426C 
 13225      6F636B00 
 13226              	.LASF147:
 13227 00b8 75785065 		.ascii	"uxPendedCounts\000"
 13227      6E646564 
 13227      436F756E 
 13227      747300
 13228              	.LASF50:
 13229 00c7 65496E63 		.ascii	"eIncrement\000"
 13229      72656D65 
 13229      6E7400
 13230              	.LASF214:
 13231 00d2 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 13231      7473546F 
 13231      436C6561 
 13231      724F6E45 
 13231      78697400 
 13232              	.LASF96:
 13233 00e6 70727649 		.ascii	"prvInitialiseNewTask\000"
 13233      6E697469 
 13233      616C6973 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 336


 13233      654E6577 
 13233      5461736B 
 13234              	.LASF204:
 13235 00fb 78546173 		.ascii	"xTaskGetSchedulerState\000"
 13235      6B476574 
 13235      53636865 
 13235      64756C65 
 13235      72537461 
 13236              	.LASF223:
 13237 0112 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 13237      67686572 
 13237      5072696F 
 13237      72697479 
 13237      5461736B 
 13238              	.LASF48:
 13239 012c 654E6F41 		.ascii	"eNoAction\000"
 13239      6374696F 
 13239      6E00
 13240              	.LASF53:
 13241 0136 654E6F74 		.ascii	"eNotifyAction\000"
 13241      69667941 
 13241      6374696F 
 13241      6E00
 13242              	.LASF0:
 13243 0144 756E7369 		.ascii	"unsigned int\000"
 13243      676E6564 
 13243      20696E74 
 13243      00
 13244              	.LASF162:
 13245 0151 70784576 		.ascii	"pxEventList\000"
 13245      656E744C 
 13245      69737400 
 13246              	.LASF238:
 13247 015d 78536368 		.ascii	"xSchedulerRunning\000"
 13247      6564756C 
 13247      65725275 
 13247      6E6E696E 
 13247      6700
 13248              	.LASF37:
 13249 016f 7078496E 		.ascii	"pxIndex\000"
 13249      64657800 
 13250              	.LASF22:
 13251 0177 53746163 		.ascii	"StackType_t\000"
 13251      6B547970 
 13251      655F7400 
 13252              	.LASF54:
 13253 0183 7854494D 		.ascii	"xTIME_OUT\000"
 13253      455F4F55 
 13253      5400
 13254              	.LASF233:
 13255 018d 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 13255      6C657465 
 13255      64546173 
 13255      6B735761 
 13255      6974696E 
 13256              	.LASF32:
 13257 01aa 784C4953 		.ascii	"xLIST_ITEM\000"
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 337


 13257      545F4954 
 13257      454D00
 13258              	.LASF226:
 13259 01b5 70785265 		.ascii	"pxReadyTasksLists\000"
 13259      61647954 
 13259      61736B73 
 13259      4C697374 
 13259      7300
 13260              	.LASF199:
 13261 01c7 70756C54 		.ascii	"pulTotalRunTime\000"
 13261      6F74616C 
 13261      52756E54 
 13261      696D6500 
 13262              	.LASF264:
 13263 01d7 76417070 		.ascii	"vApplicationStackOverflowHook\000"
 13263      6C696361 
 13263      74696F6E 
 13263      53746163 
 13263      6B4F7665 
 13264              	.LASF35:
 13265 01f5 784C4953 		.ascii	"xLIST\000"
 13265      5400
 13266              	.LASF221:
 13267 01fb 75634F72 		.ascii	"ucOriginalNotifyState\000"
 13267      6967696E 
 13267      616C4E6F 
 13267      74696679 
 13267      53746174 
 13268              	.LASF134:
 13269 0211 75785361 		.ascii	"uxSavedInterruptStatus\000"
 13269      76656449 
 13269      6E746572 
 13269      72757074 
 13269      53746174 
 13270              	.LASF142:
 13271 0228 78546173 		.ascii	"xTaskIncrementTick\000"
 13271      6B496E63 
 13271      72656D65 
 13271      6E745469 
 13271      636B00
 13272              	.LASF68:
 13273 023b 75784375 		.ascii	"uxCurrentPriority\000"
 13273      7272656E 
 13273      74507269 
 13273      6F726974 
 13273      7900
 13274              	.LASF206:
 13275 024d 70635772 		.ascii	"pcWriteBuffer\000"
 13275      69746542 
 13275      75666665 
 13275      7200
 13276              	.LASF227:
 13277 025b 7844656C 		.ascii	"xDelayedTaskList1\000"
 13277      61796564 
 13277      5461736B 
 13277      4C697374 
 13277      3100
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 338


 13278              	.LASF228:
 13279 026d 7844656C 		.ascii	"xDelayedTaskList2\000"
 13279      61796564 
 13279      5461736B 
 13279      4C697374 
 13279      3200
 13280              	.LASF60:
 13281 027f 756C4C65 		.ascii	"ulLengthInBytes\000"
 13281      6E677468 
 13281      496E4279 
 13281      74657300 
 13282              	.LASF55:
 13283 028f 784F7665 		.ascii	"xOverflowCount\000"
 13283      72666C6F 
 13283      77436F75 
 13283      6E7400
 13284              	.LASF250:
 13285 029e 76506F72 		.ascii	"vPortEnterCritical\000"
 13285      74456E74 
 13285      65724372 
 13285      69746963 
 13285      616C00
 13286              	.LASF66:
 13287 02b1 78546173 		.ascii	"xTaskNumber\000"
 13287      6B4E756D 
 13287      62657200 
 13288              	.LASF80:
 13289 02bd 75785443 		.ascii	"uxTCBNumber\000"
 13289      424E756D 
 13289      62657200 
 13290              	.LASF61:
 13291 02c9 756C5061 		.ascii	"ulParameters\000"
 13291      72616D65 
 13291      74657273 
 13291      00
 13292              	.LASF119:
 13293 02d6 65526574 		.ascii	"eReturn\000"
 13293      75726E00 
 13294              	.LASF187:
 13295 02de 76546173 		.ascii	"vTaskGetInfo\000"
 13295      6B476574 
 13295      496E666F 
 13295      00
 13296              	.LASF122:
 13297 02eb 75785265 		.ascii	"uxReturn\000"
 13297      7475726E 
 13297      00
 13298              	.LASF269:
 13299 02f4 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 13299      736B4765 
 13299      744E756D 
 13299      6265724F 
 13299      66546173 
 13300              	.LASF261:
 13301 030b 7854696D 		.ascii	"xTimerCreateTimerTask\000"
 13301      65724372 
 13301      65617465 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 339


 13301      54696D65 
 13301      72546173 
 13302              	.LASF45:
 13303 0321 6544656C 		.ascii	"eDeleted\000"
 13303      65746564 
 13303      00
 13304              	.LASF85:
 13305 032a 74736B54 		.ascii	"tskTCB\000"
 13305      434200
 13306              	.LASF222:
 13307 0331 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 13307      6B47656E 
 13307      65726963 
 13307      4E6F7469 
 13307      66794672 
 13308              	.LASF18:
 13309 034b 75696E74 		.ascii	"uint32_t\000"
 13309      33325F74 
 13309      00
 13310              	.LASF256:
 13311 0354 73747263 		.ascii	"strcpy\000"
 13311      707900
 13312              	.LASF84:
 13313 035b 75634E6F 		.ascii	"ucNotifyState\000"
 13313      74696679 
 13313      53746174 
 13313      6500
 13314              	.LASF254:
 13315 0369 75784C69 		.ascii	"uxListRemove\000"
 13315      73745265 
 13315      6D6F7665 
 13315      00
 13316              	.LASF130:
 13317 0376 78596965 		.ascii	"xYieldRequired\000"
 13317      6C645265 
 13317      71756972 
 13317      656400
 13318              	.LASF121:
 13319 0385 75785461 		.ascii	"uxTaskPriorityGet\000"
 13319      736B5072 
 13319      696F7269 
 13319      74794765 
 13319      7400
 13320              	.LASF216:
 13321 0397 78546173 		.ascii	"xTaskGenericNotify\000"
 13321      6B47656E 
 13321      65726963 
 13321      4E6F7469 
 13321      667900
 13322              	.LASF19:
 13323 03aa 666C6F61 		.ascii	"float\000"
 13323      7400
 13324              	.LASF167:
 13325 03b0 7078556E 		.ascii	"pxUnblockedTCB\000"
 13325      626C6F63 
 13325      6B656454 
 13325      434200
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 340


 13326              	.LASF266:
 13327 03bf 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 13327      43313120 
 13327      352E342E 
 13327      31203230 
 13327      31363036 
 13328 03f2 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0plus -mthumb -"
 13328      20726576 
 13328      6973696F 
 13328      6E203233 
 13328      37373135 
 13329 0425 67202D4F 		.ascii	"g -Og -ffunction-sections -ffat-lto-objects\000"
 13329      67202D66 
 13329      66756E63 
 13329      74696F6E 
 13329      2D736563 
 13330              	.LASF115:
 13331 0451 75735374 		.ascii	"usStackDepth\000"
 13331      61636B44 
 13331      65707468 
 13331      00
 13332              	.LASF210:
 13333 045e 78436C65 		.ascii	"xClearCountOnExit\000"
 13333      6172436F 
 13333      756E744F 
 13333      6E457869 
 13333      7400
 13334              	.LASF175:
 13335 0470 78456C61 		.ascii	"xElapsedTime\000"
 13335      70736564 
 13335      54696D65 
 13335      00
 13336              	.LASF234:
 13337 047d 78537573 		.ascii	"xSuspendedTaskList\000"
 13337      70656E64 
 13337      65645461 
 13337      736B4C69 
 13337      737400
 13338              	.LASF13:
 13339 0490 6C6F6E67 		.ascii	"long long unsigned int\000"
 13339      206C6F6E 
 13339      6720756E 
 13339      7369676E 
 13339      65642069 
 13340              	.LASF139:
 13341 04a7 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 13341      6B476574 
 13341      5469636B 
 13341      436F756E 
 13341      7446726F 
 13342              	.LASF124:
 13343 04c0 75785361 		.ascii	"uxSavedInterruptState\000"
 13343      76656449 
 13343      6E746572 
 13343      72757074 
 13343      53746174 
 13344              	.LASF213:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 341


 13345 04d6 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 13345      7473546F 
 13345      436C6561 
 13345      724F6E45 
 13345      6E747279 
 13346              	.LASF231:
 13347 04eb 7850656E 		.ascii	"xPendingReadyList\000"
 13347      64696E67 
 13347      52656164 
 13347      794C6973 
 13347      7400
 13348              	.LASF28:
 13349 04fd 70785072 		.ascii	"pxPrevious\000"
 13349      6576696F 
 13349      757300
 13350              	.LASF170:
 13351 0508 76546173 		.ascii	"vTaskSetTimeOutState\000"
 13351      6B536574 
 13351      54696D65 
 13351      4F757453 
 13351      74617465 
 13352              	.LASF8:
 13353 051d 5F5F7569 		.ascii	"__uint16_t\000"
 13353      6E743136 
 13353      5F7400
 13354              	.LASF185:
 13355 0528 70765461 		.ascii	"pvTaskGetThreadLocalStoragePointer\000"
 13355      736B4765 
 13355      74546872 
 13355      6561644C 
 13355      6F63616C 
 13356              	.LASF186:
 13357 054b 70765265 		.ascii	"pvReturn\000"
 13357      7475726E 
 13357      00
 13358              	.LASF144:
 13359 0554 70785465 		.ascii	"pxTemp\000"
 13359      6D7000
 13360              	.LASF258:
 13361 055b 7076506F 		.ascii	"pvPortMalloc\000"
 13361      72744D61 
 13361      6C6C6F63 
 13361      00
 13362              	.LASF176:
 13363 0568 76546173 		.ascii	"vTaskSuspendAll\000"
 13363      6B537573 
 13363      70656E64 
 13363      416C6C00 
 13364              	.LASF207:
 13365 0578 63537461 		.ascii	"cStatus\000"
 13365      74757300 
 13366              	.LASF201:
 13367 0580 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 13367      736B4765 
 13367      74537461 
 13367      636B4869 
 13367      67685761 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 342


 13368              	.LASF82:
 13369 059c 70765468 		.ascii	"pvThreadLocalStoragePointers\000"
 13369      72656164 
 13369      4C6F6361 
 13369      6C53746F 
 13369      72616765 
 13370              	.LASF268:
 13371 05b9 433A5C55 		.ascii	"C:\\Users\\Phuong\\Documents\\PSoC Creator\\Dec0820"
 13371      73657273 
 13371      5C506875 
 13371      6F6E675C 
 13371      446F6375 
 13372 05e7 31385C69 		.ascii	"18\\iot-sdk-iot-dev\\PSOC6_FreeRTOS+LwIP+MbedTLS_Az"
 13372      6F742D73 
 13372      646B2D69 
 13372      6F742D64 
 13372      65765C50 
 13373 0618 7572652D 		.ascii	"ure-IOT-Hub-Demo\\PSOC6_FreeRTOS+LwIP+MbedTLS_Azure"
 13373      494F542D 
 13373      4875622D 
 13373      44656D6F 
 13373      5C50534F 
 13374 064a 2D494F54 		.ascii	"-IOT-Hub-Demo.cydsn\000"
 13374      2D487562 
 13374      2D44656D 
 13374      6F2E6379 
 13374      64736E00 
 13375              	.LASF220:
 13376 065e 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 13376      72657669 
 13376      6F75734E 
 13376      6F746966 
 13376      69636174 
 13377              	.LASF189:
 13378 067b 78476574 		.ascii	"xGetFreeStackSpace\000"
 13378      46726565 
 13378      53746163 
 13378      6B537061 
 13378      636500
 13379              	.LASF4:
 13380 068e 73697A65 		.ascii	"size_t\000"
 13380      5F7400
 13381              	.LASF174:
 13382 0695 70785469 		.ascii	"pxTicksToWait\000"
 13382      636B7354 
 13382      6F576169 
 13382      7400
 13383              	.LASF33:
 13384 06a3 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 13384      495F4C49 
 13384      53545F49 
 13384      54454D00 
 13385              	.LASF165:
 13386 06b3 78576169 		.ascii	"xWaitIndefinitely\000"
 13386      74496E64 
 13386      6566696E 
 13386      6974656C 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 343


 13386      7900
 13387              	.LASF236:
 13388 06c5 78546963 		.ascii	"xTickCount\000"
 13388      6B436F75 
 13388      6E7400
 13389              	.LASF107:
 13390 06d0 70727649 		.ascii	"prvIdleTask\000"
 13390      646C6554 
 13390      61736B00 
 13391              	.LASF136:
 13392 06dc 76546173 		.ascii	"vTaskEndScheduler\000"
 13392      6B456E64 
 13392      53636865 
 13392      64756C65 
 13392      7200
 13393              	.LASF251:
 13394 06ee 764C6973 		.ascii	"vListInsertEnd\000"
 13394      74496E73 
 13394      65727445 
 13394      6E6400
 13395              	.LASF112:
 13396 06fd 78436F6E 		.ascii	"xConstTickCount\000"
 13396      73745469 
 13396      636B436F 
 13396      756E7400 
 13397              	.LASF182:
 13398 070d 78546173 		.ascii	"xTaskToSet\000"
 13398      6B546F53 
 13398      657400
 13399              	.LASF230:
 13400 0718 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 13400      6572666C 
 13400      6F774465 
 13400      6C617965 
 13400      64546173 
 13401              	.LASF21:
 13402 0732 5461736B 		.ascii	"TaskFunction_t\000"
 13402      46756E63 
 13402      74696F6E 
 13402      5F7400
 13403              	.LASF225:
 13404 0741 78546173 		.ascii	"xTaskNotifyStateClear\000"
 13404      6B4E6F74 
 13404      69667953 
 13404      74617465 
 13404      436C6561 
 13405              	.LASF152:
 13406 0757 76546173 		.ascii	"vTaskDelay\000"
 13406      6B44656C 
 13406      617900
 13407              	.LASF16:
 13408 0762 75696E74 		.ascii	"uint8_t\000"
 13408      385F7400 
 13409              	.LASF73:
 13410 076a 5461736B 		.ascii	"TaskStatus_t\000"
 13410      53746174 
 13410      75735F74 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 344


 13410      00
 13411              	.LASF83:
 13412 0777 756C4E6F 		.ascii	"ulNotifiedValue\000"
 13412      74696669 
 13412      65645661 
 13412      6C756500 
 13413              	.LASF168:
 13414 0787 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
 13414      6B52656D 
 13414      6F766546 
 13414      726F6D55 
 13414      6E6F7264 
 13415              	.LASF232:
 13416 07a9 78546173 		.ascii	"xTasksWaitingTermination\000"
 13416      6B735761 
 13416      6974696E 
 13416      67546572 
 13416      6D696E61 
 13417              	.LASF166:
 13418 07c2 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 13418      6B52656D 
 13418      6F766546 
 13418      726F6D45 
 13418      76656E74 
 13419              	.LASF64:
 13420 07db 7848616E 		.ascii	"xHandle\000"
 13420      646C6500 
 13421              	.LASF31:
 13422 07e3 4C697374 		.ascii	"ListItem_t\000"
 13422      4974656D 
 13422      5F7400
 13423              	.LASF188:
 13424 07ee 70785461 		.ascii	"pxTaskStatus\000"
 13424      736B5374 
 13424      61747573 
 13424      00
 13425              	.LASF52:
 13426 07fb 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 13426      56616C75 
 13426      65576974 
 13426      686F7574 
 13426      4F766572 
 13427              	.LASF212:
 13428 0815 78546173 		.ascii	"xTaskNotifyWait\000"
 13428      6B4E6F74 
 13428      69667957 
 13428      61697400 
 13429              	.LASF24:
 13430 0825 55426173 		.ascii	"UBaseType_t\000"
 13430      65547970 
 13430      655F7400 
 13431              	.LASF99:
 13432 0831 756C5374 		.ascii	"ulStackDepth\000"
 13432      61636B44 
 13432      65707468 
 13432      00
 13433              	.LASF49:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 345


 13434 083e 65536574 		.ascii	"eSetBits\000"
 13434      42697473 
 13434      00
 13435              	.LASF38:
 13436 0847 784C6973 		.ascii	"xListEnd\000"
 13436      74456E64 
 13436      00
 13437              	.LASF209:
 13438 0850 756C5461 		.ascii	"ulTaskNotifyTake\000"
 13438      736B4E6F 
 13438      74696679 
 13438      54616B65 
 13438      00
 13439              	.LASF164:
 13440 0861 76546173 		.ascii	"vTaskPlaceOnEventListRestricted\000"
 13440      6B506C61 
 13440      63654F6E 
 13440      4576656E 
 13440      744C6973 
 13441              	.LASF34:
 13442 0881 4D696E69 		.ascii	"MiniListItem_t\000"
 13442      4C697374 
 13442      4974656D 
 13442      5F7400
 13443              	.LASF117:
 13444 0890 78546173 		.ascii	"xTaskCreate\000"
 13444      6B437265 
 13444      61746500 
 13445              	.LASF105:
 13446 089c 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 13446      64644E65 
 13446      77546173 
 13446      6B546F52 
 13446      65616479 
 13447              	.LASF94:
 13448 08b5 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 13448      65736574 
 13448      4E657874 
 13448      5461736B 
 13448      556E626C 
 13449              	.LASF42:
 13450 08d1 65526561 		.ascii	"eReady\000"
 13450      647900
 13451              	.LASF118:
 13452 08d8 65546173 		.ascii	"eTaskGetState\000"
 13452      6B476574 
 13452      53746174 
 13452      6500
 13453              	.LASF102:
 13454 08e6 70784E65 		.ascii	"pxNewTCB\000"
 13454      77544342 
 13454      00
 13455              	.LASF200:
 13456 08ef 75785175 		.ascii	"uxQueue\000"
 13456      65756500 
 13457              	.LASF97:
 13458 08f7 70785461 		.ascii	"pxTaskCode\000"
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 346


 13458      736B436F 
 13458      646500
 13459              	.LASF62:
 13460 0902 4D656D6F 		.ascii	"MemoryRegion_t\000"
 13460      72795265 
 13460      67696F6E 
 13460      5F7400
 13461              	.LASF242:
 13462 0911 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 13462      74546173 
 13462      6B556E62 
 13462      6C6F636B 
 13462      54696D65 
 13463              	.LASF248:
 13464 0926 7078506F 		.ascii	"pxPortInitialiseStack\000"
 13464      7274496E 
 13464      69746961 
 13464      6C697365 
 13464      53746163 
 13465              	.LASF1:
 13466 093c 6C6F6E67 		.ascii	"long long int\000"
 13466      206C6F6E 
 13466      6720696E 
 13466      7400
 13467              	.LASF69:
 13468 094a 75784261 		.ascii	"uxBasePriority\000"
 13468      73655072 
 13468      696F7269 
 13468      747900
 13469              	.LASF211:
 13470 0959 756C5265 		.ascii	"ulReturn\000"
 13470      7475726E 
 13470      00
 13471              	.LASF197:
 13472 0962 75785461 		.ascii	"uxTaskGetSystemState\000"
 13472      736B4765 
 13472      74537973 
 13472      74656D53 
 13472      74617465 
 13473              	.LASF114:
 13474 0977 70634275 		.ascii	"pcBuffer\000"
 13474      66666572 
 13474      00
 13475              	.LASF143:
 13476 0980 78537769 		.ascii	"xSwitchRequired\000"
 13476      74636852 
 13476      65717569 
 13476      72656400 
 13477              	.LASF23:
 13478 0990 42617365 		.ascii	"BaseType_t\000"
 13478      54797065 
 13478      5F7400
 13479              	.LASF156:
 13480 099b 756C4368 		.ascii	"ulCheckValue\000"
 13480      65636B56 
 13480      616C7565 
 13480      00
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 347


 13481              	.LASF56:
 13482 09a8 7854696D 		.ascii	"xTimeOnEntering\000"
 13482      654F6E45 
 13482      6E746572 
 13482      696E6700 
 13483              	.LASF127:
 13484 09b8 75784E65 		.ascii	"uxNewPriority\000"
 13484      77507269 
 13484      6F726974 
 13484      7900
 13485              	.LASF98:
 13486 09c6 70634E61 		.ascii	"pcName\000"
 13486      6D6500
 13487              	.LASF27:
 13488 09cd 70784E65 		.ascii	"pxNext\000"
 13488      787400
 13489              	.LASF246:
 13490 09d4 6D656D73 		.ascii	"memset\000"
 13490      657400
 13491              	.LASF171:
 13492 09db 70785469 		.ascii	"pxTimeOut\000"
 13492      6D654F75 
 13492      7400
 13493              	.LASF123:
 13494 09e5 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 13494      736B5072 
 13494      696F7269 
 13494      74794765 
 13494      7446726F 
 13495              	.LASF93:
 13496 09fe 756C436F 		.ascii	"ulCount\000"
 13496      756E7400 
 13497              	.LASF267:
 13498 0a06 536F7572 		.ascii	"Source\\FreeRTOS\\10.0.1\\Source\\tasks.c\000"
 13498      63655C46 
 13498      72656552 
 13498      544F535C 
 13498      31302E30 
 13499              	.LASF92:
 13500 0a2c 70756353 		.ascii	"pucStackByte\000"
 13500      7461636B 
 13500      42797465 
 13500      00
 13501              	.LASF57:
 13502 0a39 54696D65 		.ascii	"TimeOut_t\000"
 13502      4F75745F 
 13502      7400
 13503              	.LASF172:
 13504 0a43 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 13504      6B496E74 
 13504      65726E61 
 13504      6C536574 
 13504      54696D65 
 13505              	.LASF81:
 13506 0a60 75785461 		.ascii	"uxTaskNumber\000"
 13506      736B4E75 
 13506      6D626572 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 348


 13506      00
 13507              	.LASF40:
 13508 0a6d 5461736B 		.ascii	"TaskHandle_t\000"
 13508      48616E64 
 13508      6C655F74 
 13508      00
 13509              	.LASF219:
 13510 0a7a 65416374 		.ascii	"eAction\000"
 13510      696F6E00 
 13511              	.LASF196:
 13512 0a82 75785461 		.ascii	"uxTask\000"
 13512      736B00
 13513              	.LASF208:
 13514 0a89 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 13514      736B5265 
 13514      73657445 
 13514      76656E74 
 13514      4974656D 
 13515              	.LASF126:
 13516 0aa3 76546173 		.ascii	"vTaskPrioritySet\000"
 13516      6B507269 
 13516      6F726974 
 13516      79536574 
 13516      00
 13517              	.LASF259:
 13518 0ab4 756C5365 		.ascii	"ulSetInterruptMaskFromISR\000"
 13518      74496E74 
 13518      65727275 
 13518      70744D61 
 13518      736B4672 
 13519              	.LASF58:
 13520 0ace 784D454D 		.ascii	"xMEMORY_REGION\000"
 13520      4F52595F 
 13520      52454749 
 13520      4F4E00
 13521              	.LASF47:
 13522 0add 65546173 		.ascii	"eTaskState\000"
 13522      6B537461 
 13522      746500
 13523              	.LASF39:
 13524 0ae8 4C697374 		.ascii	"List_t\000"
 13524      5F7400
 13525              	.LASF141:
 13526 0aef 78546173 		.ascii	"xTaskToQuery\000"
 13526      6B546F51 
 13526      75657279 
 13526      00
 13527              	.LASF25:
 13528 0afc 5469636B 		.ascii	"TickType_t\000"
 13528      54797065 
 13528      5F7400
 13529              	.LASF217:
 13530 0b07 78546173 		.ascii	"xTaskToNotify\000"
 13530      6B546F4E 
 13530      6F746966 
 13530      7900
 13531              	.LASF91:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 349


 13532 0b15 78546173 		.ascii	"xTask\000"
 13532      6B00
 13533              	.LASF151:
 13534 0b1b 7853686F 		.ascii	"xShouldDelay\000"
 13534      756C6444 
 13534      656C6179 
 13534      00
 13535              	.LASF2:
 13536 0b28 6C6F6E67 		.ascii	"long double\000"
 13536      20646F75 
 13536      626C6500 
 13537              	.LASF265:
 13538 0b34 73707269 		.ascii	"sprintf\000"
 13538      6E746600 
 13539              	.LASF17:
 13540 0b3c 75696E74 		.ascii	"uint16_t\000"
 13540      31365F74 
 13540      00
 13541              	.LASF125:
 13542 0b45 76546173 		.ascii	"vTaskDelete\000"
 13542      6B44656C 
 13542      65746500 
 13543              	.LASF154:
 13544 0b51 76546173 		.ascii	"vTaskSwitchContext\000"
 13544      6B537769 
 13544      74636843 
 13544      6F6E7465 
 13544      787400
 13545              	.LASF241:
 13546 0b64 784E756D 		.ascii	"xNumOfOverflows\000"
 13546      4F664F76 
 13546      6572666C 
 13546      6F777300 
 13547              	.LASF30:
 13548 0b74 7076436F 		.ascii	"pvContainer\000"
 13548      6E746169 
 13548      6E657200 
 13549              	.LASF243:
 13550 0b80 7849646C 		.ascii	"xIdleTaskHandle\000"
 13550      65546173 
 13550      6B48616E 
 13550      646C6500 
 13551              	.LASF6:
 13552 0b90 756E7369 		.ascii	"unsigned char\000"
 13552      676E6564 
 13552      20636861 
 13552      7200
 13553              	.LASF161:
 13554 0b9e 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 13554      6B506C61 
 13554      63654F6E 
 13554      4576656E 
 13554      744C6973 
 13555              	.LASF71:
 13556 0bb4 70785374 		.ascii	"pxStackBase\000"
 13556      61636B42 
 13556      61736500 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 350


 13557              	.LASF7:
 13558 0bc0 73686F72 		.ascii	"short int\000"
 13558      7420696E 
 13558      7400
 13559              	.LASF67:
 13560 0bca 65437572 		.ascii	"eCurrentState\000"
 13560      72656E74 
 13560      53746174 
 13560      6500
 13561              	.LASF247:
 13562 0bd8 764C6973 		.ascii	"vListInitialiseItem\000"
 13562      74496E69 
 13562      7469616C 
 13562      69736549 
 13562      74656D00 
 13563              	.LASF100:
 13564 0bec 70765061 		.ascii	"pvParameters\000"
 13564      72616D65 
 13564      74657273 
 13564      00
 13565              	.LASF26:
 13566 0bf9 78497465 		.ascii	"xItemValue\000"
 13566      6D56616C 
 13566      756500
 13567              	.LASF10:
 13568 0c04 6C6F6E67 		.ascii	"long int\000"
 13568      20696E74 
 13568      00
 13569              	.LASF63:
 13570 0c0d 78544153 		.ascii	"xTASK_STATUS\000"
 13570      4B5F5354 
 13570      41545553 
 13570      00
 13571              	.LASF145:
 13572 0c1a 78546173 		.ascii	"xTaskResumeAll\000"
 13572      6B526573 
 13572      756D6541 
 13572      6C6C00
 13573              	.LASF224:
 13574 0c29 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 13574      6B4E6F74 
 13574      69667947 
 13574      69766546 
 13574      726F6D49 
 13575              	.LASF229:
 13576 0c40 70784465 		.ascii	"pxDelayedTaskList\000"
 13576      6C617965 
 13576      64546173 
 13576      6B4C6973 
 13576      7400
 13577              	.LASF137:
 13578 0c52 78546173 		.ascii	"xTaskGetTickCount\000"
 13578      6B476574 
 13578      5469636B 
 13578      436F756E 
 13578      7400
 13579              	.LASF89:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 351


 13580 0c64 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 13580      61736B49 
 13580      73546173 
 13580      6B537573 
 13580      70656E64 
 13581              	.LASF179:
 13582 0c7b 76546173 		.ascii	"vTaskSetTaskNumber\000"
 13582      6B536574 
 13582      5461736B 
 13582      4E756D62 
 13582      657200
 13583              	.LASF79:
 13584 0c8e 70785374 		.ascii	"pxStack\000"
 13584      61636B00 
 13585              	.LASF116:
 13586 0c96 78546173 		.ascii	"xTaskToDelete\000"
 13586      6B546F44 
 13586      656C6574 
 13586      6500
 13587              	.LASF218:
 13588 0ca4 756C5661 		.ascii	"ulValue\000"
 13588      6C756500 
 13589              	.LASF160:
 13590 0cac 78546173 		.ascii	"xTaskToSuspend\000"
 13590      6B546F53 
 13590      75737065 
 13590      6E6400
 13591              	.LASF173:
 13592 0cbb 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 13592      6B436865 
 13592      636B466F 
 13592      7254696D 
 13592      654F7574 
 13593              	.LASF263:
 13594 0cd0 76506F72 		.ascii	"vPortEndScheduler\000"
 13594      74456E64 
 13594      53636865 
 13594      64756C65 
 13594      7200
 13595              	.LASF245:
 13596 0ce2 76506F72 		.ascii	"vPortFree\000"
 13596      74467265 
 13596      6500
 13597              	.LASF237:
 13598 0cec 7578546F 		.ascii	"uxTopReadyPriority\000"
 13598      70526561 
 13598      64795072 
 13598      696F7269 
 13598      747900
 13599              	.LASF149:
 13600 0cff 70785072 		.ascii	"pxPreviousWakeTime\000"
 13600      6576696F 
 13600      75735761 
 13600      6B655469 
 13600      6D6500
 13601              	.LASF51:
 13602 0d12 65536574 		.ascii	"eSetValueWithOverwrite\000"
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 352


 13602      56616C75 
 13602      65576974 
 13602      684F7665 
 13602      72777269 
 13603              	.LASF5:
 13604 0d29 5F5F7569 		.ascii	"__uint8_t\000"
 13604      6E74385F 
 13604      7400
 13605              	.LASF183:
 13606 0d33 78496E64 		.ascii	"xIndex\000"
 13606      657800
 13607              	.LASF77:
 13608 0d3a 78457665 		.ascii	"xEventListItem\000"
 13608      6E744C69 
 13608      73744974 
 13608      656D00
 13609              	.LASF133:
 13610 0d49 78546173 		.ascii	"xTaskResumeFromISR\000"
 13610      6B526573 
 13610      756D6546 
 13610      726F6D49 
 13610      535200
 13611              	.LASF215:
 13612 0d5c 70756C4E 		.ascii	"pulNotificationValue\000"
 13612      6F746966 
 13612      69636174 
 13612      696F6E56 
 13612      616C7565 
 13613              	.LASF87:
 13614 0d71 78526574 		.ascii	"xReturn\000"
 13614      75726E00 
 13615              	.LASF14:
 13616 0d79 73697A65 		.ascii	"sizetype\000"
 13616      74797065 
 13616      00
 13617              	.LASF177:
 13618 0d82 76546173 		.ascii	"vTaskMissedYield\000"
 13618      6B4D6973 
 13618      73656459 
 13618      69656C64 
 13618      00
 13619              	.LASF239:
 13620 0d93 75785065 		.ascii	"uxPendedTicks\000"
 13620      6E646564 
 13620      5469636B 
 13620      7300
 13621              	.LASF12:
 13622 0da1 6C6F6E67 		.ascii	"long unsigned int\000"
 13622      20756E73 
 13622      69676E65 
 13622      6420696E 
 13622      7400
 13623              	.LASF190:
 13624 0db3 65537461 		.ascii	"eState\000"
 13624      746500
 13625              	.LASF192:
 13626 0dba 70785461 		.ascii	"pxTaskStatusArray\000"
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 353


 13626      736B5374 
 13626      61747573 
 13626      41727261 
 13626      7900
 13627              	.LASF202:
 13628 0dcc 70756345 		.ascii	"pucEndOfStack\000"
 13628      6E644F66 
 13628      53746163 
 13628      6B00
 13629              	.LASF140:
 13630 0dda 70635461 		.ascii	"pcTaskGetName\000"
 13630      736B4765 
 13630      744E616D 
 13630      6500
 13631              	.LASF138:
 13632 0de8 78546963 		.ascii	"xTicks\000"
 13632      6B7300
 13633              	.LASF135:
 13634 0def 76546173 		.ascii	"vTaskStartScheduler\000"
 13634      6B537461 
 13634      72745363 
 13634      68656475 
 13634      6C657200 
 13635              	.LASF198:
 13636 0e03 75784172 		.ascii	"uxArraySize\000"
 13636      72617953 
 13636      697A6500 
 13637              	.LASF110:
 13638 0e0f 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 13638      426C6F63 
 13638      6B496E64 
 13638      6566696E 
 13638      6974656C 
 13639              	.LASF41:
 13640 0e25 6552756E 		.ascii	"eRunning\000"
 13640      6E696E67 
 13640      00
 13641              	.LASF155:
 13642 0e2e 70756C53 		.ascii	"pulStack\000"
 13642      7461636B 
 13642      00
 13643              	.LASF70:
 13644 0e37 756C5275 		.ascii	"ulRunTimeCounter\000"
 13644      6E54696D 
 13644      65436F75 
 13644      6E746572 
 13644      00
 13645              	.LASF59:
 13646 0e48 70764261 		.ascii	"pvBaseAddress\000"
 13646      73654164 
 13646      64726573 
 13646      7300
 13647              	.LASF153:
 13648 0e56 78546963 		.ascii	"xTicksToDelay\000"
 13648      6B73546F 
 13648      44656C61 
 13648      7900
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 354


 13649              	.LASF65:
 13650 0e64 70635461 		.ascii	"pcTaskName\000"
 13650      736B4E61 
 13650      6D6500
 13651              	.LASF163:
 13652 0e6f 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 13652      6B506C61 
 13652      63654F6E 
 13652      556E6F72 
 13652      64657265 
 13653              	.LASF11:
 13654 0e8e 5F5F7569 		.ascii	"__uint32_t\000"
 13654      6E743332 
 13654      5F7400
 13655              	.LASF249:
 13656 0e99 764C6973 		.ascii	"vListInitialise\000"
 13656      74496E69 
 13656      7469616C 
 13656      69736500 
 13657              	.LASF46:
 13658 0ea9 65496E76 		.ascii	"eInvalid\000"
 13658      616C6964 
 13658      00
 13659              	.LASF157:
 13660 0eb2 7578546F 		.ascii	"uxTopPriority\000"
 13660      70507269 
 13660      6F726974 
 13660      7900
 13661              	.LASF148:
 13662 0ec0 76546173 		.ascii	"vTaskDelayUntil\000"
 13662      6B44656C 
 13662      6179556E 
 13662      74696C00 
 13663              	.LASF108:
 13664 0ed0 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 13664      64644375 
 13664      7272656E 
 13664      74546173 
 13664      6B546F44 
 13665              	.LASF129:
 13666 0eef 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 13666      696F7269 
 13666      74795573 
 13666      65644F6E 
 13666      456E7472 
 13667              	.LASF86:
 13668 0f05 5443425F 		.ascii	"TCB_t\000"
 13668      7400
 13669              	.LASF109:
 13670 0f0b 78546963 		.ascii	"xTicksToWait\000"
 13670      6B73546F 
 13670      57616974 
 13670      00
 13671              	.LASF29:
 13672 0f18 70764F77 		.ascii	"pvOwner\000"
 13672      6E657200 
 13673              	.LASF95:
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 355


 13674 0f20 70727644 		.ascii	"prvDeleteTCB\000"
 13674      656C6574 
 13674      65544342 
 13674      00
 13675              	.LASF43:
 13676 0f2d 65426C6F 		.ascii	"eBlocked\000"
 13676      636B6564 
 13676      00
 13677              	.LASF159:
 13678 0f36 76546173 		.ascii	"vTaskSuspend\000"
 13678      6B537573 
 13678      70656E64 
 13678      00
 13679              	.LASF260:
 13680 0f43 76436C65 		.ascii	"vClearInterruptMaskFromISR\000"
 13680      6172496E 
 13680      74657272 
 13680      7570744D 
 13680      61736B46 
 13681              	.LASF146:
 13682 0f5e 78416C72 		.ascii	"xAlreadyYielded\000"
 13682      65616479 
 13682      5969656C 
 13682      64656400 
 13683              	.LASF203:
 13684 0f6e 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 13684      6B476574 
 13684      43757272 
 13684      656E7454 
 13684      61736B48 
 13685              	.LASF195:
 13686 0f88 70784669 		.ascii	"pxFirstTCB\000"
 13686      72737454 
 13686      434200
 13687              	.LASF90:
 13688 0f93 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 13688      61736B43 
 13688      6865636B 
 13688      46726565 
 13688      53746163 
 13689              	.LASF178:
 13690 0fae 75785461 		.ascii	"uxTaskGetTaskNumber\000"
 13690      736B4765 
 13690      74546173 
 13690      6B4E756D 
 13690      62657200 
 13691              	.LASF103:
 13692 0fc2 78526567 		.ascii	"xRegions\000"
 13692      696F6E73 
 13692      00
 13693              	.LASF270:
 13694 0fcb 70784375 		.ascii	"pxCurrentTCB\000"
 13694      7272656E 
 13694      74544342 
 13694      00
 13695              	.LASF72:
 13696 0fd8 75735374 		.ascii	"usStackHighWaterMark\000"
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 356


 13696      61636B48 
 13696      69676857 
 13696      61746572 
 13696      4D61726B 
 13697              	.LASF181:
 13698 0fed 76546173 		.ascii	"vTaskSetThreadLocalStoragePointer\000"
 13698      6B536574 
 13698      54687265 
 13698      61644C6F 
 13698      63616C53 
 13699              	.LASF235:
 13700 100f 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 13700      7272656E 
 13700      744E756D 
 13700      6265724F 
 13700      66546173 
 13701              	.LASF150:
 13702 1026 7854696D 		.ascii	"xTimeIncrement\000"
 13702      65496E63 
 13702      72656D65 
 13702      6E7400
 13703              	.LASF3:
 13704 1035 7369676E 		.ascii	"signed char\000"
 13704      65642063 
 13704      68617200 
 13705              	.LASF194:
 13706 1041 70784E65 		.ascii	"pxNextTCB\000"
 13706      78745443 
 13706      4200
 13707              	.LASF9:
 13708 104b 73686F72 		.ascii	"short unsigned int\000"
 13708      7420756E 
 13708      7369676E 
 13708      65642069 
 13708      6E7400
 13709              	.LASF111:
 13710 105e 7854696D 		.ascii	"xTimeToWake\000"
 13710      65546F57 
 13710      616B6500 
 13711              	.LASF76:
 13712 106a 78537461 		.ascii	"xStateListItem\000"
 13712      74654C69 
 13712      73744974 
 13712      656D00
 13713              	.LASF88:
 13714 1079 70785443 		.ascii	"pxTCB\000"
 13714      4200
 13715              	.LASF205:
 13716 107f 76546173 		.ascii	"vTaskList\000"
 13716      6B4C6973 
 13716      7400
 13717              	.LASF20:
 13718 1089 646F7562 		.ascii	"double\000"
 13718      6C6500
 13719              	.LASF244:
 13720 1090 75785363 		.ascii	"uxSchedulerSuspended\000"
 13720      68656475 
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 357


 13720      6C657253 
 13720      75737065 
 13720      6E646564 
 13721              	.LASF75:
 13722 10a5 7078546F 		.ascii	"pxTopOfStack\000"
 13722      704F6653 
 13722      7461636B 
 13722      00
 13723              	.LASF131:
 13724 10b2 76546173 		.ascii	"vTaskResume\000"
 13724      6B526573 
 13724      756D6500 
 13725              	.LASF104:
 13726 10be 70727649 		.ascii	"prvInitialiseTaskLists\000"
 13726      6E697469 
 13726      616C6973 
 13726      65546173 
 13726      6B4C6973 
 13727              	.LASF193:
 13728 10d5 70784C69 		.ascii	"pxList\000"
 13728      737400
 13729              	.LASF169:
 13730 10dc 70784576 		.ascii	"pxEventListItem\000"
 13730      656E744C 
 13730      69737449 
 13730      74656D00 
 13731              	.LASF184:
 13732 10ec 70765661 		.ascii	"pvValue\000"
 13732      6C756500 
 13733              	.LASF113:
 13734 10f4 70727657 		.ascii	"prvWriteNameToBuffer\000"
 13734      72697465 
 13734      4E616D65 
 13734      546F4275 
 13734      66666572 
 13735              	.LASF101:
 13736 1109 70784372 		.ascii	"pxCreatedTask\000"
 13736      65617465 
 13736      64546173 
 13736      6B00
 13737              	.LASF106:
 13738 1117 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 13738      6865636B 
 13738      5461736B 
 13738      73576169 
 13738      74696E67 
 13739              	.LASF180:
 13740 1137 75784861 		.ascii	"uxHandle\000"
 13740      6E646C65 
 13740      00
 13741              	.LASF132:
 13742 1140 78546173 		.ascii	"xTaskToResume\000"
 13742      6B546F52 
 13742      6573756D 
 13742      6500
 13743              	.LASF128:
 13744 114e 75784375 		.ascii	"uxCurrentBasePriority\000"
ARM GAS  C:\Users\Phuong\AppData\Local\Temp\ccsTM71B.s 			page 358


 13744      7272656E 
 13744      74426173 
 13744      65507269 
 13744      6F726974 
 13745              	.LASF240:
 13746 1164 78596965 		.ascii	"xYieldPending\000"
 13746      6C645065 
 13746      6E64696E 
 13746      6700
 13747              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
